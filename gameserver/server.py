#!/usr/bin/env python

# Copyright (c) 2015 Battlehouse Inc. All rights reserved.
# Use of this source code is governed by an MIT-style license that can be
# found in the LICENSE file.

# main game server

import sys, os, time, base64, hmac, hashlib, urllib, urlparse, random, string, glob, traceback, signal, re
import inspect
import socket
import functools
import math
import gzip # XXX replace with faster version?
import cStringIO
import copy
import getopt
import KISSmetrics
import xml.dom.minidom
from cgi import escape as cgi_escape

# on Linux, try to use Twisted's high-performance epoll reactor
if sys.platform == 'linux2':
    from twisted.internet import epollreactor
    epollreactor.install()

from twisted.python import log, failure
from twisted.internet import reactor, task, defer, protocol
import twisted.internet.utils
from twisted.web import server, resource, http
import twisted.web.error

# handle different Twisted versions that moved NoResource around
if hasattr(twisted.web.resource, 'NoResource'):
    TwistedNoResource = twisted.web.resource.NoResource
else:
    TwistedNoResource = twisted.web.error.NoResource

from multiprocessing import cpu_count
import websockets
import TwistedLatency
import AsyncHTTP
import Predicates
import Consequents
import Business
import ModChain
from Equipment import Equipment
import LootTable
import MachineStats
import SpinLog
import Daemonize
import AtomicFileWrite
import SpinDB
import SocialIDCache
import SpinChatProtocol
import SpinChatClient
import SpinSSL
import SpinFacebook
import SpinKongregate
import SpinXsolla
import SpinGoogleAuth
import SpinHTTP
import SpinConfig
import SpinUserDB
import SpinJSON
import SpinLZJB
import SpinSignature
import SpinNoSQLId
import SpinNoSQL
import SpinNoSQLLog
import SpinSQLBattles
import Scores2
import CustomerSupport
import ActivityClassifier
import IdleCheck
import ChatChannels
import ChatFilter
import ResLoot
import ResPrice
import AutoResolve
from Region import Region
import ioslave
import collections
import bisect
import subprocess
import itertools

# SP3RDPARTY : lz4 Python library (modified) : BSD License
try: import lz4; has_lz4 = True
except: has_lz4 = False

# apply compression and JSON-safe wrapping to a text string for transmission to the client
def compress_and_wrap_string(s):
    if has_lz4:
        codec = 'lz4'
        z_result = base64.b64encode(bytes(lz4.compress(s)))
    else:
        codec = 'lzjb'
        z_result = base64.b64encode(bytes(SpinLZJB.compress(SpinLZJB.string_to_bytes(s))))

    return codec, z_result

#
# UTILITIES
#

def soft_assert(x):
    if not x:
        gamesite.exception_log.event(server_time, 'soft assert fail: '+string.join(traceback.format_stack(), ''))

def make_deferred(latency_tag): return TwistedLatency.InstrumentedDeferred(latency_tag)
def deferred_is_finished(d):
    return d.called and hasattr(d, 'result') and not isinstance(d.result, defer.Deferred)

# increment value of d[key], assuming that the current amount is zero
# if d[key] doesn't exist
def dict_increment(d, key, amount):
    if amount == 0: return False
    d[key] = d.setdefault(key, 0) + amount
    return True

def dict_setmax(d, key, amount):
    old = d.get(key, 0)
    if amount <= old:
        return False
    d[key] = amount
    return True

def dict_setvalue(d, key, amount):
    old = d.get(key, 0)
    if amount == old:
        return False
    d[key] = amount
    return True

def vec_add(a, b): return [a[0]+b[0], a[1]+b[1]]
def vec_sub(a, b): return [a[0]-b[0], a[1]-b[1]]
def vec_scale(factor, a): return [factor*a[0], factor*a[1]]

# see http://3dmdesign.com/development/hexmap-coordinates-the-easy-way
# but note, the distance code there doesn't work for our coordinates

def hex_slanted(a):
    # transform to "slanted" coordinate system for easier distance computation
    new_x = a[0] - int(a[1]/2)
    return (new_x, a[1])

def hex_distance(a, b):
    a2 = hex_slanted(a)
    b2 = hex_slanted(b)
    dx = b2[0]-a2[0]
    dy = b2[1]-a2[1]
    dd = dx+dy
    return max(abs(dx), abs(dy), abs(dd))

# Get the map cells occupied by a building or inert at position "xy" with size "gridsize"
# returns [[x_lo,x_hi], [y_lo,y_hi]]  (where lo to hi-1 are blocked, hi itself is not blocked)
# Must match get_grid_bounds() in client JavaScript!
def get_grid_bounds(xy, gridsize):
    # by convention, xy is at the "center" of the object
    # for objects with odd gridsizes, the bound is extended one unit east/south
    half = [gridsize[0]//2, gridsize[1]//2]
    extra = [1 if (gridsize[0]&1) else 0,
             1 if (gridsize[1]&1) else 0]
    return [[xy[0]-half[0], xy[0]+half[0]+extra[0]],
            [xy[1]-half[1], xy[1]+half[1]+extra[1]]]

def weighted_random_choice(groups, weights, r):
    """Given parallel arrays of groups and relative weights, and 0 <= r < 1, return a random
    element of groups chosen according to the weights."""
    breakpoints = []
    bp = 0.0
    for w in weights:
        bp += w
        breakpoints.append(bp)

    r = r * breakpoints[-1]
    return groups[min(bisect.bisect(breakpoints, r), len(breakpoints)-1)]


# valid characters in alliance string fields
name_chars_simple = map(chr, xrange(ord('a'),ord('z')+1)) + \
                    map(chr, xrange(ord('A'),ord('Z')+1))
tag_chars_ext = name_chars_simple + \
                map(chr, xrange(ord('0'),ord('9')+1))
name_chars_ext = tag_chars_ext + \
                 [' ', "'"]
descr_disallowed_chars = ['\n', '\t', '\r']
alias_disallowed_chars = ['\n', '\t', '\r', '\\', '/', ' ', '.', ':', ';', '+', '*', '(', ')', '<', '>', '[', ']', '{', '}', ',', '|', '"', "'", '_', '&', '^', '%', '$', '#', '@', '!', '~', '?', '`', '\0'] # keep in sync with main.js and errors.json ALIAS_BAD

def is_valid_alliance_descr(name):
    if len(name) > 256: return False
    for c in name:
        if c in descr_disallowed_chars: return False
    if chat_filter.is_bad(name): return False
    if chat_filter.is_ugly(name): return False
    return True

def is_valid_alliance_name(name):
    if not is_valid_alliance_descr(name): return False
    if len(name) < 3 or len(name) > 24: return False
    for i in xrange(len(name)):
        if (i < 3) and (name[i] not in name_chars_simple): return False
        elif name[i] not in name_chars_ext: return False
    if chat_filter.is_bad(name): return False
    for word in name.split(' '):
        if word.lower() in gamedata['client']['chat_filter']['bad_words']: return False
    return True
def is_valid_alliance_tag(tag):
    if len(tag) not in (0, 3): return False
    if len(tag) > 0:
        for i in xrange(len(tag)):
            if tag[i] not in tag_chars_ext:
                return False
        if chat_filter.is_bad(tag): return False
        if tag.lower() in gamedata['client']['chat_filter']['bad_words']: return False
    return True

def is_valid_alias(name):
    assert type(name) is unicode # make sure we're given Unicode input
    if len(name) < 4 or len(name) > 15: return False
    for c in name:
        if c in alias_disallowed_chars: return False
    if chat_filter.is_bad(name): return False
    if chat_filter.is_graphical(name): return False
    if chat_filter.is_ugly(name): return False
    if 'spinpunch' in name.lower(): return False
    return True

# recognize obsolete time-series history fields for deletion
obsolete_time_series_re = re.compile('^unit:(.+):manufactured_at_time$|^(.+)_manufactured_at_time$|^(.+)recycled_at_time$|^(.+)_wk([0-9]+)_at_time$|^(.+)_s([0-9]+)_at_time$')

# leaderboard score fields

SCORE_FIELDS = {
    'xp': {'history_prefix': 'score_xp'},
    'resources_looted': {'history_prefix': 'score_resources_looted'},
    'conquests': {'history_prefix': 'score_conquests'},
    'havoc_caused': {'history_prefix': 'score_havoc'},
    'damage_inflicted': {'history_prefix': 'score_damage'},
    'quarry_resources': {'history_prefix': 'quarry_resources', 'region_specific': True},
    'strongpoint_resources': {'history_prefix': 'strongpoint_resources', 'region_specific': True, 'leaderboard_query_is_region_specific': False},
    'hive_kill_points': {'history_prefix': 'hive_kill_points', 'region_specific': True, 'leaderboard_query_is_region_specific': False},
    'hive_kill_points_global': {'history_prefix': 'hive_kill_points_global'},
    'trophies_pvp': {'history_prefix': 'trophies_pvp'},
    'trophies_pve': {'history_prefix': 'trophies_pve'},
    'trophies_pvv': {'history_prefix': 'trophies_pvv'},
    'tokens_looted': {'history_prefix': 'tokens_looted'},
    'achievement_points': {'history_prefix': 'achievement_points'},
    }

SCORES2_MIGRATION_VERSION = 9

def conceal_protection_time(x):
    if gamedata['server']['conceal_protection_time']:
        if x > server_time:
            return 1
        else:
            return -1
    else:
        return x

last_mail_id = 0
def generate_mail_id():
    global last_mail_id
    last_mail_id += 1
    return '%d-%08x-%d' % (server_time, random.randint(0,0xffffffff), last_mail_id)

def inventory_item_equal(a, b):
    if a['spec'] != b['spec']: return False
    if a.get('stack',1) != b.get('stack',1): return False
    if a.get('expire_time',-1) != b.get('expire_time',-1): return False
    return True

def inventory_list_equal(a, b):
    if len(a) != len(b): return False
    for i in xrange(len(a)):
        if (not inventory_item_equal(a[i], b[i])):
            return False
    return True

# these functions work with the raw JSON structures stored in NoSQL for mobile objects
def army_unit_is_dead(obj):
    return (obj.get('hp',1) <= 0 or obj.get('hp_ratio',1) <= 0)

# track values in player.history that accumulate over time
# keeps an atomic counter for the current accumulated total, plus an '_at_time' dictionary for totals by account age
# (relative to user.account_creation_time!)
# 'mutate' should be either dict_increment (for values that build up, like spending)
# dict_setmax (for values where we care about the max, like friends_in_game), or dict_setvalue (for "charted" values like resources currently in storage)
# 'bucket' to quantize samples to increments of 'bucket_size' seconds, to avoid bloating with fine time samples
# returns True only if a mutation was made
def record_player_metric(player, mutate, counter, amount, time_series = True, bucket = False, bucket_size = None):
    if player.is_ai(): return False

    # mutate the current counter
    if not mutate(player.history, counter, amount): return False

    if not time_series:
        return True

    # update corresponding time series
    if player.creation_time <= 0:
        # can't do this on old accounts that have no creation time
        return True
    time_series = counter + '_at_time'
    if time_series not in player.history:
        player.history[time_series] = {}

    age = int(server_time - player.creation_time)
    if bucket:
        # quantize age to nearest bucket_size increment
        if bucket_size is None: bucket_size = 5*60
        age = (age/bucket_size)*bucket_size
    mutate(player.history[time_series], str(age), amount)
    return True

# return abbreviated string representing a session ID, for logging purposes
def pretty_print_session(id):
    return id[0:4]+'...'+id[-4:]

#
# SERVER CODE BEGINS HERE
#

# GLOBALS

gamesite = None
spin_server_name = None

# decorator to trap all exceptions underneath a main entry point
def catch_all(name):
    def _apply_catch_decorator(func):
        def _catch_decorator(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except:
                gamesite.exception_log.event(server_time, '%s Exception: %s' % (name, traceback.format_exc().strip())) # OK
        return functools.wraps(func)(_catch_decorator)
    return _apply_catch_decorator

# table mapping sessions (big strings) to live Player objects
session_table = {}

def get_session_by_session_id(session_id, include_logout_in_progress = False):
    s = session_table.get(session_id, None)
    if s and s.logout_in_progress and not include_logout_in_progress: s = None
    return s
def get_session_by_user_id(user_id, include_logout_in_progress = False):
    for s in session_table.itervalues():
        if s.user.user_id == user_id:
            if s.logout_in_progress and not include_logout_in_progress: return None
            return s
    return None
def get_session_by_facebook_id(facebook_id, include_logout_in_progress = False):
    for s in session_table.itervalues():
        if s.user.facebook_id == facebook_id:
            if s.logout_in_progress and not include_logout_in_progress: return None
            return s
    return None
def get_session_by_xsolla_id(xs_id, include_logout_in_progress = False):
    for s in session_table.itervalues():
        if s.user.get_xsolla_id() == xs_id:
            if s.logout_in_progress and not include_logout_in_progress: return None
            return s
    return None

def iter_sessions(include_logout_in_progress = False):
    for session in session_table.itervalues():
        if session.logout_in_progress: continue
        yield session

invalid_sessions = {} # set of session IDs invalidated via CONTROLAPI (sid->count)
invalid_sessions_by_time = collections.deque() # (time,sid) for session invalidations


# load server configuration file
game_id = SpinConfig.config['game_id']
spin_secure_mode = SpinConfig.config.get('secure_mode', 0)
spin_log_verbosity = SpinConfig.config.get('log_verbosity', 0)
spin_log_dir = SpinConfig.config.get('log_dir', 'logs')
machine_stats_filesystems = ['/',
                             os.path.abspath(spin_log_dir)+'/'] + \
                             [os.path.abspath(fs) for fs in SpinUserDB.driver.get_filesystems()]

NOSQL_GEN = 2

# disable logging of minor metrics that clutter up the metrics file and load the server
LOTS_OF_METRICS = False

# special case for AI fought during the rails tutorial
LION_STONE_ID = 1002

# user_id numbers lower than this are used for AIs
MAX_AI_USER_ID = 1100

def is_ai_user_id_range(id):
    return id >= 0 and id <= MAX_AI_USER_ID

class SQUAD_IDS(object):
    # None or 0 means "base defenders", -1 is "reserves", 1..N is real squads
    BASE_DEFENDERS = 0
    RESERVES = -1
    @classmethod
    def is_mobile_squad_id(cls, id): return id > 0

# load game data file
gamedata = None
gameclient_build_date = None

# cached ChatFilter instance - note: used for alliance name checking, not actually applied to chat (that's client side)
chat_filter = None

def reload_gamedata():
    global gamedata, gameclient_build_date, chat_filter
    try:
        newdata = SpinJSON.load(open(SpinConfig.gamedata_filename()))

        # load private pieces of gamedata that are not included in the main client download
        newdata['server'] = SpinConfig.load(SpinConfig.gamedata_component_filename("server_compiled.json"))
        newdata['ai_bases_server'] = SpinConfig.load(SpinConfig.gamedata_component_filename("ai_bases_server.json"))
        # XXX ugly hack - the file should be prepared separately for the client
        if 'ai_bases_client' in newdata: del newdata['ai_bases_client']
        newdata['ai_attacks'] = SpinConfig.load(SpinConfig.gamedata_component_filename("ai_attacks_compiled.json"))
        newdata['hives_server'] = SpinConfig.load(SpinConfig.gamedata_component_filename("hives_server.json"))
        if 'hives_client' in newdata: del newdata['hives_client']
        newdata['quarries_server'] = SpinConfig.load(SpinConfig.gamedata_component_filename("quarries_server.json"))
        if 'quarries_client' in newdata: del newdata['quarries_client']
        newdata['offers'] = SpinConfig.load(SpinConfig.gamedata_component_filename("offers.json"))
        newdata['loot_tables'] = SpinConfig.load(SpinConfig.gamedata_component_filename("loot_tables.json"))
        newdata['promo_codes'] = SpinConfig.load(SpinConfig.gamedata_component_filename("promo_codes_compiled.json"))

        gamedata = newdata
        gameclient_build_date = str(open("../gameclient/compiled-client.js.date").read().strip())

        chat_filter = ChatFilter.ChatFilter(gamedata['client']['chat_filter'])

    except:
        writefunc = (lambda x: gamesite.exception_log.event(server_time, x)) if gamesite else (lambda x: sys.stderr.write(x+'\n'))
        writefunc('error (re)loading gamedata: '+traceback.format_exc().strip()) # OK
        pass

reload_gamedata()

try:
    SERVER_VERSION = subprocess.Popen('../scmtool.sh version', shell=True, stdout=subprocess.PIPE).stdout.readlines()[0].strip()
except:
    SERVER_VERSION = 'unknown'


# global time value (in integer seconds since UNIX epoch)
# updated each time the main event handler runs
server_time_high = time.time()
server_time = int(server_time_high)
spin_server_launch_time = server_time

# called from event handlers to propagate new time value
def update_server_time():
    global server_time_high, server_time
    server_time_high = time.time()
    server_time = int(server_time_high)
    gamesite.nosql_id_generator.set_time(server_time)
    if gamesite.nosql_client: gamesite.nosql_client.set_time(server_time)
    return server_time_high

# utilities for inserting into Deferred callback chains
def _report_deferred_failure(fail, session):
    gamesite.exception_log.event(server_time, 'async exception on player %d: %s' % \
                                 (session.user.user_id, fail.getTraceback().strip()))
def report_and_reraise_deferred_failure(fail, session):
    _report_deferred_failure(fail, session)
    return fail
def report_and_absorb_deferred_failure(fail, session, retval = None):
    _report_deferred_failure(fail, session)
    return retval


# live server administration interface
class AdminStats:
    def __init__(self):
        self.reset()
    def reset(self):
        self.start_time = server_time
        self.developer_revenue = 0.0
        self.revenue = 0.0
        self.users_seen = set()
        self.paying_users_seen = set()
        self.new_users_seen = set()
        self.last_payments = collections.deque([], 10)
        self.last_gamebucks = collections.deque([], 10)
        self.campaigns = {}
        self.econ = {}
        self.latency = {}
        self.quarry_cache_misses = 0
        self.quarry_cache_hits = 0

    def econ_flow_res(self, player, category, reason, res, spec = None, level = None):
        # eventually need to separate third resource out
        total = sum(res.itervalues(),0)
        if total == 0: return # we assume that entries are either all positive or all negative
        if category not in self.econ:
            self.econ[category] = {}
        self.econ[category][reason] = self.econ[category].get(reason,0) + total

        if gamedata['server'].get('log_econ_res', False) and gamesite.nosql_client:
            props = {'user_id':player.user_id, 'res':res, 'cat':category, 'sub': reason}
            if spec is not None:
                props['spec'] = spec
            if level is not None:
                props['level'] = level
            props.update(player.get_denormalized_summary_props('brief'))
            gamesite.nosql_client.log_record('econ_res', server_time, props, log_ident = False, reason = 'econ_flow_res')

    def record_latency(self, name, elapsed):
        if name not in self.latency:
            self.latency[name] = {'N':0.0, 'total':0.0, 'max': 0.0}
        self.latency[name]['N'] += 1
        self.latency[name]['total'] += elapsed
        self.latency[name]['max'] = max(self.latency[name]['max'], elapsed)

    # decorator for timing a function
    def measure_latency(self, name):
        def _apply_latency_decorator(func):
            def _latency_decorator(*args, **kwargs):
                start_time = time.time()
                ret = func(*args, **kwargs)
                end_time = time.time()
                self.record_latency(name, end_time - start_time)
                return ret
            return functools.wraps(func)(_latency_decorator)
        return _apply_latency_decorator

    # context object for timing a block
    class MeasureLatency(object):
        def __init__(self, parent, name):
            self.parent = parent
            self.name = name
        def __enter__(self):
            self.start_time = time.time()
        def __exit__(self, type, value, traceback):
            end_time = time.time()
            self.parent.record_latency(self.name, end_time - self.start_time)
    def latency_measurer(self, name): return self.MeasureLatency(self, name)

    def add_visit(self, user_id, is_new, is_paying):
        self.users_seen.add(user_id)
        if is_paying:
            self.paying_users_seen.add(user_id)
        if is_new:
            self.new_users_seen.add(user_id)

    def add_revenue(self, user_id, dollar_amount, descr):
        self.revenue += dollar_amount
        # add here in case this is the user's first payment
        self.paying_users_seen.add(user_id)
        self.last_payments.append({'user_id':user_id,
                                   'time':server_time,
                                   'dollar_amount':dollar_amount,
                                   'description':descr})

    def add_gamebucks_spend(self, user_id, bucks, descr):
        self.last_gamebucks.append({'user_id':user_id,
                                    'time':server_time,
                                    'gamebucks_amount':bucks,
                                    'description':descr})

    def add_logout(self, user_id, campaign, length):
        # only track FIRST visits
        if user_id not in self.new_users_seen:
            return

        if campaign not in self.campaigns:
            self.campaigns[campaign] = {'lengths': collections.deque([], 5), 'num': 0}
        self.campaigns[campaign]['lengths'].append(length)
        self.campaigns[campaign]['num'] += 1

    def get_active_sessions(self):
        # also count valid in-flight asynchronous logins here
        return len(session_table) + sum((1 for async in gamesite.gameapi.AsyncLogin.in_progress_by_user_id.itervalues() if (not async.cancel_reason)),0)

    def get_server_status_json(self):
        return {'server_time': server_time,
                'launch_time': spin_server_launch_time,
                'type': SpinConfig.game(),
                'state': gamesite.server_state,
                'hostname': gamesite.config.game_host,
                'pid': os.getpid(),
                'game_listen_host': gamesite.config.game_listen_host,
                'game_http_port': gamesite.config.game_http_port,
                'game_ssl_port': gamesite.config.game_ssl_port,
                'game_ws_port': gamesite.config.game_ws_port,
                'game_wss_port': gamesite.config.game_wss_port,
                'affinities': gamesite.config.affinities,
                'scm_version': SERVER_VERSION,
                'gamedata_build': gamedata['gamedata_build_info']['date'],
                'gameclient_build': gameclient_build_date,
                'uptime': server_time - self.start_time,
                'load_unhalted': self.get_load(),
                'machine_stats': MachineStats.get_stats(filesystems = machine_stats_filesystems),
                'active_sessions': self.get_active_sessions(),
                'paying_sessions': sum((1 for session in iter_sessions() if session.player.history.get('money_spent',0)>0),0),
                'active_protocol_clients': len(gamesite.active_clients),
                'active_protocol_requests': len(gamesite.active_requests),
                }

    def get_stats(self):
        props = {}
        up_hours = float(server_time - self.start_time)/3600.0
        up_days = up_hours/24.0
        props['uptime hours'] = up_hours
        props['revenue'] = self.revenue
        props['revenue/day (projected)'] = self.revenue / up_days
        props['revenue (developers)'] = self.developer_revenue
        props['unique users'] = len(self.users_seen)
        props['unique paying users'] = len(self.paying_users_seen)
        props['unique new users'] = len(self.new_users_seen)
        DAU = len(self.users_seen) / up_days
        PDAU = len(self.paying_users_seen) / up_days
        props['DAU (projected)'] = DAU
        props['PDAU (projected)'] = PDAU
        props['ARPDAU (projected)'] = self.revenue / (DAU+0.0001)
        props['ARPPDAU (paying, projected)'] = self.revenue / (PDAU+0.0001)
        return props

    def get_campaigns(self):
        ret = ''
        ret += '<table border="1" cellspacing="1">'
        ret += '<tr><td>Name</td><td>Last Session Lengths (new users only)</td><td>Average</td><td># Acquisitions</td></tr>'
        for name in sorted(self.campaigns.iterkeys()):
            data = self.campaigns[name]
            lengths = data['lengths']
            num = data['num']
            if len(lengths) > 0:
                str_average = SpinConfig.pretty_print_time(sum(lengths)/len(lengths))
            else:
                str_average = '-'
            str_lengths = string.join(map(SpinConfig.pretty_print_time, lengths), ', ')
            ret += '<tr><td>%s</td><td>%s</td><td>%s</td><td>%d</td></tr>' % (name, str_lengths, str_average, num)
        ret += '</table>'
        return ret

    def get_payments(self):
        ret = '<table border="1" cellspacing="1">'
        ret += '<tr><td>Time ago</td><td>User ID</td><td>Amount</td><td>Description</td></tr>'
        for props in reversed(self.last_payments):
            elapsed = server_time - props['time']
            ret += '<tr><td>%s</td><td>%d</td><td>$%0.2f</td><td>%s</td></tr>' % (SpinConfig.pretty_print_time(elapsed),
                                                                       props['user_id'],
                                                                       props['dollar_amount'],
                                                                       props['description'])
        ret += '</table>'
        return ret

    def get_gamebucks(self):
        ret = '<table border="1" cellspacing="1">'
        ret += '<tr><td>Time ago</td><td>User ID</td><td>Amount</td><td>Description</td></tr>'
        for props in reversed(self.last_gamebucks):
            elapsed = server_time - props['time']
            ret += '<tr><td>%s</td><td>%d</td><td>%d</td><td>%s</td></tr>' % (SpinConfig.pretty_print_time(elapsed),
                                                                       props['user_id'],
                                                                       props['gamebucks_amount'],
                                                                       props['description'])
        ret += '</table>'
        return ret

    def get_load(self):
        if 'ALL' in self.latency:
            return self.latency['ALL']['total'] / max(1, float(server_time - self.start_time))
        else:
            return -1

    def get_latency(self):
        ret = ''

        if 'ALL' in self.latency:
            ret += 'Approximate unhalted load: <b>%.1f%%</b><br>' % (100.0*self.get_load())
            ret += 'Average request latency: <b>%.1f ms</b><p>' % ((1000.0*self.latency['ALL']['total'])/self.latency['ALL']['N'])

        def sort_by_max(kv): return -kv[1]['max']
        def sort_by_average(kv): return -kv[1]['total']/kv[1]['N']
        def sort_by_total(kv): return -kv[1]['total']

        grand_total = sum([data['total'] for name, data in self.latency.iteritems() if name != 'ALL'])

        for sort_name, sort_func in {'Max': sort_by_max, 'Avg': sort_by_average, 'Total': sort_by_total}.iteritems():
            ret += '<p>Sort by %s<br>' % sort_name
            ret += '<table border="1" cellspacing="1">'
            ret += '<tr><td>Request</td><td>Average</td><td>Max</td><td>Total</td><td>Total %</td><td>#Calls</td></tr>'
            ls = self.latency.items()
            ls.sort(key = sort_func)
            for name, data in ls[0:25]:
                ret += '<tr><td>%s</td><td>%.1f ms</td><td>%.1f ms</td><td>%.1f s</td><td>%.1f%%</td><td>%d</td></tr>' % \
                       (name, 1000.0*data['total']/data['N'],
                        1000.0*data['max'],
                        data['total'],
                        (100.0*data['total']/grand_total) if grand_total != 0 else 0,
                        int(data['N'])
                        )
            ret += '</table>'

        quarry_total = self.quarry_cache_misses + self.quarry_cache_hits
        if quarry_total > 0:
            ret += '<p>Quarry cache hit rate: <b>%.1f%%</b><br>' % (100*self.quarry_cache_hits/float(quarry_total))
        return ret

    def get_econ(self):
        ret = '<table border="1" cellspacing="1">'
        ret += '<tr><td>Category</td><td>Reason</td><td>Amount</td><td>%</td></tr>'
        cat_totals = {}
        cat_totals = dict([(category, sum(self.econ[category].itervalues())) for category in self.econ.iterkeys()])
        grand_total = sum(cat_totals.itervalues())
        abs_total = sum([abs(x) for x in cat_totals.itervalues()])

        def big_number(x):
            return '%.3fM' % (x/1000000.0)

        for cat, data in sorted(self.econ.items()):
            cat_ratio = cat_totals[cat]/float(abs_total) if (abs_total != 0) else 0
            ret += '<tr><td><b>%s</b></td><td>%s</td><td><b>%s</b></td><td><b>%.1f%%</b></td></tr>' % (cat, '', big_number(cat_totals[cat]), 100.0*cat_ratio)
            for reason, amount in sorted(data.items()):
                ratio = amount/float(cat_totals[cat]) if (cat_totals[cat] != 0) else 0
                ret += '<tr><td></td><td>%s</td><td>%s</td><td>%.1f%%</td></tr>' % (reason, big_number(amount), 100.0*ratio)

        ret += '<tr><td><b>TOTAL</b></td><td></td><td>%s</td><td>-</td></tr>' % big_number(grand_total)
        ret += '</table>'
        return ret

admin_stats = AdminStats()

# userdb/playerdb/aistate file I/O backend
class IOSystem (object):
    def __init__(self, config):
        self.slowtest = config.get('slowtest', -1)

    def start(self): pass
    def overloaded(self): return False
    def get_stats(self): return None

    # PUBLIC API
    def sync_download_user(self, id): return SpinUserDB.driver.sync_download_user(id)
    def sync_write_user(self, id, buf): SpinUserDB.driver.sync_write_user(id, buf)
    def sync_write_player(self, id, buf): SpinUserDB.driver.sync_write_player(id, buf)
    def sync_write_base(self, region, id, buf): SpinUserDB.driver.sync_write_base(region, id, buf)

    def async_write_user(self, id, buf, success_cb, fsync, reason = None):
        self.async_write(SpinUserDB.driver.get_user_path(id), buf, success_cb, fsync, procnum = SpinUserDB.driver.io_channel_for_user(id))
    def async_write_player(self, id, buf, success_cb, fsync, reason = None):
        self.async_write(SpinUserDB.driver.get_player_path(id), buf, success_cb, fsync, procnum = SpinUserDB.driver.io_channel_for_player(id))
    def async_write_base(self, region, id, buf, success_cb, fsync, reason = None):
        self.async_write(SpinUserDB.driver.get_base_path(region, id), buf, success_cb, fsync, procnum = SpinUserDB.driver.io_channel_for_base(id))
    def async_write_aistate(self, user_id, game_id, ai_id, buf, success_cb, fsync, reason = None):
        self.async_write(SpinUserDB.driver.get_aistate_path(user_id, game_id, ai_id), buf, success_cb, fsync, procnum = SpinUserDB.driver.io_channel_for_aistate())

    def async_read_user(self, id, success_cb, error_cb, reason = None):
        self.async_read(SpinUserDB.driver.get_user_path(id), success_cb, error_cb, procnum = SpinUserDB.driver.io_channel_for_user(id))
    def async_read_player(self, id, success_cb, error_cb, reason = None):
        self.async_read(SpinUserDB.driver.get_player_path(id), success_cb, error_cb, procnum = SpinUserDB.driver.io_channel_for_player(id))
    def async_read_base(self, region, id, success_cb, error_cb, reason = None):
        self.async_read(SpinUserDB.driver.get_base_path(region, id), success_cb, error_cb, procnum = SpinUserDB.driver.io_channel_for_base(id))
    def async_read_aistate(self, user_id, game_id, ai_id, success_cb, error_cb, reason = None):
        self.async_read(SpinUserDB.driver.get_aistate_path(user_id, game_id, ai_id), success_cb, error_cb, procnum = SpinUserDB.driver.io_channel_for_aistate())

    def async_delete_aistate(self, user_id, game_id, ai_id, cb):
        self.async_delete(SpinUserDB.driver.get_aistate_path(user_id, game_id, ai_id), cb, procnum = SpinUserDB.driver.io_channel_for_aistate())
    def async_delete_base(self, region_id, base_id, cb):
        self.async_delete(SpinUserDB.driver.get_base_path(region_id, base_id), cb, procnum = SpinUserDB.driver.io_channel_for_base(base_id))

    # PRIVATE IMPLEMENTATION
    def call_cb(self, cb, reason, request_time, *args):
        if self.slowtest > 0:
            reactor.callLater(self.slowtest, cb, *args)
            return

        if reason:
            start_time = time.time()
        ret = cb(*args)
        if reason:
            end_time = time.time()
            admin_stats.record_latency(reason, end_time-start_time)
        return ret
    def async_write(self, filename, buf, success_cb, fsync, reason = None, procnum = None):
        if procnum is None: procnum = 0
        request_time = 0 # time.time()
        self.do_async_write(filename, buf, functools.partial(self.call_cb, success_cb, reason, request_time), fsync, procnum)
    def async_read(self, filename, success_cb, error_cb, reason = None, procnum = None):
        if procnum is None: procnum = 0
        request_time = 0 # time.time()
        self.do_async_read(filename, functools.partial(self.call_cb, success_cb, reason, request_time), error_cb, procnum)
    def async_delete(self, filename, success_cb, procnum = None):
        if procnum is None: procnum = 0
        self.do_async_delete(filename, success_cb, procnum)
    def async_exists(self, filename, success_cb, error_cb, procnum = None):
        if procnum is None: procnum = 0
        self.do_async_exists(filename, success_cb, error_cb, procnum)

    # need a little adaptor function to throw away the unnecessary "response" from async write requests
    def async_write_helper(self, ignore_errors, cb, delay, response):
        if (not ignore_errors) and (response == 'NOTFOUND'):
            raise Exception('server returned 404!')
        if delay > 0:
            reactor.callLater(delay, cb)
        else:
            cb()

    def async_write_error(self, reason):
        gamesite.exception_log.event(server_time, 'async write error! this is really bad! reason: '+repr(reason))

    # helper to return an async read as a deferred
    def async_read_deferred(self, filename, reason = None, procnum = None):
        d = defer.Deferred()
        self.async_read(filename,
                        lambda buf, d=d: d.callback(buf),
                        lambda err_reason, d=d: d.errback(failure.Failure(Exception('async_read() error: %r' % err_reason))),
                        reason = reason, procnum = procnum)
        return d
    def async_exists_deferred(self, filename, reason = None, procnum = None):
        d = defer.Deferred()
        self.async_exists(filename,
                          lambda buf, d=d: d.callback(buf),
                          lambda err_reason, d=d: d.errback(failure.Failure(Exception('async_exists() error: %r' % err_reason))),
                          procnum = procnum)
        return d

    def collect_aistate_garbage(self):
        # get rid of all files not modified for at least one
        # entire persistence time - this is conservative
        max_time = gamedata['ai_base_persistence_time'][1]
        SpinUserDB.driver.collect_aistate_garbage(server_time - max_time)

    def shutdown(self):
        # override if necessary
        return defer.succeed(True)

class FileIOSystem (IOSystem):
    def __init__(self, config):
        IOSystem.__init__(self, config)
        assert isinstance(SpinUserDB.driver, SpinUserDB.FileDriver)
    def do_async_read(self, filename, success_cb, error_cb, procnum):
        try:
            buf = open(filename).read()
        except:
            buf = 'NOTFOUND'
        reactor.callLater(0, success_cb, buf)
    def do_async_write(self, filename, buf, success_cb, fsync, procnum):
        atom = AtomicFileWrite.AtomicFileWrite(filename, 'w')
        atom.fd.write(buf)
        atom.complete(fsync = fsync)
        reactor.callLater(0, success_cb)
    def do_async_delete(self, filename, success_cb, procnum):
        safe_unlink(filename)
        reactor.callLater(0, success_cb)
    def do_async_exists(self, filename, success_cb, error_cb, procnum):
        reactor.callLater(0, success_cb, os.path.exists(filename))

class IOSlaveIOSystem (IOSystem):
    def __init__(self, config):
        IOSystem.__init__(self, config)
        assert isinstance(SpinUserDB.driver, SpinUserDB.FileDriver)
        self.clients = []
        self.secret = config.get('secret', '9sdSDFz')
        self.port_range = config.get('ports','12321-12322')
        self.port_range = map(int, self.port_range.split('-'))
        num_slaves = self.port_range[1]-self.port_range[0]+1
        optimal_num = SpinUserDB.driver.optimal_io_channels()
        if num_slaves != optimal_num:
            raise Exception('number of ioslaves (%d) does not match optimum for SpinUserDB (%d)' % (num_slaves, optimal_num))
    def start(self):
        for port in xrange(self.port_range[0], self.port_range[1]+1):
            client = ioslave.IOClient(port, self.secret, log_exception_func = gamesite.log_exception_func)
            self.clients.append(client)
            gamesite.exception_log.event(server_time, repr(client) + ' started')
    def overloaded(self):
        limit = gamedata['server']['io_backends']['ioslave'].get('max_in_flight', 50)
        current = sum([client.num_in_flight() for client in self.clients])
        return (current >= limit)
    def get_stats(self):
        ret = AsyncHTTP.AsyncHTTPRequester.stats_to_html(
            AsyncHTTP.AsyncHTTPRequester.merge_stats([client.req.get_stats() for client in self.clients]),
            server_time)
        return ret
    def do_async_read(self, filename, success_cb, error_cb, procnum):
        self.clients[procnum].async_read(filename, server_time, success_cb, error_cb)
    def do_async_write(self, filename, buf, success_cb, fsync, procnum):
        # note: ALWAYS ask for fsync when using a true asynchronous I/O method
        self.clients[procnum].async_write(filename, buf, server_time, success_cb, self.async_write_error, fsync = True)
    def do_async_delete(self, filename, success_cb, procnum):
        self.clients[procnum].async_delete(filename, server_time, success_cb, self.async_write_error)
    def do_async_exists(self, filename, success_cb, error_cb, procnum):
        self.clients[procnum].async_exists(filename, server_time, success_cb, error_cb)
    def shutdown(self):
        return defer.DeferredList([client.defer_until_all_complete() for client in self.clients])

class S3IOSystem (IOSystem):
    def __init__(self, config):
        IOSystem.__init__(self, config)
        assert isinstance(SpinUserDB.driver, SpinUserDB.S3Driver)
        self.s3 = SpinUserDB.driver.s3con # SpinS3.S3(SpinUserDB.driver.key_file)

        config = gamedata['server'].get('AsyncHTTP_S3', {})
        request_timeout = config.get('request_timeout', 15)
        max_tries = config.get('max_tries', 3) # was: 20 (high is better against S3 errors but worse against server flood attacks)
        retry_delay = config.get('retry_delay', 3)

        # Wait this many seconds after the actual HTTP response before returning success from an async write.
        # This is necessary to deal with S3's "eventual consistency" model, so that player files don't get
        # over-written with old data when being attacked immediately after logging out
        # Need to keep it as low as possible, because it adds directly to post-attack latency.
        self.post_write_delay = config.get('post_write_delay', 2)

        # hard-code max request count to infinite, since we can't drop them (but can throttle logins instead)
        self.s3_req = AsyncHTTP.AsyncHTTPRequester(-1, -1, request_timeout, 0,
                                                   lambda x: gamesite.exception_log.event(server_time, x),
                                                   error_on_404 = False, max_tries = max_tries, retry_delay = retry_delay)
    def overloaded(self):
        limit = gamedata['server']['io_backends']['s3'].get('max_in_flight', 50)
        current = self.s3_req.num_on_wire()
        return (current >= limit)
    def get_stats(self):
        return self.s3_req.get_stats_html(server_time)

    # "preflight" callbacks update the request URL/headers to bump timestamps in case of retry problems
    def preflight_get_request(self, bucket, objname, request):
        request.url, request.headers = self.s3.get_request(bucket, objname)
    def preflight_put_request(self, bucket, objname, length, request):
        request.url, request.headers = self.s3.put_request(bucket, objname, length)
    def preflight_delete_request(self, bucket, objname, request):
        request.url, request.headers = self.s3.delete_request(bucket, objname)
    def preflight_exists_request(self, bucket, objname, request):
        request.url, request.headers = self.s3.head_request(bucket, objname)

    def do_async_read(self, path, success_cb, error_cb, procnum):
        bucket, objname = path
        url, headers = self.s3.get_request(bucket, objname)
        self.s3_req.queue_request(server_time, url, success_cb,
                                  error_callback = error_cb,
                                  preflight_callback = functools.partial(self.preflight_get_request, bucket, objname),
                                  method = 'GET', headers = headers)
    def do_async_write(self, path, buf, success_cb, fsync, procnum):
        bucket, objname = path
        url, headers = self.s3.put_request(bucket, objname, len(buf))
        self.s3_req.queue_request(server_time, url, functools.partial(self.async_write_helper, 0, success_cb, self.post_write_delay),
                                  error_callback = self.async_write_error,
                                  preflight_callback = functools.partial(self.preflight_put_request, bucket, objname, len(buf)),
                                  method = 'PUT', headers = headers, postdata = buf)
    def do_async_delete(self, path, success_cb, procnum):
        bucket, objname = path
        url, headers = self.s3.delete_request(bucket, objname)
        self.s3_req.queue_request(server_time, url, functools.partial(self.async_write_helper, 1, success_cb, 0),
                                  error_callback = self.async_write_error,
                                  preflight_callback = functools.partial(self.preflight_delete_request, bucket, objname),
                                  method = 'DELETE', headers = headers)
    def do_async_exists(self, path, success_cb, error_cb, procnum):
        bucket, objname = path
        url, headers = self.s3.head_request(bucket, objname)
        self.s3_req.queue_request(server_time, url, lambda ret, success_cb=success_cb: success_cb(ret != 'NOTFOUND'),
                                  error_callback = lambda err_reason, error_cb=error_cb: error_cb(err_reason),
                                  preflight_callback = functools.partial(self.preflight_exists_request, bucket, objname),
                                  method = 'HEAD', headers = headers)

IO_SYSTEMS = { 'file': FileIOSystem, 'ioslave': IOSlaveIOSystem, 's3': S3IOSystem }
io_system = None

def io_system_init(io_config):
    global io_system
    io_system = IO_SYSTEMS[io_config.get('backend', 'file')](io_config)

ASYNC_DEBUG = True
def ascdebug(msg):
    if gamedata['server'].get('log_async_io',False):
        print msg
        gamesite.exception_log.event(server_time, 'ASC: '+spin_server_name+' '+msg)

# mapping of game user IDs to User objects
class UserTable:
    # note: these are updated from the login code, so don't read them from the file
    WRITE_ONLY_FIELDS = [('user_id', int), # for reference/recovery only, not used as database key
                         ('fb_oauth_token', str),
                         ('kg_auth_token', str),
                         ('ag_auth_token', str),
                         ]

    FIELDS = [('country', None),
              ('fb_hit_time', int),
              ('account_creation_time', int),
              ('last_login_time', int),
              ('last_login_ip', str),
              ('uninstalled', int),
              ('birthday', None),
              ('browser_name', str),
              ('browser_version', int),
              ('browser_os', str),
              ('browser_hardware', str),
              ('browser_caps', None),
              ('last_sprobe_result', None),
              ('locale', str),
              ('frame_platform', str),
              ('social_id', str),
              ('facebook_id', str),
              ('facebook_profile', None),
              ('facebook_friends', None),
              ('facebook_likes', None),
              ('facebook_currency', None),
              ('facebook_third_party_id', None),
              ('facebook_name', None),
              ('facebook_first_name', None),
              ('fb_gamer_status', int),
              ('fb_credit_balance', int),
              ('kg_id', str),
              ('kg_hit_time', int),
              ('kg_username', None),
              ('kg_avatar_url', str),
              ('kg_friend_ids', None),
              ('ag_id', str),
              ('ag_hit_time', int),
              ('ag_profile', None),
              ('ag_username', None),
              ('ag_avatar_url', str),
              ('ag_friend_ids', None),
              ('acquisition_data', None),
              ('acquisition_campaign', None),
              ('acquisition_secondary', None),
              ('acquisition_type', None),
              ('acquisition_game_version', None),
              ('acquisition_ad_image', None),
              ('acquisition_ad_title', None),
              ('acquisition_ad_text', None),
              ('acquisition_ad_target', None),
              ('acquisition_ad_skynet', None),
              ('skynet_retargets', None),
              ('adotomi_context', None),
              ('dauup_context', None),
              ('dauup2_context', None),
              ('adparlor_context', None),
              ('fb_conversion_pixels_context', None),
              ('kg_conversion_pixels_context', None),
              ('liniad_context', None),
              ('canvas_width', int),
              ('canvas_height', int),
              ('canvas_oversample', None),
              ('devicePixelRatio', None),
              ('age_group', None),
              ('preferences', None),
              ('chat_gagged', int), # read-only for legacy data
              ('chat_mod', None),
              ('developer', None),
              ]

    def __init__(self):
        pass

    def jsonize(self, user):
        jsonobj = {}
        for name, coerce in (self.WRITE_ONLY_FIELDS + self.FIELDS):
            val = getattr(user, name)
            if val is not None:
                if coerce:
                    val = coerce(val)
                jsonobj[name] = val

        # store unrecognized data
        for name, val in user.foreign_data.iteritems():
            jsonobj[name] = val
        return jsonobj

    def unparse(self, user):
        with admin_stats.latency_measurer('user_table:jsonize'):
            jsonobj = self.jsonize(user)

        with admin_stats.latency_measurer('user_table:serialize'):
            ret = SpinJSON.dumps(jsonobj, pretty = True, newline = True, size_hint = 65536, double_precision = 5)
        return ret

    def parse(self, buf, user_id):
        jsonobj = None

        try:
            with admin_stats.latency_measurer('user_table:deserialize'):
                jsonobj = SpinJSON.loads(buf)
        except:
            pass

        if not jsonobj:
            return None

        with admin_stats.latency_measurer('user_table:parse'):

            ret = User(user_id)

            if jsonobj.has_key('user_id') and jsonobj['user_id'] != user_id:
                    print 'warning: UserTable lookup for id %d has data from id %d' % (user_id, jsonobj['user_id'])

            for name, coerce in self.WRITE_ONLY_FIELDS:
                if jsonobj.has_key(name):
                    del jsonobj[name]

            # parse recognized fields
            for name, coerce in self.FIELDS:
                if jsonobj.has_key(name):
                    val = jsonobj[name]
                    if coerce:
                        val = coerce(val)
                    setattr(ret, name, val)
                    del jsonobj[name]

            # store unrecognized fields
            for name, val in jsonobj.iteritems():
                print 'unrecogized User data', name, ':', val
                ret.foreign_data[name] = val

        return ret

    def store_sync(self, user):
        io_system.sync_write_user(user.user_id, self.unparse(user))

    def store_async(self, user, cb, fsync, reason):
        io_system.async_write_user(user.user_id, self.unparse(user), cb, fsync)

    def lookup_sync(self, user_id, on_behalf_of):
        try:
            gamesite.exception_log.event(server_time, 'sync lookup of user %d on behalf of user %d' % (user_id, on_behalf_of))
            buf = io_system.sync_download_user(user_id)
        except:
            return None
        return self.parse(buf, user_id)

    class AsyncRead:
        def __init__(self, parent, user_id, cb):
            self.parent = parent
            self.user_id = user_id
            self.cb = cb
        def fail(self, reason): self.cb(False, None)
        def success(self, buf):
            if buf == 'NOTFOUND':
                ret = None
            else:
                ret = self.parent.parse(buf, self.user_id)
            self.cb(True, ret)

    def lookup_async(self, user_id, cb, reason):
        request = self.AsyncRead(self, user_id, cb)
        io_system.async_read_user(user_id, request.success, request.fail)

def pcache_get_chat_name(info):
    if 'ui_name' in info: return info['ui_name']
    if ('facebook_first_name' in info) or ('facebook_name' in info):
        first_name = info.get('facebook_first_name', info.get('facebook_name','').split(' ')[0])
        full_name = info.get('facebook_name', None)
        if full_name:
            fields = full_name.split(' ')
            if len(fields) >= 2 and (len(fields[-1]) >= 1):
                return first_name + fields[-1][0]
        else:
            return first_name
    return 'Unknown(pcchat)'

def pcache_get_ui_name(info):
    if 'ui_name' in info: return info['ui_name']
    if 'facebook_first_name' in info: return info['facebook_first_name']
    if 'facebook_name' in info: return info['facebook_name'].split(' ')[0]
    return 'Unknown(pc)'

def alliance_display_name(info):
    ret = info['ui_name']
    if ('chat_tag' in info) and len(info['chat_tag']) > 0:
        ret = '%s [%s]' % (ret, info['chat_tag'])
    return ret

user_table = UserTable()

class User:
    def __init__(self, user_id):
        self.user_id = user_id
        self.fb_hit_time = -1 # server_time at which the user's Facebook data was downloaded
        self.fb_retrieve_semaphore = None # set of outstanding profile/friends/likes requests (by string name) to keep track of what's in progress
        self.account_creation_time = -1 # server_time at which account was originally created
        self.last_login_time = -1 # last time at which user played a game
        self.last_login_ip = '' # last IP address from which this user logged in
        self.uninstalled = 0 # true if person uninstalled the game via the frame platform
        self.country = '' # Facebook country from which user last logged in
        self.fb_oauth_token = None # Facebook OAuth token from the proxyserver login

        # user settings like sound/music volume - NOTE: OBSOLETE! this is player.player_preferences now
        self.preferences = {}

        # browser demographics, as reported by client in last CLIENT_HELLO message
        self.browser_name = None
        self.browser_version = None
        self.browser_os = None
        self.browser_hardware = None
        self.browser_caps = {}

        # last result sent by SProbe.js
        self.last_sprobe_result = None

        # browser canvas pixel dimensions
        self.canvas_width = None
        self.canvas_height = None
        self.canvas_oversample = None
        self.devicePixelRatio = None

        self.locale = None

        self.frame_platform = None
        self.social_id = None

        # facebook_id and facebook_name are always guaranteed to be available (for Facebook players)
        # however, facebook_name will be set to '(waiting for Facebook)' until the API call completes
        self.facebook_id = None
        self.facebook_name = None
        self.facebook_first_name = None

        # these fields are fetched asynchronously and may not be available immediately on login
        self.facebook_profile = None
        self.facebook_profile_backup = None # keep old profile, in case server returns bad info
        self.facebook_friends = None
        self.facebook_likes = None
        self.facebook_currency = None
        self.facebook_third_party_id = None

        self.fb_gamer_status = -1
        self.fb_credit_balance = -1
        self.credit_info_request_outstanding = False
        self.birthday = None # UNIX timestamp of midnight of the user's birthday, None if no birthday info available

        # Kongregate profile data
        self.kg_auth_token = None # Kongregate auth token from the proxyserver login
        self.kg_id = None # set on login
        # below fields are pulled asynchronously from the KG API
        self.kg_hit_time = -1
        self.kg_username = None
        self.kg_avatar_url = None
        self.kg_friend_ids = None

        # Armor Games profile data
        self.ag_auth_token = None # auth token from the proxyserver login
        self.ag_id = None # set on login
        # below fields are pulled asynchronously from the Armor Games API
        self.ag_profile = None
        self.ag_hit_time = -1
        self.ag_username = None
        self.ag_avatar_url = None
        self.ag_friend_ids = None

        self.acquisition_data = []
        self.acquisition_campaign = ''
        self.acquisition_type = None
        self.acquisition_secondary = None
        self.acquisition_game_version = ''
        self.age_group = None
        self.acquisition_ad_image = None
        self.acquisition_ad_title = None
        self.acquisition_ad_text = None
        self.acquisition_ad_target = None
        self.acquisition_ad_skynet = None # skynet targeting parameter
        self.skynet_retargets = None # list of targeting parameters we've seen on retargeted ads
        self.adotomi_context = None
        self.dauup_context = None
        self.dauup2_context = None
        self.adparlor_context = None
        self.liniad_context = None
        self.fb_conversion_pixels_context = None # flag that we should send FB Conversion Pixels
        self.kg_conversion_pixels_context = None # flag that we should send KG Conversion Pixels

        # these fields are for use inside the game server process only
        self.client_friends = set() # list of all ADD_FRIENDS sent (for AIs and true friends)
        self.client_ai_friends = set() # only counts AIs
        self.client_social_friends = set() # ONLY counts "true friends"

        # the above also include players tested but then rejected (to optimize the second run of populate_friends_who_play())
        # client_strangers only includes players really sent via ADD_FRIEND
        # AND can include players outside of self.client_friends
        self.client_strangers = None # changed to a set() on first query

        self.active_session = None

        # note: None or False or < 1 is "not gagged"
        # True or 1 is "permanently (and silently) gagged"
        # OBSOLETE - read-only for legacy data. Replaced by chat_gagged player aura.
        self.chat_gagged = None

        # 1 if player can moderate (gag) chat
        self.chat_mod = None

        # 1 if player is a developer (access to special functions and exclude from metrics)
        self.developer = None

        # this holds any unrecognized JSON data from the saved file
        # necessary to preserve forwards-compatibility in case we load a file
        # that contains data from a future version of the server
        self.foreign_data = {}


    # for the various get_name() functions, Player must be passed in
    # since we might want the alias/title to override the
    # platform-provided name stored on the User object.

    def get_chat_name(self, player):
        if player.alias: return player.get_titled_alias()
        if self.ag_username: return self.ag_username
        if self.kg_username: return self.kg_username
        if self.facebook_first_name:
            if self.facebook_name and len(self.facebook_name.split(' ')) >= 2:
                # first name + last initial
                fields = self.facebook_name.split(' ')
                ret = self.facebook_first_name or fields[0]
                if len(fields[-1]) >= 1:
                    ret += fields[-1][0]
                return ret
            else:
                return self.facebook_first_name
        return 'Unknown(userchat)'

    # player naming is documented here: https://sites.google.com/a/spinpunch.com/developers/code-formatting/special-topics/player-aliases

    # return the "real" (platform-provided) name of the player
    def get_real_name(self):
        if self.ag_username: return self.ag_username
        if self.kg_username: return self.kg_username
        if self.facebook_first_name: return self.facebook_first_name
        if self.facebook_name: return self.facebook_name.split(' ')[0]
        return 'Unknown(user)'

    # return the name that should be shown in the GUI (except chat) for this player
    def get_ui_name(self, player):
        if player.alias: return player.get_titled_alias()
        return self.get_real_name()

    def get_ui_name_searchable(self, player):
        # get the name that should be referenced for case-insensitive searches (that want to use a case-sensitive index)
        if player.alias:
            # important: this should NOT include the title
            return player.alias.lower()
        return self.get_ui_name(player).lower()

    def get_xsolla_id(self):
        # return the unique ID for this user for the Xsolla API
        return self.social_id

    def get_email(self):
        if self.facebook_profile:
            return self.facebook_profile.get('email', None)
        if self.ag_profile:
            return self.ag_profile.get('email', None)
        return None

    def chat_can_interact(self):
        if not self.active_session: return False
        return True

    def is_friends_with(self, social_id):
        if social_id:
            if social_id.startswith('fb'):
                fb_id = social_id[2:]
                if not self.facebook_friends:
                    return False
                for friend in self.facebook_friends:
                    if str(friend['id']) == fb_id:
                        return True
            elif social_id.startswith('kg'):
                kg_id = social_id[2:]
                if not self.kg_friend_ids:
                    return False
                for friend in self.kg_friend_ids:
                    if str(friend) == kg_id:
                        return True
            elif social_id.startswith('ag'):
                ag_id = social_id[2:]
                if not self.ag_friend_ids:
                    return False
                for friend in self.ag_friend_ids:
                    if str(friend) == ag_id:
                        return True
        return False

    def is_developer(self): return bool(self.developer)

    def is_suspicious(self):
        return self.user_id in gamedata['server']['suspicious_user_id_list']

    def is_chat_mod(self):
        return self.chat_mod or self.is_developer()

    def prune_acquisition_data(self):
        # get rid of all entries that have the 'useless':1 designation, unless they are the first
        new_data = []

        for i in xrange(len(self.acquisition_data)):
            d = self.acquisition_data[i]
            useless = False
            if (i != 0):
                if d.get('useless',0):
                    useless = True
                elif ('url' in d):
                    parsed = get_acquisition_data_from_url(d['url'], self.user_id)
                    if parsed and parsed.get('useless',0):
                        useless = True
            if not useless:
                new_data.append(d)

        self.acquisition_data = new_data

    def update_acquisition_data(self, data, player):
        # optionally pass in 'player' to update history fields

        if data:
            data['time'] = server_time
            self.acquisition_data.append(data)
            if ('adotomi' in gamedata['adnetworks']) and ('adotomi_context' in data) and (not self.adotomi_context):
                self.adotomi_context = data['adotomi_context']
                self.log_adnetwork_event('adotomi', {'user_id': self.user_id, 'kpi':'context_attached',
                                                         'context':self.adotomi_context, 'url':data.get('url','unknown')})
                if gamedata['server'].get('log_adotomi',1):
                    gamesite.exception_log.event(server_time, 'got adotomi context for user %d: "%s"' % (self.user_id, self.adotomi_context))

            if ('dauup' in gamedata['adnetworks']) and ('dauup_context' in data) and (not self.dauup_context):
                self.dauup_context = data['dauup_context']
                self.log_adnetwork_event('dauup', {'user_id':self.user_id, 'kpi':'context_attached',
                                                       'context':self.dauup_context, 'url':data.get('url','unknown')})
                if gamedata['server'].get('log_dauup',1):
                    gamesite.exception_log.event(server_time, 'got dauup context for user %d: "%s"' % (self.user_id, self.dauup_context))
            if ('dauup2' in gamedata['adnetworks']) and ('dauup2_context' in data) and (not self.dauup2_context):
                self.dauup2_context = data['dauup2_context']
                self.log_adnetwork_event('dauup2', {'user_id':self.user_id, 'kpi':'context_attached',
                                                        'context':self.dauup2_context, 'url':data.get('url','unknown')})
                if gamedata['server'].get('log_dauup2',1):
                    gamesite.exception_log.event(server_time, 'got dauup2 context for user %d: "%s"' % (self.user_id, self.dauup2_context))

            if ('adparlor' in gamedata['adnetworks']) and ('campaign_name' in data) and data['campaign_name'].startswith('7102') and (not self.adparlor_context):
                self.adparlor_context = "1"
                self.log_adnetwork_event('adparlor', {'user_id':self.user_id, 'kpi':'context_attached',
                                                          'context':self.adparlor_context, 'url':data.get('url','unknown')})
                if gamedata['server'].get('log_adparlor',1):
                    gamesite.exception_log.event(server_time, 'got adparlor context for user %d: "%s"' % (self.user_id, self.adparlor_context))

            if ('liniad' in gamedata['adnetworks']) and ('liniad_context' in data) and (self.liniad_context is None):
                self.liniad_context = data['liniad_context']
                self.log_adnetwork_event('liniad', {'user_id':self.user_id, 'kpi':'context_attached',
                                                        'context':self.liniad_context, 'url':data.get('url','unknown')})
                if gamedata['server'].get('log_liniad',1):
                    gamesite.exception_log.event(server_time, 'got liniad context for user %d: "%s"' % (self.user_id, repr(self.liniad_context)))

            if ('fb_conversion_pixels' in gamedata['adnetworks']) and ('fb_conversion_pixels_context' in data) and (self.fb_conversion_pixels_context is None):
                self.fb_conversion_pixels_context = data['fb_conversion_pixels_context']
                self.log_adnetwork_event('fb_conversion_pixels', {'user_id':self.user_id, 'kpi':'context_attached',
                                                                      'context':self.fb_conversion_pixels_context, 'url':data.get('url','unknown')})
                if gamedata['server'].get('log_fb_conversion_pixels',1):
                    gamesite.exception_log.event(server_time, 'got fb_conversion_pixels context for user %d: "%s"' % (self.user_id, repr(self.fb_conversion_pixels_context)))

            # increment history counters for app notification clicks
            if player and ('notif_t=app_notification' in data.get('url','')) and ('fb_ref' in data):
                # strip suffixes applied by retention_newbie.py
                ref = data['fb_ref']
                for IGNORE in ('_24h', '_168h'):
                    ref = ref.replace(IGNORE, '')
                if ref.endswith('_n') or ref.endswith('_e'): ref = ref[:-2]
                dict_increment(player.history, 'fb_notification:'+ref+':clicked', 1)

            if 'skynet_retarget' in data:
                if self.skynet_retargets is None: self.skynet_retargets = []
                # append but do not allow duplicates
                self.skynet_retargets = list(set(self.skynet_retargets + [data['skynet_retarget'],]))

        self.prune_acquisition_data()

        if not self.acquisition_game_version:
            self.acquisition_game_version = SERVER_VERSION

        # try to identify the acquisition campaign - first priority goes
        # to ad clicks ("primary"), then friend invites ("secondary"),
        # then anything else.

        def is_unassigned(camp):
            return (camp in [None, '', 'unknown', 'facebook_app_request', 'feed_level_up', 'feed_thanks'] or \
                    camp.startswith('viral_'))

        # already identified?
        if not is_unassigned(self.acquisition_campaign):
            return

        # search for primary ad clicks
        for d in self.acquisition_data:
            if d['type'] == 'ad_click':
                # primary ad click found
                self.acquisition_secondary = 0
                self.acquisition_campaign = d['campaign_name']
                self.acquisition_type = d['type']
                if 'age_group' in d:
                    self.age_group = d['age_group']
                if 'ad_image' in d:
                    self.acquisition_ad_image = d['ad_image']
                if 'ad_title' in d:
                    self.acquisition_ad_title = d['ad_title']
                if 'ad_text' in d:
                    self.acquisition_ad_text = d['ad_text']
                if 'ad_target' in d:
                    self.acquisition_ad_target = d['ad_target']
                if 'ad_skynet' in d:
                    self.acquisition_ad_skynet = d['ad_skynet']
                return

        # secondary or unknown acquisition source
        # note: facebook_app_request will almost always have a facebook_friend_invite following it,
        # so this will take care of cleaning up facebook_app_requests as well.

        if gamedata['server'].get('trace_secondary_acquisitions',False):
            for d in self.acquisition_data:
                if d['type'] == 'facebook_friend_invite':
                    # find the friend's acquisition campaign
                    if ('sender_user_id' in d) and (int(d['sender_user_id']) != self.user_id):
                        fr = user_table.lookup_sync(int(d['sender_user_id']), self.user_id)
                        if fr and (not is_unassigned(fr.acquisition_campaign)):
                            self.acquisition_secondary = 1
                            self.acquisition_campaign = fr.acquisition_campaign
                            # assume that referees have same age group as referer
                            if fr.age_group is not None:
                                self.age_group = fr.age_group
                            return

            for d in self.acquisition_data:
                if ((d['type'] in ('feed_level_up', 'feed_thanks')) or d['type'].startswith('viral_')) and \
                   ('referring_user_id' in d) and \
                   d['referring_user_id'].isdigit() and \
                   int(d['referring_user_id']) != self.user_id:
                    fr = user_table.lookup_sync(int(d['referring_user_id']), self.user_id)
                    if fr and (not is_unassigned(fr.acquisition_campaign)):
                        self.acquisition_secondary = 1
                        self.acquisition_campaign = fr.acquisition_campaign
                        self.acquisition_type = d['type']
                        if fr.age_group is not None:
                            self.age_group = fr.age_group
                        return

        # unknown acquisition source, just return the type (usually in UNASSIGNED)
        if len(self.acquisition_data) > 0:
            self.acquisition_campaign = self.acquisition_data[0]['type']

    def repopulate_ai_list(self, session):
        # add AI opponents to friends list

        ai_list = set()

        for strid, base in gamedata['ai_bases_server']['bases'].iteritems():
            if not base.get('enable',1): continue
            if 'activation' not in base: continue

            pred = Predicates.read_predicate(base['activation'])
            if not pred.is_satisfied(session.player, None):
                if ('show_if' in base) and Predicates.read_predicate(base['show_if']).is_satisfied(session.player, None):
                    # still show it
                    pass
                else:
                    # skip the base
                    continue

            ai_list.add(int(strid))

        # first remove AIs that are no longer valid from the client
        for id in self.client_ai_friends.difference(ai_list):
            session.send([["REM_FRIEND", id]])
            self.client_ai_friends.remove(id)
            self.client_friends.remove(id)

        # now add new AIs
        for id in ai_list.difference(self.client_ai_friends):
            self.client_ai_friends.add(id)
            self.client_friends.add(id)
            base = gamedata['ai_bases_server']['bases'][str(id)]
            friend_name = base['ui_name']
            friend_level = base['resources']['player_level']

            session.send([["ADD_FRIEND", id, False,
                           [{'user_id': id,
                             'social_id': 'ai',
                             'ui_name': friend_name,
                             'player_level': friend_level
                }]]])


    def populate_friends_who_play(self, session):

        self.repopulate_ai_list(session)

        if (self.facebook_friends is None) and (self.kg_friend_ids is None) and (self.ag_friend_ids is None):
            return # probably still waiting on the API

        # batch query for game player IDs
        social_id_list = []
        if self.facebook_friends:
            social_id_list += ['fb'+str(friend['id']) for friend in self.facebook_friends]
        if self.kg_friend_ids:
            social_id_list += ['kg'+str(x) for x in self.kg_friend_ids]
        if self.ag_friend_ids:
            social_id_list += ['ag'+str(x) for x in self.ag_friend_ids]

        friend_id_list = gamesite.social_id_table.social_id_to_spinpunch_batch(social_id_list)

        # filter out friends who are not game players, and friends who we've already told the client about
        friend_id_list = filter(lambda x: (x is not None) and (x not in self.client_friends), friend_id_list)

        if friend_id_list:
            # query the player cache
            add_props = gamesite.gameapi.do_query_player_cache(session, friend_id_list, reason = 'populate_friends_who_play')

        for i in xrange(len(friend_id_list)):
            friend_id = friend_id_list[i]
            friend_props = add_props[i]

            self.client_friends.add(friend_id)

            if not friend_props:
                # the friend has a player ID but never created any game state. This is probably because the friend
                # hit our site but was blocked by country or had an unsupported browser, so they never entered the game.
                # print 'warning: no PlayerCache entry for friend player %d' % friend_id
                continue

#            if not friend_props.get('tutorial_complete', False):
#                # do not connect to friends until they have completed the tutorial
#                continue

            self.client_social_friends.add(friend_id)

            session.send([["ADD_FRIEND", friend_id,
                           True, # is a real Facebook friend (not a stranger)
                           [friend_props]
                           ]])

        if not session.player.history.has_key('initial_friends_in_game'):
            session.player.history['initial_friends_in_game'] = len(self.client_social_friends)

        session.setmax_player_metric('friends_in_game', len(self.client_social_friends), bucket = True, bucket_size=60*60)

    def retrieve_kg_info(self, session, retmsg):
        if (None not in (self.kg_username, self.kg_avatar_url, self.kg_friend_ids)) and \
           ((server_time - self.kg_hit_time) < gamedata['server'].get('kongregate_cache_lifetime', 14400)):
            # use cached data
            return
        assert self.kg_auth_token

        if SpinConfig.config.get('enable_kongregate',0):
            self.retrieve_kg_info_start(session)
        else:
            # note: must match proxyserver.py test credentials
            test_response = SpinJSON.dumps({"friends":[],"muted_users":[],"friend_ids":[12345],"muted_user_ids":[],"user_id":12345,"username":"example1","private":False,"page_num":1,"num_pages":1,"success":True,"user_vars":{"username":"example1","level":1,"points":15,"avatar_url":"http://cdn4.kongcdn.com/assets/resize-image/50x50/assets/avatars/defaults/frog.png","chat_avatar_url":"http://cdn4.kongcdn.com/assets/resize-image/16x16/assets/avatars/defaults/frog.png","developer":False,"moderator":False,"admin":False,"gender":None,"age":32,"game_title":"Test Game","game_url":"http://www.kongregate.com/games/example1/test-game"}})
            reactor.callLater(2, lambda _self=self, _session=session, _retmsg=retmsg: _self.retrieve_kg_info_complete(_session, None, test_response)) # delay to expose timing bugs

    def retrieve_kg_info_start(self, session):
        gamesite.AsyncHTTP_Kongregate.queue_request(server_time,
                                                    'http://www.kongregate.com/api/user_info.json?user_id=%s' % self.kg_id,
                                                    lambda result, _session=session: self.retrieve_kg_info_complete(_session, None, result))
    def retrieve_kg_info_complete(self, session, retmsg, result):
        data = SpinJSON.loads(result)
        assert data['success']
        if data['num_pages'] > 1:
            gamesite.exception_log.event(server_time, 'user %d (kgid %s) profile with num_pages>1' % (self.user_id, self.kg_id))

        self.kg_username = data['username']
        self.kg_avatar_url = data['user_vars']['avatar_url']
        self.kg_friend_ids = data['friend_ids']
        if 'age' in data['user_vars'] and type(data['user_vars']['age'] is int):
            # go back N years and 6 months
            self.birthday = int(server_time - (data['user_vars']['age']*365+180)*86400)
        self.kg_hit_time = server_time

        if retmsg is None:
            if self.active_session:
                retmsg = self.active_session.outgoing_messages
        if retmsg is not None:
            retmsg.append(["PLAYER_CACHE_UPDATE", [gamesite.gameapi.get_player_cache_props(self, session.player, session.alliance_id_cache)]])
            retmsg.append(["PLAYER_UI_NAME_UPDATE", self.get_ui_name(session.player)])

    def retrieve_ag_info(self, session, retmsg):
        if (None not in (self.ag_username, self.ag_avatar_url, self.ag_friend_ids)) and \
           ((server_time - self.ag_hit_time) < gamedata['server'].get('armorgames_cache_lifetime', 14400)):
            # use cached data
            return

        # note: auth token not required

        if SpinConfig.config.get('enable_armorgames',0):
            self.retrieve_ag_info_start(session)
            self.retrieve_ag_friends_start(session)
        else:
            # note: must match proxyserver.py test credentials
            test_response = SpinJSON.dumps({'version': 1, 'code': 200, 'message': "OK", 'payload': {
                'uid': self.ag_id,
                'username': "test_user2" if self.ag_id == "example2" else "test_user",
                'avatar': "http://armatars.armorgames.com/armatar_149_50.50_c.jpg",
                'email': "test_user@test.com",
                'birthday': "0000-00-00",
                'gender':"Male",
                'created_on': "1335466318" } })
            reactor.callLater(2, lambda _self=self, _session=session, _retmsg=retmsg: _self.retrieve_ag_info_complete(_session, None, test_response)) # delay to expose timing bugs
            friends_response = SpinJSON.dumps({'version': 1, 'code': 200, 'message': "OK", 'payload': [
                {
                'uid':"example2" if self.ag_id == "example1" else "example1",
                'username': "test_user2" if self.ag_id == "example1" else "test_user",
                'avatar': "http://armatars.armorgames.com/armatar_119_50.50_c.jpg",
                'email': "user_one@test.com",
                'birthday': "1987-04-24",
                'gender': "Female",
                'created_on': "1198082452",
                'plays_game': "1"}]})
            reactor.callLater(2, lambda _self=self, _session=session, _retmsg=retmsg: _self.retrieve_ag_friends_complete(_session, None, friends_response)) # delay to expose timing bugs

    def retrieve_ag_info_start(self, session):
        gamesite.AsyncHTTP_ArmorGames.queue_request(server_time,
                                                    'https://services.armorgames.com/services/rest/v1/users/%s.json?api_key=%s' % (self.ag_id, SpinConfig.config['armorgames_api_key']),
                                                    lambda result, _session=session: self.retrieve_ag_info_complete(_session, None, result))
    def retrieve_ag_info_complete(self, session, retmsg, result):
        data = SpinJSON.loads(result)
        assert data['code'] == 200
        payload = data['payload']
        assert payload['uid'] == self.ag_id

        self.ag_profile = payload # store entire profile

        self.ag_username = payload['username']
        self.ag_avatar_url = payload['avatar']
        if 'birthday' in payload:
            y, m, d = map(int, payload['birthday'].split('-'))
            if y != 0:
                self.birthday = SpinConfig.cal_to_unix((y,m,d))
        self.ag_hit_time = server_time

        if retmsg is None:
            if self.active_session:
                retmsg = self.active_session.outgoing_messages
        if retmsg is not None:
            retmsg.append(["PLAYER_CACHE_UPDATE", [gamesite.gameapi.get_player_cache_props(self, session.player, session.alliance_id_cache)]])
            retmsg.append(["PLAYER_UI_NAME_UPDATE", self.get_ui_name(session.player)])

    def retrieve_ag_friends_start(self, session, offset = 0, previous_results = None):
        limit = 1
        gamesite.AsyncHTTP_ArmorGames.queue_request(server_time,
                                                    'https://services.armorgames.com/services/rest/v1/friends/%s.json?api_key=%s&limit=%d&offset=%d' % (self.ag_id, SpinConfig.config['armorgames_api_key'], limit, offset),
                                                    lambda result, _session=session, _previous_results=previous_results, _offset=offset, _limit=limit: self.retrieve_ag_friends_complete(_session, None, result, _previous_results, _offset, _limit))

    def retrieve_ag_friends_complete(self, session, retmsg, result, previous_results = None, previous_offset = None, limit = None):
        data = SpinJSON.loads(result)
        assert data['code'] == 200
        payload = data['payload']
        if previous_results is None:
            previous_results = payload
        else:
            previous_results += payload

        if limit and len(payload) >= limit: # query again
            self.retrieve_ag_friends_start(session, offset = previous_offset + limit, previous_results = previous_results)
            return

        # only include friends who play the game
        self.ag_friend_ids = [str(friend['uid']) for friend in previous_results if int(friend['plays_game'])]
        if retmsg is None:
            if self.active_session:
                retmsg = self.active_session.outgoing_messages
        if retmsg is not None:
            self.populate_friends_who_play(session)

    def ping_fbpayments(self, session, retmsg, request_ids):
        # batch this?
        for request_id in request_ids:
            self.ping_fbpayment(session, retmsg, request_id)

    def ping_fbpayment(self, session, retmsg, request_id, signed_request = None):
        # try to finalize the status of one inflight payment
        payment_data = session.player.fbpayments_inflight.get(request_id, None)
        if not payment_data: return
        simulate_purchase = payment_data.get('simulate_purchase',False)

        if simulate_purchase:
            self.ping_fbpayment_complete(None, session, retmsg, request_id, {'data':[{'request_id':request_id,
                                                                                      'id': '0-simulated-%s' % generate_mail_id(),
                                                                                      'items':[{'quantity':payment_data['init_quantity'],
                                                                                                'product': payment_data['product_url']}],
                                                                                      'payout_foreign_exchange_rate': 1,
                                                                                      'tax': 'tax_remitted',
                                                                                      'tax_country': session.user.country,
                                                                                      'actions':[{'type':'charge','status':'completed',
                                                                                                  'currency':payment_data['client_currency'],
                                                                                                  'amount':'%.2f' % (1.0*payment_data['client_price'] + 0.005), # use <1.0 to simulate the odd tax fail purchases
                                                                                                  'tax_amount':'%.2f' % (0.2*payment_data['client_price'])
                                                                                                  }]
                                                                                      }]})
            return
        elif 0 and signed_request:
            # short-circuit path XXX - this can't work reliably, because we don't get the exchange rate/currency/amount data :(
            request_data = SpinFacebook.parse_signed_request(signed_request, SpinConfig.config['facebook_app_secret'])
            if not request_data: raise Exception('bad signature: checksum verification failed')
            if gamedata['server']['log_fbpayments'] >= 2:
                gamesite.exception_log.event(server_time, 'ping_fbpayment user %d request_id %s signed_request %s' % (session.player.user_id, request_id, repr(request_data)))
            assert request_data['request_id'] == request_id
            # call the callback synchronously
            self.ping_fbpayment_complete(None, session, retmsg, request_id, {'data':[{'request_id':request_id,
                                                                                      'items':[{'quantity':request_data['quantity']}],
                                                                                      'actions':[{'type':'charge','status':request_data['status']}]
                                                                                      }]})
            return

        if not SpinConfig.config['enable_facebook']: return

        url = SpinFacebook.versioned_graph_endpoint('payment', str(self.facebook_id)+'/payment_transactions') + '?' + \
              urllib.urlencode(dict(request_id=request_id, access_token=SpinConfig.config['facebook_app_access_token'],
                                    fields=SpinFacebook.PAYMENT_FIELDS))

        if gamedata['server']['log_fbpayments'] >= 2:
            gamesite.exception_log.event(server_time, 'ping_fbpayment user %d request_id %s SEND %s' % (session.player.user_id, request_id, url))

        d = make_deferred('ping_fbpayment_complete') # OK - installed into session by caller
        gamesite.AsyncHTTP_Facebook.queue_request(server_time, url, functools.partial(self.ping_fbpayment_complete, d, session, retmsg, request_id), max_tries = 4)
        return d # hold request async until the poll completes

    # return the spellname, spellarg that corresponds to an FB payment on the Open Graph object "url" with quantity "item_quantity"
    def parse_fbpayment_product_url(self, url, item_quantity):
        qs = urlparse.parse_qs(urlparse.urlparse(str(url)).query)
        # look for a SKU slate order
        if ('type' in qs) and (qs['type'][-1] == OGPAPI.object_type('sku')):
            spellname = qs['spellname'][-1]
            spellarg = None
            #assert url == OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('sku'), 'spellname': spellname})
        # look for an order that buys in-game currency directly on the OG currency object, like a payer promo
        elif ('type' in qs) and (qs['type'][-1] == OGPAPI.object_type('gamebucks')):
            spellname = 'FB_GAMEBUCKS_PAYMENT'
            spellarg = int(item_quantity)
        else:
            raise Exception('cannot parse product URL %s qty %d' % (url, item_quantity))
        return spellname, spellarg

    # return the quantity of gamebucks given by this spellname/spellarg pair
    def parse_buy_gamebucks_spell_quantity(self, spellname, spellarg):
        if spellname == 'FB_GAMEBUCKS_PAYMENT':
            assert spellarg > 0
            return spellarg
        elif spellname.startswith('BUY_GAMEBUCKS_') and spellname in gamedata['spells']:
            return gamedata['spells'][spellname]['quantity']
        elif spellname.startswith('BUY_GAMEBUCKS_'):
            return int(spellname.split('_')[2])
        else:
            raise Exception('cannot parse spellname %s spellarg %s' % (spellname, repr(spellarg)))

    # find the spellname, spellarg for a BUY_GAMEBUCKS spell applicable to the player with this currency and amount
    # used to reconstruct the source spell when we lost it during the payments flow
    def find_buy_gamebucks_spell(self, session, real_currency, real_currency_amount, gamebucks_amount):
        for spellname, spell in gamedata['spells'].iteritems():
            if spell.get('quantity',-1) == gamebucks_amount and \
               spell.get('currency') == real_currency and \
               spellname.startswith('BUY_GAMEBUCKS') and \
               spell.get('price_formula') == 'constant':
                match = True
                for PRED in ('show_if','requires'):
                    if PRED in spell and (not Predicates.read_predicate(spell[PRED]).is_satisfied2(session, session.player, None)):
                        match = False; break
                if not match: continue

                # check price equivalence approximately
                if round(spell['price'], 2) != round(real_currency_amount, 2): continue

                return spellname, None # match found!
        gamesite.exception_log.event(server_time, 'player %d find_buy_gamebucks_spell failed for %s %r %d' % (session.user.user_id, real_currency, real_currency_amount, gamebucks_amount))
        return None, None

    # ping an already-completed FB payment to check for chargebacks
    def ping_fbpayment_check_refund(self, session, retmsg, payment_id, result):
        entry = None
        for ent in session.player.history.get('money_purchase_history',[]):
            if ('payment_id' in ent) and str(ent['payment_id']) == str(payment_id):
                entry = ent
                break
        if not entry: return False # never completed

        result = SpinJSON.loads(result) if type(result) is not dict else result
        if len(result['data']) < 1: return False
        payment = result['data'][0]

        refund = False
        refund_type = 'unknown'
        refund_time_string = None
        paid_time_string = None
        paid_amount = 0
        tax_amount = 0
        user_facing_amount = 0
        paid_currency = 'unknown'
        refund_amount = 0
        refund_tax_amount = 0
        refund_currency = 'unknown'
        new_mail = False

        for action in payment['actions']:
            if action['type'] == 'charge' and action['status'] == 'completed':
                paid_time_string = action.get('time_updated', None)
                paid_amount = round(float(action['amount']), 2) # preserve 2 decimal places
                if 'tax_amount' in action and payment.get('tax',None) == 'tax_remitted':
                    tax_amount = round(float(action['tax_amount']), 2)
                    #user_facing_amount = paid_amount + tax_amount
                user_facing_amount = paid_amount
                paid_currency = action['currency']
            if action['type'] in ('chargeback','refund','decline') and action['status'] == 'completed':
                refund = True
                refund_type = action['type']
                refund_time_string = action['time_updated']
                refund_amount = float(action['amount'])
                if 'tax_amount' in action and payment.get('tax',None) == 'tax_remitted':
                    refund_tax_amount = float(action['tax_amount'])
                refund_currency = action['currency']
            elif action['type'] == 'chargeback_reversal' and action['status'] == 'completed':
                refund = False
                gamesite.exception_log.event(server_time, 'ping_fbpayment_post_complete player %d chargeback_reversal payment_id %s' % (session.user.user_id, str(payment_id)))
            elif action['status'] in ('initiated', 'processing'):
                # need to poll again later
                return False
        if refund:
            if entry.get('refunded',0): return False # already refunded
            try:
                usd_equivalent = 0.01*int(100*float(payment['payout_foreign_exchange_rate']) * refund_amount * 0.7 + 0.5) # post FB tax
                item = payment['items'][0]
                spellname, spellarg = self.parse_fbpayment_product_url(item['product'], item['quantity'])
                gamebucks = self.parse_buy_gamebucks_spell_quantity(spellname, spellarg)
                gift_order = entry.get('gift_order', None)
                try:
                    time_struct = time.gmtime(SpinFacebook.parse_fb_time(paid_time_string or refund_time_string))
                except: # don't halt just because time string is unparseable
                    time_struct = time.gmtime(server_time)

                if gamedata['store'].get('enable_refunds', True):
                    gift_refund = 0
                    if gift_order and (gamedata['store'].get('refund_gift_order_from','recipient') == 'recipient'):
                        gift_refund += self.refund_gift_order(session, retmsg, time_struct, str(payment_id), gift_order)
                    if gamebucks > gift_refund:
                        # refund any excess
                        self.refund_gamebucks(session, retmsg, gamebucks - gift_refund, time_struct, str(payment_id), refund_type)
                    entry['refunded'] = 1
                    entry['refunded_at'] = server_time

                    session.increment_player_metric('money_refunded', usd_equivalent)
                    session.increment_player_metric('gamebucks_refunded', gamebucks)

                    gamesite.credits_log.event(server_time, {'user_id':session.user.user_id,
                                                             'summary': session.player.get_denormalized_summary_props('brief'),
                                                             'country_tier': session.player.country_tier,
                                                             'event_name':'1310_order_refunded',
                                                             'code':1310,
                                                             'Billing Amount': usd_equivalent,
                                                             'currency': paid_currency,
                                                             'currency_amount': user_facing_amount,
                                                             'tax_amount': tax_amount,
                                                             'refund_tax_amount': refund_tax_amount,
                                                             'tax_country': payment.get('tax_country',None),
                                                             'payout_foreign_exchange_rate':payment.get('payout_foreign_exchange_rate',-1),
                                                             'quantity': item['quantity'],
                                                             'product': item['product'],
                                                             'request_id': payment.get('request_id',None),
                                                             'payment_id': payment['id'],
                                                             'gift_order': gift_order})
                    new_mail = True
                    dry_run = ''
                else:
                    dry_run = '(dry run) '

                gamesite.exception_log.event(server_time, '%sREFUND (%s) payment %s player %d amount %d gamebucks (balance %d) paid_amount %r (incl. %r tax) paid_currency %s refund_amount %f refund_currency %s gift_order %s' % \
                                             (dry_run, refund_type, str(payment['id']), session.player.user_id, gamebucks, session.player.resources.gamebucks,
                                              paid_amount, tax_amount, paid_currency, refund_amount, refund_currency, repr(gift_order)))

            except:
                gamesite.exception_log.event(server_time, ('ping_fbpayment_post_complete player %d payment_id %s error: ' % (session.user.user_id, str(payment_id)))+traceback.format_exc().strip()) # OK
                pass
        return new_mail

    def refund_gift_order(self, session, retmsg, time_struct, payment_id, gift_order):
        refunded = 0
        original_gift_order = copy.deepcopy(gift_order)
        for gift in gift_order['gifts']:
            if not gift.get('success',False): continue # gift was never sent
            amount = gift['gamebucks']
            gamesite.msg_client.msg_send([session.player.make_system_mail(gamedata['strings']['gift_order_refund_mail'],
                                                                          to_user_id = gift['recipient_user_id'],
                                                                          extra_props = {'gift_order_refund':original_gift_order, 'gamebucks': amount},
                                                                          replacements = {'%SENDER': session.user.get_chat_name(session.player),
                                                                                          '%PAYMENT_ID': payment_id,
                                                                                          '%QUANTITY': str(amount),
                                                                                          '%GAMEBUCKS_NAME': gamedata['store']['gamebucks_ui_name'],
                                                                                          '%DAY': time.strftime('%d %b %Y', time_struct),
                                                                                          '%TIME': time.strftime('%H:%S', time_struct)})])
            session.increment_player_metric('gift_orders_refunded', 1)
            gift['refunded'] = 1
            gift['refunded_at'] = server_time
            refunded += amount
        return refunded

    def refund_gamebucks(self, session, retmsg, gamebucks, time_struct, payment_id, refund_type):
        session.player.resources.gain_gamebucks(-gamebucks, reason='payment_refund')
        template = gamedata['strings'].get('gamebucks_refund_mail_'+refund_type, gamedata['strings']['gamebucks_refund_mail'])
        session.player.mailbox_append(session.player.make_system_mail(template,
                                                                      replacements = {'%PAYMENT_ID': payment_id,
                                                                                      '%QUANTITY': str(gamebucks),
                                                                                      '%GAMEBUCKS_NAME': gamedata['store']['gamebucks_ui_name'],
                                                                                      '%DAY': time.strftime('%d %b %Y', time_struct),
                                                                                      '%TIME': time.strftime('%H:%S', time_struct)}))
        if retmsg is not None: session.player.send_mailbox_update(retmsg)

    def ping_fbpayment_complete(self, d, session, retmsg, request_id, result):
        # note: payment may have been completed asynchronously, look up the request again here and exit if not found in in-flight
        payment_data = session.player.fbpayments_inflight.get(request_id, None)
        if payment_data:
            if gamedata['server']['log_fbpayments'] >= 2:
                gamesite.exception_log.event(server_time, 'ping_fbpayment user %d request_id %s GOT %s' % (session.player.user_id, request_id, result))

            # handles both sync (dict) and async (JSON string) paths
            result = SpinJSON.loads(result) if type(result) is not dict else result
            paid = False
            paid_amount = None
            tax_amount = 0
            user_facing_amount = None

            completed = True
            if len(result['data']) > 0:
                payment = result['data'][0]
                payment_id = payment['id']
                if 'request_id' in payment: # Gift Card orders can come without request_ids
                    assert (payment['request_id'] == request_id)

                # do allow Facebook "test" payment for developers on live server, because they might be Credits Testers flow test payments
                assert (not payment.get('test',False)) or (session.player.is_developer() or (not spin_secure_mode))

                item = payment['items'][0]
                assert int(item['quantity']) == 1 or (payment_data['spellname'] == 'FB_GAMEBUCKS_PAYMENT')

                for action in payment['actions']:
                    if action['type'] == 'charge' and action['status'] == 'completed':
                        paid = True
                        paid_amount = round(float(action['amount']), 2) # preserve 2 decimal places
                        paid_currency = action['currency']
                        if 'tax_amount' in action and payment.get('tax',None) == 'tax_remitted':
                            tax_amount = round(float(action['tax_amount']), 2)
                            #user_facing_amount = round(paid_amount + tax_amount, 2)
                        user_facing_amount = paid_amount
                    elif action['type'] in ('chargeback','refund','decline') and action['status'] == 'completed':
                        paid = False
                    elif action['type'] == 'chargeback_reversal' and action['status'] == 'completed':
                        paid = True
                    elif action['status'] in ('initiated', 'processing'):
                        completed = False # need to poll again later
                        break
            # note: if result['data'] is empty, then drop the inflight request without executing the order
            if completed:
                del session.player.fbpayments_inflight[request_id]
                if paid:
                    # okay to give the stuff now!

                    try:
                        # note: estimate post FB tax order receipts, in USD. This is what will appear in metrics as the receipts amount.
                        # XXX is tax_amount taken before or after the 30% cut?
                        usd_equivalent = 0.01*int(100*float(payment['payout_foreign_exchange_rate']) * (paid_amount * 0.7 - tax_amount) + 0.5)
                        price_description, detail_props = \
                                           Store.execute_order(gamesite.gameapi, session, retmsg, 'fbpayments:'+paid_currency, user_facing_amount,
                                                               payment_data['unit_id'],
                                                               payment_data['spellname'],
                                                               payment_data['spellarg'],
                                                               payment_data['server_time_according_to_client'],
                                                               usd_equivalent = usd_equivalent,
                                                               gift_order = payment_data.get('gift_order',None),
                                                               payment_id = payment_id)

                        descr = Store.get_description(session, payment_data['unit_id'], payment_data['spellname'], payment_data['spellarg'], price_description)

                        admin_stats.add_revenue(session.user.user_id, usd_equivalent, descr)

                        metric_event_coded(session.user.user_id, '1000_billed', {'Billing Amount': usd_equivalent,
                                                                                 'Billing Description': descr,
                                                                                 'country_tier': session.player.country_tier,
                                                                                 'last_purchase_time': session.player.history.get('last_purchase_time',-1),
                                                                                 'prev_largest_purchase': session.player.history.get('largest_purchase',0),
                                                                                 'num_purchases': session.player.history.get('num_purchases',0),
                                                                                 'currency': paid_currency,
                                                                                 'currency_amount': user_facing_amount,
                                                                                 'tax_amount': tax_amount,
                                                                                 'tax_country': payment.get('tax_country',None),
                                                                                 'payout_foreign_exchange_rate':payment.get('payout_foreign_exchange_rate',-1),
                                                                                 'quantity': item['quantity'],
                                                                                 'product': item['product'],
                                                                                 'request_id': request_id,
                                                                                 'payment_id': payment['id'],
                                                                                 'gift_order': payment_data.get('gift_order',None)})

                        gamesite.credits_log.event(server_time, {'user_id':session.user.user_id,
                                                                 'event_name':'1000_billed',
                                                                 'code':1000,
                                                                 'Billing Amount': usd_equivalent,
                                                                 'Billing Description': descr,
                                                                 'summary': session.player.get_denormalized_summary_props('brief'),
                                                                 'country_tier': session.player.country_tier,
                                                                 'last_purchase_time': session.player.history.get('last_purchase_time',-1),
                                                                 'prev_largest_purchase': session.player.history.get('largest_purchase',0),
                                                                 'num_purchases': session.player.history.get('num_purchases',0),
                                                                 'currency': paid_currency,
                                                                 'currency_amount': user_facing_amount,
                                                                 'tax_amount': tax_amount,
                                                                 'tax_country': payment.get('tax_country',None),
                                                                 'payout_foreign_exchange_rate':payment.get('payout_foreign_exchange_rate',-1),
                                                                 'quantity': item['quantity'],
                                                                 'product': item['product'],
                                                                 'request_id': request_id,
                                                                 'payment_id': payment['id'],
                                                                 'gift_order': payment_data.get('gift_order',None)})

                        session.activity_classifier.spent_money(usd_equivalent, descr)

                        if session.player.history.get('money_spent', 0) == 0:
                            session.player.history['time_of_first_purchase'] = server_time

                        if session.user.account_creation_time > 0:
                            daynum = int((server_time - session.user.account_creation_time)/(60*60*24))
                            if 'money_spent_by_day' not in session.player.history:
                                session.player.history['money_spent_by_day'] = {}
                            dict_increment(session.player.history['money_spent_by_day'], str(daynum), usd_equivalent)
                        dict_setmax(session.player.history, 'last_purchase_time', server_time)

                        # new-style player metrics (redundant with old style above)
                        session.increment_player_metric('money_spent', usd_equivalent)
                        session.increment_player_metric('num_purchases', 1)
                        session.setmax_player_metric('largest_purchase', usd_equivalent)

                        if 'money_purchase_history' not in session.player.history:
                            session.player.history['money_purchase_history'] = []

                        session.player.history['money_purchase_history'].append({'time': server_time,
                                                                                 'age': -1 if session.player.creation_time < 0 else (server_time - session.player.creation_time),
                                                                                 'dollar_amount': usd_equivalent,
                                                                                 'currency': paid_currency,
                                                                                 'currency_amount': user_facing_amount,
                                                                                 'tax_amount': tax_amount,
                                                                                 'tax_country': payment.get('tax_country',None),
                                                                                 'payout_foreign_exchange_rate':payment.get('payout_foreign_exchange_rate',-1),
                                                                                 'quantity': item['quantity'],
                                                                                 'product': item['product'],
                                                                                 'request_id': request_id,
                                                                                 'payment_id': payment['id'],
                                                                                 'gift_order': payment_data.get('gift_order',None),
                                                                                 'spellname': str(payment_data['spellname']), 'spellarg': repr(payment_data['spellarg']),
                                                                                 'description': descr})

                        session.send_adnetwork_purchase_event(retmsg, payment['id'], usd_equivalent)
                        session.send_adnetwork_events(retmsg)

                        # update client's version of spend metrics
                        session.player.send_history_update(retmsg)


                    except:
                        gamesite.exception_log.event(server_time, 'FBPAYMENT_ORDER Exception:\n'+''.join(traceback.format_stack()[-5:-1])+traceback.format_exc().strip()) # OK
                        retmsg.append(["ERROR", "ORDER_PROCESSING"])

                        # write the bad fbpayment data to a file for debugging
                        if gamedata['server']['log_fbpayments'] >= 1:
                            tm = time.gmtime(server_time)
                            with open('/tmp/%04d%02d%02d-fbpayment-%s.json' % (tm.tm_year, tm.tm_mon, tm.tm_mday, payment_id), 'w') as fd:
                                SpinJSON.dump(result, fd, pretty=True, newline=True)

                        # XXX refund?

                    # note: send AFTER executing spell, so that player state is already updated
                    if 'tag' in payment_data: retmsg.append(["FBPAYMENT_ORDER_ACK", payment_data['tag'], True])

        # fire deferred completion
        if d: d.callback(True)

    def retrieve_facebook_credit_info_start(self):
        if self.credit_info_request_outstanding:
            return
        if not SpinConfig.config['enable_facebook']:
            return

        # Note: as of FB API v2.1, fql is no longer supported, so this won't work.
        # This code is kept here for historical reference only.
        # Do not re-enable the facebook credit balance/gamer_status query.

        if not gamedata['server']['enable_facebook_credit_balance_query']:
            return
        if not SpinConfig.config.has_key('facebook_app_access_token'):
            gamesite.exception_log.event(server_time, 'config.json is missing facebook_app_access_token!')
            return
        query = 'SELECT credit_balance,gamer_status'
        query += ' FROM standard_user_info WHERE uid = '+self.facebook_id
        query_tok = urllib.urlencode(dict(query = query, access_token = SpinConfig.config['facebook_app_access_token']))
        request_url = 'https://api.facebook.com/method/fql.query?'+query_tok

        self.credit_info_request_outstanding = True

        def on_success(result):
            self.credit_info_request_outstanding = False
            self.retrieve_facebook_credit_info_complete(result)

        def on_error(reason):
            self.credit_info_request_outstanding = False

        gamesite.AsyncHTTP_Facebook.queue_request(server_time, request_url, on_success, error_callback = on_error)

    @admin_stats.measure_latency('retrieve_facebook_credit_info_complete')
    def retrieve_facebook_credit_info_complete(self, result):
        dom = xml.dom.minidom.parseString(result)
        try:
            self.fb_gamer_status = int(dom.getElementsByTagName('gamer_status')[0].childNodes[0].data)
        except:
            pass # self.fb_gamer_status = -1

        try:
            self.fb_credit_balance = int(dom.getElementsByTagName('credit_balance')[0].childNodes[0].data)
        except:
            pass # self.fb_credit_balance = -1

        if self.fb_credit_balance != -1:
            # update the credit balance for any active sessions
            if self.active_session:
                self.active_session.player.resources.facebook_credits = self.fb_credit_balance
                self.active_session.deferred_player_state_update = True
                self.active_session.queue_flush_outgoing_messages()

        #print 'obtained gamer_status',self.fb_gamer_status,'credit_balance',self.fb_credit_balance,'for user',self.user_id,'fbid',self.facebook_id

    # retrieve friend invites and gifts from other Facebookers
    def retrieve_facebook_requests_start(self):
        if not SpinConfig.config['enable_facebook']:
            return
        ver = SpinFacebook.api_version_number('apprequests')
        if ver >= 2.0:
            self.retrieve_facebook_requests_start_v2() # new /apprequests method
        else:
            self.retrieve_facebook_requests_start_v1() # old fql method

    def retrieve_facebook_requests_start_v1(self):
        assert self.fb_oauth_token
        query = 'SELECT recipient_uid, request_id, app_id, sender_uid, message, data, created_time'
        query += ' FROM apprequest WHERE recipient_uid = me() AND app_id = '+SpinConfig.config['facebook_app_id']
        query_tok = urllib.urlencode(dict(query = query, access_token = self.fb_oauth_token)) # SpinConfig.config['facebook_app_access_token'] ?
        request_url = 'https://api.facebook.com/method/fql.query?'+query_tok
        gamesite.AsyncHTTP_Facebook.queue_request(server_time, request_url, lambda result: self.retrieve_facebook_requests_complete_v1(result))

    @admin_stats.measure_latency('AsyncHTTP(facebook_apprequests_v1)')
    def retrieve_facebook_requests_complete_v1(self, result):

        dom = xml.dom.minidom.parseString(result)

        def getText(req, name):
            arg = req.getElementsByTagName(name)
            nodelist = arg[0].childNodes
            rc = []
            for node in nodelist:
                if node.nodeType == node.TEXT_NODE:
                    rc.append(node.data)
            return ''.join(rc)

        for req in dom.getElementsByTagName('apprequest'):
            created_time = int(getText(req, 'created_time'))
            my_data = getText(req, 'data')
            #message_text = getText(req, 'message')
            sender_fb_id = getText(req, 'sender_uid')
            #my_app_id = getText(req, 'app_id')
            request_id = getText(req, 'request_id')

            # print 'user', self.user_id, 'received Facebook app request', request_id, {'created_time':created_time, 'data':my_data, 'message_text':message_text, 'sender_fb_id':sender_fb_id}

            # dispatch to different types of requests based on my_data
            if my_data == 'friend_invite':
                sender_id = gamesite.social_id_table.social_id_to_spinpunch('fb'+sender_fb_id, False)
                if sender_id is None:
                    sender_id = -1

                props = {'sender_fb_id':sender_fb_id, 'sender_user_id': sender_id, 'facebook_request_id':request_id.split('_')[0], 'created_time':created_time}
                metric_event_coded(self.user_id, '7120_friend_invite_accepted', props.copy())

                # record acquisition event
                props['type'] = 'facebook_friend_invite'
                self.update_acquisition_data(props, None)

            elif my_data == 'gift':
                # this is handled server-side upon login with dbclient gift_receive
                pass
            else:
                print 'unhandled Facebook app request type', my_data

            # tell Facebook to delete the request (even if processing it caused an error)
            delete_url = SpinFacebook.versioned_graph_endpoint('apprequest', str(request_id))+'?'+urllib.urlencode(dict(access_token=self.fb_oauth_token, method='delete')) # SpinConfig.config['facebook_app_access_token']?
            gamesite.AsyncHTTP_Facebook.queue_request(server_time, delete_url, lambda x: None)

    def retrieve_facebook_requests_start_v2(self):
        request_url = SpinFacebook.versioned_graph_endpoint('apprequests', '%s/apprequests' % self.facebook_id) + \
                                                 '?'+ urllib.urlencode(dict(access_token = SpinConfig.config['facebook_app_access_token']))
        gamesite.AsyncHTTP_Facebook.queue_request(server_time, request_url, lambda result: self.retrieve_facebook_requests_paged_v2(result))

    def retrieve_facebook_requests_paged_v2(self, result, buffer = None):
        if buffer is None:
            buffer = []

        result = SpinJSON.loads(result)

        if result:
            buffer += result['data']

        if result and ('paging' in result) and ('next' in result['paging']) and \
           (('count' not in result) or (len(buffer) < int(result['count']))):
            # fetch next page
            gamesite.AsyncHTTP_Facebook.queue_request(server_time, result['paging']['next'],
                                                      lambda result: self.retrieve_facebook_requests_paged_v2(result, buffer = buffer))
        else:
            # it's complete now
            self.retrieve_facebook_requests_complete_v2(buffer)

    def retrieve_facebook_requests_complete_v2(self, request_list):
        to_delete = [] # list of request IDs to delete

        for req in request_list:
            if gamedata['server'].get('log_fb_apprequests',0) >= 2:
                gamesite.exception_log.event(server_time, 'player %s got FB apprequest %s' % (self.user_id, repr(req)))
            my_data = req.get('data', None)

            # dispatch to different types of requests based on my_data
            if my_data == 'friend_invite':
                sender_id = gamesite.social_id_table.social_id_to_spinpunch('fb'+req['from']['id'], False)
                if sender_id is None:
                    sender_id = -1

                props = {'sender_fb_id':req['from']['id'], 'sender_user_id': sender_id, 'facebook_request_id':req['id'].split('_')[0], 'created_time':req['created_time']}
                metric_event_coded(self.user_id, '7120_friend_invite_accepted', props.copy())

                # record acquisition event
                props['type'] = 'facebook_friend_invite'
                self.update_acquisition_data(props, None)

            elif my_data == 'gift':
                # reception of gifts is handled server-side upon login with dbclient gift_receive - the underlyting apprequest actually does nothing!
                pass
            elif my_data is None:
                # this is a "naked" Facebook request that's just a text message
                pass
            else:
                gamesite.exception_log.event(server_time, 'player %d received unhandled Facebook apprequest %s' % (self.user_id, repr(req)))

            # tell Facebook to delete the request (even unhandled ones)
            to_delete.append(req['id'])

        if to_delete:
            if gamedata['server'].get('log_fb_apprequests',0) >= 2:
                gamesite.exception_log.event(server_time, 'player %s deleting %d FB apprequests' % (self.user_id, len(to_delete)))

            batch = [{'method':'DELETE', 'relative_url': str(id)} for id in to_delete]
            limit = 50 # facebook limits batches to 50
            batches = [batch[i:i+limit] for i in xrange(0, len(batch), limit)]
            for this_batch in batches:
                delete_url = SpinFacebook.versioned_graph_endpoint('apprequests', '') + \
                             '?' + urllib.urlencode(dict(access_token=SpinConfig.config['facebook_app_access_token'], batch=SpinJSON.dumps(this_batch)))
                gamesite.AsyncHTTP_Facebook.queue_request(server_time, delete_url, lambda x: None, method = 'POST')

    def create_fb_open_graph_action(self, action, params):
        if not SpinConfig.config['enable_facebook']:
            gamesite.exception_log.event(server_time, 'Facebook disabled: create_fb_open_graph_action(%s, %s)' % (action, repr(params)))
            return

        if self.active_session and \
           self.active_session.player.get_any_abtest_value('enable_fb_open_graph', gamedata['enable_fb_open_graph']) and \
           ((not gamedata['fb_open_graph'].get('developer_only', False)) or self.is_developer()) and \
           ((not gamedata['fb_open_graph'].get('check_permissions', False)) or (self.active_session.player.facebook_permissions and \
                                                                                'publish_actions' in self.active_session.player.facebook_permissions)):
            config = gamedata['fb_open_graph'][action]
            if config['enable']:

                params = params.copy()
                params['access_token'] = SpinConfig.config['facebook_app_access_token']
                params['ref'] = 'og_%s__%d' % (action, self.user_id)
                query = urllib.urlencode(params)
                url = SpinFacebook.versioned_graph_endpoint('open_graph', self.facebook_id+'/'+SpinConfig.config['facebook_app_namespace']+':'+action)

                if gamedata['server']['log_fb_open_graph']:
                    gamesite.exception_log.event(server_time, 'create_fb_open_graph_action("%s", %s)' % (url, repr(params)))
                gamesite.AsyncHTTP_Facebook.queue_request(server_time, url, lambda result: None, method = 'POST', postdata = query)

    def create_fb_open_graph_action_building_upgrade(self, object):
        if gamedata['fb_open_graph']['upgrade_building']['enable'] and \
           (gamedata['fb_open_graph']['upgrade_building'].get('enable_'+object.spec.name,False) or \
            gamedata['fb_open_graph']['upgrade_building'].get('enable_all',False)):
            self.create_fb_open_graph_action('upgrade_building', {OGPAPI.object_type('spec_building'): OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('spec_building'),
                                                                                                                                            'spec': object.spec.name}),
                                                                  'level': object.level})
    def create_fb_open_graph_action_unlock_unit(self, spec_name):
         if gamedata['fb_open_graph']['unlock_unit']['enable'] and \
           (gamedata['fb_open_graph']['unlock_unit'].get('enable_'+spec_name,False) or \
            gamedata['fb_open_graph']['unlock_unit'].get('enable_all',False)):
             self.create_fb_open_graph_action('unlock_unit', {OGPAPI.object_type('spec_unit'): OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('spec_unit'),
                                                                                                                                    'spec': spec_name})
                                                              })

    # try to obtain the user's Facebook profile, friends and likes
    # this is cached in user_table; if the cache is empty or stale,
    # send asynchronous HTTP requests to Facebook to get the data

    def retrieve_facebook_info(self, session):
        if (self.facebook_profile is not None) and type(self.facebook_profile) == dict and len(self.facebook_profile) > 0 and \
           (self.facebook_friends is not None) and \
           (self.facebook_likes is not None) and \
           (self.facebook_currency is not None) and \
           (self.facebook_first_name is not None) and \
           (self.active_session.player.facebook_permissions is not None) and \
           ((server_time - self.fb_hit_time) < gamedata['server'].get('facebook_cache_lifetime', 14400)):
            # data is present in cache and fresh enough to use
            return

        self.retrieve_facebook_info_start(session)

    # launch the asynchronous HTTP requests to Facebook's servers
    def retrieve_facebook_info_start(self, session):
        assert self.fb_oauth_token
        session_tok = self.fb_oauth_token
        session_tok_qs = urllib.urlencode(dict(access_token=session_tok))
        app_tok = SpinConfig.config['facebook_app_access_token']
        app_tok_qs = urllib.urlencode(dict(access_token=app_tok))

        #endpoint = 'me'
        endpoint = str(self.facebook_id)

        # mysterious Facebook behavior - some graph calls require the
        # APP access token, and some require the OAUTH_TOKEN passed in
        # for the login session

        # this is a bad hack just for Thunder Run while it's not whitelisted in the U.S. - we use the app token rather than the session token
        tok_qs = app_tok_qs if SpinConfig.config.get('use_facebook_app_access_token_for_user_data',False) else session_tok_qs

        profile_url = SpinFacebook.versioned_graph_endpoint('user', endpoint)+'?fields=id,birthday,email,name,first_name,last_name,gender,locale,third_party_id,currency,is_eligible_promo,permissions&'+tok_qs # app_tok_qs results in no birthday info and no is_eligible_promo data
        friends_url = SpinFacebook.versioned_graph_endpoint('friend', endpoint+'/friends')+'?limit=500&offset=0&'+tok_qs # app_tok_qs
        likes_url = SpinFacebook.versioned_graph_endpoint('like', endpoint+'/likes')+'?limit=500&offset=0&'+tok_qs # app_tok_qs

        # keep track of outstanding requests
        self.fb_retrieve_semaphore = set(['profile', 'friends', 'likes'])

        if not SpinConfig.config['enable_facebook']: # mock path
            reactor.callLater(2, functools.partial(self.retrieve_facebook_info_receive, session, 'profile', open("test-facebook-profile.txt").read())) # delay to expose timing bugs
            reactor.callLater(2, functools.partial(self.retrieve_facebook_info_receive_paged, session, 'friends', [], open("test-facebook-friends.txt").read())) # delay to expose timing bugs
            reactor.callLater(2, functools.partial(self.retrieve_facebook_info_receive_paged, session, 'likes', [], open("test-facebook-likes.txt").read())) # delay to expose timing bugs
        else:
            gamesite.AsyncHTTP_Facebook.queue_request(server_time, profile_url, functools.partial(self.retrieve_facebook_info_receive, session, 'profile'))
            gamesite.AsyncHTTP_Facebook.queue_request(server_time, friends_url, functools.partial(self.retrieve_facebook_info_receive_paged, session, 'friends', []))
            gamesite.AsyncHTTP_Facebook.queue_request(server_time, likes_url, functools.partial(self.retrieve_facebook_info_receive_paged, session, 'likes', []))

    def retrieve_facebook_info_receive_paged(self, session, dest, buffer, raw_result):
        result = SpinJSON.loads(raw_result)

        buffer += result['data']

        if ('paging' in result) and ('next' in result['paging']) and \
           (('count' not in result) or (len(buffer) < int(result['count']))):
            # fetch next page
            gamesite.AsyncHTTP_Facebook.queue_request(server_time, result['paging']['next'], functools.partial(self.retrieve_facebook_info_receive_paged, session, dest, buffer))
        else:
            # it's complete now
            self.retrieve_facebook_info_receive(session, dest, None, result = buffer)

    def facebook_permissions_ok(self, wanted):
        if self.active_session.player.facebook_permissions is None: return False
        for perm in wanted.split(','):
            if perm not in self.active_session.player.facebook_permissions:
                return False
        return True

    # this callback is called for each URL downloaded asynchronously
    @admin_stats.measure_latency('AsyncHTTP(facebook_profile/friends/likes)')
    def retrieve_facebook_info_receive(self, session, dest, raw_result, result = None):

        self.fb_retrieve_semaphore.remove(dest)
        if len(self.fb_retrieve_semaphore) == 0:
            # all complete (set this before any possible parsing errors to avoid getting "stuck")
            self.fb_hit_time = server_time

        if result is not None:
            pass # caller supplied pre-parsed result
        else:
            result = SpinJSON.loads(raw_result)

        if dest == 'friends':
            self.facebook_friends = result
            self.populate_friends_who_play(session)

        elif dest == 'likes':
            self.facebook_likes = result
            session.player.user_facebook_likes = self.facebook_likes

        elif dest == 'profile':
            if type(result) == dict and len(result) > 0:
                self.facebook_profile = result

                # only check for promo on non-cached result
                if ('is_eligible_promo' in result) and bool(result['is_eligible_promo']) and \
                   session.player.get_any_abtest_value('enable_payer_promo', gamedata['enable_payer_promo']) and \
                   session.player.get_any_abtest_value('currency', gamedata['currency']) == 'gamebucks' and \
                   (server_time - session.player.last_payer_promo) >= gamedata['payer_promo_interval'] and \
                   session.player.tutorial_state == "COMPLETE" and \
                   session.player.history.get('logged_in_times',0) >= gamedata['payer_promo_min_logins']:
                    self.offer_payer_promo(session)

            else:
                gamesite.exception_log.event(server_time, ('Facebook sent bad profile data for user %d: ' % self.user_id)+repr(raw_result))
                # note: continue to use previous profile data

            # set safe defaults in case of failure
            self.facebook_currency = {'user_currency': 'Facebook Credits', 'currency_exchange': 1, 'currency_exchange_inverse': 1, 'currency_offset': 1}
            session.player.facebook_permissions = []

            # pull vital fields out of the cached facebook_profile
            if self.facebook_profile:
                if 'name' in self.facebook_profile:
                    self.facebook_name = self.facebook_profile['name']
                if 'first_name' in self.facebook_profile:
                    self.facebook_first_name = self.facebook_profile['first_name']
                else:
                    self.facebook_first_name = self.facebook_name.split(' ')[0]

                if 'birthday' in self.facebook_profile:
                    try:
                        m, d, y = map(int, self.facebook_profile['birthday'].split('/'))
                        self.birthday = SpinConfig.cal_to_unix((y,m,d))
                    except Exception:
                        gamesite.exception_log.event(server_time, 'could not parse player %d FB facebook_profile birthday "%s"' % (self.user_id, self.facebook_profile['birthday']))
                        pass
                if 'currency' in self.facebook_profile:
                    self.facebook_currency = self.facebook_profile['currency']
                if 'third_party_id' in self.facebook_profile:
                    self.facebook_third_party_id = self.facebook_profile['third_party_id']
                if ('permissions' in self.facebook_profile) and self.active_session and ('data' in self.facebook_profile['permissions']) and (len(self.facebook_profile['permissions']['data']) > 0):
                    def parse_facebook_permissions(data_list):
                        if 'permission' in data_list[0]: # current API
                            return [x['permission'] for x in data_list if x.get('status',None) == 'granted']
                        else: # legacy data
                            return [k for k,v in data_list[0].iteritems() if v]
                    session.player.facebook_permissions = parse_facebook_permissions(self.facebook_profile['permissions']['data'])
            else:
                self.facebook_name = '(Facebook API error)'
                self.facebook_first_name = 'Unknown(fbapierr)'

            session.send([["FACEBOOK_NAME_UPDATE", self.facebook_name]])
            session.send([["PLAYER_UI_NAME_UPDATE", self.get_ui_name(session.player)]])
            session.send([["FACEBOOK_CURRENCY_UPDATE", self.facebook_currency]])

            if self.facebook_third_party_id:
                session.send([["FACEBOOK_THIRD_PARTY_ID_UPDATE", self.facebook_third_party_id]])

            # see if we need to ask for more permissions
            want_permissions = SpinConfig.config.get('facebook_auth_scope', 'email')
            if gamedata['server'].get('gameserver_check_auth_scope', False) and \
               (not self.facebook_permissions_ok(want_permissions)) and \
               (server_time - session.player.last_permissions_request) >= gamedata['permissions_request_interval']:
                session.player.last_permissions_request = server_time
                metric_event_coded(self.user_id, '0035_request_permission_add_scope', {'scope': want_permissions, 'method': 'gameserver'})
                session.send([["INVOKE_FACEBOOK_AUTH", want_permissions,
                               'Permission Requested',
                               'Commander, to show your scores on Facebook we need additional authorization.']])


    def offer_payer_promo(self, session):
        session.player.last_payer_promo = server_time
        currency_url = OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('gamebucks')})
        session.increment_player_metric('payer_promo_offered', 1)
        metric_event_coded(session.user.user_id, '4500_payer_promo_offered', {'currency_url':currency_url})
        session.send([["OFFER_PAYER_PROMO", currency_url]])

    def log_adnetwork_event(self, api, props):
        props['account_creation_time'] = self.account_creation_time

        # special case for skynet - write dict version of the target for queries
        if (api == 'fb_conversion_pixels'):
            if self.acquisition_ad_skynet:
                props['dtgt'] = dict((x[0], x[1:]) for x in self.acquisition_ad_skynet.split('_') if len(x) >= 2)

        gamesite.do_log_adnetwork_event(api, props)


# mapping of (player ID, game_id) tuples to Player objects

def write_json_field(pyobj, jsonobj, field):
    name, coerce_write, coerce_read = field
    val = getattr(pyobj, name)
    if coerce_write: val = coerce_write(val)
    jsonobj[name] = val

def read_json_field(jsonobj, pyobj, field, player = None, observer = None):
    assert player
    assert observer
    name, coerce_write, coerce_read = field
    if jsonobj.has_key(name):
        val = jsonobj[name]
        if coerce_read: val = coerce_read(player, observer, val)
        setattr(pyobj, name, val)
        del jsonobj[name]

class PlayerTable:
    PLAYER_WRONLY_FIELDS = [('user_id', int, int)] # for reference/recovery only, not used as database key

    PLAYER_RW_FIELDS = [
              ('generation', None, None),
              ('read_only', None, None),
              ('alias', None, None),
              ('title', None, None), # string value of current title to use
              # ('unlocked_titles', None, None), # dictionary of unlocked titles
              ('facebook_permissions', None, None), # needs to be in player rather than user because it is app-specific
              ('last_fb_notification_time', None, None),
              ('fbpayments_inflight', None, None),
              ('player_preferences', None, None),
              ('chat_seen', None, None),
              ('battle_history_seen', None, None),

              # note: ordering of abtests -> tech -> player_auras -> base objects is important!
              # because A/B tests might alter tech specs, and tech might alter auras, and auras alter my_base reconstitution
              ('abtests', None, None),
              ('tech', None, lambda player, observer, tech: player.load_tech_and_init_stattab(observer, tech)),
              ('player_auras', None, lambda player, observer, auras: player.load_auras_and_init_stattab(observer, auras)),

              ('home_region', None, None),
              ('squads', None, None),
              ('travel_state', None, None),

              ('resources', lambda res: res.persist_state(),
               lambda player, observer, data: ResourceState.create_from_persisted(player, data)),

              ('loot_buffer', None, None),
              ('donated_units', None, None),
              ('inventory', None, None),
              ('mailbox', None, None),
              ('map_bookmarks', None, None),
              ('protection_attack_count', None, None), # refers to home base only
              ('protection_attack_time', None, None), # refers to home base only

              ('completed_quests', None,
               lambda player, observer, data: data if type(data) == dict else dict([(name, {'count':1}) for name in data])),
              ('achievements', None, None),
              ('tutorial_state', None, None),
              ('history', None, None),
              ('cooldowns', None, None),
              ('scores2', lambda s: s.serialize(), lambda player, observer, data: Scores2.CurScores(data)),
              ('idle_check', lambda s: s.serialize(), lambda player, observer, data: IdleCheck.IdleCheck(gamedata['server']['idle_check'], data, server_time)),
              ('creation_time', None, None),
              ('lottery_slate', None, None),
              ('lottery_slate_weights', None, None),
              ('ladder_match', None, None),
              ('ladder_match_history', None, None),

              ('last_gift_prompt', None, None),
              ('last_friend_invite_prompt', None, None),
              ('last_iron_deposit', None, None),
              ('last_motd', None, None),
              ('last_rank_update', None, None),
              ('last_fb_score_update', None, None),
              ('last_daily_attack', None, None),
              ('last_payer_promo', None, None),
              ('last_permissions_request', None, None),
              ('attack_cooldown_start', None, None),
              ('received_gifts', None, None),
              ('lock_state', None, None),
              ('lock_time', None, None),
              ('chat_official', None, None),
              ('lockout_until', None, None),
              ('lockout_count', None, None),
              ('last_lockout_end', None, None),
              ('last_lockout_check', None, None),
              ('lockout_message', None, None),
              ('login_pardoned_until', None, None),
              ('banned_until', None, None),
              ('isolate_pvp', None, None),
              ('possible_alt_accounts', None, None),
              ('known_alt_accounts', None, None),

              ('battle_history', None, None),
              ('recent_attacks', None, None),

              ('unit_repair_queue', None, None),
              ('unit_equipment', None, None),
              ]

    # old fields that should be deleted when seen
    PLAYER_DELETE_FIELDS = { 'sent_gifts': 1 }

    BASE_RW_FIELDS = [
                      ('base_id', None, None),
                      ('base_region', None, None),
                      ('base_map_loc', None, None),
                      ('base_type', None, None),
                      ('base_climate', None, None),
                      ('base_ncells', None, None),
                      ('base_ui_name', None, None),
                      ('base_creation_time', None, None),
                      ('base_creator_id', None, None),
                      ('base_landlord_id', None, None),
                      ('base_last_attack_time', None, None),
                      ('base_times_attacked', None, None),
                      ('base_times_conquered', None, None),
                      ('base_last_conquer_time', None, None),
                      ('base_last_landlord_id', None, None),
                      ('base_richness', None, None),
                      ('base_template', None, None),
                      ('base_icon', None, None),
                      ('base_expire_time', None, None),
                      ('base_size', None, None),
                      ('deployment_buffer', None, None),
                      ('base_resource_loot', None, None),
                      ('my_base',
                       lambda mybase: [x.persist_state() for x in mybase],
                       lambda player, observer, data: filter(lambda x: x is not None, [reconstitute_object(observer, player, state, context='PlayerTable:parse(home)') for state in data])
                       ),
                      ]


    def __init__(self):
        # keep track of current in-flight async I/O
        self.current_loads = {} # list of [AsyncRead1,AsyncRead2,...]
        self.current_stores = {} # list of [generation1,generation2,...]

    def store_async(self, player, cb, fsync, reason):
        player.generation += 1

        if player.user_id in self.current_stores:
            # this is generally bad, because with two stores in flight, the generation number of the store that will "win" in S3 is undefined
            gamesite.exception_log.event(server_time, ('PlayerTable: store_async while player %d I/O already in flight: ' % player.user_id)+repr(self.current_stores[player.user_id]))
        else:
            self.current_stores[player.user_id] = []

        self.current_stores[player.user_id].append(player.generation)

        def finisher(self, user_id, generation, cb):
            if user_id in self.current_stores:
                if generation in self.current_stores[user_id]:
                    self.current_stores[user_id].remove(generation)
                else:
                    gamesite.exception_log.event(server_time, 'PlayerTable: store_async completed but %d gen %d I/O not in flight' % (user_id, generation))
                if len(self.current_stores[user_id]) == 0:
                    del self.current_stores[user_id]
            else:
                gamesite.exception_log.event(server_time, 'PlayerTable: store_async completed but %d gen %d I/O not in flight' % (user_id, generation))

            return cb()

        io_system.async_write_player(player.user_id, self.unparse(player), functools.partial(finisher, self, player.user_id, player.generation, cb), fsync)

    class AsyncRead:
        def __init__(self, parent, observer, user_id, live, cb):
            self.parent = parent
            self.observer = observer
            self.user_id = user_id
            self.live = live
            self.cblist = [cb,]
        def remove_from_current_loads(self):
            assert self in self.parent.current_loads[self.user_id]
            self.parent.current_loads[self.user_id].remove(self)
            if len(self.parent.current_loads[self.user_id]) == 0: del self.parent.current_loads[self.user_id]
        def fail(self, reason):
            self.remove_from_current_loads()
            for cb in self.cblist: cb(False, None)
        def success(self, buf):
            self.remove_from_current_loads()
            success = True
            if buf == 'NOTFOUND':
                ret = None
            else:
                try:
                    ret = self.parent.parse(buf, self.observer, self.user_id, self.live)
                except:
                    gamesite.exception_log.event(server_time, 'Error reading playerdb for user %d: %s' % (self.user_id, traceback.format_exc().strip())) # OK
                    ret = None
                    success = False
            for cb in self.cblist: cb(success, ret)

    def lookup_async(self, observer, user_id, live, cb, reason):
        if user_id not in self.current_loads:
            self.current_loads[user_id] = []
        aread = self.AsyncRead(self, observer, user_id, live, cb)
        self.current_loads[user_id].append(aread)
        io_system.async_read_player(user_id, aread.success, aread.fail)

    def jsonize(self, player):
        jsonobj = {}
        for name, val in player.foreign_data.iteritems():
            jsonobj[name] = val

        for field in self.PLAYER_WRONLY_FIELDS + self.PLAYER_RW_FIELDS:
            write_json_field(player, jsonobj, field)
        for field in self.BASE_RW_FIELDS:
#            if field[0] == 'my_base':
#                # ideally, if all server code is correct, this I/O should be unnecessary
#                player.my_home.nosql_pluck('PlayerTable:unparse(XXXunnecessary)') # should be done from drop_object()
#                player.my_home.nosql_plant('PlayerTable:unparse(XXXunnecessary)')
            write_json_field(player.my_home, jsonobj, field)
        return jsonobj

    def unparse(self, player):
        with admin_stats.latency_measurer('player_table:jsonize'):
            jsonobj = self.jsonize(player)

        with admin_stats.latency_measurer('player_table:serialize'):
            ret = SpinJSON.dumps(jsonobj, pretty = True, newline = True, size_hint = 1024*1024, double_precision = 5)
        return ret

    def parse(self, buf, observer, user_id, live):
        jsonobj = None
        try:
            with admin_stats.latency_measurer('player_table:deserialize'):
                jsonobj = SpinJSON.loads(buf)
        except:
            pass

        if not jsonobj:
            return None

        with admin_stats.latency_measurer('player_table:parse'):

            if live:
                player = LivePlayer(user_id)
            else:
                player = ProxyPlayer(user_id)

            if observer is None: observer = player

            if jsonobj.has_key('user_id') and jsonobj['user_id'] != user_id:
                gamesite.exception_log.event(server_time, 'warning: PlayerTable lookup for id %d has data from id %d' % (user_id, jsonobj['user_id']))

            for field in self.PLAYER_RW_FIELDS:
                read_json_field(jsonobj, player, field, player = player, observer = observer)
            for field in self.BASE_RW_FIELDS:
                read_json_field(jsonobj, player.my_home, field, player = player, observer = observer)

    #            if field[0] == 'my_base':
    #                old_base = player.my_home.my_base
    #                new_base = player.my_home.nosql_read(observer, player, 'PlayerTable:parse')
    #                if new_base is not None:
    #                    # verify that contents are identical
    #                    if len(old_base) != len(new_base):
    #                        gamesite.exception_log.event(server_time, 'PlayerTable: nosql_read for user %d returned %d objects but my_base had %d' % \
    #                                                     (user_id, len(new_base), len(old_base)))
    #                    #player.my_home.my_base = new_base


            # save all unrecognized data as foreign_data
            for name, coerce_write, coerce_read in self.PLAYER_WRONLY_FIELDS:
                if jsonobj.has_key(name): del jsonobj[name]

            for name, val in jsonobj.iteritems():
                if name in self.PLAYER_DELETE_FIELDS: continue
                if gamedata['server'].get('log_foreign_data', False):
                    gamesite.exception_log.event(server_time, 'unrecognized playerdb data ' + name + ': ' + repr(val))
                player.foreign_data[name] = val

        # init stattab AGAIN so that stuff that depends on home base contents (e.g. repair speed) gets updated properly
        player.recalc_stattab(observer)

        return player



player_table = PlayerTable()

def safe_unlink(filename):
    try:
        os.unlink(filename)
    except:
        pass

# similar to PlayerTable, but this is a cut-down version for maintaining the temporary
# state of damaged AI bases. Basically like PvE instances in WoW...
class AIInstanceTable:
    def delete_async(self, user_id, ai_id, cb):
        io_system.async_delete_aistate(user_id, game_id, ai_id, cb)

    @admin_stats.measure_latency('ai_instance_table:parse')
    def parse(self, buf, observer, ai_id):
        jsonobj = None

        try:
            jsonobj = SpinJSON.loads(buf)
        except:
            pass

        if not jsonobj:
            return None, False # no AI present

        # has it expired?
        if server_time >= jsonobj['expiration_time']:
            return None, True

        player = ProxyPlayer(ai_id)
        player.expiration_time = jsonobj['expiration_time']
        player.resources.unpersist_state(jsonobj['resources'])
        player.tech = jsonobj.get('tech',{})
        player.player_auras = jsonobj.get('player_auras', [])
        player.recalc_stattab(observer)
        player.my_home.deployment_buffer = jsonobj.get('deployment_buffer', 1)
        if 'unit_equipment' in jsonobj: player.unit_equipment = jsonobj['unit_equipment']
        if 'base_climate' in jsonobj: player.my_home.base_climate = jsonobj['base_climate']
        if 'base_ncells' in jsonobj: player.my_home.base_ncells = jsonobj['base_ncells']
        if 'base_richness' in jsonobj: player.my_home.base_richness = jsonobj['base_richness']
        if 'base_size' in jsonobj: player.my_home.base_size = jsonobj['base_size']
        if 'ai_generation' in jsonobj: player.ai_generation = jsonobj['ai_generation']
        if 'base_creation_time' in jsonobj: player.my_home.base_creation_time = jsonobj['base_creation_time']
        if 'base_times_attacked' in jsonobj: player.my_home.base_times_attacked = jsonobj['base_times_attacked']
        if 'base_resource_loot' in jsonobj: player.my_home.base_resource_loot = jsonobj['base_resource_loot']

        for state in jsonobj['my_base']:
            obj = reconstitute_object(observer, player, state, context='AIInstanceTable:parse')
            if not obj: continue
            player.home_base_add(obj)

        player.read_only = True # never write into the "real" PlayerTable
        player.my_home.init_production(player)

        return player, False

    class AsyncRead:
        def __init__(self, parent, observer, user_id, ai_id, cb):
            self.parent = parent
            self.observer = observer
            self.user_id = user_id
            self.ai_id = ai_id
            self.cb = cb
        def fail(self, reason): self.cb(False, None)
        def success(self, buf):
            if buf == 'NOTFOUND':
                ret = None
            else:
                ret, has_expired = self.parent.parse(buf, self.observer, self.ai_id)
                if has_expired:
                    # trash the file
                    self.parent.delete_async(self.user_id, self.ai_id, lambda: None)
            self.cb(True, ret)

    def lookup_async(self, observer, user_id, game_id, ai_id, cb, reason):
        request = self.AsyncRead(self, observer, user_id, ai_id, cb)
        io_system.async_read_aistate(user_id, game_id, ai_id, request.success, request.fail)

    def store_async(self, user_id, ai_id, player, cb, fsync, reason):
        # special case - never store Lion Stone state to avoid bloating aistate storage
        # (client is only allowed to visit once during the tutorial)
        if ai_id == LION_STONE_ID:
            reactor.callLater(0, cb)
            return
        buf = self.unparse(ai_id, player)
        io_system.async_write_aistate(user_id, game_id, ai_id, buf, cb, fsync)

    def unparse(self, ai_id, player):
        player.ai_generation += 1
        jsonobj = { 'expiration_time': player.expiration_time,
                    'ai_generation': player.ai_generation,
                    'my_base': [x.persist_state() for x in player.home_base_iter() if (x is not None)],
                    'resources': player.resources.persist_state(),
                    'tech': player.tech,
                    'unit_equipment': player.unit_equipment,
                    'deployment_buffer': player.my_home.deployment_buffer,
                    'base_climate': player.my_home.base_climate,
                    'base_ncells': player.my_home.base_ncells,
                    'base_richness': player.my_home.base_richness,
                    'base_size': player.my_home.base_size,
                    'base_creation_time': player.my_home.base_creation_time,
                    'base_times_attacked': player.my_home.base_times_attacked,
                    'user_id': ai_id }
        if player.my_home.base_resource_loot: jsonobj['base_resource_loot'] = player.my_home.base_resource_loot

        with admin_stats.latency_measurer('ai_instance_table:serialize'):
            ret = SpinJSON.dumps(jsonobj, pretty = True, newline = True, size_hint = 65536, double_precision = 5)

        return ret

    def collect_garbage(self):
        io_system.collect_aistate_garbage()

    # perform any necessary one-time initialization the first time a fresh AI instance is created for a player
    def init_fresh_instance(self, ai_player, observer):
        base_data = gamedata['ai_bases_server']['bases'][str(ai_player.user_id)]

        # perform auto-leveling of AI base buildings and units
        if base_data.get('auto_level', False):
            ai_player.auto_level_ai(observer)

        # apply base_resource_loot_randomness
        loot_randomness = base_data.get('base_resource_loot_randomness', 0)
        if loot_randomness != 0 and ai_player.my_home.base_resource_loot:
            for res in ai_player.my_home.base_resource_loot:
                ai_player.my_home.base_resource_loot[res] = int(ai_player.my_home.base_resource_loot[res] * (1.0 + loot_randomness * (2 * random.random() - 1)))

ai_instance_table = AIInstanceTable()


class BaseTable:
    def delete_async(self, region_id, base_id, cb):
        if gamesite.nosql_client:
            gamesite.nosql_client.drop_all_objects_by_base(region_id, base_id, reason='BaseTable.delete_async')
        reactor.callLater(0, cb)

    # note: deserialization is broken into two parts, preparse() and
    # parse(), because the base must first tell us who the landlord
    # is, THEN we have to look up the landlord's player state, and
    # we need to have the landlord's player state to fully parse the
    # base (e.g. to set tech levels/object auras/ownership/etc)
    # ^ if NoSQL takes over, then we can get rid of this mess and replace
    # it with a simple synchronous path!

    def preparse(self, buf, region_id, base_id):
        jsonobj = None
        try:
            with admin_stats.latency_measurer('base_table:deserialize'):
                jsonobj = SpinJSON.loads(buf)
        except:
            pass

        if not jsonobj:
            return None, False, None # no base present

        if (jsonobj.has_key('base_id') and jsonobj['base_id'] != base_id) or \
           (jsonobj.has_key('base_region') and jsonobj['base_region'] != region_id):
            gamesite.exception_log.event(server_time, 'warning: BaseTable lookup for %s/%s has data from %s/%s' % (region_id, base_id, jsonobj.get('base_region','unknown'), jsonobj.get('base_id',-1)))


        if 'base_landlord_id' not in jsonobj:
            gamesite.exception_log.event(server_time, 'warning: BaseTable lookup for %s/%s has no base_landlord_id' % (region_id, base_id))
            return None, False, None

        return jsonobj, False, jsonobj['base_landlord_id']

    @admin_stats.measure_latency('base_table:parse')
    def parse(self, region_id, base_id, jsonobj, landlord, observer, reason=''):
        # NOTE! SUBTLE!
        # in the NoSQL case, jsonobj is just the 'feature' from MapCache
        # in the legacy backend case (this code was deleted), jsonobj was the entire contents of the BaseTable JSON blob

        assert jsonobj['base_landlord_id'] == landlord.user_id

        base = Base(region_id, base_id, landlord.user_id, jsonobj.get('base_type','hive'))

        # NOTE! read_json_field magically works because the MapCache 'feature' has the same format as BaseTable entries
        for field in PlayerTable.BASE_RW_FIELDS:
            if field[0] == 'my_base':
                base.my_base = base.nosql_read(observer, landlord, 'BaseTable:parse(%s)' % reason)
            else:
                read_json_field(jsonobj, base, field, player = landlord, observer = observer)

        base.base_generation = jsonobj.get('LOCK_GENERATION',-1) # set generation manually based on value written on last release

        # *override* base's own base_richness with current value from hive template, if found
        if base.base_type == 'hive' and base.base_template and base.base_template in gamedata['hives_server']['templates']:
            base.base_richness = gamedata['hives_server']['templates'][base.base_template].get('base_richness', base.base_richness)

        base.init_production(landlord)

        return base

    def lookup_async(self, region_id, base_id, feature, cb, reason):
        if not gamesite.nosql_client:
            reactor.callLater(0, functools.partial(cb, False, None, None))
            return

        if not feature:
            feature = gamesite.nosql_client.get_map_feature_by_base_id(region_id, base_id, reason=reason)
            if ('base_landlord_id' not in feature):
                gamesite.exception_log.event(server_time, 'BaseTable.lookup_async(%s): bad feature for region %s base %s: %s' % \
                                             (reason, region_id, base_id, repr(feature)))
                reactor.callLater(0, functools.partial(cb, False, None, None))
                return

        assert 'base_landlord_id' in feature

        # simulate preparse success - note, we send 'feature' as the preparse result
        reactor.callLater(0, functools.partial(cb, True, feature, feature['base_landlord_id']))

    def store_async(self, base, cb, fsync, reason):
        base.base_generation += 1
        # ideally, if all server code correctly updates objects as they mutate, no I/O should be necessary here
        base.nosql_pluck('BaseTable:unparse(XXXunnecessary:%s)' % str(reason))
        base.nosql_plant('BaseTable:unparse(XXXunnecessary:%s)' % str(reason))
        if cb: reactor.callLater(0, cb)

    def unparse(self, base):
        jsonobj = {}

        with admin_stats.latency_measurer('base_table:unparse'):
            for field in PlayerTable.BASE_RW_FIELDS:
                write_json_field(base, jsonobj, field)

        with admin_stats.latency_measurer('base_table:serialize'):
            ret = SpinJSON.dumps(jsonobj, pretty = True, newline = True, size_hint = 65536, double_precision = 5)

        return ret

base_table = BaseTable()

class DamageLog(object):
    def __init__(self, base_id, observer):
        self.state = {}
        self.base_id = base_id # for debug messages only
        self.observer = observer
    def record_multi(self, iter):
        for obj in iter:
            self.record(obj)
    def init_multi(self, iter):
        for obj in iter:
            self.init(obj)
    def init(self, obj, consumable = False):
        if (not (obj.is_building() or obj.is_mobile())): return # ignore scenery etc
        sowner_id = str(obj.owner.user_id)
        if sowner_id not in self.state: self.state[sowner_id] = {}
        self._init(self.state[sowner_id], obj, consumable = consumable)
    def _init(self, state, obj, consumable = False):
        if obj.obj_id in state:
            if gamedata['server'].get('log_damage_log',1) >= 1:
                gamesite.exception_log.event(server_time, 'DamageLog: _init() on already-registered object obs %d owner %d: %s' % (self.observer.user_id, obj.owner.user_id, obj.spec.name))
        state[obj.obj_id] = {'spec':obj.spec.name, 'level':obj.level, 'orig_health': obj.hp/float(obj.max_hp)}
        if consumable: state[obj.obj_id]['consumable'] = 1
    def record(self, obj):
        if (not (obj.is_building() or obj.is_mobile())): return # ignore scenery etc
        sowner_id = str(obj.owner.user_id)
        if sowner_id not in self.state:
            if gamedata['server'].get('log_damage_log',1) >= 1:
                gamesite.exception_log.event(server_time, 'DamageLog: record() on object with unseen owner (have %s) obs %d at %s owner %d: %s' % (repr(self.state.keys()), self.observer.user_id, self.base_id, obj.owner.user_id, obj.spec.name))
            return
        self._record(self.state[sowner_id], obj)
    def _record(self, state, obj):
        if obj.obj_id not in state:
            if gamedata['server'].get('log_damage_log',1) >= 1:
                gamesite.exception_log.event(server_time, 'DamageLog: _record() on unseen object obs %d at %s owner %d: spec %s obj_id %s squad %d' % (self.observer.user_id, self.base_id, obj.owner.user_id, obj.spec.name, obj.obj_id, obj.squad_id))
            return
        state[obj.obj_id]['cur_health'] = obj.hp/float(obj.max_hp)
    def finalize(self):
        ret = {}
        for sowner_id in self.state:
            dmg = self._finalize(self.state[sowner_id])
            if dmg:
                ret[sowner_id] = dmg
        return ret
    def _finalize(self, state):
        ret = {}
        for obj_id, entry in state.iteritems():
            # treat all consumable units used as if they were completely destroyed
            if entry.get('consumable',False): entry['cur_health'] = 0

            if ('cur_health' not in entry): continue # no change
            spec = GameObjectSpec.lookup(entry['spec'])
            orig_cost = spec.cost_to_repair(entry['level'], entry['orig_health'], self.observer, obj_id)
            cur_cost = spec.cost_to_repair(entry['level'], entry['cur_health'], self.observer, obj_id)

            # ignore trivial amounts of building damage (<=10sec to repair)
            if spec.kind == 'building' and len(cur_cost) == 1 and cur_cost.get('time',0) <= 10: continue

            key = '%s:L%d' % (entry['spec'], entry['level'])
            any_damage = False
            for res in ['time']+gamedata['resources'].keys():
                orig = orig_cost.get(res,0)
                cur = cur_cost.get(res,0)
                if orig != cur:
                    if key not in ret: ret[key] = {'count':0}
                    ret[key][res] = ret[key].get(res,0) + cur - orig
                    any_damage = True
            if any_damage:
                ret[key]['count'] += 1

        # get rid of 1-counts
        for k, v in ret.iteritems():
            if v['count'] <= 1: del v['count']

        return ret

class AttackLog (object):
    @classmethod
    def base_name(cls, log_time, attacker_id, defender_id, base_id):
        if base_id and base_id != home_base_id(attacker_id) and base_id != home_base_id(defender_id):
            return '%d-%d-vs-%d-at-%s.json.gz' % (log_time, attacker_id, defender_id, base_id)
        else:
            return '%d-%d-vs-%d.json.gz' % (log_time, attacker_id, defender_id)
    @classmethod
    def storage_dir(cls, log_time):
        return spin_log_dir+'/'+SpinLog.time_to_date_string(log_time)+'-battles'
    @classmethod
    def storage_path(cls, log_time, attacker_id, defender_id, base_id):
        return os.path.join(cls.storage_dir(log_time), cls.base_name(log_time, attacker_id, defender_id, base_id))

    @classmethod
    def storage_s3_bucket(cls):
        return SpinConfig.config.get('battle_logs_s3_bucket',None)
    @classmethod
    def storage_s3_name(cls, log_time, attacker_id, defender_id, base_id):
        tm = time.gmtime(log_time)
        base_name = cls.base_name(log_time, attacker_id, defender_id, base_id)
        return '%s-battles-%04d%02d/%04d%02d%02d/%s' % (game_id, tm.tm_year, tm.tm_mon, tm.tm_year, tm.tm_mon, tm.tm_mday, base_name)

    def upload(self):
        if not self.log_file: return # ignore null logs
        if not isinstance(io_system, S3IOSystem): return # S3 not enabled
        bucket = self.storage_s3_bucket()
        if bucket:
            # fire-and-forget write
            buf = open(self.local_filename, 'rb').read()
            io_system.do_async_write((bucket,self.s3_filename), buf, lambda : None, False, 0)

    def __init__(self, log_time, attacker_id, defender_id, base_id):
        self.log_time = log_time # server_time when attack log was opened
        self.log_file = None # this will be recorded in battle history, to be used for retrieving the log later
        self.local_filename = None
        self.s3_filename = None

        if (attacker_id < 0) or (defender_id < 0):
            self.log = SpinLog.NullLog()
            return

        self.log_file = self.base_name(self.log_time, attacker_id, defender_id, base_id)
        attack_log_dir = self.storage_dir(self.log_time)

        if not os.path.exists(attack_log_dir):
            try: os.mkdir(attack_log_dir)
            except: pass

        self.local_filename = os.path.join(attack_log_dir, self.log_file)
        self.s3_filename = self.storage_s3_name(log_time, attacker_id, defender_id, base_id)
        self.log = SpinLog.JSONLog(SpinLog.GzipLogFile(self.local_filename))

    def is_active(self): # whether or not we're actually recording, instead of dropping the events
        return self.local_filename is not None

    def event(self, props):
        self.log.event(server_time, props)
    def close(self):
        if self.log:
            self.log.close()
            self.upload()
            self.log = None

class AttackReplayReceiver (object):
    @classmethod
    def base_name(cls, log_time, attacker_id, defender_id, base_id):
        # kind of a hack, just reuse the AttackLog convention
        return AttackLog.base_name(log_time, attacker_id, defender_id, base_id).replace('.json.gz', '-replay.json.gz')
    @classmethod
    def storage_dir(cls, log_time):
        return spin_log_dir+'/'+SpinLog.time_to_date_string(log_time)+'-replays'
    @classmethod
    def ensure_storage_dir(cls, log_time):
        log_dir = cls.storage_dir(log_time)
        if not os.path.exists(log_dir):
            try: os.mkdir(log_dir)
            except: pass
    @classmethod
    def storage_path(cls, log_time, attacker_id, defender_id, base_id):
        return os.path.join(cls.storage_dir(log_time), cls.base_name(log_time, attacker_id, defender_id, base_id))

    @classmethod
    def storage_s3_bucket(cls):
        return SpinConfig.config.get('battle_replays_s3_bucket',None)
    @classmethod
    def storage_s3_name(cls, log_time, attacker_id, defender_id, base_id):
        tm = time.gmtime(log_time)
        base_name = cls.base_name(log_time, attacker_id, defender_id, base_id)
        return '%s-battles-%04d%02d/%04d%02d%02d/%s' % (game_id, tm.tm_year, tm.tm_mon, tm.tm_year, tm.tm_mon, tm.tm_mday, base_name)

    def __init__(self, active_player_id, log_time, expire_time, attacker_id, defender_id, base_id):
        self.active_player_id = active_player_id
        self.attacker_id = attacker_id
        self.defender_id = defender_id
        self.base_id = base_id
        self.log_time = log_time
        self.expire_time = expire_time # time after which we'll give up if the client hasn't finished uploading
        self.log_file = self.base_name(self.log_time, attacker_id, defender_id, base_id)
        self.local_filename = os.path.join(self.storage_dir(self.log_time), self.log_file)
        self.buf = None # allocated lazily
        self.codec = None
        self.next_line = 0
        self.total_raw_length = 0

    def accumulate(self, codec, first_line, n_lines, is_final, raw_length, inbuf):
        # receive a segment of compressed replay data from the client.
        # return true if finished with the last segment

        if self.codec is None:
            assert codec in ('raw', 'gzip')
            self.codec = codec
            self.buf = cStringIO.StringIO()
        else:
            assert codec == self.codec

        if first_line != self.next_line: raise Exception('unexpected first line: %r vs %r' % (first_line, self.next_line))
        if self.codec == 'gzip': # this is base64-encoded as well
            inbuf = base64.b64decode(inbuf)
            # note: we trust the client to generate valid gzip, and also trust it to send
            # us atomic chunks where we can terminate the recording after any chunk.
        self.buf.write(inbuf)
        self.next_line += n_lines
        self.total_raw_length += raw_length

        if is_final:
            self.finalize()
            return True

        # we could write the data received so far to disk immediately, but for now let's just buffer it
        # (will lose data if server stops during a battle, but that will probably mess up the battle result anyway).

        return False

    def finalize(self):
        if self.buf is None: return # received no data

        # decompress what the client sent us
        if self.codec == 'raw':
            raw_buf = self.buf.getvalue()
            gzip_buf = gzip.GzipFile(fileobj=cStringIO.StringIO(raw_buf)).read()
        elif self.codec == 'gzip':
            # we trust the client to generate valid gzip!
            raw_buf = None
            gzip_buf = self.buf.getvalue()

        # check the size of the decompressed raw representation
        if raw_buf is not None and len(raw_buf) != self.total_raw_length:
            gamesite.exception_log.event(server_time, 'replay raw length mismatch: %r vs %r' % (len(raw_buf), self.total_raw_length))

        # fire-and-forget S3 upload
        if isinstance(io_system, S3IOSystem) and self.storage_s3_bucket(): # S3 enabled
            bucket = self.storage_s3_bucket()
            name = self.storage_s3_name(self.log_time, self.attacker_id, self.defender_id, self.base_id)
            io_system.do_async_write((bucket,name), gzip_buf, lambda : None, False, 0)
        else:
            # write to local disk
            self.ensure_storage_dir(self.log_time)
            with AtomicFileWrite.AtomicFileWrite(self.local_filename, 'wb') as atom:
                atom.fd.write(gzip_buf)
                atom.complete()

        metric_event_coded(self.active_player_id, '3832_battle_replay_uploaded', {'battle_time': self.log_time,
                                                                                  'attacker_id': self.attacker_id,
                                                                                  'defender_id': self.defender_id,
                                                                                  'base_id': self.base_id,
                                                                                  'raw_length': self.total_raw_length,
                                                                                  'wire_length': self.buf.tell()
                                                                                  })


class Session(object):
    class AsyncLogout:
        def __init__(self, parent):
            self.parent = parent
            self.d = make_deferred('AsyncLogout')
            self.wrote_user = False
            self.wrote_player = False
        def user_cb(self):
            self.wrote_user = True
            self.try_finish()
        def player_cb(self):
            self.wrote_player = True
            self.try_finish()
        def try_finish(self):
            if (self.wrote_user) and (self.wrote_player):
                d, self.d = self.d, None
                if d:
                    d.callback(True)

    def __init__(self, session_id, user, player, login_time):
        assert user.active_session is None

        # these are set once at initialization
        self.session_id = session_id
        self.incoming_serial = 0
        self.outgoing_serial = 0
        self.user = user
        self.user.active_session = self
        self.player = player
        self.login_time = login_time

        # reset each time we hear from the browser;
        # used to detect timed-out clients
        self.last_active_time = login_time

        # for ADMIN purposes only, keep track of the last messages sent
        self.last_action = collections.deque([], gamedata['server']['ADMIN']['last_action_buf'])

        # list of incoming bundles of game messages ([serial, messsages])
        # being held because earlier messages haven't been received or completely handled yet
        self.message_buffer = [] # XXXXXX rename to incoming_messages
        self.lagged_out = False

        # Maintain a list of Deferreds we are waiting on during async message handling.
        self.async_ds = []
        self.async_ds_watchdog = None # IDelayedCall to detect async_ds getting "stuck"
        self.async_ds_watchdog_fired = False
        self.after_async = [] # list of Deferreds to fire once we finish async message handling.

        # park current synchronous HTTP requests here. They will be completed as soon as the session is no longer async.
        self.sync_requests = []

        # park the longpoll HTTP request here
        self.longpoll_request = None
        self.longpoll_request_time = -1 # note! if longpoll_request is not None, and this is <0, that means "reuse the same longpoll_request after flush" (for websockets)

        # list of outgoing game messages to deliver to the client's browser next time it contacts the server
        self.outgoing_messages = []

        # IDelayedCall for immediately pending flush_outgoing_messages
        self.pending_flush_outgoing_messages = None

        # flags that we need to perform a recaculation and send the results to the client on next transmission
        self.deferred_ping_squads = False
        self.deferred_ladder_point_decay_check = False
        self.deferred_stattab_update = False
        self.deferred_history_update = False
        self.deferred_mailbox_update = False
        self.deferred_power_change = False
        self.deferred_player_state_update = False
        self.deferred_player_auras_update = False
        self.deferred_player_cooldowns_update = False
        self.deferred_donated_units_update = False
        self.deferred_object_state_updates = set()
        self.deferred_player_name_update = False
        self.deferred_player_trophies_update = False

        # prevent overlapping SPROBE_RUN requests
        self.sprobe_in_progress = False

        # flag to prevent overlapping VISIT_BASE requests
        self.visit_base_in_progress = False

        # for debugging, keep track of how many SESSION_CHANGE messages we've sent the client this login
        self.debug_session_change_count = 0

        # keep track of last few actions applied to this session for debugging
        self.debug_action_log = collections.deque([], 16)

        # same for complete_attack
        self.complete_attack_in_progress = False
        self.complete_attack_d = None

        # maintains state of asynchronous logout
        self.logout_in_progress = None
        # fired when completely logged out
        self.logout_d = None

        # these are reset each time the connected user views a different base
        self.home_base = True
        self.has_attacked = False

        self.defender_cc_standing = False # true if the defender's CC was not destroyed at start of battle
        self.defender_protection_expired_at = -1 # set on initial base visit

        self.attack_log = None
        self.attack_replay_receivers = {} # indexed by the replay token
        self.damage_log = None

        self.protection_eligible = None # False/True flag set at start of combat
        self.attack_finish_time = -1 # server_time when attack must conclude (due to attack timer)

        self.incoming_attack_time = -1 # server_time when AI units will be spawned in your base
        self.incoming_attack_wave_time = -1 # server_time for next wave within the attack
        self.incoming_attack_id = -1
        self.incoming_attack_type = None
        self.incoming_attack_data = None
        self.incoming_attack_units = [] # list of waves of incoming AI units [ {'tank_unit': 3}, ... ]
        self.incoming_attack_direction = None # direction from which units will arrive (index into gamedata['ai_attacks_client']['directions'])

        self.defending_squads = {} # XXX merge deployable/defending squads into participating_squads
        self.deployable_squads = {} # dict of base_id -> squads (map features) eligible for deployment into combat this session
        self.deployed_unit_space = 0 # how much "space" worth of units have already been deployed into the attack
        self.deployed_donated_unit_space = 0 # SUBSET of deployed_unit_space for donated units
        self.deployed_units = None # for analytics only, keep track of how many units of each type were deployed
        self.deployed_donated_units = None # for analytics only, keep track of how many units of each type were deployed (SUBSET of deployed_units)

        self.auto_resolved = False # Flag that the current battle has been auto-resolved

        self.res_looter = None # ResLoot state object, set up at the beginning of each session
        self.starting_base_damage = None # copy of viewing_base.calc_base_damage() result made at the beginning of each session

        self.resurrectable_objects = [] # list of resurrectable objects destroyed during current attack
        self.loot = {} # how much has been looted during the current attack e.g. {'resource1':123, 'resource2':345}
        self.items_expended = {} # items expended during current attack by str(user_id): {'1111':{'tactical_nuke':2}, ...}

        self.cur_objects = None
        self.viewing_user = None
        self.viewing_player = None
        self.viewing_base = None

        # keep track of the lock we've taken on the player's own home base map feature
        self.player_base_lock = None # tuple of (base_region, base_id)

        # keep track of locks we've taken on viewing_base and squads participating in fights
        self.viewing_base_lock = None # lock_id
        self.viewing_squad_locks = None # dict of {lock_id0: lock_generation0, ...}

        # keep track of locks we are holding across pending asynchronous paths
        self.pre_locks = set() # set of lock_ids

        self.ui_name = None
        self.pvp_balance = None # which party is favored in PvP combat
        self.ladder_state = None # state for PvP ladder battles

        self.last_rival_query = -1 # time of last rival query, for checking cooldown
        self.last_quarry_query = -1 # time of last quarry query, for checking cooldown

        self.activity_classifier = ActivityClassifier.ActivityClassifier(gamedata)
        self.last_activity_sample_time = -1

        self.global_chat_channel = None

        self.alliance_chat_channel = None
        self.alliance_id_cache = -1 # MAY GO OUT OF DATE, DO NOT USE FOR ANYTHING IMPORTANT (CHAT ONLY)
        self.alliance_membership_cache = None # DO NOT USE FOR ANYTHING IMPORTANT (CHAT ONLY)
        self.alliance_info_cache = None # DO NOT USE FOR ANYTHING IMPORTANT (CHAT ONLY)

        self.viewing_alliance_id_cache = -1 # DO NOT USE FOR ANYTHING IMPORTANT (CHAT ONLY)
        self.viewing_alliance_info_cache = None # DO NOT USE FOR ANYTHING IMPORTANT (CHAT ONLY)

        self.region_chat_channel = None

        self.sent_metrics = {} # keep track of once-per-session Consequent metric events we've already sent

        gamesite.chat_mgr.join(self, 'BROADCAST')
        if self.player.is_developer():
            gamesite.chat_mgr.join(self, 'DEVELOPER')
            self.do_chat_catchup('DEVELOPER', self.outgoing_messages)

    # transition the session to async waiting on the given Deferred
    # this should be called by any internal function that wants to prevent further message handling
    # on the session until the Deferred completes.
    def start_async_request(self, d):
        if d in self.async_ds: return d # duplicate

        self.async_ds.append(d)
        # ensure we communicate back to the client as soon as async processing finishes
        d.addBoth(self.complete_async_request, d) # OK

        timeout = gamedata['server'].get('async_d_watchdog_timeout',120.0)
        if self.async_ds_watchdog:
            if timeout > 0:
                self.async_ds_watchdog.reset(timeout)
            else:
                self.async_ds_watchdog.cancel()
                self.async_ds_watchdog = None
        elif not self.logout_in_progress and not self.async_ds_watchdog_fired and timeout > 0:
            self.async_ds_watchdog = reactor.callLater(timeout, self.async_ds_timeout)

        return d # for syntactic convenience only

    def async_ds_timeout(self):
        self.async_ds_watchdog = None

        if not self.async_ds: return # it got cleared up asynchronously (? XXXXXX not sure why this happens - post-logout?)

        self.async_ds_watchdog_fired = True
        gamesite.exception_log.event(server_time, 'player %d async_ds watchdog timeout at %f async_ds %r after_async %r' % (self.user.user_id, time.time(), self.async_ds, self.after_async))

        # not sure what to do here...

        gamesite.gameapi.log_out_async(self, 'async_ds_timeout', force = True)
#        d_list, self.async_ds = self.async_ds, []
#        for d in d_list:
#            d.errback(failure.Failure(Exception('async_ds watchdog timeout')))

    # exception to pass to after_async_request callbacks that fire after logout has begun
    class AlreadyLoggedOut(Exception): pass

    def complete_async_request(self, result_or_failure, d):
        # note: this is called BY an async_d firing, so don't fire it again!

        if d not in self.async_ds:
            gamesite.exception_log.event(server_time, 'complete_async_request in unexpected state: sync_requests %r async_ds %r %s' % (self.sync_requests, self.async_ds, ''.join(traceback.format_stack())))
        else:
            self.async_ds.remove(d)

        if not self.async_ds: # totally drained - flush now
            if self.async_ds_watchdog:
                self.async_ds_watchdog.cancel()
                self.async_ds_watchdog = None

            d_list, self.after_async = self.after_async, []
            for d in d_list:
                if self.logout_in_progress:
                    # fail the call, since we've started logging out
                    reactor.callLater(0, d.errback, failure.Failure(self.AlreadyLoggedOut('player %d logged out' % self.user.user_id)))
                else:
                    reactor.callLater(0, d.callback, True)

            # and finally respond to the client. If one of the above cbs makes us async again, this will do nothing.
            self.queue_flush_outgoing_messages()

        return result_or_failure # pass along callback chain

    # fire this deferred after we come out of async wait (or immediately if not waiting)
    def after_async_request(self, d):
        if self.async_ds:
            if d in self.async_ds:
                gamesite.exception_log.event(server_time, 'after_async_request deadlock on %r' % (d,))
                reactor.callLater(0, d.errback, failure.Failure(Exception('after_async_request deadlock')))
            self.after_async.append(d)
        else:
            reactor.callLater(0, d.callback, True)
        return d # for syntactic convenience only

    def is_async(self): return bool(self.async_ds)

    def record_activity_sample(self, force = False):
        interval = gamedata['server'].get('activity_classifier_interval',300)
        t = int(server_time/interval)*interval
        if t > self.last_activity_sample_time or force:
            sample = self.activity_classifier.finalize()
            sample['dt'] = interval
            self.activity_classifier = ActivityClassifier.ActivityClassifier(gamedata)
            self.last_activity_sample_time = t
            if sample['state'] not in ('idle','harvest'): # don't bother recording idle or harvest time
                if gamedata['server'].get('log_activity_in_player_history', False):
                    hist = self.player.history
                    if 'activity' not in hist: hist['activity'] = {}
                    # note: record at t=(t-interval) because that is the *start* of the sampling period
                    hist['activity'][str(t - interval)] = sample
                if gamedata['server'].get('log_activity_in_nosql', True):
                    props = copy.deepcopy(sample)
                    props['user_id'] = self.user.user_id
                    props.update(self.player.get_denormalized_summary_props('brief'))
                    gamesite.nosql_client.log_record('activity', t-interval, props, log_ident = False, reason='record_activity_sample')

    def is_ladder_battle(self): return self.ladder_state is not None

    def using_squad_deployment(self, deployable_squads = None):
        if deployable_squads is None: deployable_squads = self.deployable_squads
        return (len(deployable_squads) != 1 or (deployable_squads.values()[0]['squad_id'] != SQUAD_IDS.BASE_DEFENDERS))

    # this is exposed so that MetricEventConsequent can call it without depending on the global function from server.py
    def metric_event_coded(self, player, event_name, val):
        if val:
            assert type(val) is dict
            if val.get('attack_event', False):
                # write to attack log instead of main metrics log
                self.attack_event(player.user_id, event_name, val)
                return
            elif val.get('purchase_ui_event', False):
                # write to purchase_ui log instead of main metrics log
                val['user_id'] = player.user_id
                val['event_name'] = event_name
                assert ('alloy' not in val['event_name']) # don't record previous-generation events
                val['code'] = int(event_name[0:4])
                del val['purchase_ui_event']
                gamesite.purchase_ui_log.event(server_time, val)
                return
        metric_event_coded(player.user_id, event_name, val)

    def debug_log_action(self, reason):
        self.debug_action_log.append({'time':server_time, 'reason': reason, 'session': self.debug_session_change_count})

    # just return a string describing the current session state, for exception logging only
    def dump_exception_state(self):
        ui_action_log = '\n'.join('%d %d %s' % (x['time'], x['session'], x['reason']) for x in self.debug_action_log)
        ui_action_log += '\n%d %d %s' % (server_time, self.debug_session_change_count, 'NOW')
        return 'player %d viewing %d at %s (session change count %d), is_async %r complete_attack_in_progress %r visit_base_in_progress %r logout_in_progress %r has_attacked %r viewing_base_lock %r action_log\n%s' % \
               (self.player.user_id, self.viewing_player.user_id, self.viewing_base.base_id, self.debug_session_change_count, self.is_async(), bool(self.complete_attack_in_progress), bool(self.visit_base_in_progress), bool(self.logout_in_progress), self.has_attacked, self.viewing_base_lock, ui_action_log)

    # return current seconds of cumulative play time
    def cur_playtime(self):
        return (server_time - self.login_time) + self.player.history.get('time_in_game',0)

    def prune_attack_replay_receivers(self, force = False):
        # get rid of expired replay receivers so they don't take up memory
        for token, recv in self.attack_replay_receivers.items():
            if server_time >= recv.expire_time or force:
                self.attack_replay_receivers[token].finalize()
                del self.attack_replay_receivers[token]

    def get_alliance_id(self, reason=''):
        if (not gamesite.sql_client) or \
           (not self.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances'])):
            return -1

        self.alliance_membership_cache = gamesite.sql_client.get_users_alliance_membership(self.user.user_id, reason = reason)
        self.alliance_id_cache = self.alliance_membership_cache['alliance_id'] if self.alliance_membership_cache else -1
        self.player.make_alliance_sticky(self.alliance_id_cache)

        return self.alliance_id_cache

    def get_alliance_info(self, reason=''):
        alliance_id = self.get_alliance_id(reason=reason)
        if alliance_id <= 0: # not in an alliance
            self.alliance_info_cache = None
        else:
            self.alliance_info_cache = gamesite.sql_client.get_alliance_info(alliance_id, member_access = True, get_roles = True, reason = reason)
            if not self.alliance_info_cache:
                # alliance is somehow invalid - get out of it
                gamesite.sql_client.leave_alliance(self.user.user_id, reason = reason)
                self.alliance_id_cache = -1; self.alliance_membership_cache = None
        return self.alliance_info_cache, self.alliance_membership_cache

    # client uses generic chat channel names - translate to/from internal names
    def decode_chat_channel_name(self, channel):
        if channel == 'GLOBAL' and self.global_chat_channel:
            return self.global_chat_channel
        elif channel == 'REGION' and self.region_chat_channel:
            return self.region_chat_channel
        elif channel == 'ALLIANCE' and self.alliance_chat_channel:
            return self.alliance_chat_channel
        elif channel == 'DEVELOPER' and self.player.is_developer():
            return channel
        return None
    def encode_chat_channel_name(self, channel):
        if channel == self.global_chat_channel:
            return 'GLOBAL'
        elif channel == self.alliance_chat_channel:
            return 'ALLIANCE'
        elif channel == self.region_chat_channel:
            return 'REGION'
        return channel

    def do_chat_catchup(self, true_channel, retmsg):
        for x in gamesite.nosql_client.chat_catchup(true_channel, limit = gamedata['server']['chat_memory'], reason='catchup'):
            self.chat_recv(true_channel, x.get('id',None), x['sender'], x.get('text',''), retmsg = retmsg)
    def do_chat_getmore(self, true_channel, end_time, end_msg_id, retmsg):
        msg_list = gamesite.nosql_client.chat_catchup(true_channel, end_time = end_time, end_msg_id = end_msg_id,
                                                      order = SpinNoSQL.NoSQLClient.CHAT_NEWEST_FIRST,
                                                      limit = gamedata['server']['chat_memory'],
                                                      reason = 'getmore')
        for x in msg_list:
            self.chat_recv(true_channel, x.get('id',None), x['sender'], x.get('text',''), retmsg = retmsg, is_prepend = True)
        return len(msg_list) < gamedata['server']['chat_memory'] # is_final

    def init_alliance(self, retmsg, chat_catchup = True, reason = 'Session.init_alliance'):
        if self.alliance_chat_channel:
             gamesite.chat_mgr.leave(self, self.alliance_chat_channel)
             self.alliance_chat_channel = None

        alliance_info, alliance_membership = self.get_alliance_info(reason=reason)
        if alliance_info is None: return None, None
        alliance_id = alliance_info['id']

        self.alliance_chat_channel = 'a:%d' % alliance_id

        if chat_catchup:
            self.do_chat_catchup(self.alliance_chat_channel, retmsg)
            txt = alliance_info.get('chat_motd', None)
            if not txt:
                txt = "Welcome to \"%s\" chat!" % alliance_info.get('ui_name', 'unknown')
            self.chat_recv(self.alliance_chat_channel, None,
                           {'chat_name': gamedata['strings']['alliance_chat_motd_sender'], 'type': 'alliance_welcome',
                            'time': server_time, 'user_id':-1},
                           txt, retmsg = retmsg)

        gamesite.chat_mgr.join(self, self.alliance_chat_channel)
        return alliance_info, alliance_membership

    def init_global_chat(self, retmsg):
        assert self.global_chat_channel is None
        self.global_chat_channel = Predicates.eval_cond_or_literal(gamedata['global_chat_channel_assignment'], self, self.player)

        # divert to alternate global chat channel, for A/B testing purposes
        divert = self.player.get_any_abtest_value('divert_chat', None)
        if divert:
            self.global_chat_channel += '_'+divert

        # stuff last few messages into chat and join
        self.do_chat_catchup(self.global_chat_channel, retmsg)
        # put welcome message into chat
        if gamedata['strings']['chat_templates'].get('welcome') and Predicates.read_predicate(gamedata['chat_welcome_if']).is_satisfied(self.player,None):
            self.chat_recv(self.global_chat_channel, None,
                           {'chat_name':'System', 'type':'welcome', 'channel_name': 'Global', 'time': server_time, 'user_id':-1},
                           'Welcome',
                           retmsg = retmsg)
        gamesite.chat_mgr.join(self, self.global_chat_channel)

    def init_region_chat(self, new_region, retmsg):
        if self.region_chat_channel:
            gamesite.chat_mgr.leave(self, self.region_chat_channel)
            self.region_chat_channel = None
        if (not new_region) or (new_region not in gamedata['regions']): return
        self.region_chat_channel = 'r:'+str(new_region)

        # stuff last few messages into chat and join
        self.do_chat_catchup(self.region_chat_channel, retmsg)
        # put welcome message into chat
        if gamedata['strings']['chat_templates'].get('welcome') and Predicates.read_predicate(gamedata['chat_welcome_if']).is_satisfied(self.player,None):
            ui_name = gamedata['regions'][new_region]['ui_name']
            self.chat_recv(self.region_chat_channel, None,
                           {'chat_name':'System', 'type':'welcome', 'channel_name': '%s Region' % ui_name, 'time': server_time, 'user_id':-1},
                           'Welcome',
                           retmsg = retmsg)
        gamesite.chat_mgr.join(self, self.region_chat_channel)

    def shutdown(self):
        self.prune_attack_replay_receivers(True)

        if self.region_chat_channel:
            gamesite.chat_mgr.leave(self, self.region_chat_channel)
        if self.alliance_chat_channel:
            gamesite.chat_mgr.leave(self, self.alliance_chat_channel)
        gamesite.chat_mgr.leave(self, self.global_chat_channel)
        gamesite.chat_mgr.leave(self, 'BROADCAST')
        if self.player.is_developer():
            gamesite.chat_mgr.leave(self, 'DEVELOPER')

        assert self.user.active_session is self
        self.user.active_session = None
        assert self.viewing_base_lock is None
        assert self.viewing_squad_locks is None
        self.release_pre_locks()

        if self.async_ds_watchdog:
            self.async_ds_watchdog.cancel()
            self.async_ds_watchdog = None

        if self.longpoll_request:
            request, self.longpoll_request = self.longpoll_request, None
            gamesite.gameapi.complete_longpoll(request, self)
            if isinstance(request, WSFakeRequest): # XXXXXX nasty hack
                # shut down the connection here so that it won't stick around until the full timeout
                request.close_connection_aggressively()

        # unlock the player's personal state
        self.player.lock_state = Player.LockState.open
        self.player.lock_time = 0

    def release_pre_locks(self):
        # give up any temporarily held locks
        while self.pre_locks:
            lock_id = self.pre_locks.pop()
            lock_region, lock_base_id = SpinDB.parse_base_lock_id(lock_id)
            gamesite.nosql_client.map_feature_lock_release(lock_region, lock_base_id, self.player.user_id, reason='release_pre_locks')

    # acquire locks on the viewed base and all defending and deployable squads.
    # "errors" is an optional list to append any locking errors to (strings in gamedata['errors'])
    def do_acquire_base(self, viewing_player, viewing_base, deployable_squads, defending_squads, errors = None):
        assert self.viewing_base_lock is None
        assert self.viewing_squad_locks is None
        if (viewing_base and viewing_base.base_region) or deployable_squads: assert gamesite.nosql_client

        state = Player.LockState.being_attacked

        if viewing_base and viewing_base.base_region and (viewing_base is not self.player.my_home):
            base_lock_id = viewing_base.lock_id()
            if base_lock_id in self.pre_locks: # do we have the lock already?
                self.pre_locks.remove(base_lock_id)
                state = Player.LockState.being_attacked
            else:
                state = gamesite.nosql_client.map_feature_lock_acquire(viewing_base.base_region, viewing_base.base_id, self.player.user_id, generation=viewing_base.base_generation, reason='do_acquire_base')
            if state != Player.LockState.being_attacked:
                self.release_base(viewing_base=viewing_base)

                # try to figure out more specifically why we didn't get the lock
                err = "CANNOT_ATTACK_BASE_WHILE_ALREADY_UNDER_ATTACK"
                if viewing_base.base_type == 'squad' and viewing_base.base_landlord_id != self.player.user_id:
                    feature = gamesite.nosql_client.get_map_feature_by_base_id(viewing_base.base_region, viewing_base.base_id, reason='do_acquire_base_err')
                    if feature: # hostile squad still exists, but its generation number was bumped
                        # is it in the same location where we spied it?
                        if ('base_map_loc' in feature) and \
                           (feature['base_map_loc'][0] == viewing_base.base_map_loc[0]) and \
                           (feature['base_map_loc'][1] == viewing_base.base_map_loc[1]) and \
                           (('map_path' not in feature) or (feature['map_path'][-1]['eta'] < server_time)):
                            if feature.get('LOCK_OWNER',-1) == viewing_base.base_landlord_id:
                                err = "CANNOT_ATTACK_THEIR_SQUAD_OFFENSE"
                            else:
                                err = "CANNOT_ATTACK_THEIR_SQUAD_DEFENSE"

                        else:
                            err = "CANNOT_ATTACK_THEIR_SQUAD_MOVED"

                if errors is not None: errors.append(err)
                if gamedata['server'].get('log_nosql',0) >= 2:
                    gamesite.exception_log.event(server_time, '%d failed to acquire lock on viewing_base %s gen %d' % (self.player.user_id, viewing_base.base_id, viewing_base.base_generation))
                return state
            # when acquiring a squad, verify that it hasn't moved or left the map (XXXXXX should be unnecessary now with the generation check)
            if viewing_base.base_type == 'squad':
                feature = gamesite.nosql_client.get_map_feature_by_base_id(viewing_base.base_region, viewing_base.base_id, reason='do_acquire_base')
                if (not feature) or ('base_map_loc' not in feature) or \
                   (feature['base_map_loc'][0] != viewing_base.base_map_loc[0]) or \
                   (feature['base_map_loc'][1] != viewing_base.base_map_loc[1]):
                    # squad moved or left map
                    gamesite.nosql_client.map_feature_lock_release(viewing_base.base_region, viewing_base.base_id, self.player.user_id, generation=-1)
                    state = -Player.LockState.being_attacked
                    self.release_base(viewing_base=viewing_base)
                    if errors is not None: errors.append("CANNOT_ATTACK_THEIR_SQUAD_MOVED" if (viewing_base.base_landlord_id != self.player.user_id) else "CANNOT_ATTACK_YOUR_SQUAD_RACE")
                    if gamedata['server'].get('log_nosql',0) >= 0:
                        gamesite.exception_log.event(server_time, '%d failed to acquire lock on viewing_base %s (squad moved?) gen %d' % (self.player.user_id, viewing_base.base_id, viewing_base.base_generation))
                    return state
            self.viewing_base_lock = base_lock_id

        self.viewing_squad_locks = None
        squads_to_acquire = [(feature1['squad_id'], base_id1, feature1.get('LOCK_GENERATION',-1)) for base_id1, feature1 in deployable_squads.iteritems() if \
                             SQUAD_IDS.is_mobile_squad_id(feature1['squad_id']) and self.player.squad_is_deployed(feature1['squad_id'])] + \
                            [(feature2['squad_id'], base_id2, feature2.get('LOCK_GENERATION',-1)) for base_id2, feature2 in defending_squads.iteritems() if \
                             SQUAD_IDS.is_mobile_squad_id(feature2['squad_id'])]

        for squad_id, squad_base_id, lock_gen in squads_to_acquire:
            squad_lock_id = SpinDB.base_lock_id(self.player.home_region, squad_base_id)
            if viewing_base and (squad_lock_id == viewing_base.lock_id()): continue # don't double-lock if we're viewing this squad
            if squad_lock_id in self.pre_locks: # do we have the lock already?
                self.pre_locks.remove(base_lock_id)
                state = Player.LockState.being_attacked
            else:
                state = gamesite.nosql_client.map_feature_lock_acquire(self.player.home_region, squad_base_id, self.player.user_id, generation = lock_gen, reason='do_acquire_base')
            if state != Player.LockState.being_attacked:
                self.release_base(viewing_base=viewing_base)

                # try to figure out more specifically why we didn't get the lock
                if squad_base_id in deployable_squads:
                    err = "CANNOT_ATTACK_YOUR_SQUAD_RACE"
                else:
                    err = "CANNOT_ATTACK_BASE_WHILE_ALREADY_UNDER_ATTACK"
                if errors is not None: errors.append(err)

                if gamedata['server'].get('log_nosql',0) >= 2:
                    gamesite.exception_log.event(server_time, '%d failed to acquire lock on squad %s gen %d' % (self.player.user_id, squad_base_id, lock_gen))
                return state
            if self.viewing_squad_locks is None: self.viewing_squad_locks = {}
            self.viewing_squad_locks[squad_lock_id] = lock_gen

        return state

    def acquire_base(self, errors = None):
        return self.do_acquire_base(self.viewing_player, self.viewing_base, self.deployable_squads, self.defending_squads, errors = errors)

    def forget_base_lock(self, base_id):
        lock_id = SpinDB.base_lock_id(self.player.home_region, base_id)
        if self.viewing_base_lock == lock_id:
            self.viewing_base_lock = None
        if self.viewing_squad_locks and (lock_id in self.viewing_squad_locks):
            self.viewing_squad_locks[lock_id] = -2 # special tombstone marker that means "we had a lock, but the squad map feature has been dropped"

    def release_base(self, viewing_base = None):
        if viewing_base is None: viewing_base = self.viewing_base

        if self.viewing_base_lock is not None:
            gamesite.nosql_client.map_feature_lock_release(viewing_base.base_region, viewing_base.base_id, self.player.user_id, generation=viewing_base.base_generation + 1, reason='release_base')
            self.viewing_base_lock = None

        if self.viewing_squad_locks is not None:
            for lock_id, lock_gen in self.viewing_squad_locks.iteritems():
                if lock_gen <= -2: continue # special tombstone marker
                gamesite.nosql_client.map_feature_lock_release(self.player.home_region, SpinDB.parse_base_lock_id(lock_id)[1], self.player.user_id,
                                                               generation = lock_gen + 1, reason='release_base')
            self.viewing_squad_locks = None

    def do_chat_report(self, target_uid, target_chat_name, retmsg):
        if self.player.get_any_abtest_value('enable_chat_police', gamedata['enable_chat_police']):
            # give feedback to the sender that the report was sent
            for chan in (self.global_chat_channel, self.region_chat_channel):
                if chan:
                    self.chat_recv(chan, None,
                                   {'chat_name':'System', 'time':server_time,
                                    'type': 'you_sent_chat_report', 'target_user_id':target_uid, 'target_chat_name':target_chat_name},
                                   '', force = True, retmsg = retmsg)

        # check cooldown
        cdname = 'chat_report:%d' % target_uid
        if self.player.cooldown_active(cdname): return
        self.player.cooldown_trigger(cdname, gamedata['chat_report_cooldown'])

        # don't let gagged players make reports
        if (not self.user.chat_can_interact()) or self.player.stattab.get_player_stat('chat_gagged'): return

        if self.player.get_any_abtest_value('enable_chat_police', gamedata['enable_chat_police']):
            report_stack = Predicates.eval_cond_or_literal(gamedata['chat_report_send_stack'], self, self.player)
            if report_stack > 0:
                gamesite.msg_client.msg_send([{'to':[target_uid],
                                               'type': 'chat_report',
                                               'report_stack': report_stack,
                                               'expire_time': server_time + gamedata['chat_warn_duration']}])
                self.do_chat_send('DEVELOPER', '(%s) WARNED user %d x%d' % (self.user.country, target_uid, report_stack))
        else:
            self.do_chat_send('DEVELOPER', '(%s) REPORTED user %d' % (self.user.country, target_uid))

    def do_chat_report2(self, target_uid, channel, context_time, target_message_id):
        # ignore chat reports in prison region channels
        if channel.startswith('r:prison'): return

        # check cooldown
        if not self.player.is_developer():
            cdname = 'chat_report:%d' % target_uid
            if self.player.cooldown_active(cdname): return
            self.player.cooldown_trigger(cdname, gamedata['chat_report_cooldown'])

        # don't let gagged players make reports
        if (not self.user.chat_can_interact()) or self.player.stattab.get_player_stat('chat_gagged'): return

        # retrieve context
        context_list = gamesite.nosql_client.chat_get_context(channel, target_uid, context_time,
                                                              gamedata.get('chat_report_context_time', 120),
                                                              gamedata.get('chat_report_context_limit', 2), reason = 'do_chat_report2')

        ui_context_list = []
        target_chat_name = 'unknown'

        # target_message_id is untrusted client input, so don't pass it along in the report unless it matches something in the context
        found_message_id = None

        for x in context_list:
            if not x.get('text'): continue # system message or non-default template
            if 'chat_name' in x['sender']:
                target_chat_name = x['sender']['chat_name']
            if x['time'] == context_time or (target_message_id and x.get('id',None) == target_message_id):
                ui_text = '*** '+x['text']+' ***'
            else:
                ui_text = x['text']
            ui_context_list.append(ui_text)

            if target_message_id and x.get('id',None) == target_message_id:
                found_message_id = target_message_id

        # no messages found, or bogus message_id
        if (not ui_context_list) or \
           (target_message_id and (not found_message_id)):
            gamesite.exception_log.event(server_time, 'rejecting invalid chat report: message id %r channel %r context_time %r target_uid %r' % \
                                         (target_message_id, channel, context_time, target_uid))
            return

        ui_context = '\n'.join(ui_context_list)
        gamesite.nosql_client.chat_report(channel, self.user.user_id, self.user.get_chat_name(self.player),
                                          target_uid, target_chat_name, server_time, context_time, found_message_id, ui_context,
                                          source = 'player', reason = 'do_chat_report2')
        if 'chat_report_recipients' in SpinConfig.config:
            d = twisted.internet.utils.getProcessValue('./SpinReminders.py',
                                                       args = ['--from', '%s server' % SpinConfig.game_id_long(),
                                                               '--subject', '%s Player Chat Report (see [PCHECK](https://%sprod.spinpunch.com/PCHECK) )' % (SpinConfig.game_id_long().upper(), SpinConfig.game()),
                                                               '--body', ui_context.encode('utf-8'),
                                                               '--recipients', SpinJSON.dumps(SpinConfig.config['chat_report_recipients'])],
                                                       env = os.environ)
            d.addErrback(report_and_absorb_deferred_failure, self)

    def do_chat_send(self, channel, text, retmsg = None, bypass_gag = False, props = None):
        assert channel

        gagged = False
        if not bypass_gag:
            gagged = (not self.user.chat_can_interact()) or self.player.stattab.get_player_stat('chat_gagged')

        sender_info = {'time':server_time,
                       'chat_name': self.user.get_chat_name(self.player),
                       'user_id': self.user.user_id,
                       # summary dimensions for SQL logging. should NOT be revealed to clients!
                       # prefix with '_' to remind us to filter this out.
                       '_sum': self.player.get_denormalized_summary_props('brief')
                       }
        if self.user.facebook_id:
            sender_info['facebook_id'] = self.user.facebook_id

        if props:
            sender_info.update(props)

        if self.alliance_id_cache >= 0:
            sender_info['alliance_id'] = self.alliance_id_cache
            if self.alliance_info_cache and ('chat_tag' in self.alliance_info_cache):
                sender_info['alliance_tag'] = self.alliance_info_cache['chat_tag']

        # attach region info for chatted map coords
        if self.player.home_region:
            sender_info['home_region'] = self.player.home_region

        id = gamesite.nosql_id_generator.generate()

        if gamesite.chat_log:
            gamesite.nosql_client.chat_record(channel, id, sender_info, text, reason='do_chat_send(local)')
            gamesite.chat_log.event(server_time, {'chat_name': sender_info['chat_name'],
                                                  'id': id, 'channel': channel,
                                                  'user_id': self.user.user_id,
                                                  'player_level': self.player.resources.player_level,
                                                  'facebook_id': self.user.facebook_id,
                                                  'social_id': self.user.social_id,
                                                  'text': (u'(MUTED) ' if gagged else u'') + text})
        if gagged:
            if self.player.stattab.get_player_stat('chat_gagged'):
                # new-style gag - let the player know
                sender_info['type'] = 'you_are_gagged'
                self.chat_recv(channel, id, sender_info, '', force = True)
            else:
                # old-style gag - simulate a chat broadcast, but it only goes to the sender.
                self.chat_recv(channel, id, sender_info, text, force = True)

            # privately send to developers
            # gamesite.chat_mgr.send('DEVELOPER', None, sender_info, '(MUTED) '+text)

        else:
            gamesite.chat_mgr.send(channel, id, sender_info, text, exclude_listener = self)
            self.chat_recv(channel, id, sender_info, text, retmsg = retmsg)

        if (not props) or (props.get('type','default') in ('default','turf_winner',)):
            # only increment chat_messages_sent for genuine player-input messages
            # do not increment for automated messages like alliance join/kick/achieve/etc
            dict_increment(self.player.history, 'chat_messages_sent', 1)

    def send(self, msglist, flush_now = False):
        # rudimentary typo-checking
        assert isinstance(msglist, list)
        if len(msglist) > 0:
            assert isinstance(msglist[0], list)
            self.outgoing_messages += msglist
        if flush_now or gamedata['server'].get('deferred_message_coalesce_time',1) < 0:
            self.queue_flush_outgoing_messages()
        else:
            gamesite.gameapi.add_deferred_session(self)

    def queue_flush_outgoing_messages(self):
        if self.pending_flush_outgoing_messages: return
        self.pending_flush_outgoing_messages = reactor.callLater(0, self.do_flush_outgoing_messages)

    def do_flush_outgoing_messages(self):
        self.pending_flush_outgoing_messages = None

        gamesite.gameapi.handle_message_buffer(self, self.outgoing_messages)
        if self.is_async():
            # we're in the middle of further async processing - don't respond yet
            return

        if not self.logout_in_progress:
            gamesite.gameapi.run_deferred_actions(self, self.outgoing_messages, reason = 'flush_outgoing_messages')

        # send outgoing messages with current sync request(s)
        if self.sync_requests:
            while self.sync_requests:
                req = self.sync_requests[0]
                del self.sync_requests[0]
                gamesite.gameapi.complete_deferred_request(req, self, []) # OK - this is the "true" call
            return

        # send outgoing messages via longpoll
        if self.longpoll_request:
            if len(self.outgoing_messages) > 0 or self.logout_in_progress:
                request = self.longpoll_request
                if (not self.logout_in_progress) and self.longpoll_request_time < 0:
                    pass # reuse the same request again!
                else:
                    self.longpoll_request = None
                gamesite.gameapi.complete_longpoll(request, self)

    # function for sending chat messages to the client
    def chat_recv(self, channel, id, sender_info, text, force = False, retmsg = None, is_prepend = False):
        if (not force) and (not self.user.chat_can_interact()):
            return
        # map channel
        channel = self.encode_chat_channel_name(channel)

        # hide sender fields that clients should not know about (_sum table dimensions)
        sender_info_clean = dict((k,v) for k,v in sender_info.iteritems() if not k.startswith('_'))
        msg = ["CHAT_RECV", channel, sender_info_clean, SpinHTTP.wrap_string(text), id, is_prepend]
        if retmsg is not None:
            retmsg.append(msg)
        else:
            self.send([msg], flush_now = False) # coalesce to avoid ping storms

    # "pending" means the client has been notified and the clock is already ticking
    def incoming_attack_pending(self): return (self.incoming_attack_time > 0)

    def clear_objects(self):
        if self.cur_objects:
            for id, obj in self.cur_objects.objects.items():
                if obj.obj_id != id:
                    gamesite.exception_log.event(server_time, ('bad clear_objects id %d (player %d at %s obj %s ID %s)\n' % (id, self.player.user_id, self.viewing_base.base_id, obj.spec.name, repr(obj.obj_id))) + ''.join(traceback.format_stack()))

                self.rem_object(id)

        self.cur_objects = ObjectCollection()

    def num_objects(self): return len(self.cur_objects)

    def add_object(self, obj):
        # we have to set obj.team according to the relationship
        # between the player and the owner of the object

        if obj.team != -1:
            gamesite.exception_log.event(server_time, ('bad add_object team = %s (player %d at %s obj %s ID %s)\n' % (repr(obj.team), self.player.user_id, self.viewing_base.base_id, obj.spec.name, repr(obj.obj_id))) + ''.join(traceback.format_stack()))
            obj.team = -1

        if obj.owner is EnvironmentOwner:
            obj.team = 'environment'
        elif obj.owner is RogueOwner:
            obj.team = 'enemy'
        elif obj.owner is self.player:
            obj.team = 'player'
        else:
            obj.team = 'enemy'

        # set up environmental auras
        if obj.is_mobile():
            climate = gamedata['climates'].get(self.viewing_base.base_climate, None)
            if climate and ('applies_aura' in climate):
                if obj.auras is None: obj.auras = []
                Aura.apply_aura(obj.auras, climate['applies_aura'], climate['aura_strength'], session_only = True)

        return self.cur_objects.add_object(obj)

    def rem_object(self, id):
        obj = self.cur_objects.objects[id]

        if obj.obj_id != id:
             gamesite.exception_log.event(server_time, ('bad rem_object id %d (player %d at %s obj %s ID %d)\n' % (id, self.player.user_id, self.viewing_base.base_id, obj.spec.name, repr(obj.obj_id))) + ''.join(traceback.format_stack()))

        # remove environmental auras
        if obj.auras: Aura.prune_auras(obj.auras, is_session_change = True)
        obj.team = -1

        return self.cur_objects.rem_object(id)
    def get_object(self, id):
        return self.cur_objects.objects[id]
    def get_object_if_exists(self, id):
        return self.cur_objects.objects.get(id, None)
    def has_object(self, id):
        return self.cur_objects and self.cur_objects.has_object(id)
    def iter_objects(self): return self.cur_objects.iter_objects()

    def open_attack_log(self, attack_end_time, attacker_id, defender_id, base_id = None):
        if self.player.tutorial_state != "COMPLETE":
            attacker_id = -1
            defender_id = -1
        self.attack_log = AttackLog(server_time, attacker_id, defender_id, base_id)

        if gamedata['server'].get('enable_damage_log',True) and self.player.tutorial_state == "COMPLETE":
            self.damage_log = DamageLog(self.viewing_base.base_id, self.player)

        replay_token = None
        if self.attack_log.is_active():
            replay_token = generate_mail_id() # just a random token
            expire_time = attack_end_time + gamedata['server'].get('battle_replay_receive_time',600)
            self.attack_replay_receivers[replay_token] = AttackReplayReceiver(self.user.user_id, server_time, expire_time, attacker_id, defender_id, base_id)
        return replay_token

    def reset_attack_log(self):
        if self.attack_log:
            self.attack_log.close()
            self.attack_log = None
        self.damage_log = None

    def log_attack_units(self, owner_id, obj_list, event_name, props = None):
        for obj in sorted(obj_list, key = lambda obj: (obj.spec.kind, obj.spec.name)):
            if obj.is_mobile() or obj.spec.history_category in ('turrets','turret_emplacements'):
                self.log_attack_unit(owner_id, obj, event_name, props = props)
    def log_attack_unit(self, owner_id, obj, event_name, props = None, fake_xy = None, killer_info = None):
        if props is None:
            props = {}
        if fake_xy:
            x, y = fake_xy
        else:
            x, y = obj.x, obj.y
        props['unit_type'] = obj.spec.name
        props['x'] = x
        props['y'] = y
        props['level'] = obj.level
        props['hp'] = obj.hp
        props['obj_id'] = obj.obj_id

        if gamedata['server'].get('log_battles',1) >= 2:
            props['state'] = obj.serialize_state()

        # record turret head info
        if obj.is_building():
            for item in Equipment.equip_iter(obj.equipment):
                spec = gamedata['items'].get(item['spec'], None)
                if spec:
                    if Equipment.is_turret_head_item_spec(spec):
                        props['turret_head'] = item
                        break

        attacker_user_id = -1

        if killer_info:
            if (killer_info['spec'] not in gamedata['units']) and (killer_info['spec'] not in gamedata['buildings']) and (killer_info['spec'] not in gamedata['inert']):
                gamesite.exception_log.event(server_time, 'log_attack_unit by %d: unknown spec %s' % (self.player.user_id, killer_info['spec']))
                killer_info = None

        if killer_info:
            if killer_info['team'] == 'player':
                attacker_user_id = self.player.user_id
            elif self.home_base:
                if self.incoming_attack_id > 0:
                    attacker_user_id = self.incoming_attack_id
                else:
                    gamesite.exception_log.event(server_time, 'log_attack_unit by %d: team %s at home but no incoming_attack_id' % (self.player.user_id, killer_info['team']))
                    killer_info = None
            else:
                attacker_user_id = self.viewing_player.user_id

        if killer_info:
            props['attacker_user_id'] = attacker_user_id
            props['attacker_type'] = killer_info['spec']
            props['attacker_level'] = killer_info['level']
            if 'id' in killer_info: props['attacker_obj_id'] = killer_info['id']
            for EXTRA in ('spellname','mine','turret_head'): # extra metadata on the killer
                if EXTRA in killer_info: props['attacker_'+EXTRA] = killer_info[EXTRA]

        self.attack_event(owner_id, event_name, props)

    def attack_event(self, user_id, event_name, props):
        if self.attack_log is None:
            if gamedata['server']['log_self_attacks']:
                gamesite.exception_log.event(server_time, 'attack_event with no open log! user ' + str(user_id))
            return

        # fake attacking player ID
        if user_id == RogueOwner.user_id and self.incoming_attack_id > 0:
            user_id = self.incoming_attack_id

        props['code'] = int(event_name[0:4])
        props['event_name'] = event_name
        props['user_id'] = user_id
        self.attack_log.event(props)

    # record the expenditure of a consumable item during the current battle
    def attack_item_expended(self, user_id, specname, stack):
        if str(user_id) not in self.items_expended: self.items_expended[str(user_id)] = {}
        dict_increment(self.items_expended[str(user_id)], specname, stack)

    def increment_player_metric(self, counter, amount, time_series = True, bucket = False, bucket_size = None):
        return record_player_metric(self.player, dict_increment, counter, amount, time_series=time_series, bucket=bucket, bucket_size=bucket_size)
    def setmax_player_metric(self, counter, amount, time_series = True, bucket = False, bucket_size = None):
        return record_player_metric(self.player, dict_setmax, counter, amount, time_series=time_series, bucket=bucket, bucket_size=bucket_size)
    def setvalue_player_metric(self, counter, amount, time_series = True, bucket = False, bucket_size = None):
        return record_player_metric(self.player, dict_setvalue, counter, amount, time_series=time_series, bucket=bucket, bucket_size=bucket_size)

    # call this to record tech progress in player.history when a new tech level is reached
    def do_tech_metric(self, setmax, player, tech):
        # 1) tech:foo_production for individual techs
        setmax('tech:'+tech.name, player.tech[tech.name])

        unit_spec = tech.unlocks_unit()
        if unit_spec:
            # 1a) foo_unlocked for individual units
            setmax('unit:'+unit_spec.name+':unlocked', 1)

            # 2) rovers/transports/gunships_unlocked for tech lines (# of units unlocked)
            category = unit_spec.manufacture_category
            setmax(category+'_unlocked', sum([1 for k, v in player.tech.iteritems() if (k in gamedata['tech'] and v >= 1 and TechSpec.lookup(k).unlocks_unit_category() == category)]))
            setmax(category+'_researched', sum([v for k, v in player.tech.iteritems() if (k in gamedata['tech'] and TechSpec.lookup(k).unlocks_unit_category() == category)]))
            setmax('units_unlocked', sum([1 for k, v in player.tech.iteritems() if (k in gamedata['tech'] and v >= 1 and TechSpec.lookup(k).unlocks_unit())]))
            setmax('units_researched', sum([v for k, v in player.tech.iteritems() if (k in gamedata['tech'] and TechSpec.lookup(k).unlocks_unit())]))

        mod_spec = tech.mods_unit()
        if mod_spec:
            setmax('mod_techs_unlocked', sum([1 for k, v in player.tech.iteritems() if (k in gamedata['tech'] and v >= 1 and TechSpec.lookup(k).mods_unit())]))
            setmax('mod_techs_researched', sum([v for k, v in player.tech.iteritems() if (k in gamedata['tech'] and TechSpec.lookup(k).mods_unit())]))

        # 4) techs_unlocked/researched (overall)
        setmax('techs_unlocked', sum([1 for k, v in player.tech.iteritems() if k in gamedata['tech']]))
        setmax('techs_researched', sum([v for k, v in player.tech.iteritems() if k in gamedata['tech']]))

    def tech_player_metric(self, tech):
        self.do_tech_metric(self.setmax_player_metric, self.player, tech)

    # for debug printing, show ladder state for current battle
    def format_ladder_state(self):
        if not self.ladder_state: return ''
        return '%d (L%d CC%d %dpts) %+d/%+d vs %d (L%d CC%d %dpts) %+d/%+d' % \
               (self.player.user_id, self.player.resources.player_level, self.player.get_townhall_level(), self.player.ladder_points(), self.ladder_state['points']['victory'][str(self.player.user_id)], self.ladder_state['points']['defeat'][str(self.player.user_id)],
                self.viewing_player.user_id, self.viewing_player.resources.player_level, self.viewing_player.get_townhall_level(), self.viewing_player.ladder_points(), self.ladder_state['points']['victory'][str(self.viewing_player.user_id)], self.ladder_state['points']['defeat'][str(self.viewing_player.user_id)])

    def spawn_new_units_for_player(self, player, retmsg, units, temporary = False,
                                   limit_break = False,
                                   limit_reduce_qty = False,
                                   xyloc = None, xyscatter = None, persist = False):
        new_objects = spawn_units(player, self.viewing_base if temporary else player.my_home, units, temporary = temporary, limit_break = limit_break, limit_reduce_qty = limit_reduce_qty, xyloc = xyloc, xyscatter = xyscatter, observer = self.player, persist = persist)
        for obj in new_objects:
            if (not temporary) and (player is self.player):
                player.send_army_update_one(obj, retmsg)
                if(obj.squad_id == SQUAD_IDS.RESERVES):
                    retmsg.append(["MANUFACTURE_OVERFLOW_TO_RESERVES", obj.obj_id])

            # add objects to session, if temp objects, or currently looking at the owner's base
            if (self.has_attacked or gamedata.get('enable_defending_units',True)) and \
               (temporary or (self.viewing_base is player.my_home and ((obj.squad_id or 0) == SQUAD_IDS.BASE_DEFENDERS))):
                self.add_object(obj)
                retmsg.append(["OBJECT_CREATED2", obj.serialize_state()])
                if obj.auras:
                    retmsg.append(["OBJECT_AURAS_UPDATE", obj.serialize_auras()])

        return new_objects

    def take_units_from_player(self, player, retmsg, units):
        taken_objects = []

        togo = copy.deepcopy(units)
        for obj in player.home_base_iter():
            if obj.is_mobile():
                if obj.spec.name in togo:
                    togo[obj.spec.name] -= 1
                    if togo[obj.spec.name] <= 0:
                        del togo[obj.spec.name]
                    taken_objects.append(obj)

        for obj in taken_objects:
            player.unit_repair_cancel(obj)
            player.home_base_remove(obj)

        for obj in taken_objects:
            if self.has_object(obj.obj_id):
                retmsg.append(["OBJECT_REMOVED2", obj.obj_id])
                self.rem_object(obj.obj_id)
            if player is self.player:
                player.send_army_update_destroyed(obj, retmsg) # may be redundant with OBJECT_REMOVED2

        return taken_objects

    def spawn_security_team(self, player, retmsg, source_obj, xyloc, unit_dic, spread, persist):
        if source_obj.is_mobile():
            event_name = '3971_security_team_spawned_from_unit'
            if spread < 0: spread = 0
            scatter = [spread, spread]
        else:
            event_name = '3970_security_team_spawned'
            if spread < 0: spread = 1
            scatter = [spread*gamedata['guard_deploy_spread']*source_obj.spec.unit_collision_gridsize[0]//2,
                       spread*gamedata['guard_deploy_spread']*source_obj.spec.unit_collision_gridsize[1]//2]
        units = self.spawn_new_units_for_player(player, retmsg, unit_dic, temporary = True, xyloc = xyloc, xyscatter = scatter, persist = persist)
        self.log_attack_units(player.user_id, units, event_name,
                              props = {'source_obj_specname': source_obj.spec.name,
                                       'source_obj_level': source_obj.level})
        if self.damage_log: self.damage_log.init_multi(units)

    def give_tech(self, player, retmsg, tech_name, level, lab, method, give_xp = True):
        assert player is self.player
        spec = player.get_abtest_spec(TechSpec, tech_name)

        current = player.tech.get(tech_name, 0)
        if current >= level: return

        # cancel any ongoing research of this tech
        for obj in player.home_base_iter():
            if obj.is_building() and obj.is_researcher():
                if obj.research_item == tech_name:
                    gamesite.gameapi.do_cancel_research(self, retmsg, obj)

        player.tech[tech_name] = level
        player.recalc_stattab(self.player)
        player.update_unit_levels(self.player, tech_name, self, retmsg)

        if give_xp:
            # award XP for each level achieved along the way
            xp = 0
            for step in xrange(current+1, level+1):
                override = TechSpec.get_leveled_quantity(spec.upgrade_xp, step)
                if override >= 0:
                    xp += override
                else:
                    xp += int(gamedata['player_xp']['research'] * \
                              sum((TechSpec.get_leveled_quantity(getattr(spec, 'cost_'+res), step) for res in gamedata['resources']), 0))

            gamesite.gameapi.give_xp_to(self, player, retmsg, xp, 'research', [lab.x,lab.y] if lab else None, obj_session_id = lab.obj_id if lab else None)

        if player is self.player:
            tech_reply = "TECH_UPDATE"
            state_reply = "PLAYER_STATE_UPDATE"
        elif player is self.viewing_player:
            tech_reply = "ENEMY_TECH_UPDATE"
            state_reply = "ENEMY_STATE_UPDATE"
        else:
            tech_reply = None
            state_reply = None
        if tech_reply is not None:
            retmsg.append([tech_reply, player.tech])
            retmsg.append([state_reply, player.resources.calc_snapshot().serialize(enemy = (state_reply == "ENEMY_STATE_UPDATE"))])
            if player is self.player:
                retmsg.append(["NEW_TECH", tech_name, self.player.tech[tech_name], lab.obj_id if lab else None])

        player.stattab.send_update(self, retmsg)

        # send metrics
        if 0 or LOTS_OF_METRICS: metric_event_coded(object.owner.user_id, '3080_research_tech', {'tech_type':tech_name, 'level':level, 'method':method})
        mevent = TechSpec.get_leveled_quantity(spec.metric_events, level)
        if mevent: metric_event_coded(player.user_id, mevent, {})

        if player is self.player:
            self.tech_player_metric(spec)
            unl = spec.unlocks_unit()
            if unl and level == 1:
                self.user.create_fb_open_graph_action_unlock_unit(unl.name)
        else:
            gamesite.exception_log.event(server_time, 'tech completion for non-session.player! %d' % player.user_id)

    # check for forced expirations of an inventory item by spec
    def get_item_spec_forced_expiration(self, spec, prev_expire_time = -1, ref_time = None):
        expire_time = prev_expire_time
        if ref_time is None: ref_time = self.player.get_absolute_time()
        if 'force_duration' in spec:
            force_duration = Predicates.eval_cond_or_literal(spec['force_duration'], self, self.player)
            if force_duration > 0: expire_time = min(force_duration+ref_time, expire_time) if (expire_time > 0) else force_duration+ref_time
        if 'force_expire_by' in spec:
            expire_by_data = Predicates.eval_cond_or_literal(spec['force_expire_by'], self, self.player)
            if isinstance(expire_by_data, dict): # event-driven
                neg_time_to_end = self.player.get_event_time(expire_by_data.get('event_kind','current_event'), expire_by_data.get('event_name',None), 'end', ignore_activation = True, t_offset = ref_time - self.player.get_absolute_time())
                if neg_time_to_end is None: # event not active!
                    expire_by = -1
                else:
                    expire_by = ref_time + (-neg_time_to_end)
            else: # literal int
                assert isinstance(expire_by_data, int)
                expire_by = expire_by_data
            if expire_by > 0: expire_time = min(expire_by, expire_time) if (expire_time > 0) else expire_by
        return expire_time

    def get_loot_items(self, player, loot_table, item_duration, item_expire_at, duration_ref_time = None):
        assert player is self.player

        absolute_time = player.get_absolute_time()
        if duration_ref_time is None:
            duration_ref_time = absolute_time

        loot = LootTable.get_loot(gamedata['loot_tables'], loot_table,
                                  rand_func = player.random_source.random,
                                  cond_resolver = lambda pred: Predicates.read_predicate(pred).is_satisfied(player,None))
        if item_expire_at > 0:
            expire_time = item_expire_at
        elif item_duration > 0:
            expire_time = duration_ref_time + item_duration
        else:
            expire_time = -1

        if (expire_time > 0) and (expire_time < absolute_time): return [] # all items already expired

        to_remove = []
        for item in loot:
            spec = gamedata['items'].get(item['spec'], None)
            if not spec:
                gamesite.exception_log.event(server_time, 'get_loot_items(): player %d got invalid item "%s"' % (player.user_id, item['spec']))
                to_remove.append(item)
                continue

            # check for expiration timers on individual items
            item_expire_time = expire_time
            if item.get('item_expire_at',-1) > 0:
                item_expire_time = min(item['item_expire_at'], item_expire_time) if (item_expire_time > 0) else item['item_expire_at']
                del item['item_expire_at']
            if item.get('item_duration',-1) > 0:
                item_expire_time = min(item['item_duration']+duration_ref_time, item_expire_time) if (item_expire_time > 0) else item['item_duration']+duration_ref_time
                del item['item_duration']

            # allow items.json entry to force expiration
            item_expire_time = self.get_item_spec_forced_expiration(spec, prev_expire_time = item_expire_time, ref_time = duration_ref_time)

            if item_expire_time > 0:
                if item_expire_time < absolute_time: # item already expired
                    to_remove.append(item)
                    continue
                item['expire_time'] = item_expire_time

            # special case: token quantity boost
            if spec.get('category') == 'token':
                stack_mult = player.stattab.get_player_stat('loot_factor_tokens')
                if stack_mult != 1:
                    item['stack'] = int(item.get('stack',1) * stack_mult + 0.5)

        for item in to_remove:
            loot.remove(item)
        return loot

    def give_loot(self, player, retmsg, loot_table, reason, mail_template = None, item_duration = -1, item_expire_at = -1, reason_id = None,
                  force_send_by_mail = False, show_items_discovered = False):
        loot = self.get_loot_items(player, loot_table, item_duration, item_expire_at)
        if not loot: return []

        if reason == 'ai_base':
            str_reason = 'AI %d (%s L%d)' % (self.viewing_player.user_id, self.viewing_user.get_ui_name(self.viewing_player), self.viewing_player.resources.player_level)
        elif reason == 'ai_attack':
            str_reason = 'AI attack by %d' % self.incoming_attack_id
        elif reason == 'quest':
            str_reason = 'quest:' + str(reason_id)
        elif reason == 'level_up':
            str_reason = 'level_up:' + str(player.resources.player_level)
        elif reason == 'special':
            str_reason = 'special'
        elif reason == 'refund':
            str_reason = 'refund:'+str(reason_id)
        elif reason == 'promo_code':
            str_reason = 'promo_code:'+reason_id
        else:
            gamesite.exception_log.event(server_time, 'unknown give_loot reason %s!' % reason)
            return []

        discovered_where = None

        # send modally?
        if (reason not in ('quest','level_up')) and (not force_send_by_mail) and \
           player.get_any_abtest_value('modal_looting', gamedata['modal_looting']) and \
           player.find_object_by_type(gamedata['inventory_building']):
            discovered_where = 'loot_buffer'
            player.loot_buffer += loot
            for item in loot:
                player.inventory_log_event('5125_item_obtained', item['spec'], item.get('stack',1), item.get('expire_time',-1), level=item.get('level',None), reason=reason)
        elif reason == 'ai_base':
            discovered_where = 'messages'
            player.send_loot_mail(self.viewing_user.get_ui_name(self.viewing_player), self.viewing_player.resources.player_level,
                                  loot, retmsg, mail_template = mail_template)
        elif reason == 'ai_attack':
            discovered_where = 'messages'
            ai_id = self.incoming_attack_id
            if str(ai_id) in gamedata['ai_bases_server']['bases']:
                base = gamedata['ai_bases_server']['bases'][str(ai_id)]
                player.send_loot_mail(base['ui_name'], base['resources']['player_level'],
                                      loot, retmsg, mail_template = mail_template)
            else:
                gamesite.exception_log.event(server_time, 'unknown give_loot ai_attack %s!' % repr(ai_id))
                return []
        elif reason == 'quest':
            discovered_where = 'messages'
            player.send_loot_mail(gamedata['quests'][reason_id]['ui_name'], 0, loot, retmsg, mail_template = mail_template or gamedata['strings']['quest_reward_mail'])
        elif reason == 'level_up':
            discovered_where = 'messages'
            player.send_loot_mail(str(player.resources.player_level), 0, loot, retmsg, mail_template = gamedata['strings']['level_up_reward_mail'])

        elif reason in ('special','refund','promo_code'):
            discovered_where = 'messages'
            if mail_template is None:
                gamesite.exception_log.event(server_time, 'give_loot with %s reason must include a mail_template!' % reason)
                return []
            player.send_loot_mail('', 0, loot, retmsg, mail_template = mail_template)

        self.increment_player_metric('items_looted', len(loot), time_series = False)

        if gamedata['server']['log_item_loot'] >= 1:
            metric_event_coded(self.player.user_id, '3870_loot_given', {'items':copy.deepcopy(loot),
                                                                        'where':self.viewing_base.base_id if self.viewing_base else 'unknown',
                                                                        'reason':str_reason})
            if gamedata['server']['log_item_loot'] >= 2:
                gamesite.exception_log.event(server_time, 'player %d looted from %s: %s' % \
                                             (self.player.user_id, str_reason, repr(loot)))

        # for loot earned from AI fights, add to session.loot so that the victory dialog will display it
        add_to_session_loot = (reason in ('ai_base', 'ai_attack'))

        if add_to_session_loot and loot:
            if 'items' not in self.loot:
                self.loot['items'] = []
            self.loot['items'] += copy.deepcopy(loot)

        if show_items_discovered and discovered_where and loot:
            retmsg.append(["ITEMS_DISCOVERED", copy.deepcopy(loot), -1, discovered_where])

        return copy.deepcopy(loot)

    def give_trophies(self, player, kind, amount):
        assert self.has_attacked
        assert kind in ('pve','pvp','pvv')
        key = 'trophies_'+kind

        assert (player is self.player) or (player is self.viewing_player)
        if player is self.player:
            pass
        elif player is self.viewing_player:
            key = 'viewing_'+key

        dict_increment(self.loot, key, amount)

    def claim_battle_star(self, name):
        assert name in gamedata.get('battle_stars',{})
        if name in self.loot.get('battle_stars',{}): return False # already claimed
        if not Predicates.read_predicate(gamedata['battle_stars'][name]).is_satisfied2(self, self.player, None):
            return False
        if 'battle_stars' not in self.loot: self.loot['battle_stars'] = {}
        self.loot['battle_stars'][name] = 1
        return True
    def claim_all_battle_stars(self):
        for name, pred in gamedata.get('battle_stars',{}).iteritems():
            if name not in self.loot.get('battle_stars',{}):
                self.claim_battle_star(name)

    def heal_all_units(self, retmsg):
        for obj in self.player.home_base_iter():
            if obj.is_mobile() and obj.is_damaged():
                self.player.unit_repair_cancel(obj, force_refund = True)
                obj.heal_to_full()
                if self.has_object(obj.obj_id): # don't send updates for zombie units, since they aren't in the session
                    retmsg.append(["OBJECT_STATE_UPDATE2", obj.serialize_state()])
                else:
                    self.player.send_army_update_one(obj, retmsg)

        # heal deployed units (if we can)
        if gamesite.nosql_client and self.player.home_region:
            states = gamesite.nosql_client.get_mobile_objects_by_owner(self.player.home_region, self.player.user_id, reason='heal_all_units')
            for state in states:
                if state.get('hp_ratio',1) < 1 or (state.get('hp',state.get('max_hp',0)) < state.get('max_hp',0)):
                    gamesite.nosql_client.heal_mobile_object_by_id(self.player.home_region, state['obj_id'], reason='heal_all_units')
                    if 'hp_ratio' in state: del state['hp_ratio']
                    if 'hp' in state: del state['hp']
            retmsg.append(["PLAYER_ARMY_UPDATE", filter(lambda x: x is not None, [self.player.strip_fields_for_army_update(state) for state in states])])

            self.player.unit_repair_send(retmsg)

    def heal_all_buildings(self, retmsg):
        for obj in self.player.home_base_iter():
            if obj.is_building() and obj.is_damaged():
                obj.heal_to_full()
                if self.has_object(obj.obj_id):
                    retmsg.append(["OBJECT_STATE_UPDATE2", obj.serialize_state()])

        self.power_changed(self.viewing_base, None, retmsg)

    # send any one-time ad network events whose predicates have become true
    def adnetworks(self):
        ret = []
        for api, context in [('adotomi', self.user.adotomi_context),
                             ('dauup', self.user.dauup_context),
                             ('dauup2', self.user.dauup2_context),
                             ('adparlor', self.user.adparlor_context),
                             ('liniad', self.user.liniad_context),
                             ('fb_conversion_pixels', self.user.fb_conversion_pixels_context),
                             ('fb_app_events', True if (self.user.frame_platform == 'fb') else None),
                             ('kg_conversion_pixels', self.user.kg_conversion_pixels_context),
                             ]:
            if not context: continue
            if (api not in gamedata['adnetworks']): continue
            if ('master_filter' in gamedata['adnetworks'][api]) and \
               (not Predicates.read_predicate(gamedata['adnetworks'][api]['master_filter']).is_satisfied(self.player, None)):
                continue
            ret.append((api, context))
        return ret

    def send_adnetwork_events(self, retmsg):
        for api, context in self.adnetworks():
            for name in gamedata['adnetworks'][api]['events'].iterkeys():
                self.send_adnetwork_event_conditional(retmsg, api, context, name)

    def send_adnetwork_acquisition_event(self, retmsg):
        for api, context in self.adnetworks():
            self.send_adnetwork_event_conditional(retmsg, api, context, 'acquisition_event')
    def send_adnetwork_visit_event(self, retmsg):
        for api, context in self.adnetworks():
            if 'visit_event' in gamedata['adnetworks'][api]:
                self.do_send_adnetwork_event(retmsg, api, context, 'visit_event', gamedata['adnetworks'][api]['visit_event'])

    def send_adnetwork_purchase_event(self, retmsg, order_id, post_fbtax_dollars):
        for api, context in self.adnetworks():
            if 'purchase_event' in gamedata['adnetworks'][api]:
                self.do_send_adnetwork_event(retmsg, api, context,
                                             'purchase_event', gamedata['adnetworks'][api]['purchase_event'],
                                             order_id = order_id,
                                             post_fbtax_dollars = post_fbtax_dollars,
                                             currency = 'USD')

    def send_adnetwork_event_conditional(self, retmsg, api, context, name):
        if not context: return
        if name not in gamedata['adnetworks'][api]['events']: return

        data = gamedata['adnetworks'][api]['events'][name]
        history_key = api+':'+name
        status = self.player.history.get(history_key, 0)
        if status:
            # already sent the event, don't send it again
            if gamedata['server'].get('log_'+api,1) and 0:
                gamesite.exception_log.event(server_time, '%s API for user %d gen %d: already sent event %s (%s), skipping' % \
                                             (api, self.user.user_id, self.player.generation, name, history_key))
            return

        if not Predicates.read_predicate(data['predicate']).is_satisfied2(self, self.player, None): return

        if gamedata['server'].get('log_'+api,1) and 0:
            gamesite.exception_log.event(server_time, '%s API for user %d gen %d: event %s (%s) status %s' % \
                                         (api, self.user.user_id, self.player.generation, name, history_key, str(status)))

        if self.do_send_adnetwork_event(retmsg, api, context, name, data):
            # mark event as sent
            self.player.history[history_key] = 1

    # send one event to the ad network API. Return false if the send was blocked by the server configuration.
    def do_send_adnetwork_event(self, retmsg, api, context, name, data, *args, **kwargs):
        if not context: return False

        if 'fb_app_event' in data:
            return self.do_send_adnetwork_event_fb_app_event(retmsg, api, context, name, data, *args, **kwargs)
        elif 'client' in data:
            return self.do_send_adnetwork_event_clientside(retmsg, api, context, name, data, *args, **kwargs)
        else:
            return self.do_send_adnetwork_event_serverside(retmsg, api, context, name, data, *args, **kwargs)

    def do_send_adnetwork_event_fb_app_event(self, retmsg, api, context, name, data, order_id = None, post_fbtax_dollars = None, currency = None):
        if (retmsg is None):
            if gamedata['server'].get('log_'+api,1):
                gamesite.exception_log.event(server_time, '%s API for user %d (%s): cannot send at logout, will send on next login' % \
                                             (api, self.user.user_id, name))
            return False

        log_props = {'user_id': self.user.user_id, 'kpi': name, 'name': data['fb_app_event']['name']}
        for FIELD in ('value', 'params'):
            if FIELD in data['fb_app_event']:
                log_props[FIELD] = data['fb_app_event'][FIELD]

        if gamedata['server'].get('log_'+api,1):
            gamesite.exception_log.event(server_time, '%s API for user %d (%s): %s' % \
                                         (api, self.user.user_id, name, '(sent)' if gamedata.get('enable_fb_app_events', False) else '(disabled)'))

        if gamedata.get('enable_fb_app_events', False):
            self.user.log_adnetwork_event(api, log_props) # don't bother logging unless enabled
            retmsg.append(["FB_APP_EVENT", data['fb_app_event']['name'], data['fb_app_event'].get('value',None), data['fb_app_event'].get('params',None)])
            return True
        else:
            return False

    def do_send_adnetwork_event_clientside(self, retmsg, api, context, name, data, order_id = None, post_fbtax_dollars = None, currency = None):
        #gamesite.exception_log.event(server_time, "HERE CLIENT %s %s" % (api, name))
        if (retmsg is None):
            if gamedata['server'].get('log_'+api,1):
                gamesite.exception_log.event(server_time, '%s API for user %d (%s): cannot send at logout, will send on next login' % \
                                             (api, self.user.user_id, name))
            return False

        s = data['client']
        if post_fbtax_dollars is not None:
            s = s.replace('$POST_FBTAX_DOLLARS', '%.2f' % post_fbtax_dollars)

        log_props = {'user_id': self.user.user_id, 'kpi': name, 'context': context}
        if post_fbtax_dollars is not None: log_props['post_fbtax_dollars'] = post_fbtax_dollars
        if currency is not None: log_props['currency'] = currency
        self.user.log_adnetwork_event(api, log_props)

        if gamedata['server'].get('log_'+api,1):
            gamesite.exception_log.event(server_time, '%s API for user %d (%s): %s %s' % \
                                         (api, self.user.user_id, name, s, '(sent)' if SpinConfig.config.get('enable_'+api,False) else '(disabled)'))

        if SpinConfig.config.get('enable_'+api,False):
            retmsg.append(["CLIENT_TRACKING_PIXEL_IMAGE", s, 0])
            return True
        else:
            return False

    def do_send_adnetwork_event_serverside(self, retmsg, api, context, name, data, order_id = None, post_fbtax_dollars = None, currency = None):
        #gamesite.exception_log.event(server_time, "HERE SERVER %s %s" % (api, name))
        # construct query string
        params = {}

        context_key = data.get('context_key', gamedata['adnetworks'][api]['context_key'])
        if context_key:
            if type(context_key) is dict:
                for k, v in context_key.iteritems():
                    params[k] = context.get(v, 'UNKNOWN')
            else:
                params[context_key] = context

        kongregate_api_key_key = gamedata['adnetworks'][api].get('kongregate_api_key_key', None)
        if kongregate_api_key_key:
            params[kongregate_api_key_key] = SpinConfig.config.get('kongregate_api_key', 'unknown')

        facebook_id_key = data.get('facebook_id_key', gamedata['adnetworks'][api].get('facebook_id_key',None))
        if facebook_id_key and self.user.facebook_id:
            params[facebook_id_key] = str(self.user.facebook_id)

        dauup_account_creation_time_key = data.get('dauup_account_creation_time_key', gamedata['adnetworks'][api].get('dauup_account_creation_time_key',None))
        if dauup_account_creation_time_key and self.user.account_creation_time > 0:
            params[dauup_account_creation_time_key] = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(self.user.account_creation_time))

        if 'qs' in data:
            # inject preformatted key/value pairs (DAU-UP uses these)
            for key, val in data['qs'].iteritems():
                params[key] = val

        if api == 'adotomi':
            # special case, Adotomi has a feature to uniquify requests based on a string
            params['order_id'] = '%d_%s' % (self.user.user_id, game_id)

            if post_fbtax_dollars is not None: params['amount'] = str('%.2f' % post_fbtax_dollars)
            if currency is not None: params['currency'] = str(currency)
        elif api == 'dauup':
            if post_fbtax_dollars is not None: params['q1'] = str('%.2f' % post_fbtax_dollars)
        elif api == 'dauup2':
            if post_fbtax_dollars is not None: params['sb_v'] = str('%d' % int(100*post_fbtax_dollars))
        elif api == 'liniad':
            if post_fbtax_dollars is not None: params['sum'] = str('%.2f' % post_fbtax_dollars)

        query = urllib.urlencode(params)

        url = data['url']+'?'+query

        log_props = {'user_id': self.user.user_id, 'kpi': name, 'context': context, 'url': url}
        if post_fbtax_dollars is not None: log_props['post_fbtax_dollars'] = post_fbtax_dollars
        if currency is not None: log_props['currency'] = currency
        self.user.log_adnetwork_event(api, log_props)

        if gamedata['server'].get('log_'+api,1):
            gamesite.exception_log.event(server_time, '%s API for user %d (%s): GET %s %s' % \
                                         (api, self.user.user_id, name, url, '(sent)' if SpinConfig.config.get('enable_'+api,False) else '(disabled)'))

        if SpinConfig.config.get('enable_'+api,False):
            gamesite.AsyncHTTP_metrics.queue_request(server_time, url, lambda result: None)
            return True
        else:
            return False

    def execute_consequent_safe(self, cons, player, retmsg, context=None, reason='unknown', rethrow = False):
        try:
            Consequents.read_consequent(cons).execute(self, player, retmsg, context=context)
        except Exception:
            gamesite.exception_log.event(server_time, 'Consequent exception player %d from %s:\n%s\n%s' % (player.user_id, reason, repr(cons), traceback.format_exc().strip())) # OK
            if rethrow:
                raise

    # FORCED AI ATTACKS
    #
    # States: Normal -> server calls start_ai_attack(), sends AI_ATTACK_WARNING -> session is put into incoming_attack_pending state
    # then either server's background timer or client calls deploy_ai_attack() (BEGIN_AI_ATTACK) to spawn the units


    def start_ai_attack(self, retmsg, attack_type, override_protection = False, verbose = False):
        if (not self.home_base) or self.has_attacked or self.incoming_attack_pending(): return
        if (not override_protection) and self.player.has_damage_protection(): return

        if attack_type == 'daily':
            pass # see below
        elif attack_type in gamedata['ai_attacks']['attack_types']:
            if 'activation' in gamedata['ai_attacks']['attack_types'][attack_type]:
                if (not self.player.is_cheater) and (not Predicates.read_predicate(gamedata['ai_attacks']['attack_types'][attack_type]['activation']).is_satisfied(self.player,None)):
                    retmsg.append(["ERROR", "CANNOT_CALL_INVALID_AI_ATTACK"])
                    return
        elif str(attack_type) in gamedata['ai_bases_server']['bases']:
            if (not self.player.is_cheater) and (not Predicates.read_predicate(gamedata['ai_bases_server']['bases'][str(attack_type)]['activation']).is_satisfied(self.player,None)):
                retmsg.append(["ERROR", "CANNOT_CALL_INVALID_AI_ATTACK"])
                return
        else:
                retmsg.append(["ERROR", "CANNOT_CALL_INVALID_AI_ATTACK"])
                return

        self.incoming_attack_type = attack_type
        self.incoming_attack_data = None

        if attack_type == 'tutorial':
            # it's the Lion Stone attack in the tutorial
            flavor_text_index = 0
            attack_warning_time = gamedata['ai_attacks']['attack_types']['tutorial']['warning_time']
            self.incoming_attack_units = copy.deepcopy(gamedata['ai_attacks']['attack_types']['tutorial']['units'])
            self.incoming_attack_direction = 'tutorial'
            self.incoming_attack_id = gamedata['ai_attacks']['attack_types']['tutorial']['attacker_id']
        else:
            if attack_type == 'daily':
                # decide on attack size
                if (self.player.my_home.calc_base_damage() < gamedata['ai_attacks']['max_base_damage_big_attack']) and \
                   (self.player.resources.player_level >= gamedata['ai_attacks']['min_level_big_attack']):
                    attack_type = 'daily_big'
                else:
                    attack_type = 'daily_small'
                self.incoming_attack_type = attack_type

            if self.incoming_attack_type in gamedata['ai_attacks']['attack_types']:
                self.incoming_attack_data = gamedata['ai_attacks']['attack_types'][self.incoming_attack_type]
                self.incoming_attack_id = self.incoming_attack_data['attacker_id']
            elif str(self.incoming_attack_type) in gamedata['ai_bases_server']['bases']:
                self.incoming_attack_data = gamedata['ai_bases_server']['bases'][str(self.incoming_attack_type)]
                self.incoming_attack_id = int(self.incoming_attack_type)

            flavor_text_index = 0 + int(random.random()*(len(gamedata['ai_attacks_client']['flavor_text'])))
            direction_index = int(random.random()*(len(gamedata['ai_attacks_client']['directions'])))
            self.incoming_attack_direction = gamedata['ai_attacks_client']['directions'].keys()[direction_index]
            attack_warning_time = self.incoming_attack_data.get('warning_time', 0)

            if 'units' in self.incoming_attack_data:
                self.incoming_attack_units = copy.deepcopy(self.incoming_attack_data['units'])
            elif 'waves' in self.incoming_attack_data:
                self.incoming_attack_units = self.player.get_ai_attack_units(self.incoming_attack_data)

        self.incoming_attack_time = server_time + attack_warning_time

        retmsg.append(["AI_ATTACK_WARNING",
                       self.incoming_attack_time,
                       copy.deepcopy(self.incoming_attack_units), # copy AGAIN since deploy_ai_attack() will modify it!
                       gamedata['ai_bases_server']['bases'][str(self.incoming_attack_id)]['ui_name'],
                       flavor_text_index,
                       self.incoming_attack_direction,
                       attack_warning_time,
                       self.incoming_attack_type
                       ])

        if LOTS_OF_METRICS:
            metric_event_coded(self.user.user_id, '3840_ai_attack_warn', {})

        if attack_warning_time <= 0:
            self.deploy_ai_attack(retmsg)

    def deploy_ai_attack(self, retmsg, force = False):
        assert self.home_base
        if not self.incoming_attack_pending():
            return

        # dump loot buffer
        if self.player.loot_buffer:
            if force:
                self.player.loot_buffer_release('deploy_ai_attack')
                retmsg.append(["LOOT_BUFFER_UPDATE", self.player.loot_buffer, False])
            else:
                retmsg.append(["ERROR", "CANNOT_SPY_LOOT_BUFFER_NOT_EMPTY"])
                return

        if gamedata['server']['log_ai_attacks'] and (self.incoming_attack_type != 'tutorial'):
            gamesite.exception_log.event(server_time, 'AI attack on player %d: %s' % \
                                         (self.player.user_id, str(self.incoming_attack_type)))

        if not self.res_looter:
            gamesite.exception_log.event(server_time, 'deploy_ai_attack with no res_looter %s' % (self.dump_exception_state(),))
            self.res_looter = ResLoot.ResLoot(gamedata, self, self.viewing_player, self.viewing_base)

        self.deployed_units = {}
        self.has_attacked = True
        self.debug_log_action('deploy_ai_attack')

        # add "weak zombie" debuff to player units
        if gamedata['zombie_debuff_threshold'] >= 0:
            for unit in self.player.home_base_iter():
                if (unit.owner is self.player) and unit.is_mobile() and (not unit.is_destroyed()) and self.has_object(unit.obj_id):
                    if (unit.hp / max(0.01, float(unit.max_hp))) < gamedata['zombie_debuff_threshold']:
                        if unit.auras is None: unit.auras = []
                        Aura.apply_aura(unit.auras, 'weak_zombie', 1, session_only = True)

                        retmsg.append(["OBJECT_AURAS_UPDATE", unit.serialize_auras()])

        # need to send this so that enemy units in your base get the right stats
        retmsg.append(["ENEMY_STATTAB_UPDATE", {'player':{},'units':{},'buildings':{}}])

        self.attack_finish_time = server_time + gamedata['ai_attacks']['defense_time']

        self.incoming_attack_time = -1

        if LOTS_OF_METRICS:
            metric_event_coded(self.user.user_id, '3850_ai_attack_start', {})

        if gamedata['server'].get('track_battle_streaks',0) > 0:
            cd_list = ['battle_streak']
            for cd in cd_list:
                self.player.cooldown_trigger(cd, gamedata['server']['track_battle_streaks'], add_stack = 1)

        replay_token = self.open_attack_log(self.attack_finish_time, self.incoming_attack_id if (self.incoming_attack_id > 0) else -1, self.user.user_id)
        self.attack_event(self.user.user_id, '3850_ai_attack_start', {})
        if self.player.player_auras: self.attack_event(self.user.user_id, '3901_player_auras', {'player_auras':copy.copy(self.player.player_auras)})
        self.log_attack_units(self.user.user_id, [obj for obj in self.player.home_base_iter() if self.has_object(obj.obj_id)], '3900_unit_exists')
        if self.damage_log: self.damage_log.init_multi(obj for obj in self.player.home_base_iter() if self.has_object(obj.obj_id))

        self.activity_classifier.suffered_ai_attack(self.incoming_attack_id)

        self.deploy_ai_attack_wave(retmsg, replay_token = replay_token)

        # add grace period to prevent server and client from both trying to end the attack at the same time
        self.attack_finish_time += 5

        # fire AI on_attack consequent
        if self.incoming_attack_data:
            data = self.incoming_attack_data
            if data and ('on_attack' in data):
                self.execute_consequent_safe(data['on_attack'], self.player, retmsg, reason='on_attack(%d)' % self.incoming_attack_id)

    def deploy_ai_attack_wave(self, retmsg, replay_token = None):
        if len(self.incoming_attack_units) < 1:
            return True

        # spawn units

        units = self.incoming_attack_units.pop(0)

        ncells = self.viewing_base.ncells()
        # mid = self.viewing_base.midcell()
        # rad = self.viewing_base.get_base_radius()

        KEYWORDS = ["direction","delay","spread"]

        movecount = 0

        direction = units.get("direction", self.incoming_attack_direction)

        for specname in units.keys():
            if specname in KEYWORDS: continue
            if specname not in gamedata['units']:
                gamesite.exception_log.event(server_time, 'bad attack unit "%s" from attack "%s"' % (specname, repr(self.incoming_attack_id)))
                continue

            if type(units[specname]) is dict:
                count = units[specname].get('qty',1)
                force_level = units[specname].get('force_level',-1)
            else:
                count = units[specname]
                force_level = -1

            for i in range(count):
                if self.incoming_attack_direction == 'tutorial':
                    spawn_location = gamedata['tutorial']['ai_attack_begin']['spawn_location'] # [mid[0]-10, mid[1]+rad-5]
                    spawn_vector = gamedata['tutorial']['ai_attack_begin'].get('spawn_vector',[5,0])
                    x = spawn_location[0] + spawn_vector[0]*movecount
                    y = spawn_location[1] + spawn_vector[1]*movecount
                else:
                    spawn_location = gamedata['ai_attacks_client']['directions'][direction]
                    spread = units.get('spread', gamedata['ai_attacks']['default_spread'])
                    x = int(ncells[0]*spawn_location[0] + spread*(2*random.random()-1))
                    y = int(ncells[1]*spawn_location[1] + spread*(2*random.random()-1))

                x = min(max(0, x), ncells[0]-1)
                y = min(max(0, y), ncells[1]-1)
                spec = self.player.get_abtest_spec(GameObjectSpec,specname)

                if force_level >= 1:
                    level = force_level
                else:
                    # spawn units at player's tech level minus 1, or 1 if player doesn't have the tech
                    level = max(1, self.player.tech.get(spec.level_determined_by_tech, 0) - 1)

                obj = instantiate_object_for_player(self.player, RogueOwner, specname, x=x, y=y, level=level)

                self.add_object(obj)
                retmsg.append(["OBJECT_CREATED2", obj.serialize_state()])
                if obj.auras:
                    retmsg.append(["OBJECT_AURAS_UPDATE", obj.serialize_auras()])

                self.log_attack_unit(self.incoming_attack_id, obj, '3910_unit_deployed', props = {'method':'ai_attack'})
                self.deployed_units[obj.spec.name] = self.deployed_units.get(obj.spec.name,0) + 1
                if self.damage_log: self.damage_log.init(obj)
                movecount += 1

        # time for next wave to spawn
        if len(self.incoming_attack_units) > 0:
            if 'delay' in self.incoming_attack_units[0]:
                self.incoming_attack_wave_time = server_time + int(self.incoming_attack_units[0]['delay'] / max(1, self.player.stattab.get_player_stat('combat_time_scale')))
            else:
                self.incoming_attack_wave_time = server_time + int(gamedata['ai_attacks']['wave_interval'] / max(1, self.player.stattab.get_player_stat('combat_time_scale')))
        else:
            self.incoming_attack_wave_time = -1

        retmsg.append(["AI_ATTACK_WAVE_DEPLOYED", self.attack_finish_time, self.incoming_attack_units, self.incoming_attack_wave_time, replay_token])
        return (len(self.incoming_attack_units) < 1)

    # call this after any action that may change the player's power production or consumption
    # it re-initializes harvesters with the correct harvesting rate
    def power_changed(self, base, changed_object, retmsg):
        if not gamedata['enable_power']: return 1
        if changed_object and (not (changed_object.is_building() and changed_object.affects_power())): return 1

        power_state = base.get_power_state()
        power_factor = compute_power_factor(power_state)

        for obj in base.iter_objects():
            if obj.is_building() and obj.is_producer():
                obj.update_production(obj.owner, base.base_type, base.base_region, power_factor)
                base.nosql_write_one(obj, 'power_changed')
                if self.has_object(obj.obj_id):
                    retmsg.append(["OBJECT_STATE_UPDATE2", obj.serialize_state(update_hp = False)])

        if base is self.viewing_base:
            retmsg.append(["BASE_POWER_UPDATE", power_state])

        return power_factor

    def change_player_title(self, new_title_name, retmsg, force = False, chat_announce = True):
        new_title_data = self.player.get_abtest_title(new_title_name)
        assert new_title_data
        if new_title_name != gamedata['default_title']:
            # make sure it is unlocked
            if (not self.player.is_cheater) and (not force):
                for PRED in ('show_if', 'requires'):
                    if (PRED in new_title_data) and (not Predicates.read_predicate(new_title_data[PRED]).is_satisfied(self.player, None)):
                        retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", new_title_data[PRED]])
                        return False

        if self.player.title != new_title_name:
            old_name = self.user.get_ui_name(self.player)
            self.player.title = new_title_name
            self.deferred_player_name_update = True
            if chat_announce and self.alliance_chat_channel:
                self.do_chat_send(self.alliance_chat_channel,
                                  'I have a new title!',
                                  bypass_gag = True, props = {'type':'changed_title',
                                                              'old_name': old_name})
            gamesite.gameapi.send_player_cache_update(self, 'change_title')
        return True

class SessionChange(object):
    # This holds the state of an ongoing asynchronous session change request
    # begin() returns a Deferred that will later fire with a list of arguments
    # to pass to change_session_complete()

    def __init__(self, session, retmsg, dest_user_id, dest_base_id, new_ladder_state, delay, pre_attack):
        self.d = make_deferred('SessionChange') # deferred to fire upon completion
        self.session = session
        self.retmsg = retmsg
        self.dest_user_id = dest_user_id
        self.dest_base_id = dest_base_id
        self.new_ladder_state = new_ladder_state
        self.delay = delay
        self.pre_attack = pre_attack

    def begin(self):
        delay = self.delay

        cooldown = self.session.player.get_any_abtest_value('attack_spam_cooldown', gamedata['server']['attack_spam_cooldown'])
        if self.dest_user_id != self.session.user.user_id and (cooldown > 0) and (self.session.player.attack_cooldown_start > 0) and (server_time < (self.session.player.attack_cooldown_start + cooldown)):
            # delay the actual start until the cooldown passes
            spam_delay = gamedata['server']['attack_spam_delay']
            if spam_delay < 0:
                spam_delay = (self.session.player.attack_cooldown_start + cooldown) - server_time
            if spam_delay > 0:
                if gamedata['server']['log_attack_spam']:
                    descr = str(self.dest_user_id if self.dest_user_id else self.dest_base_id)
                    gamesite.exception_log.event(server_time, 'user %d: attack spam, delaying visit_base (%s) by %d sec' % (self.session.user.user_id, descr, spam_delay))
            delay += spam_delay

        reactor.callLater(max(delay, 0), self.really_begin)
        return self.d

    # note: these queries may be called before instantiation to check for existence
    # before we start the full async session change

    @classmethod
    def default_deployable_squads(cls, player):
        deployable_feature = {'base_id': player.squad_base_id(SQUAD_IDS.BASE_DEFENDERS),
                              'base_landlord_id': player.user_id,
                              'squad_id': SQUAD_IDS.BASE_DEFENDERS}
        return {deployable_feature['base_id']: deployable_feature}

    @classmethod
    def default_defending_squads(cls, dest_user_id):
        defending_feature = {'base_id': 's%d_%d' % (dest_user_id, SQUAD_IDS.BASE_DEFENDERS),
                             'base_landlord_id': dest_user_id,
                             'squad_id': SQUAD_IDS.BASE_DEFENDERS}
        return {defending_feature['base_id']: defending_feature}

class SessionChangeHome(SessionChange): # simple case for going back to your own home
    def __init__(self, *args):
        SessionChange.__init__(self, *args)
        assert self.dest_user_id == self.session.user.user_id

    def really_begin(self):
        self.d.callback([self.session, self.retmsg, self.dest_user_id, self.session.user, self.session.player,
                         None, None, self.new_ladder_state,
                         self.default_deployable_squads(self.session.player),
                         self.default_defending_squads(self.dest_user_id),
                         self.pre_attack])

class SessionChangeOld(SessionChange): # non-map path
    def __init__(self, *args):
        SessionChange.__init__(self, *args)
        assert self.dest_user_id
        assert not self.dest_base_id
        self.dest_player = None
        self.dest_user = None
        self.got_player = False
        self.got_user = False
        self.is_ai = is_ai_user_id_range(self.dest_user_id)
    def really_begin(self):
        if self.is_ai:
            # check for AI instances first, then fall back to regular player_table
            ai_instance_table.lookup_async(self.session.player,
                                           self.session.user.user_id, game_id, self.dest_user_id,
                                           self.ai_instance_cb, 'change_session')
        else:
            # visiting a human player
            player_table.lookup_async(self.session.player, self.dest_user_id, False, self.player_cb, 'change_session')
        user_table.lookup_async(self.dest_user_id, self.user_cb, 'change_session')

    def ai_instance_cb(self, success, player):
        # fails gracefully if player is None
        if player:
            # got instance - do not auto-level
            self.got_player = True
            self.dest_player = player
            self.try_finish()
        else:
            # get a fresh copy of the base
            player_table.lookup_async(self.session.player, self.dest_user_id, False, self.player_cb, 'change_session')

    def player_cb(self, success, player):
        # fails gracefully if player is None
        self.got_player = True
        self.dest_player = player
        if self.is_ai and self.dest_player:
            ai_instance_table.init_fresh_instance(player, self.session.player)
        self.try_finish()

    def user_cb(self, success, user):
        self.got_user = True
        # will use None if success == False, and fall back gracefully
        self.dest_user = user
        self.try_finish()

    # once user and player requests have both completed, re-enter gameapi and finish the request
    def try_finish(self):
        if (not self.got_player) or (not self.got_user): return
        if self.dest_player:
            if self.dest_user:
                self.dest_player.frame_platform = self.dest_user.frame_platform # XXX awkward
                self.dest_player.country = self.dest_user.country
                self.dest_player.country_tier = SpinConfig.country_tier_map.get(self.dest_user.country, 4)
                self.dest_player.developer = self.dest_user.developer
            self.dest_player.migrate_proxy()
        self.d.callback([self.session, self.retmsg, self.dest_user_id, self.dest_user, self.dest_player,
                         None, None, self.new_ladder_state,
                         self.default_deployable_squads(self.session.player),
                         self.default_defending_squads(self.dest_user_id),
                         self.pre_attack])

class SessionChangeNew(SessionChange): # new basedb path
    def __init__(self, *args):
        SessionChange.__init__(self, *args)
        assert not self.dest_user_id
        assert self.dest_base_id
        self.dest_base_pre = None
        self.dest_base = None
        self.dest_player = None
        self.dest_user = None
        self.got_base = False
        self.got_player = False
        self.got_user = False
        self.new_defending_squads = None
        self.new_deployable_squads = None

    @classmethod
    def query_dest_feature(cls, player, dest_base_id):
        assert gamesite.nosql_client and player.home_region # map path
        dest_feature = gamesite.nosql_client.get_map_feature_by_base_id(player.home_region, dest_base_id, reason='change_session(query_dest_feature)')
        if (not dest_feature) or \
           (('base_map_path' in dest_feature) and (dest_feature['base_map_path'][-1]['eta']>server_time)) or \
           (dest_feature['base_type'] not in ('hive', 'quarry', 'home', 'squad')) or \
           (dest_feature['base_type'] == 'squad' and not player.squad_combat_enabled()) or \
           (dest_feature['base_type'] == 'home' and not player.map_home_combat_enabled()):
            return None
        return dest_feature

    @classmethod
    def query_deployable_squads(cls, player, dest_feature):
        assert gamesite.nosql_client and player.home_region and dest_feature # map path
        new_deployable_squads = {}

        if dest_feature['base_landlord_id'] != player.user_id:
            squad_features = list(gamesite.nosql_client.get_map_features_by_landlord_and_type(player.home_region, player.user_id, 'squad', reason='change_session(query_deployable_squads)'))

            for squad_feature in squad_features:
                if ('base_map_path' in squad_feature) and (squad_feature['base_map_path'][-1]['eta'] > server_time): continue # squad not arrived yet
                if squad_feature.get('LOCK_STATE',0) > 0 and \
                   squad_feature.get('LOCK_OWNER',-1) != player.user_id:
#                           ((not session.viewing_squad_locks) or (SpinDB.base_lock_id(player.home_region, player.squad_base_id(squad_id)) not in session.viewing_squad_locks)):
                    continue # squad is already locked
                if hex_distance(squad_feature['base_map_loc'], dest_feature['base_map_loc']) == 1: # note: don't take squads on top of the target
                    squad_id = squad_feature['squad_id'] = int(squad_feature['base_id'].split('_')[1])
                    if str(squad_id) in player.squads:
                        new_deployable_squads[squad_feature['base_id']] = squad_feature

            if hex_distance(dest_feature['base_map_loc'], player.my_home.base_map_loc) == 1:
                # battle is taking place next to home base - allow deployment of squads that are at home
                for squad_data in player.squads.itervalues():
                    if ((SQUAD_IDS.is_mobile_squad_id(squad_data['id']) or gamedata['territory']['base_defenders_can_attack_neighbors']) and \
                        (not player.squad_is_deployed(squad_data['id']))):
                        squad_feature = {'base_id': player.squad_base_id(squad_data['id']),
                                         'base_landlord_id': player.user_id, 'squad_id': squad_data['id']}
                        new_deployable_squads[squad_feature['base_id']] = squad_feature

        return new_deployable_squads

    @classmethod
    def query_defending_squads(cls, player, dest_feature, dest_user_id):
        assert gamesite.nosql_client and player.home_region and dest_feature # map path

        if dest_feature['base_type'] == 'home':
            defending_feature = {'base_id': 's%d_%d' % (dest_feature['base_landlord_id'], SQUAD_IDS.BASE_DEFENDERS),
                                 'base_landlord_id': dest_feature['base_landlord_id'],
                                 'squad_id': SQUAD_IDS.BASE_DEFENDERS}
            new_defending_squads = {defending_feature['base_id']: defending_feature}
        elif dest_feature['base_type'] == 'squad':
            new_defending_squads = {dest_feature['base_id']: {'base_id': dest_feature['base_id'],
                                                              'base_landlord_id': dest_feature['base_landlord_id'],
                                                              'squad_id': int(dest_feature['base_id'].split('_')[1])}}
        elif dest_feature['base_type'] == 'quarry':
            # find guard squad(s)
            new_defending_squads = {}
            defense_features = [x for x in gamesite.nosql_client.get_map_features_by_loc(player.home_region, dest_feature['base_map_loc'], reason='change_session(guards)') if x.get('base_type',None)=='squad']

            for squad_feature in defense_features:
                if ('base_map_path' in squad_feature) and (squad_feature['base_map_path'][-1]['eta'] > server_time):
                    continue # squad has not arrived at its destination yet
                if squad_feature['base_landlord_id'] != dest_feature['base_landlord_id']:
                    # "defending" squad, but it's owned by someone other than the quarry owner
                    # this can happen via race condition where the old quarry owner had a squad on the way to the quarry (or left over due to undeployable units hanging around),
                    # but then it got attacked and taken over before it arrives
                    gamesite.exception_log.event(server_time, 'quarry %s (owner %d) has foreign squad %s (owner %d) at same location - recalling it back to base' % \
                                                 (dest_feature['base_id'], dest_feature['base_landlord_id'], squad_feature['base_id'], squad_feature['base_landlord_id']))
                    gamesite.nosql_client.drop_map_feature(player.home_region, squad_feature['base_id'], originator = player.user_id, reason='visit_quarry_guard_race_cleanup')
                    continue
                squad_id = int(squad_feature['base_id'].split('_')[1])
                squad_feature['squad_id'] = squad_id
                new_defending_squads[squad_feature['base_id']] = squad_feature
        else:
            new_defending_squads = {} # hive

        return new_defending_squads

    def really_begin(self):

        # query for target feature (to verify type and location)
        dest_feature = self.query_dest_feature(self.session.player, self.dest_base_id)
        if not dest_feature:
            if gamedata['server'].get('log_nosql',0) < 2 and self.dest_base_id[0]=='s':
                pass # do not bother logging failed attempts to spy on squads that have moved
            else:
                gamesite.exception_log.event(server_time, 'NoSQL spy error: player %d dest_base_id %s: result %s' % (self.session.player.user_id, self.dest_base_id, repr(dest_feature)))
            self.retmsg.append(["ERROR", "CANNOT_SPY_BASE_NOT_FOUND", self.dest_base_id, 'change_session'])
            self.d.callback(None) # fail now
            return


        # query for attacker's deployable squads
        self.new_deployable_squads = self.query_deployable_squads(self.session.player, dest_feature)
        if dest_feature and len(self.new_deployable_squads) < 1 and dest_feature['base_landlord_id'] != self.session.player.user_id and \
           hex_distance(dest_feature['base_map_loc'], self.session.player.my_home.base_map_loc) != 1:
            # no squads in range, cannot spy on hostile base
            self.retmsg.append(["ERROR", "CANNOT_SPY_NO_NEARBY_SQUADS"])
            self.d.callback(None) # fail now
            return

        # check for defending squads
        self.new_defending_squads = self.query_defending_squads(self.session.player, dest_feature, self.dest_user_id)

        if self.pre_attack and dest_feature and dest_feature['base_type'] == 'squad' and \
           (dest_feature['base_landlord_id'] != self.session.player.user_id):
            # attempt to lock the destination squad immediately,
            # to reduce the time window for the defender to manipulate it before the player can attack
            state = gamesite.nosql_client.map_feature_lock_acquire(self.session.player.home_region, self.dest_base_id, self.session.player.user_id, reason='VISIT_BASE2_pre_attack')
            if state != Player.LockState.being_attacked:
                # try to figure out more specifically why we didn't get the lock
                if dest_feature.get('LOCK_OWNER',-1) == dest_feature['base_landlord_id']:
                    err = "CANNOT_ATTACK_THEIR_SQUAD_OFFENSE"
                elif dest_feature.get('LOCK_OWNER',-1) > 0:
                    err = "CANNOT_ATTACK_THEIR_SQUAD_DEFENSE"
                else:
                    err = "CANNOT_ATTACK_THEIR_SQUAD_MOVED" # probably can't get here (due to the dest_feature check above), but just in case
                self.retmsg.append(["ERROR", err, "VISIT_BASE2_pre_attack"])
                self.d.callback(None) # abort the spy attempt
                return

            # record the fact that we're now holding the lock
            # note that we MUST proceed with the attack after spying completes (or fails), or else this could open exploits where you hold a lock on a hostile squad forever
            self.session.pre_locks.add(SpinDB.base_lock_id(self.session.player.home_region, self.dest_base_id))

        if self.dest_base_id[0] == 'h':
            # handle home bases specially, using an ordinary playerdb lookup
            self.dest_user_id = int(self.dest_base_id[1:])
            player_table.lookup_async(self.session.player, self.dest_user_id, False, self.player_cb, 'change_session')
            user_table.lookup_async(self.dest_user_id, self.user_cb, 'change_session')
        elif self.dest_base_id[0] == 's':
            fields = self.dest_base_id[1:].split('_')
            self.dest_user_id = int(fields[0])
            self.dest_squad_id = int(fields[1])

            # in this case, there IS no destination base, need to create a virtual one on the fly to hold the defending squad
            self.got_base = True
            self.dest_base = Base(self.session.player.home_region, self.dest_base_id, self.dest_user_id, 'squad')
            if dest_feature:
                if 'base_map_loc' in dest_feature:
                    self.dest_base.base_map_loc = dest_feature['base_map_loc']
                    self.dest_base.base_climate = Region(gamedata, self.session.player.home_region).read_climate_name(self.dest_base.base_map_loc)
                # apply correct generation count to the virtual base
                self.dest_base.base_generation = dest_feature.get('LOCK_GENERATION',-1)

            self.dest_base.spawn_scenery(self.session.player, self.session.player.user_id + self.dest_squad_id)

            if self.dest_user_id == self.session.player.user_id:
                self.dest_player = self.session.player
                self.got_player = True
                self.dest_user = self.session.user
                self.got_user = True
                reactor.callLater(0, self.try_finish)
            else:
                player_table.lookup_async(self.session.player, self.dest_user_id, False, self.player_cb, 'change_session')
                user_table.lookup_async(self.dest_user_id, self.user_cb, 'change_session')

        else:
            base_table.lookup_async(self.session.player.home_region, self.dest_base_id, None, # do NOT send dest_feature, it's obsoleted by complete_attack!
                                    self.base_cb, 'change_session')
    def base_cb(self, success, base, landlord_id):
        self.got_base = True
        self.dest_base_pre = base
        if self.dest_base_pre:
            assert landlord_id
            if landlord_id == self.session.player.user_id:
                self.dest_player = self.session.player
                self.got_player = True
                self.dest_user = self.session.user
                self.got_user = True
            else:
                player_table.lookup_async(self.session.player, landlord_id, False, self.player_cb, 'change_session')
                user_table.lookup_async(landlord_id, self.user_cb, 'change_session')
        else:
            self.dest_player = None
            self.dest_user = None
            self.got_player = True
            self.got_user = True
        self.try_finish()
    def player_cb(self, success, player):
        self.got_player = True
        self.dest_player = player
        self.try_finish()
    def user_cb(self, success, user):
        self.got_user = True
        self.dest_user = user
        self.try_finish()

    def try_finish(self):
        if self.dest_base_id[0] == 'h':
            return self.try_finish_home()
        else:
            return self.try_finish_remote()

    def try_finish_home(self):
        if self.got_user and self.got_player and (not self.got_base):
            self.got_base = True
            # get the base of the dest player
            if self.dest_player:
                if self.dest_user:
                    self.dest_player.frame_platform = self.dest_user.frame_platform # XXX awkward
                    self.dest_player.country = self.dest_user.country
                    self.dest_player.country_tier = SpinConfig.country_tier_map.get(self.dest_user.country, 4)
                    self.dest_player.developer = self.dest_user.developer

                self.dest_player.migrate_proxy()
                self.dest_base = self.dest_player.my_home
            else:
                self.dest_base = None

        if (not self.got_base) or (not self.got_player) or (not self.got_user): return

        # note: this actually calls back into the "old" player.my_home path!
        self.d.callback([self.session, self.retmsg, self.dest_user_id, self.dest_user, self.dest_player, None, None, self.new_ladder_state, self.new_deployable_squads, self.new_defending_squads, self.pre_attack])

    def try_finish_remote(self):
        if (not self.got_base) or (not self.got_player) or (not self.got_user): return
        if self.dest_player:
            if self.dest_user:
                self.dest_player.frame_platform = self.dest_user.frame_platform # XXX awkward
                self.dest_player.country = self.dest_user.country
                self.dest_player.country_tier = SpinConfig.country_tier_map.get(self.dest_user.country, 4)
                self.dest_player.developer = self.dest_user.developer
            self.dest_player.migrate_proxy()
            if self.dest_base_id[0] == 's' and self.dest_base: # set squad name
                squad_data = self.dest_player.squads.get(str(self.dest_squad_id), None)
                if squad_data and ('ui_name' in squad_data):
                    self.dest_base.base_ui_name = squad_data['ui_name']

        if self.dest_base_pre and self.dest_player:
            # complete parsing of the base using the landlord Player
            self.dest_base = base_table.parse(self.session.player.home_region, self.dest_base_id, self.dest_base_pre, self.dest_player, self.session.player, reason='visit')
        self.d.callback([self.session, self.retmsg, self.dest_user_id, self.dest_user, self.dest_player, self.dest_base_id, self.dest_base, self.new_ladder_state, self.new_deployable_squads, self.new_defending_squads, self.pre_attack])

# A collection of game objects indexed by ID
class ObjectCollection:
    def __init__(self):
        # counter for unique object IDs
        self.objects = {}
    def add_object(self, obj):
        assert (obj.obj_id not in self.objects)
        self.objects[obj.obj_id] = obj
        return obj
    def rem_object(self, id):
        obj = self.objects[id]
        del self.objects[id]
        return obj
    def has_object(self, id):
        return self.objects.has_key(id)
    def iter_objects(self):
        return self.objects.itervalues()
    def __len__(self):
        return len(self.objects)

# these "Specs" are a parsed form of object or tech specifications read from gamedata.json
class Spec(object):
    # mapping from spec.kind to the name of the dictionary in the abtest group that contains replacement specs
    KEY_MAP = { 'building': 'buildings',
                'mobile': 'units',
                'unit': 'units',
                'inert': 'inert',
                'tech': 'tech',
                'aura': 'auras' }

    # spec quantities that are normally numbers may vary according to object or player level.
    # In this case they are stored as arrays indexed by level-1
    @classmethod
    def get_leveled_quantity(cls, qty, level):
        if type(qty) == list:
            return qty[level-1]
        return qty

    # these can be arrays-of-arrays and need to be handled specially
    @classmethod
    def get_crafting_recipe_ingredients_list(cls, recipe, level):
        if ('ingredients' in recipe) and (type(recipe['ingredients'][0]) is list):
            return cls.get_leveled_quantity(recipe['ingredients'], level)
        else:
            return recipe.get('ingredients', [])
    @classmethod
    def get_crafting_recipe_product_list(cls, recipe, level):
        if ('product' in recipe) and (type(recipe['product'][0]) is list):
            return cls.get_leveled_quantity(recipe['product'], level)
        else:
            return recipe.get('product', [])

    def __init__(self, name, data):
        self.name = name

        # read in all the fields from gamedata.jsoon
        for field_name, default_value in self.fields:
            if default_value == "REQUIRED":
                val = data[field_name]
            else:
                val = data.get(field_name, default_value)
            self.__dict__[field_name] = val

        # the 'requires', 'show_if, and 'activation' fields are a special case because we need to instantiate a Predicate object
        if data.has_key('requires'):
            self.requires = self.read_requires(data['requires'])
        else:
            self.requires = None
        if data.has_key('show_if'):
            self.show_if = Predicates.read_predicate(data['show_if'])
        else:
            self.show_if = None
        if data.has_key('activation'):
            self.activation = Predicates.read_predicate(data['activation'])
        else:
            self.activation = None

        self.maxlevel = self.compute_maxlevel()

    def read_requires(self, reqdata):
        if reqdata is None: return None
        if type(reqdata) == list:
            # different requirements for each upgrade level
            return map(lambda(x): Predicates.read_predicate(x), reqdata)
        else:
            return Predicates.read_predicate(reqdata)

    # clone a Spec, applying patches to member fields (for A/B testing)
    def make_patched(self, patch):
        ret = copy.copy(self)
        for key, val in patch.iteritems():
            if key == 'requires':
                ret.requires = ret.read_requires(val)
            else:
                ret.__dict__[key] = val
        return ret

    def compute_maxlevel(self):
        kind = getattr(self, 'kind', None)

        # for buildings and units, we define maxlevel via build_time and max_hp, respectively
        if kind == 'building':
            return len(self.build_time)
        elif kind == 'mobile':
            return len(self.max_hp)

        # compute max possible level
        # this is the length of the *shortest* list-valued field in gamedata.json
        maxlevel = 999
        list_seen = False
        for field_name, default_value in self.fields:
            # these list-valued fields don't affect the max level
            if field_name in ("limit", "limit_requires", "spells", "gridsize", "unit_collision_gridsize", "exclusion_zone", "defense_types", "health_bar_dims", "research_categories", "crafting_categories", "max_ui_level"):
                continue
            val = self.__dict__[field_name]
            if type(val) == list:
                list_seen = True
                maxlevel = min(maxlevel, len(val))

        if self.requires and type(self.requires) == list:
            list_seen = True
            maxlevel = min(maxlevel, len(self.requires))

        if not list_seen:
            maxlevel = 1
        #print 'maxlevel for ', self.name, ' is ', self.maxlevel
        return maxlevel

def resource_fields(name, default = 0): return [[name+'_'+resname, default] for resname in gamedata['resources']]

class GameObjectSpec(Spec):
    # global table mapping object spec names to GameObjectSpec instances
    table = {}

    # [ name of each field necessary to be read from gamedata.json, default value if none in file ]
    # "REQUIRED" means that no default is provided and the field must have an explicit value
    fields = [
        ["kind", "REQUIRED"],
        ["max_hp", "REQUIRED"],
        ["armor", 0],
        ["maxvel", 0],
        ["travel_speed", 0],
        ["gridsize", [0,0]],
        ["unit_collision_gridsize", [0,0]],
        ["quantize_location", 0],
        ["exclusion_zone", [0,0]],
        ["ignore_perimeter", 0],
        ["provides_power", 0],
        ["consumes_power", 0],
        ["consumes_power_while_building", 0],
        ["provides_space", 0],
        ["provides_donated_space", 0],
        ["max_individual_donation_space", 0],
        ["provides_squads", 0],
        ["provides_deployed_squads", 0],
        ["provides_squad_space", 0],
        ["provides_total_space", 0],
        ["consumes_space", 0],
        ["provides_inventory", 0],
        ["provides_limited_equipped", None],
        ["provides_quarry_control", 0],
        ["quarry_movable", False],
        ["quarry_buildable", False],
        ["build_time", 0],
        ["repair_time", 0],
        ] + resource_fields("build_cost") + [
        ["upgrade_credit_cost", -1],
        ["upgrade_speedup_cost_factor", 1],
        ["upgrade_xp",-1],
        ["proposed_upgrade_xp", -1], # for debug messages only
        ["worth_less_xp", 0],
        ] + resource_fields("produces") + [
        ["production_capacity", 0],
        ] + resource_fields("storage") + [
        ] + resource_fields("specific_pve_loot_fraction", default = -1) + [
        ] + resource_fields("specific_pvp_loot_fraction", default = -1) + [
        ["spells", []],
        ["level_determined_by_tech", None],
        ["limit", -1],
        ["limit_requires", None],
        ["max_ui_level", None],
        ["metric_events", ""],
        ["expires", None],
        ["client_can_create", 0],
#        ["research_category", None],
        ["research_categories", []],
        ["manufacture_category", None],
        ["requires_factory_level", 0],
        ["crafting_categories", []],
        ["crafting_speed", 1.0],
        ["crafting_queue_space", -1],
        ["manufacture_speed", 1.0],
        ["manufacture_cost", 1.0],
        ["unit_repair_speed", 1.0],
        ["unit_repair_cost", 1.0],
        ["track_level_in_player_history", False],
        ["history_category", None],
        ["defense_types", []],
        ["invisible", False],
        ["invis_on_hold", False],
        ["flying", False],
        ["consumable", False],
        ["resurrectable", False],
        ["resurrectable_without_tech", False],
        ["donatable", True],
        ["developer_only", 0],
        ["always_free_speedup", False],
        ["no_free_speedup", False],
        ["unit_repair_resources", -1],
        ["unit_repair_time", -1],
        ["quarry_invul", False],
        ["equip_slots", None],
        ["permanent_auras", None],
        ["auto_spawn", False],
        ["on_destroy", None],
        ["upgrade_completion", None],
        ["provides_foremen", 0],
        ]

    # * note: the worth_less_xp flag has the following consequences for a building:
    # - cannot provide inventory or storage (performance optimization)
    # - has no effect on base damage or havoc calculations
    # - cannot receive stat mod effects from player auras (but can have local equipment - e.g. for minefields)
    # - cannot affect player stat table
    # - will have bucketed time series data in player.history
    # - will only be worth destroy_building_min_xp to attackers
    # - does not contribute to damage_inflicted, buildings_lost, buildings_killed, or destroyed_building_levels in session loot
    # - client-side: does not show aura graphics or building-idle notifications

    @classmethod
    def lookup(cls, name):
        return cls.table[name]
    @classmethod
    def exists(cls, name):
        return (name in cls.table)

    @classmethod
    def get_factory_for(cls, category):
        for name, spec in cls.table.iteritems():
            if spec.kind == 'building' and spec.manufacture_category == category: return name
        return None

    def __init__(self, name, data):
        Spec.__init__(self, name, data)

        # insert ourself into the table
        self.table[self.name] = self

        # perform sanity checks
        for res in gamedata['resources']:
            if getattr(self, 'produces_'+res) > 0:
                assert self.production_capacity > 0

    # compute how much harmful DPS this unit does
    def get_dps(self, level):
        if len(self.spells) < 1:
            return 0
        spell = gamedata['spells'][self.spells[0]]
        if spell['activation'] != 'auto' or spell.get('help', 0):
            return 0
        dps = self.get_leveled_quantity(spell.get('damage',0), level)

        if spell.get('targets_self',0):
            # count suicide attacks as half as much DPS
            dps *= 0.5
        elif 'splash_range' in spell:
            # count splash-capable attacks as twice as much DPS
            dps *= 2

        return dps

    def get_research_categories(self, player):
        return self.research_categories

    # obj_id is needed to look up any building modstats that affect repair time
    # (XXXXXX this awkwardly reaches into player.stattab.modded_buildings - might need to fix later by passing the Building instance itself,
    # or a speed_factor, but that complicates DamageLog.finalize()...)
    COST_MODE_REPAIR = 0
    COST_MODE_RECYCLE = 1
    COST_MODE_MANUFACTURE_CANCEL = 2
    COST_MODE_MANUFACTURE = 3
    def cost_to_repair(self, level, hp_ratio, player, obj_id = None, cost_mode = COST_MODE_REPAIR, builder = None):
        if self.kind == 'mobile':
            if cost_mode == self.COST_MODE_MANUFACTURE_CANCEL: # note: legacy only - now queue entries store their own cost
                cost_ratio = gamedata['manufacture_cancel_refund']
                time_ratio = spd = 1
            elif cost_mode == self.COST_MODE_RECYCLE:
                cost_ratio = player.get_any_abtest_value('unit_recycle_resources', gamedata['unit_recycle_resources'])
                # note: do not bonus this, to avoid exploits where you increase the unit's cost after it's built, then recycle it
                time_ratio = spd = 1
            elif (cost_mode == self.COST_MODE_REPAIR) and (self.resurrectable or hp_ratio > 0):
                cost_ratio = self.unit_repair_resources if self.unit_repair_resources >= 0 else player.get_any_abtest_value('unit_repair_resources', gamedata['unit_repair_resources'])
                time_ratio = self.unit_repair_time if self.unit_repair_time >= 0 else player.get_any_abtest_value('unit_repair_time', gamedata['unit_repair_time'])
                # XXX grab it from the building instead?
                cost_ratio *= player.stattab.get_unit_stat(self.name, 'repair_cost', 1)
                spd = player.stattab.get_unit_stat(self.name, 'repair_speed', 1)
            else:
                # treat destroyed, non-resurrectable units the same as manufacturing from scratch
                cost_ratio = 1
                time_ratio = 1
                # XXX grab it from the building instead?
                cost_ratio *= player.stattab.get_unit_stat(self.name, 'manufacture_cost', 1)
                spd = player.stattab.get_unit_stat(self.name, 'manufacture_speed', 1)

            health_ratio = 1.0 - hp_ratio
            health_ratio = min(max(health_ratio, 0.0), 1.0)

            ret = dict((res, max(0, int(cost_ratio * health_ratio * self.get_leveled_quantity(getattr(self, 'build_cost_'+res), level)))) \
                       for res in gamedata['resources'])

            ret['time'] = max(1, int(time_ratio * health_ratio * self.get_leveled_quantity(self.build_time, level) / float(spd)))
            return ret
        elif self.kind == 'building':
            repair_time = self.get_leveled_quantity(self.repair_time, level)
            speed_factor = 1
            if obj_id and (obj_id in player.stattab.modded_buildings):
                modstats = player.stattab.modded_buildings[obj_id].modstats
                speed_factor = ModChain.get_stat(modstats.get('repair_speed', None), 1)
            return {'time': max(1, int((1.0-hp_ratio)*(repair_time/speed_factor)))}
        else:
            raise Exception('unknown kind '+self.kind)

class TechSpec(Spec):
    table = {}
    fields = [ ["research_credit_cost", 999],
               ] + resource_fields("cost") + [
               ["research_time", 0],
               ["upgrade_xp", -1],
               ["proposed_upgrade_xp", -1], # for debug messages only
               ["metric_events", ""],
               ["combat_level", 0],
               ["research_category", None],
               ["associated_unit", None],
               ["affects_unit", None],
               ["affects_manufacture_category", None],
               ["applies_aura", None],
               ["effects", None],
               ["completion", None],
               ["max_ui_level", None],
               ["developer_only", 0]
               ]
    @classmethod
    def lookup(cls, name): return cls.table[name]
    def __init__(self, name, data):
        Spec.__init__(self, name, data)
        self.kind = 'tech'
        self.table[self.name] = self

    def compute_maxlevel(self):
        return len(self.research_time)

    # return the spec of the unit this tech unlocks, if nany
    def unlocks_unit(self):
        if self.associated_unit:
            unit_spec = GameObjectSpec.lookup(self.associated_unit)
            if unit_spec.level_determined_by_tech == self.name:
                return unit_spec
        return None
    def unlocks_unit_category(self):
        unit_spec = self.unlocks_unit()
        if unit_spec:
            return unit_spec.manufacture_category
        return None
    def mods_unit(self):
        if self.affects_unit:
            return GameObjectSpec.lookup(self.affects_unit)
        return None

# load specs from data file
for name, data in gamedata["buildings"].iteritems():
    GameObjectSpec(name, data)
for name, data in gamedata["units"].iteritems():
    GameObjectSpec(name, data)
for name, data in gamedata["inert"].iteritems():
    GameObjectSpec(name, data)
for name, data in gamedata["tech"].iteritems():
    TechSpec(name, data)

def instantiate_object_for_player(observer, owner, specname, x=-1, y=-1, level=1, build_finish_time = -1, metadata = None, obj_id = None, temporary = None):
    if observer:
        # create a fresh GameObject for this player, taking into account A/B tests and tech auras
        # subtle distinction: "observer" is the person playing the game, "owner" is the player/AI who owns it
        spec = observer.get_abtest_spec(GameObjectSpec, specname)
    else:
        spec = GameObjectSpec.lookup(specname)

    # auras have to be in place BEFORE object instantiation, because they can change max_hp etc
    auras = None

    if spec.permanent_auras:
         if not auras: auras = []
         for a in spec.permanent_auras:
              Aura.apply_aura(auras, a['aura_name'], a.get('aura_strength',1), range = a.get('aura_range',-1), duration = a.get('aura_duration',-1))

    if obj_id is None: obj_id = gamesite.nosql_id_generator.generate() # for on-the-fly creation not associated with file loads - like new unit production

    if spec.kind == 'building':
        obj = Building(obj_id, spec, owner, x, y, -1, level, build_finish_time, auras)
    elif spec.kind == 'mobile':
        obj = Mobile(obj_id, spec, owner, x, y, -1, level, build_finish_time, auras, temporary = temporary)
    elif spec.kind == 'inert':
        obj = Inert(obj_id, spec, owner, x, y, -1, level, build_finish_time, auras, metadata = metadata)
    return obj

def reconstitute_object(observer, player, state, context = 'unknown'):
    specname = state['spec']
    if not GameObjectSpec.exists(specname):
        gamesite.exception_log.event(server_time, "warning: obs %d player %d in %s ignoring obsolete object of spec %s" % (observer.user_id, player.user_id, context, specname))
        return None

    if 'owner_id' in state:
        if state['owner_id'] == EnvironmentOwner.user_id:
            owner = EnvironmentOwner
        elif state['owner_id'] == RogueOwner.user_id:
            owner = RogueOwner
        else:
            owner = player
            if state['owner_id'] != player.user_id:
                if specname != 'barrier':
                    gamesite.exception_log.event(server_time, "warning: obs %d player %d in %s loaded object %s (%s) persisted with owner_id %d" % (observer.user_id, player.user_id, context, state.get('obj_id','noid'), state['spec'], state['owner_id']))

    elif 'owner' in state:
        owner_string = state['owner']
        if owner_string == 'environment':
            owner = EnvironmentOwner
        elif owner_string == 'rogue':
            owner = RogueOwner
        elif owner_string == 'player':
            owner = player
        else:
            gamesite.exception_log.event(server_time, "warning: obs %d player %d in %s loaded object with unknown owner_string %s" % (observer.user_id, player.user_id, context, owner_string))
            owner = player
    else:
        owner = player

    if ('obj_id' not in state):
        # add missing ID - can happen on AI loads, or legacy player files that have no IDs, or bad IDs
        state['obj_id'] = gamesite.nosql_id_generator.generate()
    else:
        if (not SpinNoSQLId.is_valid(state['obj_id'])):
            #gamesite.exception_log.event(server_time, "fixing invalid obj_id on player %d in %s state %s" % (player.user_id, context, repr(state)))
            state['obj_id'] = gamesite.nosql_id_generator.generate()

    # create fresh object
    obj = instantiate_object_for_player(observer, owner, specname, obj_id = state['obj_id'])

    try:
        # apply mutated state (level, hp, etc)
        obj.unpersist_state(state)
    except:
        gamesite.exception_log.event(server_time, ('unpersist_state error reading obs %d player %d in %s:\n' % (observer.user_id, player.user_id, context)) + repr(state))
        raise

    return obj

# confusing: player_auras are raw dicts, but object auras are instances of this class
class Aura (object):
    def __init__(self, spec, strength, range = -1, duration = -1, session_only = False, from_stattab = False):
        self.spec = spec
        self.strength = strength
        self.range = range
        self.duration = duration
        self.session_only = session_only
        self.from_stattab = from_stattab
    def serialize_aura(self):
        return {'name':self.spec['name'], 'strength':self.strength, 'duration':self.duration, 'range':self.range}

    @classmethod
    def apply_aura(cls, aura_list, specname, strength, range = -1, duration = -1, session_only = False, from_stattab = False):
        aura = None
        spec = gamedata['auras'][specname]
        for a in aura_list:
            if a.spec['name'] == specname:
                # already applied
                aura = a
                break
        if aura is not None:
            # stack existing aura
            pass
        else:
            # create new aura
            aura_list.append(Aura(spec, strength, range = range, duration = duration,
                                  session_only = session_only, from_stattab = from_stattab))
        return True

    @classmethod
    def prune_auras(cls, aura_list, is_session_change = False, is_stattab_refresh = False):
        to_remove = []
        for aura in aura_list:
            if (is_session_change and aura.session_only) or \
               (is_stattab_refresh and aura.from_stattab):
                to_remove.append(aura)
        for aura in to_remove: aura_list.remove(aura)

    @classmethod
    def has_aura_with_code(cls, aura_list, code):
        for aura in aura_list:
            if 'effects' in aura.spec:
                for eff in aura.spec['effects']:
                    if eff['code'] == code:
                        return True
        return False

class GameObject:
    VIRTUAL_ID = 'VIRTUAL' # stand-in obj_id for "virtual" units
    # note that the client also has a DEAD_ID (='DEAD') for dead units,
    # but that corresponds to a unit that simply doesn't exist server-side,
    # so the server does not have an explicit DEAD_ID.

    def __init__(self, obj_id, spec, owner, x, y, hp, level, build_finish_time_XXX_unused, auras):
        self.obj_id = obj_id # unique primary key value (for regional NoSQL database, and client/server wire protocol)

        # 'team' is set by the Session and is ONLY valid in that context
        self.team = -1

        self.spec = spec
        self.owner = owner
        self.x = x
        self.y = y
        self.level = level
        self.auras = auras
        self.equipment = None

        self.max_hp = self._calc_max_hp()
        if (hp < 0) or (hp > self.max_hp):
            self.hp = self.max_hp
        else:
            self.hp = hp

        # used for AI bases only
        self.force_ai_level = None

    # (private) calculate current max HP, taking level into account
    def _calc_max_hp(self):
        return self.get_leveled_quantity(self.spec.max_hp)

    # update max_hp according to spec/level/aura changes,
    # moving the absolute HP value proportionately
    def update_max_hp(self):
        old_max_hp = self.max_hp
        self.max_hp = self._calc_max_hp()
        if self.max_hp == old_max_hp: return

        hp_ratio = 1 if (self.hp == old_max_hp) else float(self.hp)/old_max_hp
        new_min_hp = 0 if (self.max_hp == 0 or self.hp == 0) else 1
        self.hp = min(max(int(hp_ratio * self.max_hp + 0.5), new_min_hp), self.max_hp)

    def heal_to_full(self):
        self.hp = self.max_hp

    # for temporary debugging use only - make sure new "self.max_hp" field matches gamedata
    def check_max_hp(self):
        spec_max = self._calc_max_hp()
        soft_assert(self.max_hp == spec_max)
        self.max_hp = spec_max

    # swap out the spec - only to be used for A/B testing, and cannot change "kind"
    def change_spec(self, newspec):
        self.spec = newspec
        self.update_max_hp()

    # update object level, modifying hitpoints proportionally
    def change_level(self, newlevel):
        if newlevel == self.level: return
        if not (newlevel >= 1 and newlevel <= self.spec.maxlevel):
            gamesite.exception_log.event(server_time, 'bad level on %s owned by player %d: %d (max %d)' % \
                                         (self.spec.name, self.owner.user_id if self.owner else -1, newlevel, self.spec.maxlevel))
            return
        self.level = newlevel
        self.update_max_hp()

    # ensure object is at least at "minlevel"
    def ensure_level(self, minlevel):
        if self.level < minlevel:
            self.change_level(minlevel)

    def change_auras(self, newauras):
        self.auras = newauras
        self.update_max_hp()

    def is_weak_zombie(self):
        if self.auras:
            return Aura.has_aura_with_code(self.auras, 'weak_zombie')
        return False

    def serialize_state(self, fake_xy = None, update_hp = True, update_xy = True):
        assert self.team != -1
        if fake_xy:
            x, y = fake_xy
        elif not update_xy:
            x, y = -1, -1
        else:
            x, y = self.x, self.y
        return [self.obj_id, self.spec.name, x, y,
                self.hp if update_hp else -1,
                self.max_hp,
                self.team, self.level, self.equipment]

    def serialize_auras(self):
        ser = [aura.serialize_aura() for aura in self.auras] if self.auras else None
        return [self.obj_id, ser]

    def persist_state(self, nosql = False):
        assert self.obj_id
        props = { 'obj_id': self.obj_id,
                  'spec': self.spec.name,
                  'xy': [self.x, self.y] }
        if self.level != 1:
            props['level'] = self.level

        if (self.hp < self.max_hp) and (self.max_hp != 0):
            props['hp_ratio'] = float(self.hp)/float(self.max_hp)

        if self.equipment:
            props['equipment'] = self.equipment

        if self.force_ai_level is not None:
            props['force_ai_level'] = self.force_ai_level


        if nosql:
            props['owner_id'] = self.owner.user_id
            props['kind'] = self.spec.kind # denormalized for fast queries on owner/kind
        else:
            if self.owner is EnvironmentOwner:
                props['owner'] = 'environment'
            elif self.owner is RogueOwner:
                props['owner'] = 'rogue'
            else:
                pass # defaults to 'player'

        return props

    def unpersist_state(self, state):
        assert self.obj_id # should have already been set up by reconstitute_object() or the constructor
        if 'obj_id' in state: assert state['obj_id'] == self.obj_id

        self.x = state['xy'][0]
        self.y = state['xy'][1]
        self.level = min(max(state.get('level',1), 1), self.spec.maxlevel)
        self.equipment = state.get('equipment', None)

        self.update_max_hp()
        max_hp = self.max_hp

        if 'hp_ratio' in state:
            hp_ratio = state['hp_ratio']
            self.hp = int(hp_ratio * max_hp + 0.5)
            # if not fully repaired, drop max_hp to make sure is_damaged() doesn't return false
            if hp_ratio < 1: max_hp -= 1
        elif 'hp' in state: # legacy files
            self.hp = int(state['hp'])
        else:
            self.hp = self.max_hp

        self.hp = min(max(self.hp, 0), self.max_hp)

        self.force_ai_level = state.get('force_ai_level', None)

    def is_under_construction(self):
        return False

    def is_damaged(self):
        if self.max_hp == 0: return False # indestructible object
        return (self.hp < self.max_hp)

    def is_destroyed(self):
        if self.max_hp == 0: return False # indestructible object
        return (self.hp == 0)

    # get level-dependent quantity (based on OBJECT level)
    def get_leveled_quantity(self, qty):
        return GameObjectSpec.get_leveled_quantity(qty, self.level)

    def is_building(self):
        return self.spec.kind == 'building'
    def is_mobile(self):
        return self.spec.kind == 'mobile'
    def is_inert(self):
        return self.spec.kind == 'inert'

    def get_auto_spell(self): return None
    def is_shooter(self): return self.get_auto_spell() is not None
    def is_invisible(self, session): return False

    def cost_to_repair(self, player, builder = None):
        return self.spec.cost_to_repair(self.level, self.hp/float(self.max_hp), player, self.obj_id, builder = builder)
    def time_to_repair(self, player, builder = None):
        return self.cost_to_repair(player, builder = builder)['time']

class Mobile(GameObject):
    def __init__(self, obj_id, spec, owner, x, y, hp, level, build_finish_time, auras, temporary = None):
        GameObject.__init__(self, obj_id, spec, owner, x, y, hp, level, build_finish_time, auras)
        self.squad_id = None
        self.orders = None
        self.patrol = None
        self.temporary = temporary # indicates a "temporary" unit like a security team
    def serialize_state(self, fake_xy = None, update_hp = True):
        return GameObject.serialize_state(self, fake_xy = fake_xy, update_hp = update_hp) + [self.squad_id,self.orders, self.patrol, self.temporary]
    def persist_state(self, **args):
        ret = GameObject.persist_state(self, **args)
        if self.squad_id is not None:
            ret['squad_id'] = self.squad_id
        if self.orders:
            ret['orders'] = self.orders
        if self.patrol:
            ret['patrol'] = self.patrol
        if self.temporary:
            ret['temporary'] = self.temporary
        return ret
    def unpersist_state(self, state):
        GameObject.unpersist_state(self, state)
        if 'orders' in state:
            orders = state['orders']
            if type(orders) is list:
                self.orders = state['orders']
            else:
                gamesite.exception_log.event(server_time, 'Mobile orders that are not a list: %s' % repr(orders))
        self.patrol = int(not (not state.get('patrol', None)))
        self.squad_id = state.get('squad_id', None)
        self.temporary = state.get('temporary', None)

    def is_temporary(self): return bool(self.temporary)

    # reposition in middle of map, used for deploying squad units that don't have positions yet
    def ensure_mobile_position(self, base_ncells):
        if self.x < 0 or self.y < 0 or self.x >= base_ncells[0] or self.y >= base_ncells[1]:
            self.x = int(base_ncells[0]/2 + (2*random.random()-1)*gamedata['client']['squad_deploy_spread'])
            self.y = int(base_ncells[1]/2 + (2*random.random()-1)*gamedata['client']['squad_deploy_spread'])

    # clean up position and orders to get the unit ready for squad deployment
    def reset_as_squad_unit(self, base_ncells):
        self.x = self.y = -1
        self.ensure_mobile_position(base_ncells)
        self.patrol = None
        self.orders = copy.copy(gamedata['client']['squad_deploy_ai_orders'])

    def get_auto_spell(self):
        spellname = self.owner.stattab.get_unit_stat(self.spec.name, 'weapon', self.spec.spells[0] if self.spec.spells else None)
        if spellname:
            spell = self.owner.get_abtest_spell(spellname)
            if spell.get('activation') == 'auto':
                return spell
        return None

    def is_invisible(self, session):
        if self.spec.invis_on_hold and self.orders and len(self.orders) == 1 and \
           not self.orders[0].get('aggressive',False) and \
           self.orders[0]['state'] == 4: # ai_states.AI_ATTACK_STATIONARY
            # check if in friendly base
            if self.owner.user_id == session.viewing_base.base_landlord_id:
                if session.viewing_base.base_type not in ('quarry', 'squad'):
                    return True
        return False

class Inert(GameObject):
    def __init__(self, obj_id, spec, owner, x, y, hp, level, build_finish_time, auras, metadata=None):
        GameObject.__init__(self, obj_id, spec, owner, x, y, hp, level, build_finish_time, auras)
        self.metadata = metadata
        self.creation_time = -1
    def serialize_state(self, update_hp = True, update_xy = True):
        return GameObject.serialize_state(self, update_hp = update_hp, update_xy = update_xy) + [self.metadata,]
    def persist_state(self, **args):
        ret = GameObject.persist_state(self, **args)
        if self.metadata:
            ret['metadata'] = self.metadata
        if self.creation_time != -1:
            ret['creation_time'] = self.creation_time
        return ret

    def unpersist_state(self, state):
        GameObject.unpersist_state(self, state)
        self.metadata = state.get('metadata', None)
        self.creation_time = state.get('creation_time', -1)

# note: "produce" means "accumulate resource over time"
# "manufacture" means "make mobile units" (even though this is called "Production" in the GUI)

class Building(GameObject):

    def __init__(self, obj_id, spec, owner, x, y, hp, level, build_finish_time, auras):
        GameObject.__init__(self, obj_id, spec, owner, x, y, hp, level, build_finish_time, auras)
        self.repair_finish_time = -1

        # for turrets, 'disarmed' flag gets set when repairs are initiated, and cleared when fully repaired
        self.disarmed = False

        # TIME CONVENTIONS
        # "total" time = total duration for entire action from start to finish
        # "start" time = server_time at which the building started work. Can be -1 if the work is halted due to battle damage.
        # "done" time = duration of work done so far, *prior to start time activating*
        # actual PROGRESS = "done" time plus (server_time - "start" time IF "start" time is >0)

        self.build_total_time = -1
        self.build_start_time = -1
        self.build_done_time = -1

        if build_finish_time > 0:
            self.build_start_time = server_time
            self.build_total_time = build_finish_time - server_time
            self.build_done_time = 0

        self.upgrade_total_time = -1
        self.upgrade_start_time = -1
        self.upgrade_done_time = -1

        self.research_item = ''
        self.research_total_time = -1
        self.research_start_time = -1
        self.research_done_time = -1

        # harvester production tracking
        # NOTE: in order to minimize the amount of work the server must do to track state,
        # we use the following convention: the number of units held by a harvester is equal
        # to self.contents, plus ((server_time-produce_start_time)/3600)*produce_rate. However, if
        # produce_start_time == -1, then it's just self.contents.

        self.produce_start_time = -1
        self.produce_rate = -1
        self.contents = 0

        # queue of units to be manufactured
        # each entry is a dictionary with fields 'spec_name', 'level' (of the unit), and 'total_time'
        self.manuf_queue = []
        self.manuf_start_time = -1
        self.manuf_done_time = -1

        self.crafting = None
        self.config = None

        self.modstats = {}

    def get_stat(self, stat, default_value):
        return ModChain.get_stat(self.modstats.get(stat, None), default_value)

    def heal_to_full(self):
        GameObject.heal_to_full(self)
        self.disarmed = False

    def serialize_state(self, update_hp = True, update_xy = True):
        return GameObject.serialize_state(self, update_hp = update_hp, update_xy = update_xy) + [self.repair_finish_time, self.build_total_time, self.build_start_time, self.build_done_time, self.upgrade_total_time, self.upgrade_start_time, self.upgrade_done_time, self.research_item, self.research_total_time, self.research_start_time, self.research_done_time, self.produce_start_time, self.produce_rate, self.contents, self.manuf_queue, self.manuf_start_time, self.manuf_done_time, self.disarmed, self.crafting.serialize_state() if self.crafting else None, self.config]

    def persist_state(self, **args):
        ret = GameObject.persist_state(self, **args)
        if self.repair_finish_time > 0:
            ret['repair_finish_time'] = self.repair_finish_time
        if self.build_total_time > 0:
            ret['build_total_time'] = self.build_total_time
            ret['build_start_time'] = self.build_start_time
            ret['build_done_time'] = self.build_done_time
        if self.disarmed:
            ret['disarmed'] = self.disarmed
        if self.research_item:
            ret['research_item'] = self.research_item
            ret['research_total_time'] = self.research_total_time
            ret['research_start_time'] = self.research_start_time
            ret['research_done_time'] = self.research_done_time
        if self.upgrade_total_time > 0:
            ret['upgrade_total_time'] = self.upgrade_total_time
            ret['upgrade_start_time'] = self.upgrade_start_time
            ret['upgrade_done_time'] = self.upgrade_done_time
        if self.produce_start_time > 0:
            ret['produce_start_time'] = self.produce_start_time
        if self.produce_rate > 0:
            ret['produce_rate'] = self.produce_rate
        if self.contents > 0:
            ret['contents'] = self.contents
        if len(self.manuf_queue) > 0:
            ret['manuf_queue'] = self.manuf_queue
            ret['manuf_start_time'] = self.manuf_start_time
            ret['manuf_done_time'] = self.manuf_done_time
        if self.crafting:
            ret['crafting'] = self.crafting.persist_state()
        if self.config:
            ret['config'] = copy.deepcopy(self.config)
        return ret

    def unpersist_state(self, state):
        GameObject.unpersist_state(self, state)
        self.repair_finish_time = state.get('repair_finish_time',-1)
        self.disarmed = state.get('disarmed', False)
        self.produce_start_time = state.get('produce_start_time', -1)
        self.produce_rate = state.get('produce_rate', -1)
        self.contents = state.get('contents', 0)

        self.research_item = state.get('research_item', '')

        # migrate old time tracking formats
        if state.get('research_finish_time', -1) > 0:
            assert self.research_item
            self.research_total_time = state['research_finish_time'] - server_time
            if self.research_total_time >= 10:
                self.research_done_time = 0
                self.research_start_time = server_time
            else:
                # call it done
                self.research_done_time = 0
                self.research_total_time = 1
                self.research_start_time = server_time - 10
        else:
            self.research_total_time = state.get('research_total_time', -1)
            self.research_start_time = state.get('research_start_time', -1)
            self.research_done_time = state.get('research_done_time', -1)

        if state.get('build_finish_time', -1) > 0:
            self.build_total_time = state['build_finish_time'] - server_time
            if self.build_total_time >= 10:
                self.build_done_time = 0
                self.build_start_time = server_time
            else:
                self.build_done_time = 0
                self.build_total_time = 1
                self.build_start_time = server_time - 10
        else:
            self.build_total_time = state.get('build_total_time', -1)
            self.build_start_time = state.get('build_start_time', -1)
            self.build_done_time = state.get('build_done_time', -1)

        if state.get('upgrade_finish_time', -1) > 0:
            self.upgrade_total_time = state['upgrade_finish_time'] - server_time
            if self.upgrade_total_time >= 10:
                self.upgrade_done_time = 0
                self.upgrade_start_time = server_time
            else:
                self.upgrade_done_time = 0
                self.upgrade_total_time = 1
                self.upgrade_start_time = server_time - 10
        else:
            self.upgrade_total_time = state.get('upgrade_total_time',-1)
            self.upgrade_start_time = state.get('upgrade_start_time',-1)
            self.upgrade_done_time = state.get('upgrade_done_time',-1)

        self.manuf_queue = state.get('manuf_queue', [])
        if len(self.manuf_queue) > 0 and ('manuf_start_time' not in state):
            # migrate
            self.manuf_start_time = server_time
            self.manuf_done_time = 0
            last_time = server_time
            for item in self.manuf_queue:
                item['total_time'] = item['finish_time'] - last_time
                last_time = item['finish_time']
                del item['finish_time']
        else:
            self.manuf_start_time = state.get('manuf_start_time', -1)
            self.manuf_done_time = state.get('manuf_done_time', -1)

        if 'crafting' in state:
            self.crafting = Business.reconstitute(lambda: Business.QueuedBusiness(Business.CraftingBusiness), state['crafting'])

        if 'config' in state:
            self.config = copy.deepcopy(state['config'])

    def update_repair(self):
        # ONLY update hitpoints for client battle purposes
        # do NOT actually set repair_finish_time=-1, let the client trigger that with PING_OBJECT
        # because it needs to go through the power_changed path etc.
        if self.repair_finish_time > 0:
            # bump hp up to what it should be after the elapsed time
            percent_unrepaired = float(self.repair_finish_time - server_time) / (self.get_leveled_quantity(self.spec.repair_time) / self.get_stat('repair_speed', 1))

            # do not let hp == self.max_hp, since that will make is_damaged() false and throw off other code
            max_hp = self.max_hp - 1

            new_hp = int(min(max(max(self.hp, (1.0-percent_unrepaired)*max_hp), 0), max_hp))

            self.hp = new_hp

    def halt_repair(self):
        self.update_repair()
        disrupted = (self.repair_finish_time > 0)
        self.repair_finish_time = -1
        return disrupted

    def update_production(self, player, base_type, base_region, power_factor):
        # base may be None if you are just going to halt immediately

        if not self.is_producer():
            return

        capacity = self.get_leveled_quantity(self.spec.production_capacity)

        # adjust by A/B test modifier
        yield_rate = 1
        if base_type == 'quarry' and (base_region in gamedata['regions']):
            yield_rate = gamedata['regions'][base_region].get('quarry_yield', 1)

        #capacity = int(capacity * player.get_abtest_value('T001_harvester_cap', 'modifier', 1))

        # update self.contents and reset produce_start_time
        if (self.produce_start_time > 0):
            assert (self.produce_rate > 0)

            units = self.contents + int((float(self.produce_rate) * (server_time - self.produce_start_time))/(60.0*60.0))
            units = max(0, min(units, capacity))
            self.contents = units

        # zero out ongoing production
        self.produce_start_time = -1
        self.produce_rate = -1

        # now restart production
        if self.is_damaged() or self.is_upgrading() or self.is_under_construction() or (self.contents >= capacity):
            # can't make anything
            return

        units_per_hour = max(
            self.get_stat('produces_'+res, self.get_leveled_quantity(getattr(self.spec, 'produces_'+res))) \
            for res in gamedata['resources'])

        units_per_hour = max(0, int(units_per_hour * power_factor * yield_rate * player.get_any_abtest_value('global_harvest_coeff', gamedata['global_harvest_coeff'])))

        if (units_per_hour > 0):
            self.produce_start_time = server_time
            self.produce_rate = units_per_hour

    def halt_production(self, player):
        self.update_production(player, None, None, 1)
        disrupted = (self.produce_start_time > 0)
        self.produce_start_time = -1
        self.produce_rate = -1
        return disrupted

    def halt_research(self):
        if self.research_start_time > 0:
            # give credit for time elapsed, then halt
            self.research_done_time += (server_time - self.research_start_time)
            self.research_start_time = -1
            return True
        return False

    def halt_build(self):
        if self.build_start_time > 0:
            self.build_done_time += (server_time - self.build_start_time)
            self.build_start_time = -1
            return True
        return False

    def halt_upgrade(self):
        if self.upgrade_start_time > 0:
            self.upgrade_done_time += (server_time - self.upgrade_start_time)
            self.upgrade_start_time = -1
            return True
        return False

    def halt_manuf(self):
        if self.manuf_start_time > 0:
            self.manuf_done_time += (server_time - self.manuf_start_time)
            self.manuf_start_time = -1
            return True
        return False

    def halt_crafting(self, force): # if force is false, do not halt recipes that are marked unhaltable (by damage)
        if self.crafting:
            if not gamedata['crafting']['categories'][gamedata['crafting']['recipes'][self.crafting.queue[0].craft_state['recipe']]['crafting_category']].get('haltable',True):
                return False # cannot be halted by damage
            return self.crafting.halt(server_time)
        return False

    # halt all activity (due to getting damaged). Return True if the halting counts as "havoc".
    def halt_all(self):
        disrupted = False
        self.halt_repair()
        self.halt_production(self.owner)
        disrupted |= self.halt_research()
        disrupted |= self.halt_build()
        disrupted |= self.halt_upgrade()
        self.halt_manuf()
        self.halt_crafting(False)
        return disrupted

    # try to restart research - assume building reached full health at "undamaged_time" (-1 if it was always at full health)
    def update_research(self, undamaged_time):
        if not self.research_item: return
        if self.repair_finish_time > 0 or self.is_damaged(): return
        if self.research_start_time > 0: return
        if undamaged_time >= 0:
            self.research_done_time += server_time - undamaged_time
        self.research_start_time = server_time

    def update_build(self, undamaged_time):
        if self.build_total_time < 0: return
        if self.repair_finish_time > 0 or self.is_damaged(): return
        if self.build_start_time > 0: return
        if undamaged_time >= 0:
            self.build_done_time += server_time - undamaged_time
        self.build_start_time = server_time

    def update_upgrade(self, undamaged_time):
        if self.upgrade_total_time < 0: return
        if self.repair_finish_time > 0 or self.is_damaged(): return
        if self.upgrade_start_time > 0: return
        if undamaged_time >= 0:
            self.upgrade_done_time += server_time - undamaged_time
        self.upgrade_start_time = server_time

    def update_manuf(self, undamaged_time):
        if len(self.manuf_queue) < 1: return
        if self.repair_finish_time > 0 or self.is_damaged(): return
        if self.manuf_start_time > 0: return
        if undamaged_time >= 0:
            self.manuf_done_time += server_time - undamaged_time
        self.manuf_start_time = server_time

    def update_crafting(self, undamaged_time):
        if not self.crafting: return False
        if gamedata['crafting']['categories'][gamedata['crafting']['recipes'][self.crafting.queue[0].craft_state['recipe']]['crafting_category']].get('haltable',True) and \
           (self.repair_finish_time > 0 or self.is_damaged()): return False
        return self.crafting.resume(undamaged_time, server_time)

    # note! does not update_production! (should it?)
    def update_all(self, undamaged_time = -1):
        self.update_repair()
        self.update_research(undamaged_time)
        self.update_upgrade(undamaged_time)
        self.update_build(undamaged_time)
        self.update_manuf(undamaged_time)
        self.update_crafting(undamaged_time)

    # harvest up to 'limit' resources and return # of units harvested
    # must call update_production() afterward to unhalt!
    def harvest(self, player, limit):
        if not self.is_producer():
            return 0

        self.halt_production(player)
        harvested = min(self.contents, limit)
        self.contents -= harvested

        return harvested

    # for storages and harvesters, return dictionary of maximum {"resource":amount} stored (for base_resource_loot computations only)
    def resource_loot_contribution(self):
        ret = None
        for res in gamedata['resources']:
            amount = self.get_leveled_quantity(getattr(self.spec, 'storage_'+res))
            if self.get_leveled_quantity(getattr(self.spec, 'produces_'+res)) > 0:
                amount += self.get_leveled_quantity(self.spec.production_capacity)
            if amount > 0:
                if ret is None: ret = {}
                ret[res] = ret.get(res,0) + amount
        return ret

    # for Specific ResLoot, optionally take a fraction of the base's total loot instead of using a capacity-weighted contribution
    def _specific_loot_fraction(self, pve_or_pvp):
        ret = None
        for res in gamedata['resources']:
            amount = self.get_leveled_quantity(getattr(self.spec, 'specific_'+pve_or_pvp+'_loot_fraction_'+res))
            if amount >= 0: # note: treat -1 as "no effect", 0 as "fraction is zero"
                if ret is None: ret = {}
                ret[res] = amount
        return ret
    def specific_pve_loot_fraction(self): return self._specific_loot_fraction('pve')
    def specific_pvp_loot_fraction(self): return self._specific_loot_fraction('pvp')

    def affects_power(self):
        return bool(self.spec.provides_power) or \
               bool(self.spec.consumes_power) or \
               (self.equipment and any((item['spec'] in gamedata['items'] and gamedata['items'][item['spec']]['equip'].get('consumes_power',0)>0) \
                                       for item in Equipment.equip_iter(self.equipment))) or \
               (self.is_crafting() and any(entry.craft_state['recipe'] in gamedata['crafting']['recipes'] and \
                                           gamedata['crafting']['recipes'][entry.craft_state['recipe']].get('consumes_power',0)>0 \
                                           for entry in self.crafting.queue))

    def is_producer(self):
        return (self.get_leveled_quantity(self.spec.production_capacity) > 0)

    def is_researcher(self):
        return "RESEARCH_FOR_FREE" in self.spec.spells

    def is_manufacturer(self):
        return "MAKE_DROIDS" in self.spec.spells

    def is_crafter(self):
        return "CRAFT_FOR_FREE" in self.spec.spells

    def is_lottery_building(self):
        return "LOTTERY_SCAN" in self.spec.spells

    def is_storage(self):
        for res in gamedata['resources']:
            if self.get_leveled_quantity(getattr(self.spec, 'storage_'+res)) > 0:
                return True
        return False

    def is_minefield(self):
        return self.spec.equip_slots and ('mine' in self.spec.equip_slots)
    def is_minefield_armed(self):
        return Equipment.equip_has(self.equipment, ('mine',0))
    def minefield_item(self): # note: returns spec name
        item = Equipment.equip_get(self.equipment, ('mine',0))
        if item: return item['spec']
        if this.config and this.config['mine'] and len(this.config['mine']) > 0:
            if isinstance(this.config['mine'], basestring):
                return this.config['mine']
            elif isinstance(this.config['mine'][0], basestring):
                return this.config['mine'][0]
            else:
                return this.config['mine'][0]['spec']
        return None
    def is_emplacement(self):
        return self.spec.equip_slots and ('turret_head' in self.spec.equip_slots)
    def turret_head_item(self): # note: returns spec name
        item = Equipment.equip_get(self.equipment, ('turret_head',0))
        if item: return item['spec']
        return None

    def is_repairing(self):
        return (self.repair_finish_time > 0)

    def is_under_construction(self):
        return (self.build_total_time > 0)

    def is_upgrading(self):
        return (self.upgrade_total_time > 0)

    def is_researching(self):
        return (not (not self.research_item))

    def is_manufacturing(self):
        return (len(self.manuf_queue) > 0)

    def is_crafting(self):
        return bool(self.crafting)

    def activity_finish_time(self):
        if self.is_repairing():
            return self.repair_finish_time
        elif self.is_upgrading():
            if self.upgrade_start_time > 0:
                return self.upgrade_start_time + (self.upgrade_total_time - self.upgrade_done_time)
            else:
                return -1
        elif self.is_under_construction():
            if self.build_start_time > 0:
                return self.build_start_time + (self.build_total_time - self.build_done_time)
            else:
                return -1
        elif self.is_researching():
            if self.research_start_time > 0:
                return self.research_start_time + (self.research_total_time - self.research_done_time)
            else:
                return -1
        elif self.is_manufacturing():
            if self.manuf_start_time > 0:
                return self.manuf_start_time + sum([item['total_time'] for item in self.manuf_queue]) - self.manuf_done_time
            else:
                return -1
        elif self.is_crafting():
            return self.crafting.finish_time()
        else:
            return -1
    def activity_description(self, player):
        if self.is_repairing():
            return 'repair'
        elif self.is_upgrading():
            return 'upgrade,level%d' % (self.level+1)
        elif self.is_under_construction():
            return 'construct'
        elif self.is_researching():
            ret = 'research,' + self.research_item
            cur_level = player.tech.get(self.research_item, 0)
            ret += ',level%d' % (cur_level+1)
            return ret
        elif self.is_manufacturing():
            return 'manufacture,' + self.manuf_queue[0]['spec_name']
        elif self.is_crafting():
            return 'craft,'+self.crafting.describe_state()
        else:
            return 'nothing'
    def activity_speedup_kind(self):
        if self.is_repairing():
            return 'building_repair'
        elif self.is_upgrading() or self.is_under_construction():
            return 'building_upgrade'
        elif self.is_researching():
            return 'tech_research'
        elif self.is_manufacturing():
            return 'unit_manufacture'
        elif self.is_crafting():
            return 'crafting'
        else:
            return None

    def is_busy(self):
        return self.is_repairing() or self.is_upgrading() or self.is_under_construction() or self.is_researching() or self.is_manufacturing() or self.is_crafting()

    def is_using_foreman(self):
        if self.is_under_construction() or self.is_upgrading(): return True
        # check for in-progress crafting tasks that need a foreman
        if self.is_crafting():
            for entry in self.crafting.queue:
                if not entry.is_complete(server_time):
                    if entry.craft_state['recipe'] in gamedata['crafting']['recipes']:
                        if gamedata['crafting']['categories'][gamedata['crafting']['recipes'][entry.craft_state['recipe']]['crafting_category']].get('foreman', False):
                            return True
        return False

    def get_auto_spell(self):
        spellname = self.get_stat('weapon', self.spec.spells[0] if self.spec.spells else None)
        if spellname:
            spell = self.owner.get_abtest_spell(spellname)
            if spell.get('activation') == 'auto':
                return spell
        return None

    def is_invisible(self, session): return self.spec.invisible

class ResourceStateSnapshot:
    def __init__(self, inventory, res_max, res_cur, gamebucks, facebook_credits, player_level, xp, protection_end_time):
        self.inventory = inventory
        self.res_max = res_max
        self.res_cur = res_cur
        # for legacy code
        for res in gamedata['resources']: setattr(self, res, [res_max[res], res_cur[res]])
        self.gamebucks = gamebucks
        self.facebook_credits = facebook_credits
        self.player_level = player_level
        self.xp = xp
        self.protection_end_time = protection_end_time

    def serialize(self, enemy = False):
        if enemy:
            prot_end_time = conceal_protection_time(self.protection_end_time)
        else:
            prot_end_time = self.protection_end_time
        ret = { "gamebucks": self.gamebucks,
                "facebook_credits": self.facebook_credits,
                "player_level": self.player_level, "xp": self.xp,
                "protection_end_time": prot_end_time }
        for res in gamedata['resources']: ret[res] = getattr(self, res)
        return ret
    def max_res(self, res): return self.res_max[res]
    def cur_res(self, res): return self.res_cur[res]
    def max_inventory(self): return self.inventory[0]
    def cur_inventory(self): return self.inventory[1]
    def reserved_inventory(self): return self.inventory[2]
    def max_usable_inventory(self): return self.max_inventory() - self.reserved_inventory()

# if power usage exceeds the supply, then reduce unit/building
# effectiveness by this factor (in the range 0-1)
def compute_power_factor(power):
    if power[1] <= power[0]:
        return 1
    else:
        return power[0] / (1.0*power[1])


class ResourceState:
    def __init__(self, player):
        self.player = player # used for metrics and home_base_iter
        for res in gamedata['resources']:
            setattr(self, res, gamedata['starting_conditions'].get(res,0))
        self.gamebucks = 0 # given in player.migrate - gamedata['starting_conditions']['gamebucks']
        self.facebook_credits = -1
        self.player_level = 1
        self.xp = gamedata['starting_conditions']['xp']
        self.protection_end_time = -1

        # base_size used to be stored in playerdb but now it is
        # base-specific so it must be migrated to basedb
        self.OLD_base_size = 0

    def get_fungible_amounts(self):
        return dict((res, getattr(self, res)) for res in gamedata['resources'])

    def gain_xp(self, amount, reason='', metadata = None):
        if amount == 0: return
        self.xp += amount
        if LOTS_OF_METRICS:
            user_id = self.player.user_id
            if not is_ai_user_id_range(user_id):
                if metadata is None:
                    metadata = {}
                metadata['gain_amount'] = amount
                metadata['method'] = reason
                metric_event_coded(user_id, '2400_xp_gain', metadata)

    def gain_gamebucks(self, amount, reason='', subreason=''):
        if amount == 0: return
        self.gamebucks += amount
        dict_setmax(self.player.history, 'peak_gamebucks', self.gamebucks)

        if gamedata['server'].get('log_econ_res', False) and gamedata['server'].get('log_econ_res_gamebucks', True):
            props = {'user_id':self.player.user_id, 'res':{'gamebucks':amount}, 'cat':reason}
            #if subreason: props['sub'] = subreason.split(',')[0] # just get the spellname only
            props.update(self.player.get_denormalized_summary_props('brief'))
            gamesite.nosql_client.log_record('econ_res', server_time, props, log_ident = False, reason = 'gain_gamebucks')

    def gain_res(self, res, reason='', metadata = None, snap = None, break_limit = False):
        total = sum(res.itervalues(),0)
        if total == 0: return {}

        given = res.copy()
        if total > 0 and (not break_limit):
            if not snap:
                snap = self.calc_snapshot()
            for resname in given:
                given[resname] = max(0, min(given[resname], snap.max_res(resname) - snap.cur_res(resname)))
            total = sum(given.itervalues(),0)
            if total == 0:
                return {}

        for resname in given:
            setattr(self, resname, getattr(self, resname) + given[resname])
            dict_setmax(self.player.history, 'peak_'+resname, getattr(self, resname))
            dict_setmax(self.player.history, 'peak_'+resname+'_at_townhall_L'+str(self.player.get_townhall_level_fast()), getattr(self, resname))

        return given

    def calc_snapshot(self):
        inventory = [0,0,0] # max, cur, reserved
        res_max = dict((res,0) for res in gamedata['resources'])
        for obj in self.player.home_base_iter():
            if obj.spec.worth_less_xp or (not obj.is_building()) or obj.is_under_construction():
                pass
            else:
                # XXX move max inventory (and max storage?) over to player.stattab
                inventory[0] += obj.get_leveled_quantity(obj.spec.provides_inventory)

                #if obj.is_crafting() and gamedata['crafting_delivery_method'] == 'reserve_slot_on_start':
                #    # calculate reserved slots
                #    inventory[2] += LootTable.max_slots_needed(gamedata['loot_tables'], gamedata['crafting']['recipes'][obj.crafting.queue[0].craft_state['recipe']]['product'])

                if True or (not obj.is_damaged()):
                    for res in gamedata['resources']:
                        res_max[res] += obj.get_leveled_quantity(getattr(obj.spec, 'storage_'+res))

        inventory[1] = len(self.player.inventory)

        return ResourceStateSnapshot(inventory, res_max, dict((res,getattr(self,res)) for res in gamedata['resources']),
                                     self.gamebucks, self.facebook_credits, self.player_level, self.xp, self.protection_end_time)

    def persist_state(self):
        ret = { 'player_level': self.player_level, 'xp': self.xp,
                'gamebucks': self.gamebucks,
                'protection_end_time': self.protection_end_time, 'base_size': self.OLD_base_size }
        for res in gamedata['resources']: ret[res] = getattr(self, res)
        return ret
    def unpersist_state(self, state):
        for res in gamedata['resources']:
            setattr(self, res, int(state.get(res,0)))
        self.gamebucks = int(state.get('gamebucks', 0))
        self.player_level = int(state.get('player_level', 1))
        self.xp = int(state.get('xp', 0))
        self.protection_end_time = int(state.get('protection_end_time', -1))
        self.OLD_base_size = state.get('base_size', 0)

    @classmethod
    def create_from_persisted(cls, player, state):
        ret = cls(player)
        ret.unpersist_state(state)
        return ret

class Quest:
    def __init__(self, name):
        self.name = name

        # these fields are Predicate objects, the rest are raw JSON
        self.goal = None
        self.activation = None
        self.show_if = None
        self.force_claim = False

        for key in gamedata["quests"][name]:
            val = gamedata["quests"][name][key]
            if key == 'goal':
                self.goal = Predicates.read_predicate(val)
            elif key == 'activation':
                self.activation = Predicates.read_predicate(val)
            elif key == 'show_if':
                self.show_if = Predicates.read_predicate(val)
            else:
                setattr(self, key, val)

    # clone a Quest, applying patches to member fields (for A/B testing)
    def make_patched(self, patch):
        ret = copy.copy(self)
        for key, val in patch.iteritems():
            if key == 'goal' or key == 'activation':
                setattr(ret, key, Predicates.read_predicate(val))
            else:
                ret.__dict__[key] = val
        return ret

class Base(object):
    def __init__(self, region_id, base_id, creator_id, base_type, climate = None):
        # fields stored in file:
        self.base_id = base_id
        self.base_region = region_id
        self.base_generation = -1 # for read->write lock consistency checking
        self.base_ui_name = None
        self.base_type = base_type
        self.base_map_loc = None

        if climate:
            self.base_climate = climate
        elif ('default_player_home_climate' in gamedata) and (base_type == 'home') and (not is_ai_user_id_range(creator_id)):
            # special-case override for player bases
            self.base_climate = gamedata['default_player_home_climate']
        else:
            self.base_climate = gamedata.get('default_climate', None)

        self.base_ncells = None
        self.base_creation_time = server_time
        self.base_creator_id = creator_id # user_id of original creator
        self.base_landlord_id = creator_id # user_id of current owner
        self.base_times_attacked = 0
        self.base_times_conquered = 0 # count for conquers (quarries only)
        self.base_last_conquer_time = -1
        self.base_last_attack_time = -1
        self.base_last_landlord_id = -1

        self.base_template = None # for hives only, references hives.json
        self.base_richness = 0 # applies to AI base loot, and quarry GUI
        self.base_icon = None # ditto
        self.base_expire_time = -1
        self.base_size = 0
        self.deployment_buffer = 1 # whether or not to add deployment buffer around base perimeter

        # this is used for AI bases that have explicit loot amounts, and player bases to save state across attacks
        self.base_resource_loot = None # dictionary of {"resource": amount} remaining to be looted

        # list of GameObjects
        self.my_base = []

        # fields only relevant to in-memory usage
        # self.landlord = landlord

    def lock_id(self): return SpinDB.base_lock_id(self.base_region, self.base_id)
    def ncells(self):
        if self.base_ncells is not None: return self.base_ncells
        return gamedata['map']['default_ncells']
    def midcell(self):
        ncells = self.ncells()
        return [int(ncells[0]/2),int(ncells[1]/2)]

    # note: we use "adopt"/"drop" instead of "add"/"remove" in order to distinguish operations
    # on bases versus Session.add_object/rem_object(), which operates on sessions
    def adopt_object(self, obj):
        self.my_base.append(obj)
        self.nosql_write_one(obj, 'adopt_object', add_new = True)
    def drop_object(self, obj):
        self.my_base.remove(obj)
        self.nosql_drop_one(obj, 'drop_object')
    def iter_objects(self):
        for obj in self.my_base: yield obj

    def find_object_by_type(self, specname):
        for obj in self.iter_objects():
            if obj.spec.name == specname:
                return obj
        return None

    def get_power_state(self):
        power = [0,0]
        if gamedata['enable_power']:
            for obj in self.iter_objects():
                if obj.is_building() and (not obj.is_under_construction()):
                    # power production
                    if (not obj.is_damaged()) and (not obj.is_upgrading()):
                        power[0] += obj.get_leveled_quantity(obj.spec.provides_power)
                    # power consumption
                    if obj.is_upgrading():
                        power[1] += GameObjectSpec.get_leveled_quantity(obj.spec.consumes_power_while_building, obj.level + 1)
                    else:
                        power[1] += obj.get_leveled_quantity(obj.spec.consumes_power)

                    # items
                    if obj.equipment:
                        for item in Equipment.equip_iter(obj.equipment):
                            if item['spec'] in gamedata['items']:
                                item_spec = gamedata['items'][item['spec']]
                                if 'equip' in item_spec:
                                    power[1] += item_spec['equip'].get('consumes_power',0)

                    # in-progress crafting recipes
                    if obj.is_crafting():
                        to_add = 0 # add max() of power consumed by all queued recipes
                        for entry in obj.crafting.queue:
                            if not entry.is_complete(server_time):
                                if entry.craft_state['recipe'] in gamedata['crafting']['recipes']:
                                    to_add = max(to_add, gamedata['crafting']['recipes'][entry.craft_state['recipe']].get('consumes_power',0))
                        power[1] += to_add
        return power

    def get_base_radius(self):
        assert self.base_size >= 0 and self.base_size < len(gamedata['map']['base_perimeter'])
        return int(gamedata['map']['base_perimeter'][self.base_size]/2)

    def quantize_building_location(self, ji, spec):
        if spec.quantize_location:
            q = spec.quantize_location
            if q > 2:
                # new SG-style quantization
                # because of the convention that a building's x,y coordinates are its center, and not its corner,
                # we can't quantize just by snapping the x,y coordinates. We have to do more math to pick the right center.
                gridsize = spec.gridsize
                if (gridsize[0]&1) or (gridsize[1]&1):
                    raise Exception('cannot quantize odd gridsize with q = %d' % q)
                half = [gridsize[0]>>1, gridsize[1]>>1]
                # this is where the corner was BEFORE quantization
                old_corner = [ji[0]-half[0], ji[1]-half[1]]
                # this is where we want the corner to be AFTER quantization
                corner = [q*(old_corner[0]//q),
                          q*(old_corner[1]//q)]
                return [corner[0]+half[0], corner[1]+half[1]]
            else:
                # 2-unit TR-style quantization
                return [q*(ji[0]//q),
                        q*(ji[1]//q)]
        return ji
    # return whether a building of spec 'spec' can be built at location 'xy', disregarding collisions with object 'myself'
    def is_building_location_valid(self, ji, spec, myself, ignore_collision = False, ignore_perimeter = False):
        gridsize = spec.gridsize

        if spec.quantize_location: # enforce quantization
            if ji != self.quantize_building_location(ji, spec):
                return False

        bound = get_grid_bounds(ji, gridsize)

        ncells = self.ncells()
        mid = self.midcell()
        rad = self.get_base_radius()

        if ignore_perimeter:
            # just clamp against entire play area
            if bound[0][0] < 0 or bound[0][1] > ncells[0] or \
               bound[1][0] < 0 or bound[1][1] > ncells[1]:
                return False
        else:
            # clamp against base perimeter
            if bound[0][0] < mid[0]-rad or bound[0][1] > mid[0]+rad or \
               bound[1][0] < mid[1]-rad or bound[1][1] > mid[1]+rad:
                return False

        # expand boundary to include exclusion zone
        excl_bound = [[bound[axis][0]-spec.exclusion_zone[axis], bound[axis][1]+spec.exclusion_zone[axis]] for axis in xrange(2)]

        # check for collisions with other buildings
        if not ignore_collision:
            for obj in self.iter_objects():
                if (obj is not myself) and obj.is_building():
                    hisbound = get_grid_bounds([obj.x,obj.y], obj.spec.gridsize)
                    # if OTHER object has an exclusion zone, then apply OUR exclusion zone
                    if obj.spec.exclusion_zone != [0,0]:
                        b = excl_bound
                    else:
                        b = bound
                    if (b[0][0] < hisbound[0][0] and b[0][1] > hisbound[0][0]) or \
                       (b[0][0] >= hisbound[0][0] and b[0][0] < hisbound[0][1]):

                        if (b[1][0] < hisbound[1][0] and b[1][1] > hisbound[1][0]) or \
                           (b[1][0] >= hisbound[1][0] and b[1][0] < hisbound[1][1]):

                            if gamedata['server']['log_invalid_building_locations']:
                                gamesite.exception_log.event(server_time, 'invalid building location at base %s: %s at %s' % \
                                                             (self.base_id, myself.spec.name if myself else 'unknown', repr(ji)))
                            return False
        return True

    # return whether a deposit can appear at location xy
    def is_deposit_location_valid(self, xy, gridsize):
        mid = self.midcell()
        rad = self.get_base_radius()
        gs = [int(gridsize[0]/2), int(gridsize[1]/2)]
        if (xy[0]-gs[0] < mid[0]-rad) or (xy[0]+gs[0] > mid[0]+rad) or \
           (xy[1]-gs[1] < mid[1]-rad) or (xy[1]+gs[1] > mid[1]+rad):
            # check for collisions with buildings?
            return True
        return False

    def has_deployment_zone(self):
        return bool(self.deployment_buffer and type(self.deployment_buffer) is dict)
    def deployment_zone_centroid(self):
        if not self.has_deployment_zone(): return None
        if self.deployment_buffer['type'] != 'polygon':
            raise Exception('unhandled deployment buffer type %r' % self.deployment_buffer['type'])
        centroid = [0,0]
        for vert in self.deployment_buffer['vertices']:
            centroid = vec_add(centroid, vert)
        centroid = vec_scale(1.0/len(self.deployment_buffer['vertices']), centroid)
        return centroid

    def is_deployment_location_valid(self, player, xy):
        ncells = self.ncells()
        if xy[0] < 0 or xy[0] >= ncells[0] or xy[1] < 0 or xy[1] >= ncells[1]:
            return False

        if player.user_id == self.base_landlord_id:
            # owner can deploy anywhere
            return True

        # check against base perimeter or deployment zone
        if self.has_deployment_zone():
            # Gangnam style
            assert self.deployment_buffer['type'] == 'polygon'
            sign = 0
            for i in xrange(len(self.deployment_buffer['vertices'])):
                iend = ((i+1) % len(self.deployment_buffer['vertices']))
                start = self.deployment_buffer['vertices'][i]
                end = self.deployment_buffer['vertices'][iend]
                seg = vec_sub(end, start)
                point = vec_sub(xy, start)
                k = seg[0]*point[1] - seg[1]*point[0]
                sign_k = 1 if k >= 0 else -1
                if sign == 0:
                    sign = sign_k
                elif sign_k != sign:
                    return False
        elif gamedata['map']['deployment_buffer'] >= 0:
            # old style
            mid = self.midcell()
            rad = [self.get_base_radius(), self.get_base_radius()]

            if self.deployment_buffer:
                rad[0] += gamedata['map']['deployment_buffer']
                rad[1] += gamedata['map']['deployment_buffer']

            for AXIS in (0,1):
                rad[AXIS] += max(0, (ncells[AXIS] - gamedata['map']['default_ncells'][AXIS])/2)

            if (xy[0] >= mid[0]-rad[0]) and (xy[0] <= mid[0]+rad[0]) and (xy[1] >= mid[1]-rad[1]) and (xy[1] <= mid[1]+rad[1]):
                return False

        # check against building blockage?
        return True

    def can_deploy_unit(self, spec):
        # test unit against climate deployment restrictions
        if self.base_climate:
            data = gamedata['climates'][self.base_climate]
            if ('include_manufacture_categories' in data) and (spec.manufacture_category not in data['include_manufacture_categories']): return False
            if ('exclude_manufacture_categories' in data) and (spec.manufacture_category in data['exclude_manufacture_categories']): return False
            if data.get('exclude_air_units',False) and spec.flying: return False
            if data.get('exclude_ground_units',False) and (not spec.flying): return False
            if ('include_units' in data) and (spec.name not in data['include_units']): return False
            if ('exclude_units' in data) and (spec.name in data['exclude_units']): return False
        return True

    # set up production on all production buildings
    # this depends on power state, so it must be done AFTER base objects are fully reconstituted
    def init_production(self, landlord):
        power_factor = compute_power_factor(self.get_power_state())
        for obj in self.iter_objects():
            if obj.is_building():
                obj.update_production(landlord, self.base_type, self.base_region, power_factor)

    def do_calc_base_damage(self, detail = False, count_partial = False):
        damaged_objects = {} if detail else None
        base_hp_total = 0
        base_hp_max = 0.1
        barriers_damaged = 0
        base_repair_time = -1 # server_time at which base will be fully repaired (-1 if already repaired)

        for obj in self.iter_objects():
            if obj.is_building():
                if obj.is_repairing():
                    base_repair_time = max(base_repair_time, obj.repair_finish_time)

                # handle barriers separately
                if obj.spec.worth_less_xp:
                    if obj.is_damaged() and obj.spec.name == 'barrier':
                        barriers_damaged += 1
                else:
                    # XXXXXX obj.hp does not include repairs! should we take ongoing repairs into account here?
                    base_hp_max += obj.max_hp

                    if (not obj.is_destroyed()) and gamedata.get('base_damage_skip_partial',False) and (not count_partial):
                        base_hp_total += obj.max_hp
                    else:
                        base_hp_total += obj.hp

                    if detail and obj.is_damaged():
                        damaged_objects[obj.obj_id] = {'spec': obj.spec.name, 'hp': obj.hp, 'max_hp': obj.max_hp}
                        if obj.is_producer():
                            damaged_objects[obj.obj_id]['repair_finish_time'] = obj.repair_finish_time
                            damaged_objects[obj.obj_id]['produce_rate'] = obj.produce_rate
                            damaged_objects[obj.obj_id]['contents'] = obj.contents

        base_hp_total = int(base_hp_total)
        base_hp_max = int(base_hp_max)
        ret = float(base_hp_max - base_hp_total) / max(1,base_hp_max)
        if barriers_damaged > 0: ret += 0.0001
        ret = min(max(ret, 0), 1)
        return (ret, base_repair_time, damaged_objects)

    def calc_base_damage(self, **kwargs): return self.do_calc_base_damage(detail = False, **kwargs)[0]
    def calc_base_damage_and_repair_time(self, **kwargs): return self.do_calc_base_damage(detail = False, **kwargs)[0:2]

    # if base is so damaged that player cannot be attacked on the ladder, project the future time when they will be available for attack
    # used for writing base_damage and base_repair_time out to PlayerCache
    def report_base_damage_and_repair_time_for_ladder(self, player):
        cur_damage, cur_repair_time = self.calc_base_damage_and_repair_time()
        if player.tutorial_state == 'COMPLETE' and (cur_damage >= gamedata['matchmaking']['ladder_win_damage']):
            # might have a corner case where you're not repairing, but should be resolved on logout
            return 0, max(server_time+1, cur_repair_time)
        else:
            return cur_damage, -1

    # calculate % of damage to storage buildings, for the purpose of PvP attack protection timer
    def calc_resource_damage(self):
        num_ok = 0
        num_max = 0
        weight_table = gamedata['server']['protection_weight']
        for obj in self.iter_objects():
            if not (obj.is_building() and (obj.is_storage() or obj.is_producer())):
                continue
            weight = weight_table.get(obj.spec.name, 1)
            if weight > 0 and gamedata['server']['protection_weight_by_object_level']:
                weight = int(weight * obj.level)
            num_max += weight
            if obj.hp > 0:
                num_ok += weight
        if num_max == 0:
            return 1

        ret = float(num_max - num_ok) / num_max
        ret = min(max(ret, 0), 1)
        return ret

    # calculate ladder damage-based protection time (pass in just-calculated base damage for efficiency)
    def calc_ladder_protection(self, base_damage):
        ladder_protection = 0
        for entry in gamedata['matchmaking']['ladder_protection']:
            if base_damage >= entry[0]:
                ladder_protection = entry[1]
                break
        if ladder_protection > 0 and gamedata['matchmaking'].get('ladder_protection_townhall_destroyed',0):
            cc = self.find_object_by_type(gamedata['townhall'])
            if cc and cc.is_destroyed():
                ladder_protection += gamedata['matchmaking']['ladder_protection_townhall_destroyed']
        return ladder_protection

    # detect win condition in ladder attacks (pass in just-calculated base damage for efficiency)
    def ladder_victory_satisfied(self, session, base_damage):
        condition = gamedata['matchmaking'].get('ladder_win_condition', 'base_damage')
        if condition == 'base_damage':
            return base_damage >= gamedata['matchmaking']['ladder_win_damage']
        elif condition == 'battle_stars':
            return len(session.loot.get('battle_stars',{})) > 0
        else:
            raise Exception('unknown ladder_win_condition '+condition)

    def common_victory_satisfied(self, session, base_damage):
        condition = gamedata.get('common_win_condition', 'townhall_destroyed')
        if condition == 'townhall_destroyed':
            if session.defender_cc_standing: # note: cannot be a "victory" if townhall is already dead (prevents multiple looting of hives)
                for obj in self.iter_objects():
                    if obj.spec.name == gamedata['townhall']:
                        if obj.is_destroyed():
                            return True

            # this override is for hitlist, which is "either townhall or X%+ base damage"
            for aura in session.player.player_auras:
                for effect in aura.get('effects',[]): # XXXXXX doesn't this need to indirect via 'spec'?
                    if effect['code'] == 'base_damage_win_condition':
                        if base_damage >= effect['amount']:
                            return True
            return False
        elif condition == 'battle_stars':
            return len(session.loot.get('battle_stars',{})) > 0
        else:
            raise Exception('unknown common_win_condition '+condition)

    # detect victory condition in quarry attacks: no turrets or mobiles left
    def quarry_victory_satisfied(self):
        for obj in self.iter_objects():
            if obj.owner.user_id in (self.base_landlord_id, RogueOwner.user_id):
                if obj.is_building() and (not obj.is_destroyed()) and obj.spec.history_category == 'turrets':
                    return False
                if obj.is_mobile() and (not obj.is_destroyed()) and self.can_deploy_unit(obj.spec):
                    return False
        return True

    def quarry_conquer(self, old_owner, new_owner):
        self.base_last_landlord_id = self.base_landlord_id
        self.base_last_conquer_time = server_time
        self.base_landlord_id = new_owner.user_id

        if gamedata['server'].get('log_nosql',0) >= 2:
            gamesite.exception_log.event(server_time, 'quarry_conquer: %s from %d to %d' % (self.base_id, self.base_landlord_id, new_owner.user_id))

        to_remove = []
        for obj in self.iter_objects():
            if obj.is_mobile(): to_remove.append(obj)
            elif obj.is_building() or obj.is_inert():
                obj.owner = new_owner if obj.is_building() else EnvironmentOwner
                fields = ['owner_id']
                if gamedata['territory']['quarry_dump_on_conquer'] and obj.is_building() and obj.is_producer():
                    # note: the following init_production() will restart the harvester
                    obj.produce_start_time = -1
                    obj.produce_rate = -1
                    obj.contents = 0
                    fields += ['produce_start_time', 'produce_rate', 'contents']
                self.nosql_write_one(obj, 'quarry_conquer', fields = fields)
        for obj in to_remove: self.drop_object(obj)
        self.init_production(new_owner)
        self.base_times_conquered += 1

    def quarry_abandon(self):
        self.base_last_landlord_id = self.base_landlord_id
        self.base_last_conquer_time = server_time

        if self.base_template in gamedata['quarries_server']['templates']:
            self.base_landlord_id = gamedata['quarries_server']['templates'][self.base_template]['default_landlord_id']
        else:
            self.base_landlord_id = gamedata['territory']['default_quarry_landlord_id']

        to_remove = []
        for obj in self.iter_objects():
            if obj.is_mobile():
                to_remove.append(obj); continue
            elif obj.is_building() or obj.is_inert():
                obj.owner = RogueOwner # XXX really should be a fake player with the ID of base_creator_id
                self.nosql_write_one(obj, 'quarry_abandon', fields = ['owner_id'])
        for obj in to_remove: self.drop_object(obj)

    def reset_to_full_health(self):
        # XXXXXX this does NOT reset landmines or units!
        affected = set()
        # heal first, then restart production, so that repaired powerplants work correctly
        for object in self.iter_objects():
            if object.is_building() and object.is_damaged():
                object.heal_to_full()
                affected.add(object)
        power_factor = compute_power_factor(self.get_power_state())
        for object in affected:
            object.update_production(object.owner, self.base_type, self.base_region, power_factor)
            object.update_all()

    def get_townhall_level(self):
        for obj in self.iter_objects():
            if obj.spec.name == gamedata['townhall']:
                return obj.level
        return 0

    def get_cache_props(self, extra_props = None):
        # note: some of this is duplicated in CustomerSupport.ChangeRegionHandler, so make updates there too.
        props = { 'base_id': self.base_id,
                  'base_landlord_id': self.base_landlord_id }
        assert self.base_type
        props['base_type'] = self.base_type
        if self.base_map_loc is not None: props['base_map_loc'] = self.base_map_loc
        if self.base_climate is not None: props['base_climate'] = self.base_climate
        if self.base_ncells is not None: props['base_ncells'] = self.base_ncells
        if self.base_ui_name is not None: props['base_ui_name'] = self.base_ui_name
        if self.base_creation_time > 0: props['base_creation_time'] = self.base_creation_time
        if self.base_expire_time > 0: props['base_expire_time'] = self.base_expire_time
        if self.base_richness > 0: props['base_richness'] = self.base_richness
        if self.base_template: props['base_template'] = self.base_template
        if self.base_icon: props['base_icon'] = self.base_icon
        if self.base_times_attacked > 0: props['base_times_attacked'] = self.base_times_attacked
        if self.base_times_conquered > 0: props['base_times_conquered'] = self.base_times_conquered
        if self.base_last_attack_time > 0: props['base_last_attack_time'] = self.base_last_attack_time
        if self.base_last_conquer_time > 0: props['base_last_conquer_time'] = self.base_last_conquer_time
        if self.base_last_landlord_id > 0: props['base_last_landlord_id'] = self.base_last_landlord_id
        if self.base_creator_id > 0: props['base_creator_id'] = self.base_creator_id
        if self.base_size != 0: props['base_size'] = self.base_size
        if self.base_resource_loot: props['base_resource_loot'] = self.base_resource_loot

        if self.base_type == 'home':
            townhall_level = self.get_townhall_level()
            if townhall_level > 0: props[gamedata['townhall']+'_level'] = townhall_level
        if extra_props:
            for k,v in extra_props.iteritems():
                props[k] = v
        return props

    def send_map_feature_update(self, extra_props = None, reason=''):
        if self.base_type == 'squad': return # virtual bases shouldn't be in the cache
        if not self.base_region or not gamesite.nosql_client: return
        props = self.get_cache_props(extra_props = extra_props)
        return gamesite.nosql_client.update_map_feature(self.base_region, self.base_id, props, reason=reason)

    def is_nosql_base(self):
        if not self.base_region: return False
        if (not self.base_type): gamesite.exception_log.event(server_time, 'base_type None for %s' % self.base_id); return False
        if self.base_type == 'home' or self.base_type == 'squad': return False # not storing Player home bases in NoSQL yet, and squads are virtual
        return True
    def nosql_pluck(self, reason):
        if (not gamesite.nosql_client) or (not self.is_nosql_base()): return
        if gamedata['server'].get('log_nosql',0) >= 2:
            gamesite.exception_log.event(server_time, 'nosql_pluck %s from %s reason %s' % (self.base_id, self.base_region, reason))
        gamesite.nosql_client.drop_all_objects_by_base(self.base_region, self.base_id, reason=reason)

    def nosql_plant(self, reason):
        if (not gamesite.nosql_client) or (not self.is_nosql_base()): return
        if gamedata['server'].get('log_nosql',0) >= 2:
            gamesite.exception_log.event(server_time, 'nosql_plant %s into %s reason %s' % (self.base_id, self.base_region, reason))
        for object in self.iter_objects():
            self._nosql_write_one(object, reason, add_new = True, verbose = False)
    def nosql_write_one(self, object, reason, add_new = False, fields = None):
        if (not gamesite.nosql_client) or (not self.is_nosql_base()): return
        self._nosql_write_one(object, reason, add_new = add_new, fields = fields, verbose = True)
    def _nosql_write_one(self, object, reason, add_new = False, fields = None, verbose = True):
        state = object.persist_state(nosql = True)

        if fields: # manually specify fields to write
            newstate = {'obj_id':state['obj_id']}
            for field in fields:
                if field in state: newstate[field] = state[field]
            state = newstate
        else:
            state['base_id'] = self.base_id

        if verbose and gamedata['server'].get('log_nosql',0) >= 3:
            gamesite.exception_log.event(server_time, 'nosql_update %s: %s reason %s' % (self.base_id, repr(state), reason))
        if object.is_mobile():
            return gamesite.nosql_client.update_mobile_object(self.base_region, state, partial = bool(fields), reason=reason)
        else:
            if ('owner_id' in state) and (state['owner_id'] > 0) and (state['owner_id'] != self.base_landlord_id):
                if gamedata['server'].get('log_nosql',0) >= 1 and state.get('spec',None) != 'barrier':
                    gamesite.exception_log.event(server_time, 'nosql_update %s: %s but base_landlord_id = %d, reason %s' % (self.base_id, repr(state), self.base_landlord_id, reason))

            return gamesite.nosql_client.update_fixed_object(self.base_region, state, partial = bool(fields), reason=reason)
    def nosql_read(self, observer, player, reason):
        if (not gamesite.nosql_client) or (not self.is_nosql_base()): return None
        if gamedata['server'].get('log_nosql',0) >= 2:
            gamesite.exception_log.event(server_time, 'nosql_read %s reason %s' % (self.base_id, reason))
        ret = []
        for state in list(gamesite.nosql_client.get_fixed_objects_by_base(self.base_region, self.base_id, reason=reason)) + \
            list(gamesite.nosql_client.get_mobile_objects_by_base(self.base_region, self.base_id, reason=reason)):
            obj = reconstitute_object(observer, player, state, context = 'Base %s (landlord %d observer %d):nosql_read' % (self.base_id, self.base_landlord_id, observer.user_id))
            if obj:
                # for now, just return what the new my_base array would be, instead of actually replacing it
                #self.adopt_object(obj)
                ret.append(obj)
        return ret
    def nosql_drop_one(self, object, reason):
        if (not gamesite.nosql_client) or (not self.is_nosql_base()): return
        state = object.persist_state(nosql = True)
        if gamedata['server'].get('log_nosql',0) >= 3:
            gamesite.exception_log.event(server_time, 'nosql_drop_one %s: %s reason %s' % (self.base_id, repr(state), reason))
        if object.is_mobile():
            gamesite.nosql_client.drop_mobile_object_by_id(self.base_region, state['obj_id'], reason=reason)
        else:
            gamesite.nosql_client.drop_fixed_object_by_id(self.base_region, state['obj_id'], reason=reason)

    def spawn_scenery(self, observer, seed, overwrite = False):
        to_remove = []
        for obj in self.iter_objects():
            if obj.is_inert() and obj.spec.auto_spawn:
                # if any scenery already exists, abort
                if overwrite:
                    to_remove.append(obj)
                else:
                    return [], []
        for obj in to_remove:
            self.drop_object(obj)

        num_to_spawn = gamedata['map']['random_scenery_spawn']
        ncells = self.ncells()
        mid = self.midcell()
        num_to_spawn = int(num_to_spawn*((ncells[0]*ncells[1])/float(180*180)))

        my_climate = self.base_climate or 'normal'
        my_type = 'home'
        speclist = [specname for specname, data in gamedata['inert'].iteritems() if (data.get('auto_spawn',False) and \
                                                                                     (my_type in data.get('base_types',[])) and \
                                                                                     (my_climate in data.get('base_climates',[])))]
        if not speclist: return to_remove, []

        randgen = random.Random(seed+1) # deterministic from the seed

        to_add = []
        for i in range(num_to_spawn):
            index = int(randgen.random()*len(speclist))
            specname = speclist[index]
            spec = GameObjectSpec.lookup(specname)
            rad = gamedata['map'].get('random_scenery_spawn_radius', ncells[0]//2)
            # assumes square map
            xbound = [max(0, mid[0]-rad), min(mid[0]+rad, ncells[0])]
            ybound = [max(0, mid[1]-rad), min(mid[1]+rad, ncells[1])]

            xrange = [xbound[0]+int(spec.gridsize[0]/2), xbound[1]-int(spec.gridsize[0]/2)-1]
            yrange = [ybound[0]+int(spec.gridsize[1]/2), ybound[1]-int(spec.gridsize[1]/2)-1]

            x = int(xrange[0] + randgen.random()*(xrange[1]-xrange[0]))
            y = int(yrange[0] + randgen.random()*(yrange[1]-yrange[0]))
            x = max(0, min(x, ncells[0]-1))
            y = max(0, min(y, ncells[1]-1))
            newobj = instantiate_object_for_player(observer, EnvironmentOwner, specname, x=x, y=y)
            self.adopt_object(newobj)
            to_add.append(newobj)

        return to_remove, to_add

def _min_attackable_level(level_gap_table, attacker_level):
    if type(level_gap_table) is list:
        ind = min(max(attacker_level-1, 0), len(level_gap_table)-1)
        max_gap = level_gap_table[ind]
    else:
        max_gap = level_gap_table
    return max(attacker_level - max_gap, 0)

def in_level_range(x, r):
    if r[0] >= 0 and x < r[0]: return False
    if r[1] >= 0 and x > r[1]: return False
    return True


def get_spawn_location_for_unit(specname, base):
    factory_name = GameObjectSpec.get_factory_for(gamedata['units'][specname]['manufacture_category'])
    builder = base.find_object_by_type(factory_name) if factory_name else None
    if builder:
        return [builder.x+10, builder.y+10]
    else:
        mid = base.midcell()
        return [mid[0], mid[1]+20]

def spawn_units(owner, base, units, temporary = False,
                limit_break = False, # if true, give full quantity of units even if it breaks space limit
                limit_reduce_qty = False, # if true, reduce quantity of units to fit in unit space
                xyloc = None, xyscatter = None, observer = None, persist = False):
    if not observer: observer = owner
    if temporary: assert xyloc

    new_objects = []
    ncells = base.ncells()
    cur_space_usage = None

    for name, data in units.iteritems():
        if (name not in gamedata['units']): continue

        if xyloc:
            x, y = xyloc
        else:
            x, y = get_spawn_location_for_unit(name, base)

        if type(data) is int:
            qty = data
            min_level = 1
        else:
            qty = data.get('qty',1)
            min_level = data.get('min_level',1)

        spec = observer.get_abtest_spec(GameObjectSpec, name)

        if spec.level_determined_by_tech:
            # if player doesn't have prerequisite tech, still give the unit at level 1
            level = max(owner.tech.get(spec.level_determined_by_tech, 1), min_level)
        else:
            level = min_level

        space = GameObjectSpec.get_leveled_quantity(spec.consumes_space, level)

        for i in range(qty):
            if (not temporary) and cur_space_usage is None:
                cur_space_usage = owner.get_army_space_usage_by_squad() # OK - expensive query

            newobj_x = x
            newobj_y = y
            if xyscatter:
                newobj_x = newobj_x + int(xyscatter[0] * (2*random.random()-1))
                newobj_y = newobj_y + int(xyscatter[1] * (2*random.random()-1))

            newobj_x = min(max(newobj_x, 0), ncells[0]-1)
            newobj_y = min(max(newobj_y, 0), ncells[1]-1)

            destination_squad = SQUAD_IDS.BASE_DEFENDERS

            if (not temporary) and (not limit_break):
                if spec.limit >= 0:
                    if owner.get_army_unit_count_by_specname().get(spec.name, 0) + 1 > spec.limit:
                        if limit_reduce_qty:
                            break # skip adding the unit silently
                        else:
                            gamesite.exception_log.event(server_time, 'player %d not allowed to spawn unit of spec %s due to count limit' % (owner.user_id, spec.name))
                            break # skip adding the unit, and log message


                if (cur_space_usage['ALL'] + space > owner.stattab.total_space):
                    if limit_reduce_qty:
                        break # skip adding the unit
                    else:
                        gamesite.exception_log.event(server_time, 'player %d (CC%d) spawned unit into oversize army! (unit %s space %d limit %d army %s)' % \
                                                     (owner.user_id, owner.get_townhall_level(), name, space, owner.stattab.total_space, repr(cur_space_usage)))

                if (cur_space_usage[str(SQUAD_IDS.BASE_DEFENDERS)] + space > owner.stattab.main_squad_space):
                    if limit_reduce_qty:
                        break # skip adding the unit
                    else:
                        if owner.squads_enabled() and gamedata['produce_to_reserves']:
                            destination_squad = SQUAD_IDS.RESERVES
                        else:
                            gamesite.exception_log.event(server_time, 'player %d (CC%d) spawned unit into oversize base defenders! (unit %s space %d limit %d army %s)' % \
                                                         (owner.user_id, owner.get_townhall_level(), name, space, owner.stattab.main_squad_space, repr(cur_space_usage)))

            newobj_id = gamesite.nosql_id_generator.generate()
            newobj = instantiate_object_for_player(observer, owner, name, x=newobj_x, y=newobj_y, level=level, obj_id = newobj_id, temporary = temporary)
            newobj.squad_id = destination_squad
            if temporary:
                # put object into aggressive state
                newobj.orders = [{'dest':[newobj.x,newobj.y], 'state':2, 'aggressive':1}]

            if not temporary:
                assert base is owner.my_home
                cur_space_usage['ALL'] += space
                cur_space_usage[str(destination_squad)] += space

            # global setting, can be over-ridden by parameter
            persist_temporary_units = persist or gamedata.get('persist_temporary_units', False)

            # per-base setting
            if base.base_type == 'hive':
                template = gamedata['hives_server']['templates'].get(base.base_template, None)
                if template and template.get('persist_temporary_units', False):
                    persist_temporary_units = True

            if (not temporary) or \
               (persist_temporary_units and base.base_landlord_id == owner.user_id): # don't adopt security teams into foreign bases!
                base.adopt_object(newobj)
            new_objects.append(newobj)

    return new_objects


# A "player" holds the state for a person in one game

class AbstractPlayer(object):
    def __init__(self, user_id):
        self.user_id = user_id
        self.tech = {}
        self.stattab = self.AbstractStattab()
    def get_any_abtest_value(self, key, default_value): return default_value
    def is_ai(self): return True
    def is_human(self): return not self.is_ai()
    def ai_or_human(self):
        if self.is_ai():
            return 'ai'
        else:
            return 'human'
    def is_developer(self): return False
    class AbstractStattab(object):
        modded_buildings = {}
        def get_player_stat(self, stat): raise Exception('AbstractPlayer has no stat table')
        def get_unit_stat(self, specname, stat, default_value): return default_value

    # needed for object.owner.get_weapon_spell()
    # note: precludes override of non-owned object spells
    def get_abtest_spell(self, name):
        return gamedata['spells'].get(name, None)

# These virtual players instances represent the owners of game objects
# that belong to the environment (e.g. landscape decorations) or
# generic "rogue" hostiles (e.g. AIs that do not belong to a named AI player)
# note: user_ids must be unique, for nosql storage!

EnvironmentOwner = AbstractPlayer(-1)
RogueOwner = AbstractPlayer(-2)

# base_id for the home base of a user
def home_base_id(user_id): return 'h'+str(user_id)

# base class for players that have associated state (both human and AI)

class Player(AbstractPlayer):

    # "read/write semaphore" flags to prevent two users from writing changes to the same base at once
    class LockState:
        # NOTE: keep constants in sync with dbserver.py: Lock
        open = 0 # anyone can view
        logged_in = 1 # owner is viewing
        being_attacked = 2 # non-owner is attacking

    def __init__(self, user_id):
        super(Player,self).__init__(user_id)
        self.user_id = user_id

        self.home_region = None
        self.my_home = None

        self.history = None
        self.abtests = None

        # note: this seems redundant with userdb's account_creation_time, but in the future if we
        # have more game titles, then the player creation_time will be per-title
        self.creation_time = -1

        # generation number for checking validity of read->write lock transition
        self.generation = 0

        # AI instance generation
        self.ai_generation = 0

        # this flag indicates that we have permission to write out updates to Player's state
        self.has_write_lock = True

        # override of current_event time, for debugging purposes
        self.event_time_override = None

        # for debugging purposes
        self.ladder_rival_override = None
        self.travel_override = None
        self.leaderboard_override = None

        # reseed random source on load
        self.random_source = random.Random(server_time)

        # These fields are DUPLICATES of the corresponding User
        # fields, set during the login process. This is necessary for
        # evaluating predicates that depend on them, since the Predicates
        # code only has access to Player, not User.
        self.facebook_id = ''
        self.country = 'unknown'
        self.price_region = 'unknown'
        self.country_tier = 4
        self.frame_platform = None # set during login
        self.birthday = None # UNIX timestamp of midnight of the player's birthday, None if no birthday info available
        self.developer = None

        self.reset()

    def reset(self):
        if self.home_region and gamesite.nosql_client:
            # if resetting a player who was placed on the map before, kill the map entry
            gamesite.nosql_client.drop_map_feature(self.home_region, home_base_id(self.user_id), reason = 'reset')

        self.home_region = None
        self.my_home = Base(self.home_region, home_base_id(self.user_id), self.user_id, 'home')

        # SQUADS
        # format is str(squad_id) -> { "id": squad_id,
        #                              "ui_name": user-visible name,
        #                              ONLY IF DEPLOYED TO MAP:
        #                              "map_loc": current (destination) location
        #                              "map_path": (optional) list of waypoints {"xy":[123,456], "eta": server_time}
        #                              "travel_speed": BASE travel speed (can be boosted by Stattab during SQUAD_MOVE) }

        self.squads = {"0": {'id': 0, 'ui_name':gamedata['strings']['squads']['base_defenders']}}

        # prevent login abuse - lock player out until this time (if >0)
        self.lockout_until = -1
        self.lockout_message = None
        self.lockout_count = 0
        self.last_lockout_end = -1
        self.last_lockout_check = -1
        self.login_pardoned_until = -1
        self.banned_until = -1
        self.isolate_pvp = 0
        self.chat_official = None
        self.possible_alt_accounts = {} # dictionary mapping str(user_id) -> # of logins recorded on same IP
        self.known_alt_accounts = {} # dictionary mapping str(user_id) -> {'logins':1234, 'attacks':1234}
        self.facebook_permissions = None
        self.last_fb_notification_time = -1
        self.fbpayments_inflight = {} # dictionary mapping request_id -> {'time':12345,'request_id':'abcd',... (see "FBPAYMENT_*" message handlers)}
        self.player_preferences = None
        self.chat_seen = {}
        self.battle_history_seen = -1 # time of latest history entry we've seen

        # list of {'obj_id':xxx,'original_hp':xxx,'res':xxx,'finish_time':xxx}
        self.unit_repair_queue = []

        self.resources = ResourceState(self)

        self.loot_buffer = []
        self.donated_units = {} # same format as player.my_army, i.e. {'DONATED-1234': {'obj_id':'DONATED-1234', 'spec':'asdf', 'level':2}}
        self.inventory = []
        self.mailbox = []
        self.map_bookmarks = {} # { "region_id": [{"ui_name": "yyy", "region": "region_id", "coords": [123,456]}] }

        # quests that have been completed (and reward claimed)
        # dictionary of { "quest_name": {"time":12335, "count":2 }, ...
        # where "time" is last completion time (used for repeatable quests) and "count" is completion count
        self.completed_quests = {}

        # map from name -> { "time": 123456, "fb_published": 1 }
        self.achievements = {}

        self.tutorial_state = 'START'

        self.alias = None
        self.title = None
        # self.unlocked_titles = None # dictionary of {'title':1}

        # dictionary mapping tech name to tech level e.g. { "tank_production": 1 }
        self.tech = {}

        # dictionary mapping unit type to equipment { "foo": { "defense": [{"spec":"foo_armor"}] } }
        self.unit_equipment = {}

        # list of {"spec": "aura_name", "strength": 1234, "start_time": 1234567, "end_time": 1234568 }
        self.player_auras = []

        self.stattab = None # this should be initialized in load_auras/load_tech by the parsing code

        self.travel_state = {'dest_loc':None, 'start_time':-1, 'end_time':-1, 'attacks_made': 0}

        # 'history': dictionary of historical stats (e.g., 'battles_fought', 'res_collected', etc)
        # used for mission/predicate completion tracking, and some metrics

        # version marker for player.history interface to metrics
        # we must use this because the new time-series metrics imply a value of 0 when daily samples
        # are missing, but we need to distinguish against old players who didn't ever record those metrics
        new_history = {'history_version':3,
                       # also mark this account as not needing an XP migration
                       'xp_gen': gamedata['player_xp'].get('xp_migrate_to', gamedata['player_xp'].get('xp_gen',0))
                       }

        # NOTE: carry over certain metrics even across tutorial restarts
        save_fields = ['logged_in_times', 'time_in_game', 'longest_play_session']
        if self.history:
            for key in save_fields:
                new_history[key] = self.history.get(key, 0)
            # also carry over adnetwork transmission records
            for key, val in self.history.iteritems():
                if key.startswith('adotomi:') or \
                   key.startswith('dauup:') or \
                   key.startswith('dauup2:') or \
                   key.startswith('adparlor:') or \
                   key.startswith('liniad:') or \
                   key.startswith('fb_conversion_pixels:') or \
                   key.startswith('kg_conversion_pixels:'):
                    new_history[key] = val

        self.history = new_history

        # dictionary: {"SPELL_NAME": {"start":2355, "end":23345} }
        self.cooldowns = {}

        self.scores2 = Scores2.CurScores()

        # A/B test cohort membership
        # dictionary { "T001_yyy": "group_zzz" }
        if self.abtests is None:
            self.abtests = {}
        else:
            pass # carry over tests across developer restarts

        # in-playerdb battle history
        # obsolete now - replaced by SpinNoSQL battles table (and optionally cold SQL storage)
        self.battle_history = {} # dictionary { "1112": { "count": xx, "victory": yy, "defeat": zz } }

        # how many attacks occurred against this player since the last expiration of his protection timer
        self.protection_attack_count = 0

        # time of last attack against player
        self.protection_attack_time = 0

        # time player last deployed units in an attack - used for throttling max attack rate
        self.attack_cooldown_start = -1

        self.idle_check = IdleCheck.IdleCheck(gamedata['server']['idle_check'], None, server_time)

        # available items in the lottery slate
        # dictionary {"slot0": {"spec":"foo"}, "slot1": ... }
        # must NOT be alterable by user action unless 1) scan is conducted or 2) reseed cooldown time passes
        self.lottery_slate = None
        self.lottery_slate_weights = None

        # PvP ladder rival, must not be alterable unless 1) attack is made or 2) time passes or 3) player pays (and waits) to switch
        self.ladder_match = None

        # last N rivals matched (including the current one) - used to prevent repeats
        self.ladder_match_history = []

        self.last_motd = 0 # time of last MOTD notice
        self.last_rank_update = 0 # time of last social network leaderboard rank update
        self.last_fb_score_update = 0 # time of last facebook Scores API call
        self.last_gift_prompt = 0 # time of last gift prompt
        self.last_friend_invite_prompt = 0 # time of last friend-invite prompt
        self.last_payer_promo = 0 # time of last payer promotion offer
        self.last_permissions_request = 0 # time of last social network permissions request
        self.last_daily_attack = 0 # time of last daily attack

        self.last_iron_deposit = 0 # spawn time of last iron deposit

        # list of gifts received recently, used for diminishing returns calc
        self.received_gifts = []

        # list where each element is a dictionary [ {"attacker":1112,"time":13534646,"lost_resources":234234, etc}, ... ]
        self.recent_attacks = []

        self.lock_state = Player.LockState.open

        # time lock_state was last set, used to expire old locks if the session died under a lock
        self.lock_time = 0

        # read-only flag for AI enemy players, which are shared by all users
        self.read_only = 0

        # used for temporary AI instance state persistence
        self.expiration_time = -1

        # persist unrecognized data from JSON file
        self.foreign_data = {}

    # call this function right after tutorial_state becomes "COMPLETE" to set up post-tutorial state
    def set_post_tutorial_state(self):
        # do not send a daily attack until the day after the tutorial finish
        self.last_daily_attack = server_time

        # start post-tutorial attack protection timer
        prot_time = Predicates.eval_cond_or_literal(self.get_any_abtest_value('starting_protection_time', gamedata['starting_conditions']['protection_time']), None, self)
        if prot_time > 0:
            self.set_protection_end_time(None, server_time + prot_time, '3880_protection_from_new_account')
        else:
            self.set_protection_end_time(None, -1, None)

        auras = self.get_any_abtest_value('starting_player_auras', gamedata['starting_conditions']['player_auras'])
        for aura in auras:
            self.apply_aura(aura['name'], strength = aura.get('strength',1), duration = aura.get('duration',-1), level = aura.get('level',1), stack = aura.get('stack',-1), ignore_limit = True)

    def is_ai(self): return self.read_only
    def is_human(self): return not self.is_ai()
    def ai_or_human(self):
        if self.is_ai():
            return 'ai'
        else:
            return 'human'
    def is_developer(self): return bool(self.developer) # use our copy of the usertable field

    def squad_base_id(self, squad_id): return 's%d_%d' % (self.user_id, squad_id)
    def squad_is_deployed(self, squad_id):
        squad = self.squads.get(str(squad_id), None)
        return (squad and ('map_loc' in squad))

    def bust_expired_locks(self):
        if self.lock_state == Player.LockState.open:
            return

        if (server_time - self.lock_time) > gamedata['server']['player_lock_timeout']:
            print 'busting expired lock for user %d !' % self.user_id
            self.lock_state = Player.LockState.open
            self.lock_time = 0

    def last_logout_time(self):
        if self.history.get('sessions', None):
            if self.history['sessions'][-1][1] > 0: # final session is closed
                return self.history['sessions'][-1][1]
            elif len(self.history['sessions']) >= 2: # final session is open
                return self.history['sessions'][-2][1]
        return -1

    def get_titled_alias(self):
        assert self.alias
        ret = self.alias
        title_template = None
        if self.title and gamedata.get('titles') and (self.title in gamedata['titles']):
            title_template = gamedata['titles'][self.title]['ui_template']
        elif gamedata.get('default_title'):
            title_template = gamedata['titles'][gamedata['default_title']]['ui_template']
        if title_template:
            ret = title_template.replace('%s', self.alias)
        return ret

    # temporary functions that skip the basedb indirection
    def home_base_iter(self): return self.my_home.iter_objects()
    def home_base_add(self, obj): return self.my_home.adopt_object(obj)
    def home_base_remove(self, obj): return self.my_home.drop_object(obj)

    def get_object_by_obj_id(self, id, fail_missing = True):
        # index this?
        for obj in self.home_base_iter():
            if obj.obj_id == id:
                return obj
        if fail_missing:
            raise Exception('object not found for obj_id '+repr(id))
        else:
            return None
    def cooldown_reset(self, cd_name):
        if cd_name in self.cooldowns:
            del self.cooldowns[cd_name]

    def cooldown_find(self, cd_name, match_data = None):
        if cd_name in self.cooldowns:
            to_go = self.cooldowns[cd_name]['end'] - server_time
            if to_go > 0:
                # cooldown has not expired yet
                if match_data: # check metadata
                    data = self.cooldowns[cd_name].get('data',{})
                    for k,v in match_data.iteritems():
                        if data.get(k,None) != v:
                            return None # mismatch
                return self.cooldowns[cd_name]
            del self.cooldowns[cd_name] # get rid of expired cooldown
        return None

    # return seconds to go
    def cooldown_togo(self, cd_name, match_data = None):
        cd = self.cooldown_find(cd_name, match_data = match_data)
        if cd:
            return cd['end'] - server_time
        else:
            return -1

    # return number of active stacks
    def cooldown_active(self, cd_name, match_data = None):
        cd = self.cooldown_find(cd_name, match_data = match_data)
        if cd:
            return cd.get('stack',1)
        else:
            return 0

    def cooldown_trigger(self, cd_name, duration, add_stack = -1, data = None):
        if duration <= 0: return

        if add_stack > 0 and self.cooldown_active(cd_name):
            add_stack += self.cooldowns[cd_name].get('stack',1)

        cd = {'start': server_time, 'end': server_time + duration}
        if data:
            cd['data'] = data
        self.cooldowns[cd_name] = cd

        if add_stack > 0:
            self.cooldowns[cd_name]['stack'] = add_stack

    def prune_cooldowns(self):
        for cd_name in self.cooldowns.keys():
            self.cooldown_active(cd_name) # automatically deletes expired cooldowns

    def prune_ladder_match_history(self, session):
        max_exclude = Predicates.eval_cond_or_literal(gamedata['matchmaking'].get('ladder_match_history_exclude',1), session, self)
        while len(self.ladder_match_history) > max_exclude:
            self.ladder_match_history.remove(self.ladder_match_history[0])

    def prune_player_auras(self, is_session_change = False, is_login = False, is_recalc_stattab = False):
        to_remove = []
        for aura in self.player_auras:
            end_time = aura.get('end_time',-1)
            if (end_time > 0) and (server_time >= end_time):
                to_remove.append(aura); continue

            spec = gamedata['auras'].get(aura['spec'], None)
            if not spec: # remove obsolete auras
                to_remove.append(aura); continue
            ends_on = spec.get('ends_on',None)

            if is_session_change and ends_on in ('session_change','battle_end'):
                to_remove.append(aura); continue
            if is_recalc_stattab and ends_on == 'recalc_stattab':
                to_remove.append(aura); continue
            if self.has_damage_protection() and ends_on == 'damage_protection':
                to_remove.append(aura)
                metric_event_coded(self.user_id, '5142_dp_cancel_aura_ended', {'aura_name': aura['spec'], 'start_time': aura.get('start_time',-1)}) # XXX hack
                continue

        for aura in to_remove: self.player_auras.remove(aura)
        return bool(to_remove)

    def do_remove_aura(self, aura_name, remove_stack = -1, data = None):
        for aura in self.player_auras:
            if aura['spec'] == aura_name and \
               (data is None or \
                all(aura.get('data',{}).get(k,None) == v for k,v in data.iteritems())):
                if remove_stack > 0:
                    new_stack = aura.get('stack',1) - remove_stack
                    if new_stack <= 0:
                        self.player_auras.remove(aura)
                    else:
                        if 'stack' in aura: del aura['stack']
                        if new_stack != 1: aura['stack'] = new_stack
                else:
                    self.player_auras.remove(aura)
                return True
        return False

    # confusing: remove_aura sends stattab update, apply_aura does not (both recalc stattab)
    def remove_aura(self, session, retmsg, aura_name, remove_stack = -1, force = False, data = None):
        spec = gamedata['auras'][aura_name]
        if (not force) and (not spec.get('cancelable', True)):
            if retmsg is not None: retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
            return

        if self.do_remove_aura(aura_name, remove_stack = remove_stack, data = data):
            self.recalc_stattab(self)
            if retmsg is not None:
                self.stattab.send_update(session, retmsg) # also sends PLAYER_AURAS_UPDATE
        else:
            if (not force) and (retmsg is not None):
                retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])

    def do_apply_aura(self, aura_name, strength = 1, duration = -1, level = 1, stack = -1, data = None, ignore_limit = False):
        spec = gamedata['auras'][aura_name]
        aura = None

        # find any existing aura with same spec, level, and data
        for a in self.player_auras:
            if a['spec'] == aura_name and a.get('level',1) == level and \
               (data is None or \
                all(a.get('data',{}).get(k,None) == v for k,v in data.iteritems())):
                aura = a
                break

        if aura is not None:
            # stack existing aura

            # OVERWRITE old strength - necessary so you can't
            # infinitely extend a powerful aura by repeatedly
            # applying cheaper, weaker auras with the same effect.
            if strength != 1:
                aura['strength'] = strength
            elif ('strength' in aura):
                del aura['strength']

            if stack > 0:
                aura['stack'] = aura.get('stack',1) + stack

            new_end_time = server_time + duration if duration > 0 else -1

            if True: # always overwrite aura duration
                aura['start_time'] = server_time
                if new_end_time < 0 and 'end_time' in aura: del aura['end_time']
                else: aura['end_time'] = new_end_time

            max_stack = spec.get('max_stack',-1)
            if max_stack > 0: aura['stack'] = min(aura['stack'], max_stack)

            # overwrite data (but note match requirement above)
            if (data is None) and 'data' in aura: del aura['data']
            if (data is not None): aura['data'] = data

        else:
            if (not ignore_limit) and spec.get('limited',True):
                aura_count = sum((1 for x in self.player_auras if gamedata['auras'][x['spec']].get('limited',True)), 0)
                if aura_count >= gamedata['player_aura_limit']:
                    return False
            # create new aura
            aura = {'spec': aura_name, 'start_time': server_time}
            if strength != 1:
                aura['strength'] = strength
            if level != 1:
                aura['level'] = level
            if duration > 0:
                aura['end_time'] = server_time + duration
            if stack > 0:
                aura['stack'] = stack
            if data is not None:
                aura['data'] = data
            self.player_auras.append(aura)

        return True

    # confusing: remove_aura sends stattab update, apply_aura does not (both recalc stattab)
    def apply_aura(self, *args, **kwargs):
        self.prune_player_auras()
        success = self.do_apply_aura(*args, **kwargs)
        if success:
            self.recalc_stattab(self)
        return success

    def apply_regional_auras(self):
        ret = False
        aura_list = []
        if self.home_region and (self.home_region in gamedata['regions']) and \
           ('auras' in gamedata['regions'][self.home_region]):
            aura_list += gamedata['regions'][self.home_region]['auras']
        aura_list += gamedata.get('default_player_auras',[])

        for data in aura_list:
            aura_name = data['aura_name']
            spec = gamedata['auras'][aura_name]
            assert spec['ends_on'] == 'session_change' # regional auras should go away on session change
            ret |= self.apply_aura(aura_name, strength = data.get('aura_strength',1), duration = data.get('aura_duration',-1), level = data.get('aura_level',1), stack = data.get('stack',-1), ignore_limit = True)
        return ret

    def run_battle_end_auras(self, outcome, session, retmsg):
        to_remove = []
        for aura in self.player_auras:
            spec = gamedata['auras'].get(aura['spec'], None)
            if not spec: continue
            if spec.get('ends_on', None) == 'battle_end':
                to_remove.append(aura)
                cons = spec.get('on_battle_end_'+outcome, spec.get('on_battle_end', None))
                if cons:
                    session.execute_consequent_safe(cons, self, retmsg, reason='on_battle_end')

        for aura in to_remove: self.player_auras.remove(aura)
        return len(to_remove) > 0

    def stored_item_iter(self):
        for item in self.inventory: yield item
        for item in self.loot_buffer: yield item
    def equipped_item_iter(self):
        for eqdict in self.unit_equipment.itervalues():
            for item in Equipment.equip_iter(eqdict):
                yield item
        for obj in self.home_base_iter():
            if obj.is_building() and obj.equipment:
                for item in Equipment.equip_iter(obj.equipment):
                    yield item
    def equipped_items_serialize(self): # similar to equipped_item_iter, but for transmission to the client
        for eqdict in self.unit_equipment.itervalues():
            for ret in Equipment.equip_serialize(eqdict):
                ret['obj_id'] = 'UNIT_EQUIPMENT'
                yield ret
        for obj in self.home_base_iter():
            if obj.is_building() and obj.equipment:
                for ret in Equipment.equip_serialize(obj.equipment):
                    ret['obj_id'] = obj.obj_id
                    yield ret

    def count_limited_equipped_items(self, tag):
        count = 0
        for item in self.equipped_item_iter():
            if item['spec'] in gamedata['items'] and \
               gamedata['items'][item['spec']].get('limited_equipped',None) == tag:
                count += item.get('stack', 1)

        # check current crafting products that are going to be delivered into building slots
        for obj in self.home_base_iter():
            if obj.is_building() and obj.is_crafter() and obj.is_crafting():
                for bus in obj.crafting.queue:
                    if bus.craft_state.get('delivery',None) and ('obj_id' in bus.craft_state['delivery']):
                        recipe_name = bus.craft_state['recipe']
                        recipe = gamedata['crafting']['recipes'].get(recipe_name, None)
                        if recipe:
                            for prod in GameObjectSpec.get_crafting_recipe_product_list(recipe, bus.craft_state.get('level', 1)):
                                if ('spec' in prod): # only works with deterministic products!
                                    item_spec = gamedata['items'][prod['spec']]
                                    if item_spec.get('limited_equipped',None) == tag:
                                        count += prod.get('stack', 1)
        return count

    def has_item(self, name, min_count = 1, level = None, min_level = None, check_mail = False, check_crafting = False):
        count = 0
        for item in self.stored_item_iter(): # inventory and loot buffer
            if item['spec'] == name and (level is None or item.get('level',1) == level) and (min_level is None or item.get('level',1) >= min_level):
                count += item.get('stack',1)
                if count >= min_count:
                    return True
        for item in self.equipped_item_iter():
            if item['spec'] == name and (level is None or item.get('level',1) == level) and (min_level is None or item.get('level',1) >= min_level):
                count += 1
                if count >= min_count:
                    return True
        if check_mail:
            for mail in self.mailbox:
                if ('attachments' in mail):
                    for at in mail['attachments']:
                        if at['spec'] == name and (level is None or at.get('level',1) == level) and (min_level is None or at.get('level',1) >= min_level):
                            count += at.get('stack',1)
                            if count >= min_count:
                                return True
        if check_crafting:
            for obj in self.home_base_iter():
                if obj.is_building() and obj.is_crafter() and obj.is_crafting():
                    for bus in obj.crafting.queue:
                        recipe_name = bus.craft_state['recipe']
                        recipe = gamedata['crafting']['recipes'].get(recipe_name, None)
                        if recipe:
                            for prod in GameObjectSpec.get_crafting_recipe_product_list(recipe, bus.craft_state.get('level', 1)):
                                if ('spec' in prod) and prod['spec'] == name and (level is None or prod.get('level',1) == level) and (min_level is None or prod.get('level',1) >= min_level): # only works with deterministic products!
                                    count += prod.get('stack',1)
                                    if count >= min_count:
                                        return True

                            ingr_list = bus.craft_state.get('ingredients',[])
                            if ingr_list and gamedata['crafting']['categories'][recipe['crafting_category']].get('refund_ingredients', False):
                                # only check ingredients if they are refundable and thus available to the player if cancelled
                                for item in ingr_list:
                                    if item['spec'] == name and (level is None or item.get('level',1) == level) and (min_level is None or item.get('level',1) >= min_level):
                                        count += item.get('stack',1)
                                        if count >= min_count:
                                            return True
        return False

    def prune_inventory(self, session):
        to_remove = []
        for item in self.inventory:
            spec = gamedata['items'].get(item['spec'],None)

            # check for forced expirations
            if spec and (item.get('expire_time',-1) < 0):
                expire_time = session.get_item_spec_forced_expiration(spec)
                if expire_time > 0:
                    item['expire_time'] = expire_time

            if (item.get('expire_time',-1) > 0) and (server_time > item['expire_time']):
                to_remove.append(item)
        for item in to_remove:
            self.inventory.remove(item)
            self.inventory_log_event('5132_item_expired', item['spec'], -item.get('stack',1), item.get('expire_time',-1), level = item.get('level',None))
        return len(to_remove) > 0

    def prune_mailbox(self):
        to_remove = []
        seen_ids = set()
        for mail in self.mailbox:

            # fix duplicate IDs
            while mail['msg_id'] in seen_ids:
                gamesite.exception_log.event(server_time, "player %d fixing duplicate msg_id %s" % (self.user_id, mail['msg_id']))
                mail['msg_id'] = generate_mail_id()

            seen_ids.add(mail['msg_id'])

            if ('attachments' in mail) and len(mail['attachments']) < 1:
                del mail['attachments']
            if (mail.get('expire_time',-1) > 0) and (server_time > mail['expire_time']):
                to_remove.append(mail)
        for mail in to_remove:
            self.mailbox.remove(mail)

    def travel_satisfied(self, base):
        if not base or base is self.my_home: return True
        if base.base_region != self.home_region: return False
        return (self.travel_state['dest_loc'] and \
                tuple(self.travel_state['dest_loc']) == tuple(base.base_map_loc) and \
                server_time >= self.travel_state['end_time'] and \
                (self.travel_state['end_time']-self.travel_state['start_time']) >= self.travel_time_to(base.base_map_loc) and \
                self.travel_state['attacks_made'] < gamedata['territory']['deployments_per_travel'])

    def travel_instantly_to(self, base):
        self.travel_begin(base.base_map_loc, self.travel_time_to(base.base_map_loc))
        if self.travel_state['end_time'] > 0:
            self.travel_state['start_time'] = server_time - 1 - (self.travel_state['end_time'] - self.travel_state['start_time'])
            self.travel_state['end_time'] = server_time - 1

    def travel_deploy_at(self, base_id):
        self.travel_state['attacks_made'] += 1
        if self.travel_state['attacks_made'] >= gamedata['territory']['deployments_per_travel']:
            # reset back to home base
            self.travel_state['dest_loc'] = None

    def travel_time_to(self, dest_loc):
        if dest_loc is None or self.my_home.base_map_loc is None: return 0
        dest_loc = tuple(dest_loc)
        if dest_loc == self.my_home.base_map_loc: return 0

        delta = hex_distance(self.my_home.base_map_loc, dest_loc)

        if self.travel_override: # developer-only option for debugging
            delta = min(delta, 1)

        t = delta * gamedata['territory']['travel_time_per_hex']
        if t > 0:
            t = max(1, int(t/self.stattab.get_player_stat('travel_speed')))
        return t

    def travel_begin(self, destination, travel_time):
        #gamesite.exception_log.event(server_time, 'HERE '+str(type(destination))+' '+str(destination)+' '+str((not destination)))
        if self.travel_state['dest_loc'] == destination: return
        if destination is not None:
            destination = tuple(destination)

        if (not destination) or (destination == tuple(self.my_home.base_map_loc)):
            self.travel_state = {'dest_loc': None, 'start_time': -1, 'end_time': -1 }
        else:
            self.travel_state = {'dest_loc': destination, 'start_time': server_time, 'end_time': server_time + travel_time}
        self.travel_state['attacks_made'] = 0

    def eligible_for_quarries(self):
        return self.get_any_abtest_value('enable_region_map', gamedata['enable_region_map']) and \
               Predicates.read_predicate(self.get_any_abtest_value('quarry_requirement', gamedata['territory']['quarry_requirement'])).is_satisfied(self,None)

    def is_on_map(self):
        if (self.history.get('map_placement_gen',0) < gamedata['territory']['map_placement_gen']): return False
        return bool(self.home_region) and self.my_home.base_region == self.home_region and bool(self.my_home.base_map_loc)

    # checks both eligibility and up-to-date map placement
    def can_use_quarries(self):
        return self.eligible_for_quarries() and self.is_on_map()

    # note! you might be able to "resurrect" (keep a dead object whose HP=0) but not repair it! This returns True in that case!
    def can_resurrect_unit(self, obj):
        if obj.spec.resurrectable: return True
        return self.stattab.get_unit_stat(obj.spec.name, 'resurrection', self.stattab.RESURRECT_NEVER) >= self.stattab.RESURRECT_AND_REPAIR_WITH_TECH

    def can_repair_unit(self, obj):
        if obj.hp <= 0 and \
           gamedata['resurrect_requires_tech'] and \
           (not obj.spec.resurrectable_without_tech) and \
           self.stattab.get_unit_stat(obj.spec.name, 'resurrection', self.stattab.RESURRECT_NEVER) < self.stattab.RESURRECT_AND_REPAIR_ALWAYS and \
           obj.spec.level_determined_by_tech and \
           self.tech.get(obj.spec.level_determined_by_tech, 0) < 1:
            return False
        return True

    def squads_enabled(self):
        return Predicates.read_predicate({'predicate': 'LIBRARY', 'name': 'squads_enabled'}).is_satisfied(self, None)


    def get_territory_setting(self, name):
        ret = gamedata['territory'].get(name, False)
        if self.home_region in gamedata['regions'] and \
           name in gamedata['regions'][self.home_region]:
            ret = gamedata['regions'][self.home_region][name]
        ret = self.get_any_abtest_value(name, ret)
        return ret

    def squad_block_mode(self):
        mode = self.get_territory_setting('squad_block_mode')
        assert mode in ('after_move', 'always', 'never')
        return mode
    def auto_resolve_enabled(self): return self.get_territory_setting('enable_auto_resolve')
    def squad_combat_enabled(self): return self.get_territory_setting('enable_squad_combat')
    def squad_speedups_enabled(self): return self.get_territory_setting('enable_squad_speedups')
    def map_home_combat_enabled(self): return self.get_territory_setting('enable_map_home_combat')
    def quarry_guards_enabled(self): return self.get_territory_setting('enable_quarry_guards')

    def unit_speedups_enabled(self):
        return self.is_cheater or gamedata.get('enable_unit_speedups', True)
    def crafting_speedups_enabled(self):
        return self.is_cheater or gamedata.get('enable_crafting_speedups', True)

    def num_mobile_squads(self):
        return len(self.squads)-1 # don't count base defenders
    def num_deployed_squads(self):
        return len([d for d in self.squads.itervalues() if ('map_loc' in d)])

    def which_squad_is_under_repair(self):
        squad_under_repair = None
        for item in self.unit_repair_queue:
            obj = self.get_object_by_obj_id(item['obj_id'], fail_missing = False)
            if (not obj): continue
            squad_id = obj.squad_id or 0
            squad_under_repair = squad_id
            break
        return squad_under_repair
    def squad_is_under_repair(self, squad_id): return squad_id == self.which_squad_is_under_repair()

    # check invariants on the unit repair queue
    def unit_repair_integrity_check(self):
        squad_under_repair = None
        to_cancel = []
        to_remove = []

        for item in self.unit_repair_queue:
            obj = self.get_object_by_obj_id(item['obj_id'], fail_missing = False)
            if (not obj):
                gamesite.exception_log.event(server_time, 'unit_repair_integrity_check() player %d tossing item with bad obj_id %s\n%s' % (self.user_id, repr(item), ''.join(traceback.format_stack())))
                to_remove.append(item)
                continue
            if obj.is_temporary():
                gamesite.exception_log.event(server_time, 'unit_repair_integrity_check() player %d tossing temporary object %s\n%s' % (self.user_id, repr(item), ''.join(traceback.format_stack())))
                to_cancel.append(obj)
                continue
            squad_id = obj.squad_id or 0
            if (not (SQUAD_IDS.is_mobile_squad_id(squad_id) or squad_id == SQUAD_IDS.BASE_DEFENDERS)):
                gamesite.exception_log.event(server_time, 'unit_repair_integrity_check() player %d tossing object %s with bad squad_id %s\n%s' % (self.user_id, repr(item), repr(squad_id), ''.join(traceback.format_stack())))
                to_cancel.append(obj)
                continue

            if squad_under_repair is None:
                squad_under_repair = squad_id
            else:
                if squad_id != squad_under_repair:
                    gamesite.exception_log.event(server_time, 'unit_repair_integrity_check() player %d tossing object %s with squad_id %s mismatched with squad_under_repair %s\n%s' % (self.user_id, repr(item), repr(squad_id), repr(squad_under_repair), ''.join(traceback.format_stack())))
                    to_cancel.append(obj)
                    continue

        for item in to_remove:
            self.unit_repair_queue.remove(item)
        for obj in to_cancel:
            self.unit_repair_cancel(obj, force_refund = True)

    def unit_repair_tick(self):
        self.unit_repair_integrity_check()
        affected = []
        while len(self.unit_repair_queue) > 0:
            if self.unit_repair_queue[0]['finish_time'] > server_time:
                # send estimated HP update for repairs still in progress
                item = self.unit_repair_queue[0]
                obj = self.get_object_by_obj_id(item['obj_id'], fail_missing = False)
                if obj:
                    progress = float(server_time - item['start_time'])/max(item['finish_time']-item['start_time'],1)
                    progress = min(max(progress, 0.0), 1.0)
                    obj.hp = min(obj.max_hp, max(obj.hp, int(item['original_hp'] + progress * (obj.max_hp-item['original_hp']) + 0.5)))
                    affected.append(obj)
                break
            item = self.unit_repair_queue.pop(0)
            obj = self.get_object_by_obj_id(item['obj_id'], fail_missing = False)
            if obj:
                obj.heal_to_full()
                affected.append(obj)
        return affected

    def unit_repair_queued(self, obj):
        for item in self.unit_repair_queue:
            if item['obj_id'] == obj.obj_id:
                return True
        return False

    def unit_repair_cancel(self, obj, force_refund = False):
        item = None
        index = -1
        for i in xrange(len(self.unit_repair_queue)):
            it = self.unit_repair_queue[i]
            if obj.obj_id == it['obj_id']:
                item = it
                index = i
                break
        if item is None:
            return False

        # calculate resources to return
        if index == 0:
            time_remaining = item['finish_time'] - server_time
            progress = float(server_time - item['start_time'])/max(item['finish_time']-item['start_time'],1)
            progress = min(max(progress,0),1)
            # update object's HP
            obj.hp = min(obj.max_hp, max(obj.hp, int(item['original_hp'] + progress * (obj.max_hp-item['original_hp']) + 0.5)))
        else:
            time_remaining = item['finish_time'] - self.unit_repair_queue[index-1]['finish_time']
            progress = 0

        refund = dict((res, max(0, int((1-progress)*item.get(res,0)))) for res in gamedata['resources'])
        self.unit_repair_queue.pop(index)

        # adjust timers on objects that remain in the repair queue
        for i in xrange(index, len(self.unit_repair_queue)):
            self.unit_repair_queue[i]['finish_time'] -= time_remaining
            self.unit_repair_queue[i]['start_time'] -= time_remaining

        # refund resources only on units whose repairs haven't started yet, unless using old generous setting
        if (sum(refund.itervalues(),0) > 0) and \
           (index != 0 or force_refund or gamedata['unit_repair_refund_on_cancel'] or self.squads_enabled()):
            refund = self.resources.gain_res(refund, reason='canceled_unit_repair')
            admin_stats.econ_flow_res(self, 'consumption', 'unit_repair', refund)
            return True
        return False

    def unit_repair_cancel_all(self, force_refund = False):
        while len(self.unit_repair_queue) > 0:
            object = self.get_object_by_obj_id(self.unit_repair_queue[0]['obj_id'], fail_missing = False)
            if object:
                self.unit_repair_cancel(object, force_refund = force_refund)
            else:
                self.unit_repair_queue.pop()

    @admin_stats.measure_latency('ping_squads')
    def ping_squads(self, session, return_army = False, originator = None, reason=''):
        if gamesite.nosql_client and self.home_region:
            map_squad_data = list(gamesite.nosql_client.get_map_features_by_landlord_and_type(self.home_region, self.user_id, 'squad', reason='ping_squads(%s)'%reason))
            map_object_data = list(gamesite.nosql_client.get_mobile_objects_by_owner(self.my_home.base_region, self.user_id, reason='ping_squads(%s)'%reason))
        else:
            map_squad_data = []
            map_object_data = []

        map_squads = dict([(int(data['base_id'].split('_')[1]), data) for data in map_squad_data])
        map_objects_by_squad = {}
        for entry in map_object_data:
            # note: in case of a corrupted map object with no squad_id, default to a mobile ID so that
            # we don't try to return BASE_DEFENDERS (0) to base!
            squad_id = entry.get('squad_id',None)
            if (squad_id is None) or (not SQUAD_IDS.is_mobile_squad_id(squad_id)):
                squad_id = 1 # default "could be valid" mobile squad id
            if (squad_id not in map_objects_by_squad): map_objects_by_squad[squad_id] = []
            map_objects_by_squad[squad_id].append(entry)

        home_objects_by_squad = {}
        for obj in self.home_base_iter():
            if obj.is_mobile() and (obj.owner is self):
                squad_id = obj.squad_id or 0
                if (squad_id not in home_objects_by_squad): home_objects_by_squad[squad_id] = []
                home_objects_by_squad[squad_id].append(obj.persist_state(nosql=True))

        # add any missing squads:
        for squad_id, squad_feature in map_squads.iteritems():
            if str(squad_id) not in self.squads:
                gamesite.exception_log.event(server_time, 'player %d has squad %d on map, but not in player.squads - adding' % \
                                             (self.user_id, squad_id))
                self.squads[str(squad_id)] = {'id':squad_id, 'ui_name': 'Unknown'}

        to_recall = [] # list of squads to recall to base

        for sid, squad in self.squads.iteritems():
            squad_id = int(sid)
            if squad_id in map_squads:
                # it should be on the map
                map_data = map_squads[int(squad_id)]
                squad['map_loc'] = map_data['base_map_loc']
                must_recall = False
                # check that no objects are at home
                if (squad_id in home_objects_by_squad):
                    if gamedata['server'].get('log_nosql',0) >= 2:
                        gamesite.exception_log.event(server_time, 'player %d squad %d has map_loc %s but has in-base objects: %s' % \
                                                     (self.user_id, squad_id, repr(squad['map_loc']), repr(home_objects_by_squad[squad_id])))
                    must_recall = True
                if (squad_id not in map_objects_by_squad):
                    if gamedata['server'].get('log_nosql',0) >= 1:
                        gamesite.exception_log.event(server_time, 'player %d squad %d has map_loc %s but no objects in NoSQL' % \
                                                     (self.user_id, squad_id, repr(squad['map_loc'])))
                    must_recall = True
                else:
                    # check if the squad is dead
                    all_dead = True

                    for obj in map_objects_by_squad[squad_id]:
                        if not army_unit_is_dead(obj):
                            all_dead = False
                            break

                    if all_dead:
                        if gamedata['server'].get('log_nosql',0) >= 2:
                            gamesite.exception_log.event(server_time, 'player %d squad %d at map_loc %s is dead, recalling to base' % \
                                                         (self.user_id, squad_id, repr(squad['map_loc'])))
                        must_recall = True

                if self.isolate_pvp:
                    if gamedata['server'].get('log_nosql',0) >= 2:
                        gamesite.exception_log.event(server_time, 'player %d squad %d recalled because of pvp isolation' % \
                                                     (self.user_id, squad_id))
                    must_recall = True

                if must_recall:
                    to_recall.append(squad_id)
            else:
                # it should be at home base
                for FIELD in ('map_loc', 'map_path', 'travel_speed'):
                    if FIELD in squad: del squad[FIELD]
                if (squad_id in map_objects_by_squad):
                    # this can happen after an attack where we lose a squad, but we need the player to log in to recall it into home_base_iter
                    if gamedata['server'].get('log_nosql',0) >= 2:
                        gamesite.exception_log.event(server_time, 'player %d squad %d is not on map but has NoSQL objects: %s' % \
                                                     (self.user_id, squad_id, repr(map_objects_by_squad[squad_id])))
                    if self.has_write_lock:
                        to_recall.append(squad_id)
                # it is OK to have empty squads at home base

        ret_features = [] # list of map features that were changed

        if gamedata['server'].get('log_nosql',0) >= 3:
            gamesite.exception_log.event(server_time, ("player %d ping_squads PRE-RECALL: map_object_data:\n" % self.user_id)+'\n'.join(map(repr, map_object_data))+"\nhome_objects_by_squad:\n"+'\n'.join(map(repr, home_objects_by_squad.values()))+"\nmap_objects_by_squad:\n"+'\n'.join(map(repr, map_objects_by_squad.values())))

        for squad_id in to_recall:
            success, affected_objects, map_features, error_code = self.squad_exit_map(session, squad_id, force = True, originator=originator, reason='ping_squads(%s)'%reason)
            if map_features: ret_features += map_features
            if error_code:
                gamesite.exception_log.event(server_time, 'player %d squad %d recall error: %s' % \
                                             (self.user_id, squad_id, repr(error_code)))
            else:
                # update state accounting
                if squad_id in map_objects_by_squad:
                    map_objects = map_objects_by_squad[squad_id]
                    del map_objects_by_squad[squad_id]
                    if squad_id not in home_objects_by_squad: home_objects_by_squad[squad_id] = []
                    for state in map_objects:
                        # check to make sure we don't have two entries with the same obj_id
                        found = False
                        for obj in home_objects_by_squad[squad_id]:
                            if obj['obj_id'] == state['obj_id']:
                                found = True
                                break
                        if not found:
                            home_objects_by_squad[squad_id].append(state)
                        # remove from map_object_data
                        for obj in map_object_data:
                            if obj['obj_id'] == state['obj_id']:
                                map_object_data.remove(obj)
                                break

        if to_recall and gamedata['server'].get('log_nosql',0) >= 3:
            gamesite.exception_log.event(server_time, ("player %d ping_squads POST-RECALL: map_object_data:\n" % self.user_id) +'\n'.join(map(repr, map_object_data))+"\nhome_objects_by_squad:\n"+'\n'.join(map(repr, home_objects_by_squad.values()))+"\nmap_objects_by_squad:\n"+'\n'.join(map(repr, map_objects_by_squad.values())))

        mailbox_update = self.trim_unit_space(map_object_data, home_objects_by_squad, map_objects_by_squad)

        if return_army:
            # return the data for PLAYER_ARMY_UPDATE, in case the caller wants it
            ret_army = [x for sublist in home_objects_by_squad.itervalues() for x in sublist] + \
                       [x for sublist in map_objects_by_squad.itervalues() for x in sublist]
        else:
            ret_army = None

        return ret_army, ret_features, mailbox_update

    # check for oversized armies
    # note: this can happen on a foreign base that has stale data, but as long as the mutation is kept atomic/idempotent within Player and its local mailbox, it should be OK
    def trim_unit_space(self, map_object_data, home_objects_by_squad, map_objects_by_squad):
        mailbox_update = False
        if (self.tutorial_state == "COMPLETE") and (self.stattab.total_space > 0) and \
           (not self.is_cheater) and Predicates.read_predicate(gamedata['server']['trim_unit_space_if']).is_satisfied(self, None):
            to_remove = []
            attachments = []
            diff = 0

            # check overall army being too large
            space_usage = self.get_army_space_usage_by_squad(map_object_data = map_object_data)
            if space_usage['ALL'] > self.stattab.total_space:
                candidates = sorted(filter(lambda obj: obj.is_mobile() and (obj.owner is self) and (not obj.is_temporary()), self.home_base_iter()), key = lambda obj: obj.get_leveled_quantity(obj.spec.consumes_space))
                for obj in candidates:
                    item_spec = 'packaged_'+obj.spec.name
                    if item_spec not in gamedata['items']:
                        gamesite.exception_log.event(server_time, 'trim_unit_space needs item '+item_spec)
                        continue
                    to_remove.append(obj)
                    found = False
                    for att in attachments:
                        if att['spec'] == item_spec and (att.get('stack',1) < gamedata['items'][item_spec].get('max_stack',1)):
                            att['stack'] = att.get('stack',1)+1
                            found = True
                            break
                    if not found: attachments.append({'spec':item_spec})
                    diff += obj.get_leveled_quantity(obj.spec.consumes_space)
                    if space_usage['ALL']-diff <= self.stattab.total_space:
                        break

            # check spec count limits
            counts = self.get_army_unit_count_by_specname(map_object_data = map_object_data)
            for name, qty in counts.iteritems():
                spec = self.get_abtest_spec(GameObjectSpec, name)
                if spec.limit >= 0 and qty > spec.limit:
                    # pull units out of home base. Note, squad units are not affected!
                    candidates = filter(lambda obj: obj.spec is spec and (obj.owner is self) and (not obj.is_temporary()), self.home_base_iter())
                    for obj in candidates:
                        item_spec = 'packaged_'+obj.spec.name
                        if item_spec not in gamedata['items']:
                            gamesite.exception_log.event(server_time, 'trim_unit_space needs item '+item_spec)
                            continue
                        to_remove.append(obj)
                        found = False
                        for att in attachments:
                            if att['spec'] == item_spec and (att.get('stack',1) < gamedata['items'][item_spec].get('max_stack',1)):
                                att['stack'] = att.get('stack',1)+1
                                found = True
                                break
                        if not found: attachments.append({'spec':item_spec})
                        qty -= 1
                        if qty <= spec.limit:
                            break

                    if qty > spec.limit:
                        # still too many, but can't do anything about squads out on the map
                        if gamedata['server']['log_trim_unit_space']:
                            gamesite.exception_log.event(server_time, 'player %d trim_unit_space spec %s (count %d limit %d) on map, cannot trim' % \
                                                         (self.user_id, name, qty, spec.limit))
            # send units back in the mail
            if to_remove:
                for obj in to_remove:
                    self.unit_repair_cancel(obj)
                    self.home_base_remove(obj)
                    # update objects_by_squad so that the following player_army_update shows the deletion
                    statelist = home_objects_by_squad.get(obj.squad_id or 0, map_objects_by_squad.get(obj.squad_id or 0, []))
                    for state in statelist:
                        if state['obj_id'] == obj.obj_id:
                            statelist.remove(state)
                            break
                    # note! we don't send OBJECT_REMOVED - we trust that this gets caught on login before the first session change!
                self.mailbox_append(self.make_system_mail(gamedata['strings']['trim_unit_space_mail' + ('_reserves' if (self.squads_enabled() and self.find_object_by_type(gamedata['squad_building'])) else '_townhall')], attachments = attachments))
                mailbox_update = True
                if diff >= gamedata['server']['log_trim_unit_space']:
                    gamesite.exception_log.event(server_time, 'player %d trim_unit_space ALL %d (limit %d) -%d %s' % \
                                                 (self.user_id, space_usage['ALL'], self.stattab.total_space, diff, repr(attachments)))

            # check individual squads being too large
            if self.squads_enabled():
                for sid, squad in self.squads.iteritems():
                    squad_id = int(sid)
                    limit = self.stattab.main_squad_space if (squad_id == SQUAD_IDS.BASE_DEFENDERS) else self.stattab.squad_space
                    if space_usage[sid] > limit:
                        diff = 0
                        moved = []
                        if self.squad_is_deployed(squad_id):
                            # can't do anything about squads out on the map
                            if gamedata['server']['log_trim_unit_space']:
                                gamesite.exception_log.event(server_time, 'player %d trim_unit_space squad %d %d (limit %d) on map, cannot trim' % \
                                                             (self.user_id, squad_id, space_usage[sid], limit))
                            continue
                        else:
                            candidates = sorted(filter(lambda obj: obj.is_mobile() and (obj.owner is self) and (not obj.is_temporary()) and obj.squad_id == squad_id, self.home_base_iter()),
                                                key = lambda obj: obj.get_leveled_quantity(obj.spec.consumes_space))

                            for obj in candidates:
                                self.unit_repair_cancel(obj)
                                obj.squad_id = SQUAD_IDS.RESERVES
                                obj.reset_as_squad_unit(self.my_home.ncells())
                                # note! we don't send OBJECT_REMOVED - we trust that this gets caught on login before the first session change!
                                # update objects_by_squad so that the following player_army_update shows the move
                                statelist = home_objects_by_squad.get(squad_id, map_objects_by_squad.get(squad_id, []))
                                for state in statelist:
                                    if state['obj_id'] == obj.obj_id:
                                        statelist.remove(state)
                                        state['squad_id'] = SQUAD_IDS.RESERVES
                                        if (SQUAD_IDS.RESERVES not in home_objects_by_squad): home_objects_by_squad[SQUAD_IDS.RESERVES] = []
                                        home_objects_by_squad[SQUAD_IDS.RESERVES].append(state)
                                        break
                                moved.append(obj.spec.name)
                                diff += obj.get_leveled_quantity(obj.spec.consumes_space)
                                if space_usage[sid]-diff <= limit:
                                    break

                        if moved:
                            self.mailbox_append(self.make_system_mail(gamedata['strings']['trim_unit_space_mail' + ('_base_defenders' if squad_id == SQUAD_IDS.BASE_DEFENDERS else '_squad')],
                                                                      replace_s = '%d' % len(moved), replace_level = squad['ui_name']))
                            mailbox_update = True
                            if gamedata['server']['log_trim_unit_space'] and \
                               ((diff >= gamedata['server']['log_trim_unit_space']) or squad_id != SQUAD_IDS.BASE_DEFENDERS):
                                gamesite.exception_log.event(server_time, 'player %d trim_unit_space squad %d %d (limit %d) -%d %s' % \
                                                             (self.user_id, squad_id, space_usage[sid], limit, diff, repr(moved)))
        return mailbox_update

    def get_manufacture_queue_space_usage(self):
        usage = 0

        for obj in self.home_base_iter():
            if obj.owner is self and obj.is_building() and obj.is_manufacturer():
                for item in obj.manuf_queue:
                    spec = GameObjectSpec.lookup(item['spec_name'])
                    usage += GameObjectSpec.get_leveled_quantity(spec.consumes_space, item.get('level',1))

        return usage

    # optionally supply map_object_data in case you just queried it
    def get_army_unit_count_by_specname(self, map_object_data = None):
        ret = {}

        # count objects at home
        for obj in self.home_base_iter():
            if (obj.owner is self) and obj.is_mobile():
                ret[obj.spec.name] = ret.get(obj.spec.name,0) + 1

            # also count units that are under construction
            elif (obj.owner is self) and obj.is_building() and obj.is_manufacturer():
                for item in obj.manuf_queue:
                    ret[item['spec_name']] = ret.get(item['spec_name'],0) + 1

        # count objects on map
        if gamesite.nosql_client and self.home_region:
            if map_object_data is None: map_object_data = gamesite.nosql_client.get_mobile_objects_by_owner(self.my_home.base_region, self.user_id, reason='get_army_unit_count_by_squad')
            for obj in map_object_data:
                ret[obj['spec']] = ret.get(obj['spec'],0) + 1

        return ret

    # optionally supply map_object_data in case you just queried it
    def get_army_space_usage_by_squad(self, map_object_data = None, exclude_manuf_queue = None):
        ret = dict([(k,0) for k in self.squads.iterkeys()] + [('ALL',0), (str(SQUAD_IDS.RESERVES),0)])
        for obj in self.home_base_iter():
            if (obj.owner is self) and obj.is_mobile():
                squad_id = obj.squad_id or 0
                space = obj.get_leveled_quantity(obj.spec.consumes_space)
                ret[str(squad_id)] += space
                ret['ALL'] += space

            # also add space occupied by units that are under construction
            elif (obj.owner is self) and obj.is_building() and obj.is_manufacturer() and (obj is not exclude_manuf_queue):
                for item in obj.manuf_queue:
                    spec = GameObjectSpec.lookup(item['spec_name'])
                    space = GameObjectSpec.get_leveled_quantity(spec.consumes_space, item.get('level',1))
                    if (not self.squads_enabled()) or (not gamedata['produce_to_reserves']):
                        ret[str(SQUAD_IDS.BASE_DEFENDERS)] += space # count queued units toward base defenders
                    ret['ALL'] += space

        if gamesite.nosql_client and self.home_region:
            if map_object_data is None: map_object_data = gamesite.nosql_client.get_mobile_objects_by_owner(self.my_home.base_region, self.user_id, reason='get_army_space_usage_by_squad')
            for obj in map_object_data:
                squad_id = obj.get('squad_id',0)
                space = GameObjectSpec.get_leveled_quantity(self.get_abtest_spec(GameObjectSpec, obj['spec']).consumes_space, obj.get('level',1))
                if str(squad_id) in ret:
                    ret[str(squad_id)] += space
                    ret['ALL'] += space
                else:
                    # orphan unit - delete it
                    gamesite.exception_log.event(server_time, 'player %d unit %s on map %s with invalid squad_id = %d, dropping' % \
                                                 (self.user_id, obj['obj_id'], self.my_home.base_region, squad_id))
                    gamesite.nosql_client.drop_mobile_object_by_id(self.my_home.base_region, obj['obj_id'], reason='get_army_space_usage_by_squad')

        return ret

    # look up a (non-base-defenders, non-reserve) squad by ID. If it exists and is at home, return the squad, else return None
    def verify_squad(self, squad_id, require_at_home = True, require_away = False, require_move_finished = False):
        squad = self.squads.get(str(squad_id), None)
        if not squad: return None
        is_away = bool(squad.get('map_loc',None))
        if require_at_home and is_away: return None
        if require_away and (not is_away): return None
        if require_move_finished and ('map_path' in squad) and (squad['map_path'][-1]['eta'] > server_time): return None
        return squad

    def squad_get_rollback_props(self, squad_id):
        # Grab the squad's current map feature status, whatever it is, for
        # returning to the client to fix incorrect client-side
        # predictions on all error paths.
        squad = self.squads.get(str(squad_id), None)
        if not squad: return None

        # this is the map feature we'll send back to the client to fix any incorrect predictions
        rollback_feature = {'base_id': self.squad_base_id(squad_id),
                            'preserve_locks':1 # tell the client not to forget lock state!
                            }
        if not squad.get('map_loc'):
            # squad is not on the map
            rollback_feature['DELETED'] = 1
        else:
            rollback_feature['base_map_loc'] = squad.get('map_loc',None) # note: return explicit null to correct client-side non-null field
            rollback_feature['base_map_path'] = squad.get('map_path',None) # same here
        return rollback_feature

    def squad_enter_map(self, squad_id, coords):
        if self.isolate_pvp: return False, [], [], ["CANNOT_DEPLOY_SQUAD_YOU_ARE_ISOLATED", squad_id]
        if (not (gamesite.nosql_client and self.home_region)):
            return False, [], [], ["CANNOT_DEPLOY_SQUAD_NO_NOSQL", squad_id]
        if self.num_deployed_squads() >= self.stattab.max_deployed_squads:
            return False, [], [], ["CANNOT_DEPLOY_SQUAD_LIMIT_REACHED", squad_id]
        assert SQUAD_IDS.is_mobile_squad_id(squad_id)
        assert type(coords) is list and len(coords) == 2 and type(coords[0]) is int and type(coords[1]) is int

        rollback_feature = self.squad_get_rollback_props(squad_id)
        if not rollback_feature: return False, [], [], ["INVALID_SQUAD"] # squad doesn't even exist

        squad = self.verify_squad(squad_id)
        if not squad: return False, [], [rollback_feature], ["INVALID_SQUAD"] # squad is already deployed

        if self.squad_is_under_repair(squad_id): return False, [], [rollback_feature], ["CANNOT_DEPLOY_SQUAD_UNDER_REPAIR", squad_id] # cannot deploy squad while under repair

        if coords[0] < 0 or coords[0] >= gamedata['regions'][self.home_region]['dimensions'][0] or \
           coords[1] < 0 or coords[1] >= gamedata['regions'][self.home_region]['dimensions'][1] or \
           hex_distance(self.my_home.base_map_loc, coords) != 1 or \
           Region(gamedata, self.home_region).obstructs_squads(coords):
            # deployment hex is invalid, or not adjacent to home base
            return False, [], [rollback_feature], ["INVALID_MAP_LOCATION", squad_id, coords]

        # gather units we are going to deploy
        to_remove = []
        highest_space = -1
        icon_unit_specname = None
        total_hp = 0

        # compute travel speed here, while we have all the units in memory
        travel_speed = -1

        for object in self.home_base_iter():
            if object.is_mobile() and (object.squad_id or 0) == squad_id:
                to_remove.append(object)
                total_hp += object.hp
                space = object.get_leveled_quantity(object.spec.consumes_space)
                if (space > highest_space) or (icon_unit_specname is None):
                    highest_space = space
                    icon_unit_specname = object.spec.name
                speed = object.get_leveled_quantity(object.spec.travel_speed or object.spec.maxvel)
                assert speed > 0
                travel_speed = min(travel_speed, speed) if (travel_speed > 0) else speed

        if len(to_remove) < 1: return False, [], [rollback_feature], ["INVALID_SQUAD"] # cannot deploy empty squad
        if total_hp < 1: return False, [], [rollback_feature], ["CANNOT_DEPLOY_SQUAD_DEAD", squad_id] # cannot deploy dead squad

        feature = {'base_id': self.squad_base_id(squad_id),
                   'base_type': 'squad',
                   'base_icon': icon_unit_specname,
                   'base_ui_name': squad['ui_name'], # denormalized for ease of querying
                   'base_landlord_id': self.user_id,
                   'base_map_loc': coords,
                   'base_map_path': None # explicit null for client's benefit
                   }

        if self.squad_block_mode() == 'never':
            exclude_filter = {'base_type': {'$ne': 'squad'}}
        else:
            exclude_filter = None

        # note: to avoid two successive map update broadcasts, wait until after lock release to send
        if not gamesite.nosql_client.create_map_feature(self.home_region, feature['base_id'], feature, exclusive=0, exclude_filter=exclude_filter, originator=self.user_id, do_hook=False, reason='squad_enter_map'):
            # map location already occupied - send update on what's blocking us
            results = list(gamesite.nosql_client.get_map_features_by_loc(self.home_region, coords, reason='squad_enter_map(fail)'))
            return False, [], ([rollback_feature]+results), ["INVALID_MAP_LOCATION", squad_id]

        for object in to_remove:
            self.home_base_remove(object)
            state = object.persist_state(nosql = True)
            state['base_id'] = feature['base_id']
            gamesite.nosql_client.update_mobile_object(self.home_region, state, reason='squad_enter_map')

        squad['map_loc'] = feature['base_map_loc']
        squad['travel_speed'] = travel_speed
        gamesite.nosql_client.map_feature_lock_release(self.home_region, feature['base_id'], self.user_id, do_hook=False, reason='squad_enter_map')
        gamesite.gameapi.broadcast_map_update(self.home_region, feature['base_id'], feature, self.user_id)
        return True, to_remove, [feature], None

    def squad_step(self, squad_id, coords):
        assert (gamesite.nosql_client and self.home_region)
        assert SQUAD_IDS.is_mobile_squad_id(squad_id)

        rollback_feature = self.squad_get_rollback_props(squad_id)
        if not rollback_feature: return False, [], [], ["INVALID_SQUAD"] # squad doesn't even exist

        squad = self.verify_squad(squad_id, require_at_home = False, require_away = True)
        if not squad: return False, [], [rollback_feature], ["INVALID_SQUAD"] # squad was not deployed into map yet

        if coords:
            if ('map_path' in squad) and (squad['map_path'][-1]['eta'] >= server_time):
                return False, [], [rollback_feature], ["SQUAD_RACE_CONDITION", squad_id] # squad is currently in motion, cannot accept a non-halt path

            check_path = True
            next_eta = server_time
            new_path = [{'xy': squad['map_loc'], 'eta': next_eta}]

            assert type(coords) is list
            for i in xrange(len(coords)):
                waypoint = coords[i]
                assert type(waypoint) is list and len(waypoint) == 2 and type(waypoint[0]) is int and type(waypoint[1]) is int
                if waypoint[0] < 0 or waypoint[0] >= gamedata['regions'][self.home_region]['dimensions'][0] or \
                   waypoint[1] < 0 or waypoint[1] >= gamedata['regions'][self.home_region]['dimensions'][1] or \
                   (i == 0 and hex_distance(waypoint, squad['map_loc']) != 1) or \
                   (i > 0 and hex_distance(waypoint, coords[i-1]) != 1) or \
                   Region(gamedata, self.home_region).obstructs_squads(waypoint):
                    # waypoint is outside of map, or not a neighbor of the previous waypoint
                    return False, [], [rollback_feature], ["INVALID_MAP_LOCATION", squad_id, 'waypoint', waypoint]

                # construct new path
                next_eta += 0 if self.travel_override else float(1.0/(gamedata['territory']['unit_travel_speed_factor']*self.stattab.get_player_stat('travel_speed')*squad.get('travel_speed',1.0)))
                new_path.append({'xy': waypoint, 'eta': next_eta})

        else:
            # player wants to halt the squad - is it halted already?
            if ('map_path' not in squad) or (squad['map_path'][-1]['eta'] < server_time):
                return False, [], [rollback_feature], ["SQUAD_RACE_CONDITION", squad_id] # squad already halted
            # compute path up to where the squad is right now
            new_path = []
            for waypoint in squad['map_path']:
                new_path.append(waypoint)
                if waypoint['eta'] > server_time:
                    break

            check_path = False # do not need to verify intermediate points

        destination = new_path[-1]['xy']

        # acquire squad mutex
        # not going to hold it for an extended period of time, so no need to broadcast
        lock_id = SpinDB.base_lock_id(self.home_region, self.squad_base_id(squad_id))
        state = gamesite.nosql_client.map_feature_lock_acquire(self.home_region, self.squad_base_id(squad_id), self.user_id, do_hook = False, reason='squad_step')
        if state != Player.LockState.being_attacked: # mutex locked
            return False, [], [rollback_feature], ["CANNOT_ALTER_SQUAD_WHILE_UNDER_ATTACK", squad_id]

        new_lock_gen = -1

        try:
            # verify that the squad in map_cache matches where the playerdb state says it is
            entry = gamesite.nosql_client.get_map_feature_by_base_id(self.home_region, self.squad_base_id(squad_id), reason='squad_step')
            if not entry:
                gamesite.exception_log.event(server_time, 'player %d squad %d trying to step, but not found on map' % \
                                             (self.user_id, squad_id))
                return False, [], [rollback_feature], ["INVALID_SQUAD"] # in-memory state said it's on the map, but database says no!

            # get rid of lock info, as if we return the feature, it'll definitely be unlocked
            for FIELD in ('LOCK_STATE', 'LOCK_OWNER'):
                if FIELD in entry: del entry[FIELD]

            # add explicit null for the path, to make sure the client takes the update
            if 'base_map_path' not in entry:
                entry['base_map_path'] = None # XXX move this to client-side? (assume a map_loc update without path nulls the path?)

            if entry['base_map_loc'][0] != squad['map_loc'][0] or entry['base_map_loc'][1] != squad['map_loc'][1]:
                gamesite.exception_log.event(server_time, 'player %d squad %d trying to step, but base location mismatches: squad %s map_cache %s' % \
                                             (self.user_id, squad_id, repr(squad['map_loc']), repr(entry['base_map_loc'])))
                return False, [], [entry], ["INVALID_MAP_LOCATION", squad_id, 'mismatch', squad['map_loc'], entry['base_map_loc']] # database position disagrees with in-memory state

            new_entry = copy.copy(entry)

            squad_block_mode = self.squad_block_mode()
            if squad_block_mode == 'never':
                exclude_filter = {'base_type': {'$ne': 'squad'}}
            else:
                exclude_filter = None

            if check_path and coords and (len(coords) > 1) and (not gamedata['server'].get('trust_client_map_path', False)):
                # This is a race-prone check to find conflicting features at intermediate waypoints (not including the final waypoint)
                # We don't really care about squads crossing each other. The final waypoint is checked atomically below.
                if squad_block_mode == 'after_move':
                    blocked = gamesite.nosql_client.map_feature_occupancy_check_dynamic(self.home_region, new_path[1:-1], reason = 'squad_step')
                elif squad_block_mode == 'always':
                    blocked = gamesite.nosql_client.map_feature_occupancy_check(self.home_region, coords[:-1], reason = 'squad_step')
                elif squad_block_mode == 'never':
                    blocked = gamesite.nosql_client.map_feature_occupancy_check(self.home_region, coords[:-1], exclude_filter = exclude_filter, reason = 'squad_step')
                if blocked:
                    return False, [], [entry], ["INVALID_MAP_LOCATION", squad_id, 'path', coords[:-1]] # map location already occupied

            # try to place squad at its final destination hex
            new_entry['base_map_loc'] = destination
            new_entry['base_map_path'] = new_path
            if not gamesite.nosql_client.move_map_feature(self.home_region, new_entry['base_id'], new_entry,
                                                          old_loc=entry['base_map_loc'], old_path=entry.get('base_map_path',None),
                                                          exclusive=0, exclude_filter=exclude_filter, originator=self.user_id, reason='squad_step'):
                # conflict - check if we're moving into a friendly quarry with no other squad there
                if self.quarry_guards_enabled():
                    conflict_list = list(gamesite.nosql_client.get_map_features_by_loc(self.home_region, destination, reason='squad_step(conflict)'))
                else:
                    conflict_list = []
                if (len(conflict_list) == 1) and (conflict_list[0].get('base_type',None) == 'quarry') and \
                   (conflict_list[0].get('base_landlord_id',None) == self.user_id):
                    # guarding a friendly quarry - force the update
                    assert gamesite.nosql_client.move_map_feature(self.home_region, new_entry['base_id'], new_entry,
                                                                  old_loc=entry['base_map_loc'], old_path=entry.get('base_map_path',None),
                                                                  exclusive=-1, originator=self.user_id, reason='squad_step')
                else:
                    for c in conflict_list: # add explicit nulls for client
                        if 'base_map_path' not in c:
                            c['base_map_path'] = None # XXX move this to client-side? (assume a map_loc update without path nulls the path?)
                    return False, [], [entry] + conflict_list, ["INVALID_MAP_LOCATION", squad_id, 'dest', destination] # map location already occupied

            new_lock_gen = entry.get('LOCK_GENERATION',-1)+1
            squad['map_loc'] = new_entry['base_map_loc']
            squad['map_path'] = new_path

        finally:
            if lock_id:
                gamesite.nosql_client.map_feature_lock_release(self.home_region, self.squad_base_id(squad_id), self.user_id,
                                                               generation = new_lock_gen,
                                                               do_hook = False, reason='squad_step')

        return True, [], [new_entry], None

    def squad_exit_map(self, session, squad_id, force = False, originator = None, reason = ''):
        # note! change_region() splits self.home_region away from self.my_home.base_region temporarily,
        # so in here we MUST use self.home_region only

        assert (gamesite.nosql_client and self.home_region)
        assert SQUAD_IDS.is_mobile_squad_id(squad_id)

        rollback_feature = self.squad_get_rollback_props(squad_id)
        if not rollback_feature: return False, [], [], ["INVALID_SQUAD"] # squad doesn't even exist

        squad = self.verify_squad(squad_id, require_at_home = False, require_away = (not force))
        if not squad: return False, [], [rollback_feature], ["INVALID_SQUAD"] # squad is at home and we're only looking for away squads

        entry = gamesite.nosql_client.get_map_feature_by_base_id(self.home_region, self.squad_base_id(squad_id), reason = 'squad_exit_map')
        if not entry:
            if not force:
                if gamedata['server'].get('log_nosql',0) >= 0:
                    gamesite.exception_log.event(server_time, 'player %d squad %d trying to exit, but not found on map' % \
                                                 (self.user_id, squad_id))
                return False, [], [rollback_feature], ["INVALID_SQUAD"] # database doesn't have the squad
            else:
                entry = {'base_id': self.squad_base_id(squad_id), 'DELETED':1}

        if (not force) and (hex_distance(entry['base_map_loc'], self.my_home.base_map_loc) > 1):
            return False, [], [entry], ["INVALID_MAP_LOCATION", squad_id] # squad is not adjacent to home base

        if gamedata['server'].get('log_nosql',0) >= 2:
            gamesite.exception_log.event(server_time, 'player %d squad_exit_map %d has_write_lock %d' % \
                                         (self.user_id, squad_id, int(self.has_write_lock)))

        if (not self.has_write_lock):
            assert force
            # if it's the non-playing owner, the only thing we can do is blow the base off the map
            # the owner has to log in to reclaim the objects into the base
            gamesite.nosql_client.drop_map_feature(self.home_region, self.squad_base_id(squad_id), originator = originator, reason='squad_exit_map')
            return True, [], [{'base_id': self.squad_base_id(squad_id), 'DELETED':1}], None

        lock_id = SpinDB.base_lock_id(self.home_region, self.squad_base_id(squad_id))
        if session and session.viewing_squad_locks and (lock_id in session.viewing_squad_locks):
            lock_id = None # lock already acquired
        else:
            # not going to hold it for an extended period of time, so no need to broadcast
            lock_state = gamesite.nosql_client.map_feature_lock_acquire(self.home_region, self.squad_base_id(squad_id), self.user_id, do_hook = False, reason='squad_exit_map')
            if lock_state != Player.LockState.being_attacked: # mutex locked
                if not force:
                    return False, [], [entry], ["CANNOT_ALTER_SQUAD_WHILE_UNDER_ATTACK", squad_id]
                else:
                    # possible cases:
                    # - the squad was killed by an attacker, so that it no longer exists in the map, but its objects do. This is totally normal.
                    # - the squad does still exist in the map, but is locked (e.g. you're leaving a region while one squad is under attack). This is the case that can actually cause orphan units.
                    # check existence of the base to see which case we have.
                    if gamedata['server'].get('log_nosql',0) >= 1 and gamesite.nosql_client.get_map_feature_by_base_id(self.home_region, self.squad_base_id(squad_id), reason='squad_exit_map(check_exist)'):
                        gamesite.exception_log.event(server_time, 'player %d (session %d) squad_exit_map(reason "%s") squad %d with force=1 but squad is locked - may result in orphan units!' % \
                                                     (self.user_id, session.player.user_id if session else -1, reason, squad_id))
                    lock_id = None

        to_add = []

        try:
            for state in gamesite.nosql_client.get_mobile_objects_by_base(self.home_region, self.squad_base_id(squad_id), reason='squad_exit_map'):
                assert state['kind'] == 'mobile'
                assert state['owner_id'] == self.user_id
                if ('obj_id' in state) and self.get_object_by_obj_id(state['obj_id'], fail_missing = False):
                    if gamedata['server'].get('log_nosql',0) >= 2:
                        gamesite.exception_log.event(server_time, 'player %d squad_exit_map %d already has object %s at home, skipping' % \
                                                     (self.user_id, squad_id, state['obj_id']))
                    continue
                to_add.append(reconstitute_object(self, self, state, context = 'player %d squad_exit_map %d' % (self.user_id, squad_id)))
            for object in to_add:
                self.home_base_add(object)
            gamesite.nosql_client.drop_mobile_objects_by_base(self.home_region, self.squad_base_id(squad_id), reason='squad_exit_map')
            gamesite.nosql_client.drop_map_feature(self.home_region, self.squad_base_id(squad_id), originator=self.user_id, reason='squad_exit_map')
            # lock was blown away
            if session: session.forget_base_lock(SpinDB.base_lock_id(self.home_region, self.squad_base_id(squad_id)))
            lock_id = None

            # reformat map_cache entry for client-side deletion
            entry = {'base_id': self.squad_base_id(squad_id), 'DELETED': 1}

            # update in-memory version of the squad (under player.squads)
            for FIELD in ('map_loc', 'map_path', 'travel_speed'):
                if FIELD in squad: del squad[FIELD]

        finally:
            if lock_id: gamesite.nosql_client.map_feature_lock_release(self.home_region, self.squad_base_id(squad_id), self.user_id, do_hook = False, reason='squad_exit_map')

        return True, to_add, [entry], None

    # get level-dependent quantity (based on PLAYER level)
    def get_leveled_quantity(self, qty, do_clamp = True):
        lev = self.resources.player_level
        if type(qty) is list and do_clamp:
            lev = min(lev, len(qty))
        return GameObjectSpec.get_leveled_quantity(qty, lev)

    # get value from abtest 'group' data, falling back to
    # default_group if this player is not assigned to a group or the
    # test went inactive, and falling back to default_value if the
    # test is missing.
    def get_abtest_value(self, test_name, key, default_value):
        if test_name in gamedata['abtests']:
            if gamedata['abtests'][test_name]['active'] and (test_name in self.abtests):
                group = self.abtests[test_name]
            else:
                group = gamedata['abtests'][test_name]['default_group']
            return gamedata['abtests'][test_name]['groups'][group][key]
        else:
            return default_value

    # same as above but this time we are looking up patches that modify gamedata specs
    # that affect server operation (e.g. unit/tech build costs)

    def get_abtest_spec(self, klass, name):
        ret = klass.lookup(name)
        key = Spec.KEY_MAP[ret.kind]

        for test_name, group in self.abtests.iteritems():
            if test_name in gamedata['abtests'] and \
               group in gamedata['abtests'][test_name]['groups'] and \
               gamedata['abtests'][test_name]['groups'][group].has_key(key) and \
               gamedata['abtests'][test_name]['active'] and \
               gamedata['abtests'][test_name]['groups'][group].get('patches_server_specs',0):
                patches = self.get_abtest_value(test_name, key, {})
                if name in patches:
                    ret = ret.make_patched(patches[name])
        return ret
    def get_abtest_object_spec(self, name): return self.get_abtest_spec(GameObjectSpec, name)

    def get_abtest_quest(self, name):
        ret = Quest(name)
        key = 'quests'
        for test_name, group in self.abtests.iteritems():
            if test_name in gamedata['abtests'] and \
               group in gamedata['abtests'][test_name]['groups'] and \
               gamedata['abtests'][test_name]['groups'][group].has_key(key) and \
               gamedata['abtests'][test_name]['active'] and \
               gamedata['abtests'][test_name]['groups'][group].get('patches_server_specs',0):
                patches = self.get_abtest_value(test_name, key, {})
                if name in patches:
                    ret = ret.make_patched(patches[name])
        return ret

    def get_abtest_predicate(self, name):
        ret = gamedata['predicate_library'][name]
        key = 'predicate_library'
        for test_name, group in self.abtests.iteritems():
            if test_name in gamedata['abtests'] and \
               group in gamedata['abtests'][test_name]['groups'] and \
               gamedata['abtests'][test_name]['groups'][group].has_key(key) and \
               gamedata['abtests'][test_name]['active'] and \
               gamedata['abtests'][test_name]['groups'][group].get('patches_server_specs',0):
                patches = self.get_abtest_value(test_name, key, {})
                if name in patches:
                    ret = patches[name]
        return ret

    def get_abtest_consequent(self, name, fail_missing = True):
        ret = gamedata['consequent_library'].get(name, None) # ret can be None here!
        key = 'consequent_library'
        for test_name, group in self.abtests.iteritems():
            if test_name in gamedata['abtests'] and \
               group in gamedata['abtests'][test_name]['groups'] and \
               gamedata['abtests'][test_name]['groups'][group].has_key(key) and \
               gamedata['abtests'][test_name]['active'] and \
               gamedata['abtests'][test_name]['groups'][group].get('patches_server_specs',0):
                patches = self.get_abtest_value(test_name, key, {})
                if name in patches:
                    ret = patches[name]
        if (ret is None) and fail_missing:
            raise Exception('consequent not found: '+name)
        return ret

    def get_abtest_offer(self, name):
        return gamedata['offers'][name]

    def get_abtest_item(self, name):
        return gamedata['items'].get(name, None)
    def get_abtest_item_set(self, name):
        return gamedata['item_sets'].get(name, None)
    def get_abtest_aura(self, name):
        return gamedata['auras'].get(name, None)
    def get_abtest_region(self, name):
        return gamedata['regions'].get(name, None)
    def get_abtest_ai_base(self, user_id):
        return gamedata['ai_bases_server']['bases'].get(str(user_id), None)
    def get_abtest_title(self, name):
        return gamedata['titles'].get(name, None)
    def get_gamedata_var(self, name): # similar to get_abtest(), for use by Predicates, but does not support overrides
        v = gamedata
        for elem in name.split('.'):
            v = v[elem]
        return v

    # check for ANY active abtest group we're in that contains a value named 'key'
    # but, do NOT apply "default_group" behavior
    def get_any_abtest_value(self, key, default_value):
        for test_name, group in self.abtests.iteritems():
            if test_name in gamedata['abtests'] and \
               group in gamedata['abtests'][test_name]['groups'] and \
               gamedata['abtests'][test_name]['active'] and \
               gamedata['abtests'][test_name]['groups'][group].has_key(key):
                return gamedata['abtests'][test_name]['groups'][group][key]
        return default_value

    def get_absolute_time(self):
        if self.event_time_override is not None:
            cur_time = self.event_time_override
        else:
            cur_time = server_time
        return cur_time

    # Return the event_schedule entry for an event in progress
    def get_event_schedule(self, event_kind, event_name, ref_time, ignore_activation):
        assert event_kind in ('current_event', 'current_event_store', 'facebook_sale', 'bargain_sale',
                              'current_trophy_pve_challenge', 'current_trophy_pvp_challenge',
                              'current_stat_tournament')
        assert ref_time is not None

        # PvP-isolated players may not get trophies
        if self.isolate_pvp and ('trophy' in event_kind): return None

        extra_items = self.get_any_abtest_value('event_schedule', [])

        # note: event_schedule is assumed to be sorted in order of starting times
        for entry in (gamedata['event_schedule'] + extra_items):
            data = gamedata['events'].get(entry['name'], None)
            if not data: continue
            if ('kind' not in data) or (data['kind'] != event_kind): continue

            # first run of event starts at start_time and ends at end_time
            # if repeat_interval is specified, event re-runs at start_time + repeat_interval
            if entry['start_time'] > ref_time: continue # event is in the future
            if 'repeat_interval' in entry:
                delta = (ref_time - entry['start_time']) % entry['repeat_interval']
                if delta >= (entry['end_time'] - entry['start_time']): continue # we are between runs
            else:
                if entry['end_time'] <= ref_time: continue # event is in the past


            if (event_name and (entry['name'] != event_name)): continue
            if not ignore_activation:
                if ('activation' in entry) and (not Predicates.read_predicate(entry['activation']).is_satisfied(self, None)): continue
                if ('activation' in data) and (not Predicates.read_predicate(data['activation']).is_satisfied(self, None)): continue
            # match
            return entry

# XXX don't handle regional events anymore
#        if self.home_region in gamedata['regions']:
#            regional_event = gamedata['regions'][self.home_region].get('regional_event', None)
#            if regional_event == event_name:
#                return gamedata['events'][regional_event]

        return None

    def get_event_data(self, event_kind, event_name = None, ref_time = None, ignore_activation = False):
        if ref_time is None: ref_time = self.get_absolute_time()
        sched = self.get_event_schedule(event_kind, event_name, ref_time, ignore_activation)
        if sched:
            return gamedata['events'][sched['name']]
        return None

    def get_event_time(self, event_kind, event_name, method, ignore_activation = False, t_offset = 0):
        ref_time = self.get_absolute_time() + t_offset
        entry = self.get_event_schedule(event_kind, event_name, ref_time, ignore_activation)
        if not entry: return None

        if method == 'start': # time since start of current run
            if 'repeat_interval' in entry:
                return (ref_time - entry['start_time']) % entry['repeat_interval']
            else:
                return ref_time - entry['start_time']
        elif method == 'end': # negative time until end of current run
            if 'repeat_interval' in entry:
                delta = (ref_time - entry['start_time']) % entry['repeat_interval']
                return delta - (entry['end_time'] - entry['start_time'])
            else:
                return ref_time - entry['end_time']
        elif method == 'inprogress': # true if event is in progress, false if not
            if 'repeat_interval' in entry:
                if ref_time < entry['start_time']: return False
                delta = (ref_time - entry['start_time']) % entry['repeat_interval']
                return (delta < (entry['end_time'] - entry['start_time']))
            else:
                return (ref_time >= entry['start_time'] and ref_time < entry['end_time'])
        elif method == 'progress': # 0.0-1.0 progress during current run of event
            if 'repeat_interval' in entry:
                if ref_time < entry['start_time']: return 0
                delta = (ref_time - entry['start_time']) % entry['repeat_interval']
                if delta >= (entry['end_time'] - entry['start_time']): return 0
                return delta / float(entry['end_time']-entry['start_time'])
            else:
                if ref_time < entry['start_time']: return 0
                if ref_time >= entry['end_time']: return 0
                return (ref_time - entry['start_time'])/float(entry['end_time']-entry['start_time'])
        elif method == 'enabled':
            return True
        else:
            raise Exception('unknown method '+method)

    def foreman_is_busy(self):
        busy = 0

        for obj in self.home_base_iter():
            if obj.is_building():
                if obj.is_using_foreman():
                    busy += 1
                    if busy >= self.stattab.total_foremen:
                        return True

        return False

    def alliance_building_is_busy(self):
        alliance_building = self.find_object_by_type(gamedata['alliance_building'])
        if (not alliance_building) or alliance_building.is_under_construction() or alliance_building.is_upgrading() or alliance_building.is_damaged():
            return True
        return False

    def region_map_building_is_busy(self):
        region_map_building = self.find_object_by_type(gamedata['region_map_building'])
        if (not region_map_building) or \
           ((region_map_building.is_under_construction() or region_map_building.is_upgrading()) and (not self.get_any_abtest_value('region_map_available_during_transmitter_upgrade', gamedata['territory']['region_map_available_during_transmitter_upgrade']))) or \
           (region_map_building.is_damaged() and (not self.get_any_abtest_value('region_map_available_during_transmitter_repair', gamedata['territory']['region_map_available_during_transmitter_repair']))):
            return True
        return False
    def warehouse_is_busy(self):
         if self.get_any_abtest_value('enable_inventory', gamedata['enable_inventory']):
             warehouse = self.find_object_by_type(gamedata['inventory_building'])
             if (not warehouse) or \
                ((warehouse.is_under_construction() or warehouse.is_upgrading()) and (not self.get_any_abtest_value('inventory_available_during_warehouse_upgrade', gamedata.get('inventory_available_during_warehouse_upgrade',False)))) or \
                (warehouse.is_damaged() and (not self.get_any_abtest_value('inventory_available_during_warehouse_repair', gamedata.get('inventory_available_during_warehouse_repair',False)))):
                 return True
         return False
    def squad_bay_is_busy(self):
         if self.squads_enabled():
             bay = self.find_object_by_type(gamedata['squad_building'])
             if (not bay) or \
                ((bay.is_under_construction() or bay.is_upgrading()) and (not self.get_any_abtest_value('squads_available_during_squad_bay_upgrade', gamedata.get('squads_available_during_squad_bay_upgrade',0)))) or \
                (bay.is_damaged() and (not self.get_any_abtest_value('squads_available_during_squad_bay_repair', gamedata.get('squads_available_during_squad_bay_repair',0)))):
                 return True
         return False
    def lottery_is_busy(self, scanner):
         if self.get_any_abtest_value('enable_lottery', gamedata['enable_lottery']):
             if (not scanner) or \
                ((scanner.is_under_construction() or scanner.is_upgrading()) and (not self.get_any_abtest_value('lottery_available_during_scanner_upgrade', gamedata.get('lottery_available_during_scanner_upgrade',False)))) or \
                (scanner.is_damaged() and (not self.get_any_abtest_value('lottery_available_during_scanner_repair', gamedata.get('lottery_available_during_scanner_repair',False)))):
                 return True
         return False

    def find_object_by_type(self, specname): return self.my_home.find_object_by_type(specname)

    def find_lottery_building(self):
        for obj in self.home_base_iter():
            if obj.is_building() and obj.is_lottery_building():
                return obj
        return None
    def get_townhall_level(self): return self.my_home.get_townhall_level()
    def get_townhall_level_fast(self): return self.history.get(gamedata['townhall']+'_level', 1) # for analytics only - may be inaccurate

    # NOTE! unlike resources.calc_snapshot(), this function returns
    # the storage you'd have IF ALL STORAGE BUILDINGS WERE HEALTHY
    def get_max_storage(self):
        ret = dict((res,0) for res in gamedata['resources'])
        for obj in self.home_base_iter():
            if obj.is_building() and not obj.is_under_construction():
                for res in gamedata['resources']:
                    ret[res] += obj.get_leveled_quantity(getattr(obj.spec, 'storage_'+res))
        return ret

    def attackable_level_range(self, mode = None):
        attacker_level = self.level()

        if mode is None:
            if self.is_ladder_player():
                mode = 'ladder'
            else:
                mode = 'default'

        # game-global level gap table
        level_gap_table = gamedata['max_pvp_level_gap']

        # optional per-region override
        if self.home_region and (self.home_region in gamedata['regions']):
            level_gap_table = gamedata['regions'][self.home_region].get('max_pvp_level_gap', level_gap_table)

        lower_bound = _min_attackable_level(level_gap_table[mode], attacker_level)
        if gamedata.get('apply_pvp_level_gap_upward',False):
            # stupid algorithm, I know
            upper_bound = lower_bound
            while _min_attackable_level(level_gap_table[mode], upper_bound) <= attacker_level:
                upper_bound += 1
            if upper_bound > lower_bound: upper_bound -= 1
        else:
            upper_bound = -1
        return [lower_bound, upper_bound]

    def in_attackable_level_range(self, defender_level, mode = None):
        return in_level_range(defender_level, self.attackable_level_range(mode = mode))

    def level(self): return self.resources.player_level

    def get_achievement_points(self):
        total = 0
        for name in self.achievements:
            data = gamedata['achievements'].get(name, None)
            if data:
                total += data.get('achievement_points', 0)
        return total

    # the official way to get a player's current ladder point count
    def ladder_points(self): return self.get_master_score('trophies_pvp')
    def trophies_pvv(self): return self.get_master_score('trophies_pvv')
    def get_master_score(self, stat):
        return self.scores2.get(stat, self.scores2_ladder_master_point()) or 0

    # return number of non-destroyed buildings that can yield loot to an attacker
    def get_lootable_buildings(self):
        return sum([1 for obj in self.home_base_iter() if (obj.is_building() and (obj.is_storage() or obj.is_producer()) and (not obj.is_destroyed()))], 0)

    def query_suitable_ladder_match(self, exclude_user_ids = [], exclude_alliance_ids = [], trophy_range = None, townhall_range = None,
                                    min_trophies = None):
        # note: order of fields here is important for query speed
        mtime_filter = None

        if trophy_range or (min_trophies is not None):
            # note: SpinNoSQL translates this into a fake join on player score data - it's not really in player cache
            trophy_field = ('scores2', ('trophies_pvp', self.scores2_ladder_master_point()))

            if trophy_range:
                mycount = self.ladder_points()
                trophy_filter = [trophy_field, mycount - trophy_range[0], mycount + trophy_range[1]]
            else:
                trophy_filter = [trophy_field, -999999, 999999]

            if min_trophies is not None:
                trophy_filter[1] = max(trophy_filter[1], min_trophies) # adjust the min upwards

            trophy_filter_includes_zero = (trophy_filter[1] <= 0 and trophy_filter[2] >= 0)
        else:
            trophy_filter = None

        if townhall_range:
            gamesite.db_client.player_cache_create_index(gamedata['townhall']+'_level') # make sure there's an index
            mycount = self.get_townhall_level_fast()
            townhall_filter = [gamedata['townhall']+'_level', max(1, mycount - townhall_range[0]), max(1, mycount + townhall_range[1])]

            # any query that touches townhall 2 or below is considered "huge" because it's almost accept-all
            townhall_filter_is_huge = (townhall_filter[1] <= 2)

            # also see if we want to add an mtime filter
            if 'ladder_match_mtime_limit_by_townhall' in gamedata['matchmaking']:
                mtime_limit_table = gamedata['matchmaking']['ladder_match_mtime_limit_by_townhall']
                mtime_limit = mtime_limit_table[min(townhall_filter[1]-1, len(mtime_limit_table)-1)]
                if mtime_limit > 0:
                    mtime_filter = ['last_mtime', server_time - mtime_limit, server_time]

        query = []

        # if the trophy filter does NOT include players with 0 trophies, then it's almost a reject-all filter, so put at the beginning
        if (trophy_filter is not None) and (not trophy_filter_includes_zero):
            query.append(trophy_filter)

        if townhall_range and (not townhall_filter_is_huge):
            query.append(townhall_filter)

        if mtime_filter:
            query.append(mtime_filter)

        if not gamedata.get('ladder_pvp', False):
            query.append(['ladder_player',1,1])

        if (not gamedata['predicate_library']['pvp_requirement']['predicate'].startswith('ALWAYS_')):
            query.append(['pvp_player',1,1]) # after some transition time, this should be unnecessary, since ladder_player implies pvp_player

        level_range = [-1,9999]

        r = self.attackable_level_range(mode = 'ladder')
        if r[0] > 0: level_range[0] = max(level_range[0], r[0])
        if r[1] > 0: level_range[1] = min(level_range[1], r[1])

        if gamedata['matchmaking']['ladder_match_up_levels'] > 0:
            level_range[1] = min(level_range[1], self.level() + gamedata['matchmaking']['ladder_match_up_levels'])
        if gamedata['matchmaking']['ladder_match_down_levels'] > 0:
            level_range[0] = max(level_range[0], self.level() - gamedata['matchmaking']['ladder_match_down_levels'])

        if level_range[0] > 0 or level_range[1] < 9999:
            gamesite.db_client.player_cache_create_index('player_level') # make sure there's an index
            query.append(['player_level', level_range[0], level_range[1]])

        if gamedata.get('pvp_repair_on_victory', False) and gamedata.get('pvp_repair_on_defeat', False):
            # no need to query base damage, since there won't be any
            pass
        else:
            query += [['base_damage', 0, gamedata['matchmaking']['ladder_win_damage']-0.001], # note: missing (-1) data is treated as unsuitable
                      ['base_repair_time', -100, server_time],
                      ['lootable_buildings', 1, 9999]]

        if gamedata['starting_conditions'].get('tutorial_state', None) != 'COMPLETE':
            query += [['tutorial_complete',1,1]]

        query += [['protection_end_time', -100, server_time]]

        # if the trophy filter includes players with 0 trophies, then it's almost an accept-all filter, so put it at the end
        if (trophy_filter is not None) and trophy_filter_includes_zero:
            query.append(trophy_filter)

        if townhall_range and townhall_filter_is_huge:
            query.append(townhall_filter)

        query += [['LOCK_STATE', -1, 0], # not locked
                  ['isolate_pvp', -999, 0.1], # not isolated
                  ['user_id', self.user_id, self.user_id, '!in']] # don't fight yourself

        for aid in set(exclude_alliance_ids):
            # don't fight your own alliancemates
            query.append(['alliance_id', aid, aid, '!in'])
        for excl in set(exclude_user_ids):
            # don't fight previously-matched user(s)
            query.append(['user_id', excl, excl, '!in'])

        # don't fight people we have fatigue for
        for cdname, cdata in self.cooldowns.iteritems():
            if cdname.startswith('ladder_fatigue:') or \
               (cdname.startswith('battle_fatigue:') and (cdata.get('stack',1) >= gamedata['anti_bullying']['sandstorm_max_battle_fatigue'])):
                id = int(cdname.split(':')[1])
                query.append(['user_id', id, id, '!in'])

        # don't match AIs
        query.append(['facebook_id', '-1', '-1', '!in'])
        query.append(['social_id', 'ai', 'ai', '!in'])

        if gamedata['server']['log_ladder_pvp'] >= 3:
            start_time = time.time()
            gamesite.exception_log.event(server_time, 'find_suitable_ladder_match: %d query %s pool %d' %
                                         (self.user_id, repr(query), gamedata['matchmaking']['ladder_match_pool_size']))

        candidate_list = gamesite.db_client.player_cache_query_ladder_rival(query, gamedata['matchmaking']['ladder_match_pool_size'],
                                                                            randomize_quality = gamedata['matchmaking'].get('ladder_match_randomize_quality', 1),
                                                                            reason = 'ladder')

        # note: request more than 1 match, and shuffle, to get rid of repeats for non-evenly-distributed user_ids
        if len(candidate_list) > 1:
            random.shuffle(candidate_list)

        if gamedata['server']['log_ladder_pvp'] >= 3:
            end_time = time.time()
            gamesite.exception_log.event(server_time, 'find_suitable_ladder_match: %d %.0fms candidates %s' %
                                         (self.user_id, 1000.0*(end_time-start_time), repr(candidate_list)))

        id = candidate_list[0] if candidate_list else None
        return id

    @admin_stats.measure_latency('find_suitable_ladder_match')
    def find_suitable_ladder_match(self, exclude_user_ids = [], exclude_alliance_ids = []):
        id = None
        min_trophies = None
        if 'ladder_match_min_trophies' in gamedata['matchmaking']:
            min_trophies = Predicates.eval_cond_or_literal(gamedata['matchmaking']['ladder_match_min_trophies'], None, self)
        if gamedata['matchmaking']['ladder_match_by'] == 'trophies':
            for passnum in xrange(len(gamedata['matchmaking']['ladder_match_trophy_range'])):
                id = self.query_suitable_ladder_match(exclude_user_ids = exclude_user_ids, exclude_alliance_ids = exclude_alliance_ids,
                                                      min_trophies = min_trophies,
                                                      trophy_range = gamedata['matchmaking']['ladder_match_trophy_range'][passnum]) # note: may be None/null
                if id: break
        elif gamedata['matchmaking']['ladder_match_by'] == 'townhall':
            for passnum in xrange(len(gamedata['matchmaking']['ladder_match_townhall_range'])):
                id = self.query_suitable_ladder_match(exclude_user_ids = exclude_user_ids, exclude_alliance_ids = exclude_alliance_ids,
                                                      min_trophies = min_trophies,
                                                      townhall_range = gamedata['matchmaking']['ladder_match_townhall_range'][passnum]) # note: may be None/null
                if id: break
        else:
            raise Exception('unknown ladder_match_by method '+gamedata['matchmaking']['ladder_match_by'])
        return id

    @admin_stats.measure_latency('is_suitable_ladder_match')
    def is_suitable_ladder_match(self, other_id):
        if gamedata['anti_bullying']['enable_ladder_fatigue'] and self.cooldown_active('ladder_fatigue:%d' % other_id): return False
        if is_ai_user_id_range(other_id): return True

        data_list = gamesite.pcache_client.player_cache_lookup_batch([other_id],
                                                                     fields = ['player_level', 'LOCK_STATE', 'protection_end_time',
                                                                               'ladder_player', 'home_region', 'base_damage', 'base_repair_time',
                                                                               'lootable_buildings', 'tutorial_complete', gamedata['townhall']+'_level'],
                                                                     reason = '_is_suitable_ladder_match')
        if gamedata['server']['log_ladder_pvp'] >= 3:
            gamesite.exception_log.event(server_time, 'is_suitable_ladder_match: %d checking %d: %s' % \
                                         (self.user_id, other_id, repr(data_list)))

        if not data_list or len(data_list) < 1: return False
        data = data_list[0]

        if (not self.in_attackable_level_range(data.get('player_level',1), mode = 'ladder')): return False
        if (not gamedata['predicate_library']['pvp_requirement']['predicate'].startswith('ALWAYS_')):
            if (not data.get('pvp_player',0)): return False
        if (not gamedata.get('ladder_pvp', False)) and (not data.get('ladder_player',0)): return False
        if gamedata['matchmaking']['ladder_match_by'] == 'townhall' and (None not in gamedata['matchmaking']['ladder_match_townhall_range']):
            # level tolerance not implemented
            if data.get(gamedata['townhall']+'_level', 1) != self.get_townhall_level_fast(): return False
        if data.get('lootable_buildings',-1) < 1: return False
        if data.get('base_damage',1) >= gamedata['matchmaking']['ladder_win_damage']: return False
        if data.get('base_repair_time',-1) > server_time: return False
        if data.get('tutorial_complete',1) < 1: return False
        if data.get('protection_end_time',-1) > server_time: return False
        if data.get('LOCK_STATE',0) != 0: return False
        return True

    def create_ladder_state_points_scaled_by_trophy_delta(self, other_id, other_player, tbl):
        delta = other_player.ladder_points() - self.ladder_points()
        ret = {'points': {'victory': {str(self.user_id): min(max(int(tbl['attacker_victory']['base'] + delta * tbl['attacker_victory']['delta']), tbl['attacker_victory']['min']), tbl['attacker_victory']['max']),
                                      str(other_id):     min(max(int(tbl['defender_victory']['base'] - delta * tbl['defender_victory']['delta']), tbl['defender_victory']['min']), tbl['defender_victory']['max'])},
                          'defeat': {str(self.user_id):  max(min(int(tbl['attacker_defeat']['base'] + delta * tbl['attacker_defeat']['delta']), tbl['attacker_defeat']['min']), tbl['attacker_defeat']['max']),
                                     str(other_id):      max(min(int(tbl['defender_defeat']['base'] - delta * tbl['defender_defeat']['delta']), tbl['defender_defeat']['min']), tbl['defender_defeat']['max']),
                                     }}}
        for FIELD in ('protection_based_on','victory_condition'):
            if FIELD in tbl:
                ret[FIELD] = tbl[FIELD]
        return ret

    def create_ladder_state_points_constant(self, other_id, tbl):
        ret = {'points': {'victory': {str(self.user_id): tbl['attacker_victory'],
                                      str(other_id): tbl['defender_victory']},
                          'defeat': {str(self.user_id): tbl['attacker_defeat'],
                                     str(other_id): tbl['defender_defeat']}}}
        for FIELD in ('protection_based_on','victory_condition'):
            if FIELD in tbl:
                ret[FIELD] = tbl[FIELD]
        return ret

    @classmethod
    def scale_ladder_state_points(cls, scale_points, ret_points):
        for outcome, data in ret_points.iteritems():
            for sid, incr in data.iteritems():
                if incr > 0:
                    incr = max(int(scale_points*incr), 1)
                elif incr < 0:
                    incr = min(-int(scale_points*-incr), -1)
                data[sid] = incr

    def create_ladder_state(self, other_id, other_player, scale_points = 1, on_map = False):
        if other_player and (not other_player.is_ai()) and (gamedata['matchmaking']['ladder_point_incr_by_trophies'] or on_map):
            tbl = gamedata['matchmaking']['ladder_point_on_map_table' if on_map else 'ladder_point_incr_by_trophies_table']
            ret = self.create_ladder_state_points_scaled_by_trophy_delta(other_id, other_player, tbl)
            if on_map and self.home_region and (self.home_region in gamedata['regions']):
                scale_points *= gamedata['regions'][self.home_region].get('ladder_point_scale',1)
        else:
            if (other_player and other_player.is_ai()):
                tbl = gamedata['matchmaking']['ladder_point_incr_ai']
                for entry in gamedata['ai_bases_server']['ladder_pvp_bases']:
                    if entry['base_id'] == other_id:
                        tbl = entry.get('ladder_point_incr', tbl)
                        break
            else:
                tbl = gamedata['matchmaking']['ladder_point_incr']
            ret = self.create_ladder_state_points_constant(other_id, tbl)

        if scale_points != 1: self.scale_ladder_state_points(scale_points, ret['points'])
        return ret

    def num_quarries_controlled(self):
        if not self.home_region or not gamesite.nosql_client: return 0
        result = list(gamesite.nosql_client.get_map_features_by_landlord_and_type(self.home_region, self.user_id, 'quarry', reason='num_quarries_controlled'))
        return len(result)

    def is_pvp_player(self):
        return self.is_ai() or Predicates.read_predicate({'predicate':'LIBRARY', 'name':'pvp_requirement'}).is_satisfied(self, None)

    def is_ladder_player(self, ignore_global = False):
        if (not self.is_pvp_player()): return False
        if (not ignore_global) and gamedata.get('ladder_pvp',False): return True
        return bool(self.home_region and (self.home_region in gamedata['regions']) and gamedata['regions'][self.home_region].get('ladder_pvp',False))

    def is_legacy_pvp_player(self, ignore_global = False):
        if (not self.is_pvp_player()): return False
        if (not ignore_global):
            if ('legacy_pvp' in gamedata) and (not gamedata['legacy_pvp']): return False
        if (self.home_region and (self.home_region in gamedata['regions']) and (not gamedata['regions'][self.home_region].get('legacy_pvp',True))): return False
        return True

    def make_alliance_sticky(self, alliance_id):
        if alliance_id > 0 and gamedata['server']['alliance_stickiness'] > 0:
            self.cooldown_trigger('alliance_sticky:%d'%alliance_id, gamedata['server']['alliance_stickiness'])
    def get_sticky_alliances(self):
        if gamedata['server']['alliance_stickiness'] < 0: return []
        ret = []
        for key, val in self.cooldowns.iteritems():
            if key.startswith('alliance_sticky:') and val['end'] > server_time:
                ret.append(int(key.split(':')[1]))
        return ret

    def is_same_alliance(self, other_player_id):
        if gamesite.sql_client:
            my_alliance_id, other_alliance_id = gamesite.sql_client.get_users_alliance([self.user_id, other_player_id], reason = 'is_same_alliance')
            if my_alliance_id > 0 and my_alliance_id == other_alliance_id:
                return True
        return False

    def is_same_alliance_sticky(self, other_player):
        # check if same alliance, and at the same time, establish stickiness
        my_alliance_id, other_alliance_id = gamesite.sql_client.get_users_alliance([self.user_id, other_player.user_id], reason = 'is_same_alliance_sticky')
        if my_alliance_id > 0:
            self.make_alliance_sticky(my_alliance_id)
        my_alliances = set(self.get_sticky_alliances())
        other_alliances = set(other_player.get_sticky_alliances())
        if my_alliance_id > 0: my_alliances.add(my_alliance_id)
        if other_alliance_id > 0: other_alliances.add(other_alliance_id)
        return bool(my_alliances.intersection(other_alliances)), my_alliances, other_alliances

    def can_spy_despite_map_violation(self, self_user, other_player_id, other_social_id):
        if gamedata['ladder_pvp']: return True # no regional map
        if self.is_developer(): return True
        if self_user.is_friends_with(other_social_id): return True
        if self.is_same_alliance(other_player_id): return True
        return False

    def can_spy_on_home(self, self_user, dest_player, dest_social_id, new_ladder_state, new_deployable_squads):
        if (dest_player is self) or dest_player.is_ai(): return (True, None)
        if new_ladder_state or self.can_take_ladder_revenge(dest_player): return (True, None)
        if self.is_legacy_pvp_player() and (not dest_player.is_legacy_pvp_player()):
            if (not self.can_spy_despite_map_violation(self_user, dest_player.user_id, dest_social_id)):
                return (False, "CANNOT_SPY_MAP_THEM")
        elif (not self.is_legacy_pvp_player()) and dest_player.is_legacy_pvp_player():
            if (not self.can_spy_despite_map_violation(self_user, dest_player.user_id, dest_social_id)):
                return (False, "CANNOT_SPY_MAP_YOU")
        elif (not self.is_legacy_pvp_player()) and (not dest_player.is_legacy_pvp_player()) and \
             ((len(new_deployable_squads) < 1) or (len(new_deployable_squads) == 1 and new_deployable_squads.values()[0]['squad_id']==SQUAD_IDS.BASE_DEFENDERS)):
            # cannot use session.using_squad_deployment() because we haven't set session.deployable_squads yet
            if (not self.can_spy_despite_map_violation(self_user, dest_player.user_id, dest_social_id)):
                return (False, "CANNOT_SPY_MAP_BOTH")
        return (True, None)

    def can_take_ladder_revenge(self, other_player):
        return self.is_ladder_player() and other_player.is_ladder_player() and (not other_player.is_ai()) and \
               self.cooldown_active('revenge_defender:%d' % other_player.user_id) and \
               other_player.my_home.calc_base_damage() < gamedata['matchmaking']['ladder_win_damage']

    def can_ladder_battle_on_map(self, other_player):
        if (not ((self.home_region in gamedata['regions']) and \
                 ('ladder_on_map_if' in gamedata['regions'][self.home_region]) and \
                 Predicates.read_predicate(gamedata['regions'][self.home_region]['ladder_on_map_if']).is_satisfied(self, None))): return False
        if other_player.has_damage_protection(): return False
        apply_level_limit = True
        if (self.home_region in gamedata['regions']) and (not gamedata['regions'][self.home_region].get('enable_pvp_level_gap', True)):
            apply_level_limit = False
        if apply_level_limit and \
           (not self.in_attackable_level_range(other_player.level(), mode = 'default')) and \
           (not self.cooldown_active('revenge_defender:%d' % other_player.user_id)): return False
        if self.cooldown_active('ladder_fatigue:%d' % other_player.user_id): return False
        if other_player.my_home.calc_base_damage() >= gamedata['matchmaking']['ladder_win_damage']: return False
        if self.is_same_alliance_sticky(other_player)[0]: return False
        if self.is_alt_account_unladderable(other_player): return False
        if (self.home_region in gamedata['regions']) and \
           ('ladder_on_map_if_defender' in gamedata['regions'][self.home_region]) and \
           (not Predicates.read_predicate(gamedata['regions'][self.home_region]['ladder_on_map_if_defender']).is_satisfied(other_player, None)): return False
        return True

    def get_pvp_balance(self, other_player, base):
        if other_player.is_ai(): return None
        my_level = self.resources.player_level
        his_level = other_player.resources.player_level

        my_level_range = self.attackable_level_range()

        if gamedata['prevent_same_alliance_attacks'] and \
           self.is_same_alliance(other_player.user_id):
            return 'same_alliance'

        elif (base is not other_player.my_home):
            # quarry/squad - no limit
            return None

        elif (self.home_region in gamedata['regions']) and (not gamedata['regions'][self.home_region].get('enable_pvp_level_gap', True)):
            # region has no limits
            return None

        elif (gamedata['matchmaking']['revenge_time'] > 0) and self.cooldown_active('revenge_defender:%d' % other_player.user_id):
            # revenge - no limit
            return None

        elif (my_level_range[0]>=0) and (his_level < my_level_range[0]):
            # we are much stronger
            return 'player'

        elif (my_level_range[1]>=0) and (his_level > my_level_range[1]):
            # we are much weaker - prevent attack
            return 'enemy_strict'

        elif my_level < other_player.attackable_level_range()[0]:
            # we are much weaker - allow attack, but warn
            return 'enemy'

        else:
            # equal strength
            return None

    def ladder_point_decay_check(self, session, retmsg, base_damage = None, base_repair_time = None):
        if base_damage is not None: assert base_repair_time is not None # must be given together

        mode = gamedata['matchmaking'].get('ladder_point_decay_mode', 'damage')
        assert mode in ('damage', 'protection')
        pred = gamedata['matchmaking'].get('ladder_point_decay_if', None)
        pred_ok = (pred and Predicates.read_predicate(pred).is_satisfied(self, None))

        # apply effects of existing decay aura
        if pred_ok:
            for aura in self.player_auras:
                if aura['spec'] == 'trophy_pvp_decay':
                    elapsed = server_time - aura['start_time']
                    # note: aura['end_time'] may be -1 or missing for damaged-and-not-yet-repairing bases

                    # legacy compatibility
                    if ('data' in aura) and aura['data'].get('base_repair_time',-1) >= aura['start_time']:
                        elapsed = min(elapsed, aura['data']['base_repair_time'] - aura['start_time'])

                    # limit by end_time
                    elif aura.get('end_time',-1) >= server_time and aura['end_time'] >= aura['start_time']:
                        elapsed = min(elapsed, aura['end_time'] - aura['start_time'])

                    if elapsed > 0:
                        # exponential decay constant
                        decay_k = -math.log(2)/gamedata['matchmaking'].get('ladder_point_decay_halflife', 86400)
                        self.modify_scores({'trophies_pvp':0}, method = 'decay', trophy_decay_k = decay_k, trophy_decay_elapsed = elapsed, reason = 'ladder_point_decay_check')
                        aura['start_time'] += elapsed # reset start time

        # check if decay aura should be applied
        decay = False
        end_time = -1

        if pred_ok:
            if mode == 'damage':
                if base_damage is None:
                    base_damage, base_repair_time = self.my_home.calc_base_damage_and_repair_time()
                if base_damage >= gamedata['matchmaking']['ladder_win_damage']:
                    decay = True; end_time = base_repair_time
            elif mode == 'protection':
                decay = self.has_damage_protection(); end_time = self.resources.protection_end_time

        if decay:
            if self.apply_aura('trophy_pvp_decay', duration = (end_time - server_time) if (end_time > 0) else -1, ignore_limit = True) and (retmsg is not None):
                retmsg.append(["PLAYER_AURAS_UPDATE" if self is session.player else "ENEMY_AURAS_UPDATE", self.player_auras])
        else:
            self.remove_aura(session, retmsg, 'trophy_pvp_decay', force = True)

    def unit_donation_enabled(self):
        return self.get_any_abtest_value('enable_unit_donation', gamedata['enable_unit_donation'])

    def make_donated_unit(self, specname, level = None):
        # generate bogus ID, ensuring this won't be written to MongoDB
        obj_id = 'DONATED-'+gamesite.nosql_id_generator.generate()
        ret = {'obj_id': obj_id, 'spec': specname, 'source':'donated'}
        if level is not None: ret['level'] = level
        return ret

    def add_donated_unit(self, *args, **kwargs):
        new_entry = self.make_donated_unit(*args, **kwargs)
        self.donated_units[new_entry['obj_id']] = new_entry

    def donated_units_space(self):
        consumes_space = 0
        for item in self.donated_units.itervalues():
            stack = item.get('stack',1)
            consumes_space += stack * GameObjectSpec.get_leveled_quantity(gamedata['units'][item['spec']]['consumes_space'], item.get('level',1))
        return consumes_space

    # this awkwardly has to work in the PlayerTable.parse() code by mutating the player and then returning the argument, to be assigned again
    def load_tech_and_init_stattab(self, observer, tech):
        self.tech = tech
        self.recalc_stattab(observer)
        return tech
    def load_auras_and_init_stattab(self, observer, auras):
        self.player_auras = auras
        self.recalc_stattab(observer)
        return auras

    def recalc_stattab(self, observer, additional_base = None):
        self.stattab = Player.Stattab(self, observer, additional_base)

    # stattab is a cache of the values that can be affected by the player's tech and auras
    # not persistent, this is regenerated dynamically
    class Stattab (AbstractPlayer.AbstractStattab):
        RESURRECT_NEVER = 1
        RESURRECT_AND_REPAIR_WITH_TECH = 2
        RESURRECT_AND_REPAIR_ALWAYS = 10

        def apply_modstat_to_player(self, stat, method, strength, kind, source, props = None):
            assert stat in self.player_stats
            self.player_stats[stat] = ModChain.add_mod(self.player_stats[stat], method, strength, kind, source, props)

        def apply_modstat_to_building(self, obj, stat, method, strength, kind, source, props = None):
            if stat not in obj.modstats:
                base_value = ModChain.get_base_value(stat, obj.spec, obj.level)
                obj.modstats[stat] = ModChain.make_chain(base_value, {'level':obj.level})
            obj.modstats[stat] = ModChain.add_mod(obj.modstats[stat], method, strength, kind, source, props)
            self.modded_buildings[obj.obj_id] = obj

            # manufacturing-related stats need to flow through transitively to the units this building can work on
            if obj.spec.manufacture_category and (stat in ('unit_repair_speed', 'unit_repair_cost',
                                                           'manufacture_speed', 'manufacture_cost')):
                self.apply_modstat_to_manufacture_category(obj.spec.manufacture_category, {'unit_repair_speed':'repair_speed',
                                                                                           'unit_repair_cost':'repair_cost'}.get(stat,stat), method,
                                                           strength, kind, source, props = props)

        # apply modstat to all units in a specific manufacture category
        # category can be "ALL" to apply to all (unlocked) units
        def apply_modstat_to_manufacture_category(self, category, stat, method, strength, kind, source, props = None):
            for unit_name, unit_spec in gamedata['units'].iteritems():
                if (category == 'ALL') or (unit_spec['manufacture_category'] == category):
                    if (self.player.is_ai() or self.player.tech.get(unit_spec['level_determined_by_tech'],0) > 0) or (stat == 'resurrection'): # special case
                        self.apply_modstat_to_unit(unit_name, stat, method, strength, kind, source, props)

        def apply_modstat_to_unit(self, specname, stat, method, strength, kind, source, props = None):
            if specname not in self.units:
                self.units[specname] = {}
            if stat not in self.units[specname]:
                spec = self.observer.get_abtest_spec(GameObjectSpec, specname)
                prod_level = self.player.tech.get(spec.level_determined_by_tech, 1)
                base_value = ModChain.get_base_value(stat, spec, prod_level)
                self.units[specname][stat] = ModChain.make_chain(base_value, {'level':prod_level})
            self.units[specname][stat] = ModChain.add_mod(self.units[specname][stat], method, strength, kind, source, props)

        def add_set_item(self, item_spec):
            if not item_spec: return
            set_name = item_spec.get('item_set', None)
            if not set_name: return
            if set_name not in self.item_sets: self.item_sets[set_name] = set()
            self.item_sets[set_name].add(item_spec.get('item_set_member', item_spec['name']))

            # apply set-bonus aura
            set_spec = gamedata['item_sets'][set_name]
            if 'bonus_aura' in set_spec:
                has_n = len(self.item_sets[set_name])
                aura_name = set_spec['bonus_aura'][has_n-1]
                if aura_name and (aura_name in gamedata['auras']):
                    self.player.do_apply_aura(aura_name, ignore_limit = True) # stack = has_n?

        # we have to modify get_leveled_quantity() since "concat" values are lists
        @staticmethod
        def get_modstat_strength(effect, level):
            if effect['method'] == 'concat':
                assert type(effect['strength']) is list and len(effect['strength']) >= 1
                if type(effect['strength'][0]) is not list:
                    return effect['strength']
                else:
                    return GameObjectSpec.get_leveled_quantity(effect['strength'], level)
            else:
                return GameObjectSpec.get_leveled_quantity(effect['strength'], level)

        def __init__(self, player, observer, additional_base = None):
            assert additional_base is not player.my_home # avoid accidentally iterating twice through home
            self.modded_buildings = {}
            self.state_changed_buildings = set()

            self.units = {}
            self.player_stats = {
                'foreman_speed': ModChain.make_chain(1),
                'loot_factor_pvp': ModChain.make_chain(1),
                'loot_factor_pve': ModChain.make_chain(1),
                'loot_factor_tokens': ModChain.make_chain(1),
                'quarry_yield_bonus': ModChain.make_chain(1),
                'turf_quarry_yield_bonus': ModChain.make_chain(1),
                'travel_speed': ModChain.make_chain(1),
                'combat_time_scale': ModChain.make_chain(1),
                'chat_template': ModChain.make_chain('default'),
                'chat_gagged': ModChain.make_chain(0)
                }
            self.item_sets = {}
            self.limited_equipped = {}

            self.player = player
            self.player.stattab = self # must set immediately here so that predicates will work below

            self.observer = observer # A/B test observer

            self.player.prune_player_auras(is_recalc_stattab = True)

            # check for item set completion
            for item in self.player.equipped_item_iter():
                self.add_set_item(gamedata['items'].get(item['spec'], None))
            if gamedata['count_unequipped_items_in_sets']:
                for item in self.player.stored_item_iter():
                    self.add_set_item(gamedata['items'].get(item['spec'], None))

            # clear out building modstats and calculate effects of local building equipment
            base_iterator = itertools.chain(player.home_base_iter(), additional_base.iter_objects()) if additional_base else player.home_base_iter()
            for obj in base_iterator:
                if obj.is_building():
                    # reset modstats
                    if obj.modstats: obj.modstats = {}
                    if ((not obj.spec.worth_less_xp) or obj.spec.equip_slots):
                        # apply local building equipment
                        for item in Equipment.equip_iter(obj.equipment):
                            if item['spec'] in gamedata['items']:
                                equip = gamedata['items'][item['spec']]
                                level = item.get('level', equip.get('level',1))
                                effects = equip['equip']['effects']
                                for i in xrange(len(effects)):
                                    effect = effects[i]
                                    if (not 'apply_if' in effect) or Predicates.read_predicate(effect['apply_if']).is_satisfied(self.player, None):
                                        if effect['code'] == 'modstat':
                                            strength = self.get_modstat_strength(effect, level)
                                            self.apply_modstat_to_building(obj, effect['stat'], effect['method'], strength, 'equipment', equip['name'], {'effect':i, 'level':level})
                                        elif effect['code'] == 'apply_player_aura':
                                            strength = GameObjectSpec.get_leveled_quantity(effect.get('aura_strength',1), level)
                                            if 'aura_level' in effect:
                                                aura_level = GameObjectSpec.get_leveled_quantity(effect.get('aura_level',1), level)
                                            else:
                                                aura_level = level # same level as item
                                            player.do_apply_aura(effect['aura_name'], strength = strength, duration = -1, level = aura_level,
                                                                 stack = effect.get('stack',-1), data = effect.get('data',None), ignore_limit = True)

            # calculate effect of techs
            for tech_name, level in player.tech.iteritems():
                if not tech_name: continue
                if tech_name not in gamedata['tech']:
                    # skip unknown techs
                    if tech_name == 'anti_rover_mines':
                        continue # WSE mistake
                    if (not is_ai_user_id_range(player.user_id)) or (not tech_name.endswith('_anti_ice')):
                        gamesite.exception_log.event(server_time, 'player %d has unknown tech "%s", ignoring' % (player.user_id, tech_name))
                    continue

                tech_spec = observer.get_abtest_spec(TechSpec, tech_name)
                if tech_spec.effects:
                    for effect in tech_spec.effects:
                        if effect['code'] == 'modstat':
                            if (not 'apply_if' in effect) or Predicates.read_predicate(effect['apply_if']).is_satisfied(self.player, None):
                                strength = self.get_modstat_strength(effect, level)
                                if tech_spec.affects_unit:
                                    self.apply_modstat_to_unit(tech_spec.affects_unit, effect['stat'], effect['method'], strength, 'tech', tech_name, {'level':level})
                                elif tech_spec.affects_manufacture_category:
                                    self.apply_modstat_to_manufacture_category(tech_spec.affects_manufacture_category, effect['stat'], effect['method'], strength, 'tech', tech_name, {'level':level})


            # calculate effects of unit equipment
            for name, equipment in player.unit_equipment.iteritems():
                for item in Equipment.equip_iter(equipment):
                    item_spec = gamedata['items'].get(item['spec'], None)
                    if not item_spec or ('equip' not in item_spec): continue # skip invalid specs
                    effects = item_spec['equip']['effects']
                    level = item.get('level',1)
                    for i in xrange(len(effects)):
                        effect = effects[i]
                        if effect['code'] == 'modstat':
                            if (not 'apply_if' in effect) or Predicates.read_predicate(effect['apply_if']).is_satisfied(self.player, None):
                                strength = self.get_modstat_strength(effect, level)
                                self.apply_modstat_to_unit(name, effect['stat'], effect['method'], strength, 'equipment', item_spec['name'], {'effect':i, 'level':level})

            self.quarry_control_limit = 0

            self.max_squads = 0 # max number of mobile squads NOT counting base_defenders or reserves
            self.max_deployed_squads = 0 # max number of deployed mobile squads
            self.squad_space = 0 # max space for a mobile squad
            self.main_squad_space = 0 # max space for base_defenders
            self.total_space = 0 # max space for all of the player's units
            self.total_foremen = 0 # max number of foremen
            use_squads = player.squads_enabled()

            # calculate unit space and unit repair speeds
            # also look for and apply permanent auras
            for obj in player.home_base_iter():
                if obj.is_building() and (not obj.spec.worth_less_xp):
                    if use_squads:
                        self.max_squads += obj.get_leveled_quantity(obj.spec.provides_squads)
                        self.max_deployed_squads += obj.get_leveled_quantity(obj.spec.provides_deployed_squads)
                        self.squad_space += obj.get_leveled_quantity(obj.spec.provides_squad_space)
                        self.total_space += obj.get_leveled_quantity(obj.spec.provides_total_space)

                    self.main_squad_space += obj.get_leveled_quantity(obj.spec.provides_space)
                    if obj.spec.manufacture_category:
                        if obj.spec.unit_repair_speed:
                            self.apply_modstat_to_manufacture_category(obj.spec.manufacture_category, 'repair_speed', '*=(1+strength)',
                                                                       obj.get_stat('unit_repair_speed', obj.get_leveled_quantity(obj.spec.unit_repair_speed)) - 1.0,
                                                                       'building', obj.spec.name, {'level': obj.level})
                        if obj.spec.manufacture_speed:
                            self.apply_modstat_to_manufacture_category(obj.spec.manufacture_category, 'manufacture_speed', '*=(1+strength)',
                                                                       obj.get_stat('manufacture_speed', obj.get_leveled_quantity(obj.spec.manufacture_speed)) - 1.0,
                                                                       'building', obj.spec.name, {'level': obj.level})
                    self.quarry_control_limit += obj.get_leveled_quantity(obj.spec.provides_quarry_control)

                    self.total_foremen += obj.get_leveled_quantity(obj.spec.provides_foremen)

                    if obj.spec.provides_limited_equipped:
                        for tag, num in obj.spec.provides_limited_equipped.iteritems():
                            if tag not in self.limited_equipped: self.limited_equipped[tag] = 0
                            self.limited_equipped[tag] += obj.get_leveled_quantity(num)

                    if obj.auras is not None:
                        Aura.prune_auras(obj.auras, is_stattab_refresh = True)
                        if len(obj.auras) == 0: obj.auras = None

                    # do not look in obj.spec for permanent auras, since those are handled when the object is instantiated
                    permanent_auras = obj.get_stat('permanent_auras', None)
                    if permanent_auras:
                        if obj.auras is None: obj.auras = []
                        for data in permanent_auras:
                            Aura.apply_aura(obj.auras, data['aura_name'], data.get('aura_strength',1), from_stattab = True)

            # even when squads are off, make sure total_space is enough for the whole of base defenders
            self.total_space = max(self.total_space, self.main_squad_space)

            # make sure that players always have at least one foreman, even in weird cases
            self.total_foremen = max(self.total_foremen, 1)

            self.player_stats['deployable_unit_space'] = ModChain.make_chain(int(self.main_squad_space * observer.get_any_abtest_value('deployable_unit_space', gamedata['deployable_unit_space'])))

            self.travel_speed = 1
            self.sandstorm_max = 0

            # calculate effects of player auras

            for aura in player.player_auras:
                if aura['spec'] not in gamedata['auras']:
                    gamesite.exception_log.event(server_time, 'player %d has unrecognized aura %s' % (player.user_id, aura['spec']))
                    continue
                spec = gamedata['auras'][aura['spec']]
                if not spec.get('server', False): continue
                level = aura.get('level',1)

                if 'effects' in spec: # new-style auras
                    for effect in spec['effects']:
                        if ('apply_if' in effect) and (not Predicates.read_predicate(effect['apply_if']).is_satisfied(self.player, None)): continue
                        end_time = aura.get('end_time',-1)
                        if end_time > 0 or level != 1:
                            props = {}
                            if end_time > 0: props['end_time'] = end_time
                            if level != 1: props['level'] = level
                        else:
                            props = None

                        if effect['code'] == 'modstat':
                            # usually we get the strength from the aura, but optionally override from the effect spec
                            if 'strength_per_stack' in effect:
                                strength = effect['strength_per_stack']*aura.get('stack',1)
                            elif 'strength' in effect:
                                strength = self.get_modstat_strength(effect, level)
                            else:
                                strength = aura.get('strength',1)

                            affects_units = effect.get('affects_unit', spec.get('affects_unit', None))
                            if affects_units and type(affects_units) is not list:
                                affects_units = [affects_units,] # single unit

                            affects_buildings = effect.get('affects_building', spec.get('affects_building', None))
                            if affects_buildings and type(affects_buildings) is not list:
                                affects_buildings = [affects_buildings,]
                            affects_manufacture_category = effect.get('affects_manufacture_category', spec.get('affects_manufacture_category', None))
                            affects_kind = effect.get('affects_kind', spec.get('affects_kind', None))
                            affects = effect.get('affects', spec.get('affects', None))

                            if affects_units and ('ALL' in affects_units):
                                affects_units = None
                                affects_manufacture_category = 'ALL' # affect all units
                            if affects_kind in ('mobile','ALL'):
                                affects_manufacture_category = 'ALL' # affect all units

                            if affects_units:
                                for unit in affects_units:
                                    self.apply_modstat_to_unit(unit, effect['stat'], effect['method'], strength, 'aura', spec['name'], props)

                            if affects_buildings:
                                for obj in self.player.home_base_iter():
                                    if obj.is_building() and obj.spec.name in affects_buildings:
                                        self.apply_modstat_to_building(obj, effect['stat'], effect['method'], strength, 'aura', spec['name'], props)
                                        if obj.is_producer():
                                            obj.update_production(player, player.my_home.base_type, player.my_home.base_region, compute_power_factor(player.my_home.get_power_state()))
                                            self.state_changed_buildings.add(obj)

                            if affects_manufacture_category:
                                self.apply_modstat_to_manufacture_category(affects_manufacture_category, effect['stat'], effect['method'], strength, 'aura', spec['name'], props)
                            if affects_kind in ('building', 'ALL'):
                                # apply to all buildings (except worth-less-xp ones)
                                for obj in self.player.home_base_iter():
                                    if obj.is_building() and (not obj.spec.worth_less_xp):
                                        self.apply_modstat_to_building(obj, effect['stat'], effect['method'], strength, 'aura', spec['name'], props)

                            if affects == "player":
                                self.apply_modstat_to_player(effect['stat'], effect['method'], strength, 'aura', spec['name'], props)

                        # a few special-case codes for things that are not really player-visible modded stats
                        elif effect['code'] == 'hold_unit_space':
                            self.total_space -= aura.get('stack',1)
                            self.main_squad_space -= aura.get('stack',1)

                        elif effect['code'] == 'sandstorm_max':
                            self.sandstorm_max = 1

        def get_player_stat(self, stat):
            return ModChain.get_stat(self.player_stats[stat], None)
        def get_unit_stat(self, specname, stat, default_value):
            d = self.units.get(specname, None)
            if d:
                return ModChain.get_stat(d.get(stat, None), default_value)
            return default_value

        def serialize(self):
            return {
                    'max_squads': self.max_squads,
                    'max_deployed_squads': self.max_deployed_squads,
                    'squad_space': self.squad_space,
                    'main_squad_space': self.main_squad_space,
                    'total_space': self.total_space,
                    'quarry_control_limit': self.quarry_control_limit,
                    'total_foremen': self.total_foremen,

                    'player': self.player_stats,
                    'units': self.units,
                    'buildings': dict([(obj.obj_id, obj.modstats) for obj in self.modded_buildings.itervalues()]),
                    'item_sets': dict([(name, len(val)) for name, val in self.item_sets.iteritems()]),
                    'limited_equipped': self.limited_equipped
                    }
        def send_update(self, session, retmsg):
            assert self.player in (session.player, session.viewing_player)
            retmsg.append(["PLAYER_STATTAB_UPDATE" if self.player is session.player else "ENEMY_STATTAB_UPDATE", self.serialize()])
            retmsg.append(["PLAYER_AURAS_UPDATE" if self.player is session.player else "ENEMY_AURAS_UPDATE", self.player.player_auras])
            for obj in self.state_changed_buildings:
                if session.has_object(obj.obj_id):
                    retmsg.append(["OBJECT_STATE_UPDATE2", obj.serialize_state()])

    # raise the level/auras of all units affected by tech_name to the current tech level
    def update_unit_levels(self, observer, tech_name, session, retmsg):
        level = self.tech.get(tech_name, 1)
        state_updates = []
        for obj in self.home_base_iter():
            if obj.is_building() and obj.is_manufacturing():
                for item in obj.manuf_queue:
                    spec = self.get_abtest_spec(GameObjectSpec, item['spec_name'])
                    if spec.level_determined_by_tech == tech_name:
                        item['level'] = level
                if session.has_object(obj.obj_id): state_updates.append(obj)
            elif obj.is_mobile():
                if obj.spec.level_determined_by_tech == tech_name:
                    obj.change_level(max(obj.level, level))
                    if session.has_object(obj.obj_id): state_updates.append(obj)

        res = self.resources.calc_snapshot().serialize()
        for obj in state_updates: retmsg.append(["OBJECT_STATE_UPDATE", obj.serialize_state(), res])

    def space_required_for_units(self, units):
        total = 0
        for name, data in units.iteritems():
            if type(data) is int:
                qty = data
                min_level = 1
            else:
                qty = data.get('qty',1)
                min_level = data.get('min_level',1)

            spec = self.get_abtest_spec(GameObjectSpec, name)
            level = max(min_level, self.tech.get(spec.level_determined_by_tech, 1))
            space = spec.get_leveled_quantity(spec.consumes_space, level)
            total += qty * space
        return total

    # auto-level structures and units in the AI base relative to the progress of the human player passed in
    def auto_level_ai(self, human):
        cache = {} # cache of the levels to assign to each building (since computing them is slow)
        powerplants = [] # list of power-generating buildings
        to_remove = [] # list of objects to remove from the base

        # check every object in the base
        for obj in self.home_base_iter():

            # if "force_level" is found in the JSON, then use that level
            if obj.force_ai_level is not None:
                # set the object's level immediately
                obj.change_level(max(1, min(obj.force_ai_level, obj.spec.maxlevel)))
                continue

            level = -1

            # remember all powerplants
            if obj.get_leveled_quantity(obj.spec.provides_power) > 0:
                powerplants.append(obj)

            # check for this type of building in the ai_bases.json:auto_level tables
            # if found, then use the level from the table
            if obj.spec.name in gamedata['ai_bases_server']['auto_level']:
                ls = gamedata['ai_bases_server']['auto_level'][obj.spec.name]
                # note: table is indexed by the AI's "player_level"
                index = min(self.resources.player_level-1, len(ls)-1)
                level = ls[index]

            # for mobile units, set the level to one level below the player's own research level for this unit
            elif obj.is_mobile():
                tech_name = obj.spec.level_determined_by_tech
                if tech_name in human.tech and human.tech[tech_name] > 1:
                    level = human.tech[tech_name]-1

            elif obj.is_building():
                # for buildings, set the level to one level below the player's highest building of this type
                if obj.spec.name not in cache:
                    highest = -1
                    for h in human.home_base_iter():
                        if h.spec.name == obj.spec.name:
                            highest = max(highest, h.level)
                    if highest > 1:
                        cache[obj.spec.name] = highest-1
                    else:
                        cache[obj.spec.name] = -1
                level = cache[obj.spec.name]

            # set the object's level
            if level != -1:
                obj.change_level(max(1, min(level, obj.spec.maxlevel)))

        # remove any unwanted objects from the base
        for obj in to_remove:
            self.my_home.drop_object(obj)

        # now the buildings have been leveled up. The base might be in a low-power state!
        # automatically increase powerplant levels as necessary to make sure the base
        # is fully powered
        if len(powerplants) > 0:
            # while base does not have 100%+ power
            while compute_power_factor(self.my_home.get_power_state()) < 1:
                incr = False
                for obj in powerplants:
                    if obj.level >= obj.spec.maxlevel:
                        # can't go up any more levels
                        pass
                    else:
                        # increase the level of this powerplant by 1
                        incr = True
                        obj.change_level(obj.level+1)
                if not incr:
                    # no more powerplants to upgrade
                    break

    # new score system

    # which continent are we in (or which one would we be in, if we aren't on the map for some reason)
    def home_continent(self):
        if self.home_region and self.home_region in gamedata['regions']:
            return gamedata['regions'][self.home_region]['continent_id'] # map takes precedence

        # fall back to default assignment
        return Predicates.eval_cond_or_literal(gamedata['continent_assignment'], None, self) # predicates shouldn't need session access here

    # return space scope and location of the widest space the player should see on the leaderboard (continent or ALL)
    def scores2_wide_space(self):
        if self.leaderboard_override:
            if self.leaderboard_override.endswith('ALL'):
                return (Scores2.SPACE_ALL, Scores2.SPACE_ALL_LOC)
            elif self.leaderboard_override.endswith('continent'):
                cont = self.home_continent()
                assert cont
                return (Scores2.SPACE_CONTINENT, cont)
        elif gamedata['matchmaking'].get('scores2_wide_space','ALL') == 'continent':
            cont = self.home_continent()
            assert cont
            return (Scores2.SPACE_CONTINENT, cont)
        return (Scores2.SPACE_ALL, Scores2.SPACE_ALL_LOC)

    # return time/space location of the "master" PvP ladder point value that should be used for matchmaking and competition purposes
    def scores2_ladder_master_point(self):
        time_scope = {'week': Scores2.FREQ_WEEK, 'season': Scores2.FREQ_SEASON}[gamedata['matchmaking']['ladder_point_frequency']]
        time_loc = Scores2.make_time_coords(self.get_absolute_time(),
                                            SpinConfig.get_pvp_season(gamedata['matchmaking']['season_starts'], self.get_absolute_time()),
                                            SpinConfig.get_pvp_week(gamedata['matchmaking']['week_origin'], self.get_absolute_time()),
                                            SpinConfig.get_pvp_day(gamedata['matchmaking']['week_origin'], self.get_absolute_time()))[time_scope]
        space_scope, space_loc = self.scores2_wide_space()
        return Scores2.make_point(time_scope, time_loc, space_scope, space_loc)

    # translate client-side stat name and period to the precise server-side Scores2 (stat,(scope,loc)) coordinates for scores2 lookup
    def scores2_query_addr(self, client_name, period, region = None, time_loc = None):
        entry = SCORE_FIELDS[client_name]
        if period == 'week':
            time_scope = Scores2.FREQ_WEEK
            if time_loc is None:
                time_loc = SpinConfig.get_pvp_week(gamedata['matchmaking']['week_origin'], self.get_absolute_time())
        elif period == 'season':
            time_scope = Scores2.FREQ_SEASON
            if time_loc is None:
                time_loc = SpinConfig.get_pvp_season(gamedata['matchmaking']['season_starts'], self.get_absolute_time())
        elif period == 'ALL':
            time_scope = Scores2.FREQ_ALL
            time_loc = 0
        else: raise Exception('unhandled period '+period)
        if region and entry.get('region_specific', False) and entry.get('leaderboard_query_is_region_specific', True):
            space_scope = Scores2.SPACE_REGION
            space_loc = region
        else:
            space_scope, space_loc = self.scores2_wide_space()
        return (client_name, Scores2.make_point(time_scope, time_loc, space_scope, space_loc))

    # increment score counters, where "stats" is like {"xp": 35, "trophies_pvp": -2, ...}
    def modify_scores(self, stats, reason='', method = '+=', trophy_decay_k = 0, trophy_decay_elapsed = 0):
        time_coords = Scores2.make_time_coords(self.get_absolute_time(),
                                               SpinConfig.get_pvp_season(gamedata['matchmaking']['season_starts'], self.get_absolute_time()),
                                               SpinConfig.get_pvp_week(gamedata['matchmaking']['week_origin'], self.get_absolute_time()),
                                               SpinConfig.get_pvp_day(gamedata['matchmaking']['week_origin'], self.get_absolute_time()))

        # look for an ongoing stat tournament
        event_data = self.get_event_data('current_stat_tournament')
        if event_data:
            event_stat_name = event_data['stat']['name']
        else:
            event_stat_name = None

        any_changed = False

        for name, value in stats.iteritems():

            if name.startswith('trophies_'):
                kind = name[9:12]; assert kind in ('pve','pvp','pvv')
                floor = gamedata['trophy_floor'].get(kind,0)
                affects_alliance = True
                if trophy_decay_k != 0:
                    assert method == 'decay'
                    assert value == 0

                # first set the one point that represents our "master" trophies value, and read it back
                value = self.scores2.set_point(name, value, self.scores2_ladder_master_point(), method = method, floor = floor, decay_kt = trophy_decay_k * trophy_decay_elapsed, affects_alliance = affects_alliance)

                # then overwrite all other spaces/times with the same value
                if value is None: continue # nothing new was recorded - don't write zeros

                # record peak value in player history (for quests etc)
                dict_setmax(self.history, 'peak_trophies_'+kind, value)

                stat_method = '='
                space_coords = Scores2.make_space_coords(self.home_continent(), self.home_region) # do write personal regional score, but it won't get propagated to alliance

            else:
                floor = None
                affects_alliance = (name == event_stat_name) # record current stat tournament alliance scores
                space_coords = Scores2.make_space_coords(self.home_continent(), self.home_region)
                stat_method = method

            any_changed |= self.scores2.set(name, value, time_coords, space_coords, method = stat_method, floor = floor, affects_alliance = affects_alliance)

        self.publish_scores(reason = 'modify_scores')
        return any_changed

    def publish_scores(self, alliance_id = None, reason=''):
        if self.history.get('scores2_migration',0) < SCORES2_MIGRATION_VERSION: return

        # force publish of all scores?
        do_all = self.history.get('scores2_publish_refresh',-1) < gamedata['server'].get('scores2_publish_refresh',-1)
        if do_all:
            it = self.scores2.all_iter()
            event_data = self.get_event_data('current_stat_tournament')
            if event_data:
                event_stat_name = event_data['stat']['name']
            else:
                event_stat_name = None
            it_a = filter(lambda x: x['stat'].startswith('trophies_') or x['stat'] == event_stat_name, it)
        else:
            it = self.scores2.dirty_iter()
            it_a = self.scores2.dirty_alliance_iter()

        reason = 'publish_scores(%s,%s)' % ('full' if do_all else 'incr', reason)

        if it:
            gamesite.mongo_scores2_client.player_scores2_write(self.user_id, it)

        if it_a:
            # recache alliance scores
            if alliance_id is None: alliance_id = gamesite.sql_client.get_users_alliance(self.user_id, reason = reason)
            if alliance_id > 0:
                self.update_alliance_score_cache2(alliance_id, it_a = it_a, reason = reason)

        self.scores2.dirty_clear()
        if do_all and gamedata['server'].get('scores2_publish_refresh',-1) >= 0:
            self.history['scores2_publish_refresh'] = server_time

        if (do_all or it or it_a) and (gamedata['server'].get('log_scores2',0) >= 3):
            gamesite.exception_log.event(server_time, 'player %d %s' % (self.user_id, reason))

    # this gets called when leaving/joining an alliance, to update affected scores
    def update_alliance_score_cache(self, alliance_id, alliance_info = None, reason=''):
        # scores1 API is obsolete now
        self.update_alliance_score_cache2(alliance_id, alliance_info = alliance_info, it_a = None, reason = reason)

    def update_alliance_score_cache2(self, alliance_id, alliance_info = None, it_a = None, reason=''):
        assert alliance_id > 0
        if self.history.get('scores2_migration',0) < SCORES2_MIGRATION_VERSION: return

        if it_a is None:
            # look for an ongoing stat tournament
            event_data = self.get_event_data('current_stat_tournament')
            if event_data:
                event_stat_name = event_data['stat']['name']
            else:
                event_stat_name = None
            it_a = filter(lambda item: item['stat'].startswith('trophies_') or (event_stat_name and (item['stat'] == event_stat_name)), self.scores2.all_iter())

        # do not cache alliance scores regionally
        if it_a:
            it_a = filter(lambda item: item['axes']['space'][0] != Scores2.SPACE_REGION, it_a)

        # do not perform weighted updates on historical scores, only presently-valid scores
        if it_a:
            current_time_coords = Scores2.make_time_coords(self.get_absolute_time(),
                                                           SpinConfig.get_pvp_season(gamedata['matchmaking']['season_starts'], self.get_absolute_time()),
                                                           SpinConfig.get_pvp_week(gamedata['matchmaking']['week_origin'], self.get_absolute_time()),
                                                           SpinConfig.get_pvp_day(gamedata['matchmaking']['week_origin'], self.get_absolute_time()))

            it_a = filter(lambda item: item['axes']['time'][1] >= current_time_coords[item['axes']['time'][0]], it_a)

        # restrict update to only alliance's designated continent
        if it_a:
            if alliance_info is None:
                alliance_info = gamesite.sql_client.get_alliance_info(alliance_id, reason = 'update_alliance_score_cache2')
            allow_continent = alliance_info.get('continent', None)
            it_a = filter(lambda item: item['axes']['space'][0] != Scores2.SPACE_CONTINENT or (allow_continent and item['axes']['space'][1] == allow_continent), it_a)

        if it_a:
            gamesite.mongo_scores2_client.alliance_scores2_update_weighted(alliance_id, it_a,
                                                                           gamedata['alliances']['trophy_weights'][0:gamedata['alliances']['max_members']],
                                                                           {'trophies_pvp':gamedata['trophy_display_offset']['pvp'],
                                                                            'trophies_pve':gamedata['trophy_display_offset']['pve'],
                                                                            'trophies_pvv':gamedata['trophy_display_offset'].get('pvv',0)},
                                                                           reason = reason)

    # after a battle, stick the summary info into self.battle_history and increment history/time series counters
    # works for both attacking and defending
    def append_battle_summary(self, session, opponent_id, summary):
        if summary['attacker_id'] == self.user_id:
            myrole = 'attacker'
            oprole = 'defender'
        elif summary['defender_id'] == self.user_id:
            myrole = 'defender'
            oprole = 'attacker'
        else:
            gamesite.exception_log.event(server_time, 'append_battle_summary: %d is neither defender %d nor attacker %d!' % \
                                         (self.user_id, summary['defender_id'], summary['attacker_id']))
            return

        opponent_type = 'ai' if summary.get(oprole+'_is_ai', False) else 'human'

        # create/update entry in self.battle_history
        if gamedata['battle_log_max_age'] > 0:
            key = str(opponent_id)
            if not self.battle_history.has_key(key):
                self.battle_history[key] = {}
            hist = self.battle_history[key]
            hist['last_time'] = summary.get('time', server_time)

            dict_increment(hist, 'count', 1)

            # update victory/defeat and defense_victory/defense_defeat counters
            if (summary.get('base_type','home') == 'home'):
                dict_increment(hist, summary[myrole+'_outcome'], 1)
                if myrole == 'defender':
                    dict_increment(hist, 'defense_'+summary[myrole+'_outcome'], 1)

            # append summary to self.battle_history.summary
            if not hist.has_key('summary'):
                hist['summary'] = []
            sumlist = hist['summary']
            # prune old entries
            while len(sumlist) > gamedata['battle_log_max_summary_num']:
                sumlist.pop(0)
            while len(sumlist) > 0 and (server_time - sumlist[0]['time']) > gamedata['battle_log_max_summary_age']:
                sumlist.pop(0)
            sumlist.append(summary)

        # update history counters/time series
        if myrole == 'attacker':
            session.increment_player_metric('attacks_'+summary[myrole+'_outcome'], 1, time_series = False)
            session.increment_player_metric('attacks_'+summary[myrole+'_outcome']+'_vs_'+opponent_type, 1, time_series = False)
        elif myrole == 'defender':
            if (('base_id' not in summary) or (summary['base_id'] == home_base_id(self.user_id))): # no quarries
                if opponent_type == 'human':
                    session.increment_player_metric('attacks_suffered', 1) # note! only includes PvP, not PvE!
                elif opponent_type == 'ai':
                    session.increment_player_metric('ai_attacks_suffered', 1)
                    if str(summary.get('attack_type','')).startswith('daily'):
                        session.increment_player_metric('daily_attacks_suffered', 1)

        loot = summary.get('loot', {})

        # update loot/steal counters
        resc_total = 0
        loot_verb = '_looted' if (myrole == 'attacker') else '_stolen'
        loot_prep = '_from_' if (myrole == 'attacker') else '_by_'
        loot_type = '' if (myrole == 'attacker') else '_lost'

        for resc in gamedata['resources']:
            amount = loot.get(resc+loot_type,0)
            resc_total += amount
            session.increment_player_metric(resc+loot_verb, amount, time_series = False)
            session.increment_player_metric(resc+loot_verb+loot_prep+opponent_type, amount, time_series = False)
        session.increment_player_metric('resources'+loot_verb, resc_total, time_series = False)
        session.increment_player_metric('resources'+loot_verb+loot_prep+opponent_type, resc_total, time_series = False)

        # update unit/buildings kill/loss counters
        lost_verb = '_lost' if (myrole == 'attacker') else '_killed'
        killed_verb = '_killed' if (myrole == 'attacker') else '_lost'

        session.increment_player_metric('units_killed', sum(loot.get('units'+killed_verb, {}).itervalues()), time_series = False)
        session.increment_player_metric('units_lost', sum(loot.get('units'+lost_verb, {}).itervalues()), time_series = False)

        for spec_name, count in loot.get('units'+killed_verb, {}).iteritems():
            session.increment_player_metric('unit:'+spec_name+':killed', count, time_series = False)

        for spec_name, count in loot.get('units'+lost_verb, {}).iteritems():
            session.increment_player_metric('unit:'+spec_name+':lost', count, time_series = False)

        for spec_name, count in loot.get('buildings'+killed_verb, {}).iteritems():
            session.increment_player_metric('building:'+spec_name+':killed', count, time_series = False)
            if GameObjectSpec.exists(spec_name):
                spec = GameObjectSpec.lookup(spec_name)
                if spec.history_category:
                    session.increment_player_metric(spec.history_category+'_killed', count, time_series = False)

        for spec_name, count in loot.get('buildings'+lost_verb, {}).iteritems():
            session.increment_player_metric('building:'+spec_name+':lost', count, time_series = False)
            if GameObjectSpec.exists(spec_name):
                spec = GameObjectSpec.lookup(spec_name)
                if spec.history_category:
                    session.increment_player_metric(spec.history_category+'_lost', count, time_series = False)


    # for legacy reasons, the data sent for "You've been attacked" messages is slightly different
    # from the battle history summary format. This converts from history summary to the you've-been-attacked format.
    @classmethod
    def battle_summary_to_recent_attack(cls, summary):
        ret = {'time':summary['time'],
               'attacker_user_id':summary['attacker_id'],
               'attacker_facebook_id':summary['attacker_facebook_id'],
               'attacker_name':summary['attacker_name'],
               'attacker_level':summary['attacker_level'],
               'defender_outcome':summary['defender_outcome'],
               'base_id': summary['base_id'],
               'base_ncells': summary['base_ncells'],
               'base_damage': summary['base_damage'],
               'deployed_units': summary.get('deployed_units',{}),
               'lost_units':sum(summary['loot'].get('units_killed', {}).itervalues()),
               'killed_units':sum(summary['loot'].get('units_lost', {}).itervalues()),
               'defender_xp':summary['loot'].get('defender_xp', 0),
               'viewing_trophies_pvp':summary['loot'].get('viewing_trophies_pvp',0),
               'viewing_trophies_pvv':summary['loot'].get('viewing_trophies_pvv',0),
               'replay_version':summary.get('replay_version', None),

               # begin migration to unify player.recent_attacks to standard battle summary format
               'attacker_id': summary['attacker_id'],
               'loot': summary['loot'],
               'defender_id': summary['defender_id'],
               }
        for res in gamedata['resources']:
            ret['lost_'+res] = summary['loot'].get(res+'_lost',0)
            ret['killed_units_'+res] = summary['loot'].get('units_lost_'+res,0)
        if 'defender_protection_expired_at' in summary:
            ret['defender_protection_expired_at'] = summary['defender_protection_expired_at']
        return ret

    def migrate_proxy(self):
        # migrate base_size from playerdb to basedb
        self.my_home.base_size = max(self.my_home.base_size, self.resources.OLD_base_size)

        # migrate scenery if regional map tile changed, or if young player's home climate no longer matches the default
        new_climate = None
        scenery_seed = None
        if self.is_human():
            if self.my_home.base_region:
                if self.my_home.base_region in gamedata['regions'] and self.my_home.base_map_loc:
                    region = Region(gamedata, self.my_home.base_region)
                    new_climate = region.read_climate_name(self.my_home.base_map_loc)
                    scenery_seed = self.user_id + self.my_home.base_map_loc[0] + region.dimensions()[0]*self.my_home.base_map_loc[1]
            else: # not on map yet
                if ('default_player_home_climate' in gamedata):
                    new_climate = gamedata['default_player_home_climate']
                    scenery_seed = self.user_id

        if new_climate and (self.my_home.base_climate != new_climate):
            self.my_home.base_climate = new_climate
            self.my_home.spawn_scenery(self, scenery_seed, overwrite = True)

        # fix bad techs
        if ('' in self.tech):
            del self.tech['']

        # donated_units list -> dict migration
        if type(self.donated_units) is list:
            new_donated_units = {}
            for entry in self.donated_units:
                for i in xrange(entry.get('stack',1)):
                    new_entry = self.make_donated_unit(entry['spec'], level = entry.get('level',None))
                    new_donated_units[new_entry['obj_id']] = new_entry
            self.donated_units = new_donated_units

        # do per-object migrations here
        to_delete = []
        for obj in self.home_base_iter():
            # destroy all repair droids
            if obj.is_mobile() and obj.spec.name == 'repair_droid':
                to_delete.append(obj)

            # remove invalid objects from manufacturing queues
            if obj.is_building() and obj.is_manufacturer():
                to_remove = []
                for item in obj.manuf_queue:
                    if item['spec_name'] not in gamedata['units']:
                        to_remove.append(item)
                for item in to_remove:
                    obj.manuf_queue.remove(item)

            # find any objects with invalid squad ids
            if obj.is_mobile() and SQUAD_IDS.is_mobile_squad_id(obj.squad_id) and (str(obj.squad_id) not in self.squads):
                self.unit_repair_cancel(obj)
                obj.squad_id = SQUAD_IDS.RESERVES # reassign to reserves

            # bring unit levels up to player tech level
            if obj.is_mobile(): obj.ensure_level(self.tech.get(obj.spec.level_determined_by_tech, 1))


        if to_delete:
            for obj in to_delete:
                self.home_base_remove(obj)

        # unit_repair_queue migration
        give_free_repair = False
        to_remove = []

        # revise start/end times for units in the repair queue, to account for
        # specs that have changed while the player was logged out

        prev_finish_time = server_time - 2 # to allow finish_time to be equal to (server_time - 1) and still have a nonzero start-end interval

        for item in self.unit_repair_queue:
            if 'tag' in item:
                # legacy repair queue - just dump it all and give free repairs
                give_free_repair = True
                break

            obj = self.get_object_by_obj_id(item['obj_id'], fail_missing = False)
            if (not obj):
                to_remove.append(item)
                continue

            if gamedata['server'].get('rewrite_unit_repair_queue_on_login', True):
                progress = float(server_time - item['start_time'])/max(item['finish_time']-item['start_time'],1)
                progress = min(max(progress, 0.0), 1.0)
                obj.hp = int(item['original_hp'] + progress * (obj.max_hp-item['original_hp']) + 0.5)
                if obj.hp < obj.max_hp:
                    rep_time = obj.time_to_repair(self) # will be at least 1
                else:
                    rep_time = 0
                # rewrite repair queue entry as if it started at prev_finish_time with object at its current HP
                # note! finish_time-start_time must NOT be zero, since other code divides by it
                item['original_hp'] = obj.hp
                item['start_time'] = prev_finish_time
                item['finish_time'] = int(prev_finish_time + max(1,rep_time))
                # note: rep_time may be zero, and in that case we want prev_finish_time NOT to advance for the next entry
                prev_finish_time = int(prev_finish_time + rep_time)

        for item in to_remove:
            self.unit_repair_queue.remove(item)

        if give_free_repair:
            for obj in self.home_base_iter():
                if obj.is_mobile() and obj.owner is self:
                    obj.heal_to_full()
            self.unit_repair_queue = []

        self.migrate_scores2()

    # migrate score counters from the old player.history['score_xp_s3'] = 123 counters to the new Scores2 system
    def migrate_scores2(self):
        if self.is_ai(): return
        if self.history.get('scores2_migration',0) >= SCORES2_MIGRATION_VERSION: return

        creation_week = SpinConfig.get_pvp_week(gamedata['matchmaking']['week_origin'], self.creation_time)
        my_continent = self.home_continent()

        self.scores2.clear()

        for stat, data in SCORE_FIELDS.iteritems(): # for each tracked legacy stat
            prefix = data['history_prefix']
            if stat.endswith('_global'): continue # these are computed by summing region-specific values

            if stat.startswith('trophies_'):
                affects_alliance = True
                space_accum = lambda x,y: max(x,y) # space accumulator - higher wins
                time_accum = lambda x,y: y # time accumulator - later wins
                # "tiebreaker" used when season and week aggregates disagree
                tiebreaker = lambda s,w: {'week':w, 'season':s}[gamedata['matchmaking']['ladder_point_frequency']] # tiebreaker - current frequency wins
            else:
                affects_alliance = False
                space_accum = lambda x,y: x+y # space accumulator - add
                time_accum = lambda x,y: x+y # time accumulator - add
                tiebreaker = lambda s,w: max(s,w) # tiebreaker - higher wins

            if data.get('region_specific', False):
                region_ids = gamedata['regions'].keys()
            else:
                region_ids = [None]

            # for each season
            region_total_s = {}
            total_s = 0
            for season in xrange(0, len(gamedata['matchmaking']['season_starts'])+1):
                season_total = 0
                for region_id in region_ids:
                    key = prefix + (('_%s' % region_id) if region_id else '') + ('_s%d' % season)
                    if self.history.get(key, 0) != 0:
                        season_total = space_accum(season_total, self.history[key])
                        total_s = time_accum(total_s, self.history[key])
                        if region_id:
                            region_total_s[region_id] = time_accum(region_total_s.get(region_id, 0), self.history[key])
                            # per-season / per-region
                            self.scores2.set(stat, self.history[key], {Scores2.FREQ_SEASON: season}, {Scores2.SPACE_REGION: region_id}, method = '=', affects_alliance = affects_alliance)
                if season_total != 0:
                    # per-season / all regions
                    if my_continent:
                        self.scores2.set(stat, season_total, {Scores2.FREQ_SEASON: season}, {Scores2.SPACE_CONTINENT: my_continent}, method = '=', affects_alliance = affects_alliance)
                    self.scores2.set(stat, season_total, {Scores2.FREQ_SEASON: season}, {Scores2.SPACE_ALL: Scores2.SPACE_ALL_LOC}, method = '=', affects_alliance = affects_alliance)

            # for each week
            region_total_w = {}
            total_w = 0
            for week in xrange(creation_week, SpinConfig.get_pvp_week(gamedata['matchmaking']['week_origin'], server_time)+1):
                week_total = 0
                for region_id in region_ids:
                    key = prefix + (('_%s' % region_id) if region_id else '') + ('_wk%d' % week)
                    if self.history.get(key, 0) != 0:
                        week_total = space_accum(week_total, self.history[key])
                        total_w = time_accum(total_w, self.history[key])
                        if region_id:
                            region_total_w[region_id] = time_accum(region_total_w.get(region_id, 0), self.history[key])
                            # per-week / per-region
                            self.scores2.set(stat, self.history[key], {Scores2.FREQ_WEEK: week}, {Scores2.SPACE_REGION: region_id}, method = '=', affects_alliance = affects_alliance)
                if week_total != 0:
                    # per-week / all regions
                    if my_continent:
                        self.scores2.set(stat, week_total, {Scores2.FREQ_WEEK: week}, {Scores2.SPACE_CONTINENT: my_continent}, method = '=', affects_alliance = affects_alliance)
                    self.scores2.set(stat, week_total, {Scores2.FREQ_WEEK: week}, {Scores2.SPACE_ALL: Scores2.SPACE_ALL_LOC}, method = '=', affects_alliance = affects_alliance)

            # all-time / per-region
            if data.get('region_specific', False):
                for region_id in region_ids:
                    s = region_total_s.get(region_id,0)
                    w = region_total_w.get(region_id,0)
                    if s != 0 or w != 0:
#                        if s != w and gamedata['server'].get('log_scores2',0) >= 2:
#                            gamesite.exception_log.event(server_time, 'player %d Scores2 migration: region %s stat %s s %d != w %d' % (self.user_id, region_id, stat, s, w))
                        self.scores2.set(stat, tiebreaker(s, w), {Scores2.FREQ_ALL: 0}, {Scores2.SPACE_REGION: region_id}, method = '=', affects_alliance = affects_alliance)

            # all-time / all regions
            if total_s != 0 or total_w != 0:
#                if total_s != total_w and gamedata['server'].get('log_scores2',0) >= 2:
#                    gamesite.exception_log.event(server_time, 'player %d Scores2 migration: stat %s total_s %d != total_w %d' % (self.user_id, stat, total_s, total_w))
                if my_continent:
                    self.scores2.set(stat, tiebreaker(total_s, total_w), {Scores2.FREQ_ALL: 0}, {Scores2.SPACE_CONTINENT: my_continent}, method = '=', affects_alliance = affects_alliance)
                self.scores2.set(stat, tiebreaker(total_s, total_w), {Scores2.FREQ_ALL: 0}, {Scores2.SPACE_ALL: Scores2.SPACE_ALL_LOC}, method = '=', affects_alliance = affects_alliance)

        if gamedata['server'].get('log_scores2',0) >= 3:
            msg = 'player %d Scores2 migration done' % self.user_id
            if gamedata['server'].get('log_scores2',0) >= 4:
                msg += ':\n%s' % ('\n'.join(map(lambda x: repr(x[1]), sorted(self.scores2.scores.items()))))
            gamesite.exception_log.event(server_time, msg)

        # note: if we're being loaded as a PvP opponent, this migration might happen more than once
        self.history['scores2_migration'] = SCORES2_MIGRATION_VERSION # mark as migrated

    def has_damage_protection(self): return self.resources.protection_end_time > server_time

    def set_protection_end_time(self, session, new_end_time, event_name, extra_event_props = None):
        old_end_time = self.resources.protection_end_time

        if event_name:
            props = {'prev_end_time': old_end_time, 'new_end_time': new_end_time, 'count': self.protection_attack_count}
            if new_end_time > server_time: props['prot_time'] = new_end_time - server_time
            if extra_event_props: props.update(extra_event_props)
            self.record_protection_event(event_name, props)

        self.resources.protection_end_time = new_end_time

        was_active = (old_end_time > server_time)
        is_active = (new_end_time > server_time)

        if was_active != is_active:
            self.protection_attack_count = 0

        # perform external updates
        is_changed = (was_active != is_active) or (is_active and (new_end_time != old_end_time))

        if is_changed and session:
            if self.prune_player_auras():
                session.send([["PLAYER_AURAS_UPDATE" if self is session.player else "ENEMY_AURAS_UPDATE", self.player_auras]])

            gamesite.pcache_client.player_cache_update(self.user_id, {'protection_end_time': new_end_time if new_end_time > server_time else None}, reason = 'set_protection_end_time')

            if self.is_on_map():
                gamesite.nosql_client.update_map_feature(self.my_home.base_region, self.my_home.base_id, {'protection_end_time': new_end_time if new_end_time > server_time else None}, reason = 'set_protection_end_time')

            if (self is session.player): # only run for connected player
                session.deferred_ladder_point_decay_check = True
                session.deferred_player_state_update = True
                session.deferred_stattab_update = True

    def record_protection_event(self, event_name, props):
        if not gamedata['server']['record_protection_history']: return

        # record in playerdb
        if 'protection_history' not in self.history: self.history['protection_history'] = []
        entry = props.copy()
        entry['event'] = event_name
        entry['time'] = server_time
        self.history['protection_history'].append(entry)
        max_age = gamedata['server'].get('record_protection_history_max_age', 30*24*60*60)
        self.history['protection_history'] = filter(lambda x: server_time - x.get('time',0) < max_age, self.history['protection_history'])

        # record metric event
        metric_props = props.copy()
        metric_props['sum'] = self.get_denormalized_summary_props('brief')
        if 'new_end_time' in props:
            if props['new_end_time'] > 0:
                metric_props['delta'] = props['new_end_time'] - max(props['prev_end_time'], server_time)
            else: # lost protection
                metric_props['delta'] = -1 * (max(props['prev_end_time'], server_time) - server_time)
        metric_event_coded(self.user_id, event_name, metric_props)

    def record_ladder_pvp_event(self, event_name, props):
        props['sum'] = self.get_denormalized_summary_props('brief')
        metric_event_coded(self.user_id, event_name, props)

    # log items entering or leaving player inventory
    # item_stack can be positive (item entering inventory) or negative (item exiting inventory)
    def inventory_log_event(self, event_name, item_specname, item_stack, expire_time, level=None, reason=None):
        if not event_name: return
        if item_stack == 0: return
        if not gamedata['server'].get('log_inventory', True): return
        props = {'spec': item_specname, 'stack': item_stack}
        if level is not None: props['level'] = level
        if expire_time and expire_time > 0: props['expire_time'] = expire_time
        if reason: props['reason'] = reason
        props['sum'] = self.get_denormalized_summary_props('brief')
        metric_event_coded(self.user_id, event_name, props)

    def send_fb_notification(self, user, text, config, force = False):
        if not user.facebook_id: return # not on Facebook

        if (not self.has_write_lock):
            gamesite.exception_log.event(server_time, 'attempt to send_fb_notification without write lock! %d' % self.user_id)
            return


        if (not self.get_any_abtest_value('enable_fb_notifications', gamedata['enable_fb_notifications'])):
            return

        if self.player_preferences and type(self.player_preferences) is dict:
            if (not self.player_preferences.get('enable_fb_notifications', gamedata['strings']['settings']['enable_fb_notifications']['default_val'])): # XXX doesn't handle predicate chains
                return

        elder = (len(self.history.get('sessions', [])) >= gamedata['fb_notifications']['elder_threshold'])
        if (elder and (not config.get('enable_elder', True))) or \
           ((not elder) and (not config.get('enable_newbie', True))):
            return

        if (not force):
            # do not send notification if one has already been sent since the last logout
            last_logout = -1
            if 'sessions' in self.history and len(self.history['sessions']) > 0:
                last_logout = self.history['sessions'][-1][1]
            if last_logout < 0 or self.last_fb_notification_time > last_logout:
                return

            # do not send notification if one was sent since min_minterval ago
            # note: config-specific min_interval overrides the global one here, unlike in retention_newbie.py
            if (server_time - self.last_fb_notification_time) < config.get('min_interval', gamedata['fb_notifications']['min_interval']):
                return

        if gamedata['fb_notifications']['elder_suffix'] and config.get('elder_suffix',True):
            fb_ref = config['ref'] + ('_e' if elder else '_n')
        else:
            fb_ref = config['ref']

        if self.do_send_fb_notification_to(user.facebook_id, text, config, fb_ref):
            self.last_fb_notification_time = server_time
            dict_increment(self.history, 'fb_notifications_sent', 1)
            dict_increment(self.history, 'fb_notification:'+config['ref']+':sent', 1)

    def do_send_fb_notification_to(self, to_facebook_id, text, config, fb_ref):
        # see http://developers.facebook.com/docs/app_notifications/
        # config["ref"] = our internal ref parameter
        # "fb_ref" = the "ref" URL parameter to send to Facebook - may include _e/_n suffix

        # deal with Unicode garbage
        try:
            text = text.encode('utf-8')
        except:
            return False

        params = {'access_token': SpinConfig.config['facebook_app_access_token'],
                  'href': '',
                  'ref': fb_ref,
                  'template': text }
        query = urllib.urlencode(params)
        url = SpinFacebook.versioned_graph_endpoint('notification', str(to_facebook_id)+'/notifications')

        if not SpinConfig.config['enable_facebook']:
            gamesite.exception_log.event(server_time, 'Facebook disabled: do_send_fb_notification(POST %s query %s)' % (url, query))
            return False
        gamesite.AsyncHTTP_Facebook.queue_request(server_time, url, lambda result: None, method = 'POST', postdata = query)
        metric_event_coded(self.user_id, '7130_fb_notification_sent', {'sum': self.get_denormalized_summary_props('brief'),
                                                                       'ref': config['ref'],
                                                                       'fb_ref': fb_ref})
        return True

    def send_fb_score_update(self, facebook_id, value):
        assert self.has_write_lock
        if (server_time - self.last_fb_score_update) < gamedata['fb_scores']['min_interval']:
            return
        if (not self.get_any_abtest_value('enable_fb_scores', gamedata['enable_fb_scores'])):
            return
        if gamedata['fb_scores'].get('check_permissions', True) and \
           (not (self.facebook_permissions and ('publish_actions' in self.facebook_permissions))):
            return

        self.last_fb_score_update = server_time
        params = {'access_token': SpinConfig.config['facebook_app_access_token'],
                  'score': str(value) }
        query = urllib.urlencode(params)
        url = SpinFacebook.versioned_graph_endpoint('score', str(facebook_id)+'/scores')
        if SpinConfig.config['enable_facebook']:
            gamesite.AsyncHTTP_Facebook.queue_request(server_time, url, lambda result: None, method = 'POST', postdata = query, max_tries = 1)
        else:
            gamesite.exception_log.event(server_time, 'Facebook disabled: send_fb_score_update(POST %s query %s)' % (url, query))

    # return just enough data about this player to build a SQL summary table without referencing upcache
    def get_denormalized_summary_props(self, format):
        assert format == 'brief'
        ret = {'plat': self.frame_platform,
               'cc': self.get_townhall_level_fast(),
               'rcpt': self.history.get('money_spent', 0),
               'ct': self.country,
               'tier': self.country_tier}
        if self.developer: ret['developer'] = self.developer # also insert "developer" flag here in case ETL scripts want to ignore these
        return ret

    def alt_record_attack(self, other): pass

# these are proxy "stubs" that represent players OTHER than the one playing the game
# (e.g., other players whose bases you visit or attack)

class ProxyPlayer(Player): pass

# LivePlayer is used for the "self" player that users are logged in as.
# By putting functions that should only be called for logged-in players here,
# we can catch any mistakes where an attempt is made to call them on
# non-logged-in players.

class LivePlayer(Player):
    def __init__(self, user_id):
        super(LivePlayer,self).__init__(user_id)

        # these fields are DUPLICATES of the corresponding User fields,
        # set during the login process.
        # necessary for evaluating predicates that depend on them
        self.browser_name = 'unknown'
        self.browser_os = 'unknown'
        self.browser_version = 'unknown'
        self.browser_hardware = 'unknown'
        self.browser_caps = {}

        # this is a "cross" pointer to the User's facebook likes,
        # added so that Predicates have access to them
        self.user_facebook_likes = None # set during login

        self.flash_offer = None # current offer we are giving the player (entry in gamedata['offers'], valid for the session only)
        self.reset()

    def reset(self):
        super(LivePlayer,self).reset()

        # developer access - ignore resource limits and time delays
        self.is_cheater = False

    def unit_repair_send(self, retmsg):
        retmsg.append(["UNIT_REPAIR_UPDATE", self.unit_repair_queue])

    def spawn_deposits(self, seed):
        if self.tutorial_state != "COMPLETE":
            # no deposits until tutorial is over
            return

        config = self.get_any_abtest_value('iron_deposits', gamedata['server']['iron_deposits'])
        if config['max'] < 1: return

        if self.last_iron_deposit < 1:
            num_to_spawn = 1
        else:
            num_to_spawn = int((server_time - self.last_iron_deposit)/config['interval'])

        # count number of deposits currently in base
        cur_deposits = sum([1 for obj in self.home_base_iter() if obj.spec.name == 'iron_deposit'])
        num_to_spawn = max(0, min(num_to_spawn, config['max']-cur_deposits))

        if num_to_spawn < 1:
            return

        self.last_iron_deposit = server_time

        # compute max res manually to include destroyed storage buildings
        max_res = max(self.get_max_storage().itervalues())
        specname = 'iron_deposit'
        spec = self.get_abtest_spec(GameObjectSpec, specname)

        randgen = random.Random(seed) # deterministic from the seed

        for i in range(num_to_spawn):
            ncells = self.my_home.ncells()
            iter = 0

            # rejection sampling for determining spawn location
            while True:
                x = int(randgen.random()*ncells[0])
                y = int(randgen.random()*ncells[1])
                if self.my_home.is_deposit_location_valid([x,y], spec.gridsize) or iter > 100:
                    break
                iter += 1

            metadata = {}
            max_pct = config['worth_range'][0]
            min_pct = config['worth_range'][1]
            amount = max(0, int(max_res * (min_pct + randgen.random() * (max_pct-min_pct))))
            if amount > 0:
                metadata['iron'] = amount

            if self.get_any_abtest_value('currency', gamedata['currency']) == 'gamebucks':
                contains_gamebucks = (randgen.random() < config['gamebucks_chance'])
                if contains_gamebucks:
                    gamebucks_amount = config['gamebucks_range'][0] + int(randgen.random() * (config['gamebucks_range'][1]-config['gamebucks_range'][0]))
                    if gamebucks_amount > 0:
                        metadata['gamebucks'] = gamebucks_amount

            newobj = instantiate_object_for_player(self, self, specname, x=x, y=y, metadata = metadata)
            self.home_base_add(newobj)

    # XXX this should probably be a member of Session rather than Player
    def give_quest_rewards(self, quest, session, retmsg):
        reward_res = dict((res,0) for res in gamedata['resources'])

        max_storage = self.get_max_storage()

        repeatable = hasattr(quest, "repeat_interval")
        if repeatable:
            ratio_ratio = self.get_any_abtest_value('daily_quest_reward_ratio', gamedata['daily_quest_reward_ratio'])
        else:
            ratio_ratio = 1.0

        has_ratio_reward = False
        for res in gamedata['resources']:
            if hasattr(quest, "reward_"+res):
                reward_res[res] += getattr(quest, "reward_"+res)
            if hasattr(quest, "reward_"+res+"_ratio"):
                has_ratio_reward = True
                amt = int(ratio_ratio * int(getattr(quest, "reward_"+res+"_ratio") * max_storage[res]))
                reward_res[res] += amt

        reward_res = self.resources.gain_res(reward_res, reason='quest_reward')
        if repeatable:
            econ_type = 'repeatable'
        else:
            econ_type = 'one_time_ratio' if has_ratio_reward else 'one_time_fixed'
        admin_stats.econ_flow_res(self, 'quests', econ_type, reward_res)

        reward_xp = 0

        if ('quest_reward_resources' in gamedata['player_xp']):
            # new formula, resource-based
            orig_rewards = sum((getattr(quest, 'reward_'+res, 0) for res in gamedata['resources']),0)
            reward_xp = int(gamedata['player_xp']['quest_reward_resources'] * orig_rewards)

        elif hasattr(quest, "reward_xp"):
            reward_xp = max(int(quest.reward_xp * gamedata['player_xp']['quests']), gamedata['player_xp']['quests_min'])

        self.resources.gain_xp(reward_xp, reason='quest_reward')

        if hasattr(quest, "reward_gamebucks"):
            self.resources.gain_gamebucks(quest.reward_gamebucks, reason='quest_reward')

        if hasattr(quest, "reward_consequent"):
            # awkward - needs to pass same parameters as the on_login_pre_hello consequent
            snap = self.resources.calc_snapshot()
            session.execute_consequent_safe(quest.reward_consequent, self, retmsg,
                                            {'max_inventory': snap.max_inventory(), 'cur_inventory': snap.cur_inventory(),
                                             'cur_gamebucks': snap.gamebucks,
                                             'largest_purchase': self.history.get('largest_purchase', 0),
                                             'largest_purchase_gamebucks': self.history.get('largest_purchase_gamebucks', 0)},
                                            reason='give_quest_rewards')

        new_objects = []

        if hasattr(quest, "reward_give_units"):
            new_objects += spawn_units(self, self.my_home, quest.reward_give_units, limit_break = True)

        if hasattr(quest, "reward_heal_all_units") and quest.reward_heal_all_units:
            session.heal_all_units(retmsg)
        if hasattr(quest, "reward_heal_all_buildings") and quest.reward_heal_all_buildings:
            session.heal_all_buildings(retmsg)

        return new_objects

    def send_history_update(self, retmsg):
        # filter out parts of player.history that are for metrics use only
        # only send the critical gameplay-relevant values to the client
        msg = dict(filter(lambda (k,v):
                          type(v) != list and \
                          type(v) != dict and \
                          ((':' not in k) or (k.startswith('feature_used')) or (k.startswith('item')) or \
                           (k.startswith('unit') and k.endswith('manufactured')) or \
                           (k.startswith('building') and k.endswith('killed'))
                           ) and \
                          (not k.startswith('score_')),
                          self.history.iteritems()))
        retmsg.append(["PLAYER_HISTORY_UPDATE", msg])

    def strip_fields_for_army_update(self, state):
        assert 'obj_id' in state
        if state.get('temporary', None): return None # don't persist temporary objects
        for field in state.keys():
            if field not in ('obj_id','spec','level','owner_id','squad_id','hp','max_hp','hp_ratio'):
                del state[field]
        return state

    def send_army_update_one(self, object, retmsg):
        assert object.owner is self
        assert object.is_mobile()
        if object.is_temporary(): return
        fields = self.strip_fields_for_army_update(object.persist_state(nosql = True))
        if fields is not None:
            retmsg.append(["PLAYER_ARMY_UPDATE", [fields]])
    def send_army_update_destroyed(self, object, retmsg):
        if not object.is_temporary():
            retmsg.append(["PLAYER_ARMY_UPDATE_DESTROYED", object.obj_id])
    def ping_squads_and_send_update(self, session, retmsg, originator=None, reason=''):
        army, map_features, mailbox_update = self.ping_squads(session, return_army = True, originator=originator, reason=reason)
        retmsg.append(["SQUADS_UPDATE", self.squads])
        retmsg.append(["PLAYER_ARMY_UPDATE_FULL", filter(lambda x: x is not None, map(self.strip_fields_for_army_update, army))])
        if self.home_region and map_features: retmsg.append(["REGION_MAP_UPDATES", self.home_region, map_features, server_time])
        if mailbox_update: self.send_mailbox_update(retmsg)

    # used for processing untrusted requests from the client, checks to make sure there is an item in slot 'slot'
    # and that the spec matches what the client thinks it is. Returns spec, item or None, None
    def inventory_verify_item(self, slot, specname, level = None):
        if (slot > (len(self.inventory)-1)) or self.inventory[slot]['spec'] != specname or (level is not None and self.inventory[slot].get('level',1) != level):
            return None
        return self.inventory[slot]

    def loot_buffer_release(self, reason):
        if not self.loot_buffer: return
        for entry in self.loot_buffer:
            self.inventory_log_event('5131_item_trashed', entry['spec'], -entry.get('stack',1), entry.get('expire_time',-1), level = entry.get('level',None), reason=reason)
            metric_name = entry['spec']
            if entry.get('level',None) > 1:
                metric_name += '_L%d' % entry['level']
            record_player_metric(self, dict_increment, 'item:'+metric_name+':trashed', entry.get('stack',1), time_series=False)
        self.loot_buffer = []

    # return how many items in item_list (format of loot_buffer and inventory) match "specname" and are not expired
    def get_item_quantity(self, item_list, specname, level = None):
        return sum([item.get('stack',1) for item in item_list \
                    if ((item['spec'] == specname) and \
                        (level is None or (item.get('level',1) == level)) and \
                        (('expire_time' not in item) or (item['expire_time'] >= server_time)))], 0)

    def inventory_item_quantity(self, specname, level = None): return self.get_item_quantity(self.inventory, specname, level = level)
    def loot_buffer_item_quantity(self, specname, level = None): return self.get_item_quantity(self.loot_buffer, specname, level = level)

    # remove "total" number of items of spec "specname" from item_list (loot_buffer or inventory)
    # throws exception if insufficient quantity is present
    # returns number removed.
    def item_remove_by_type(self, item_list, specname, total, event_name, level=None, reason=None):
        assert self.get_item_quantity(item_list, specname, level=level) >= total
        n_removed = 0
        while total > 0:
            item = None
            for i in item_list:
                if i['spec'] == specname and (level is None or i.get('level',1) == level):
                    item = i
                    break
            if item is None:
                raise Exception('ran out of items: '+specname)
            to_rem = min(total, item.get('stack',1))
            self.item_remove(item_list, item, to_rem, event_name, reason=reason)
            total -= to_rem
            n_removed += to_rem
        return n_removed

    def loot_buffer_remove_by_type(self, specname, total, event_name, level=None, reason=None): return self.item_remove_by_type(self.loot_buffer, specname, total, event_name, level=level, reason=reason)
    def inventory_remove_by_type(self, specname, total, event_name, level=None, reason=None): return self.item_remove_by_type(self.inventory, specname, total, event_name, level=level, reason=reason)

    # remove a quantity of "item" from "item_list" (which must contain it), and log inventory metric
    def item_remove(self, item_list, item, qty_to_rem, event_name, reason=None):
        original_count = count = item.get('stack',1)
        count -= qty_to_rem
        if count <= 0:
            item_list.remove(item)
            if count < 0: # probably should flag this somehow
                count = 0
        elif count == 1 and 'stack' in item:
            del item['stack']
        elif count > 1:
            item['stack'] = count
        n_removed = original_count - count
        self.inventory_log_event(event_name, item['spec'], -n_removed, item.get('expire_time',-1), level = item.get('level',None), reason=reason)
        return n_removed

    def loot_buffer_remove(self, item, qty_to_rem, event_name, reason=None): return self.item_remove(self.loot_buffer, item, qty_to_rem, event_name, reason)
    def inventory_remove(self, item, qty_to_rem, event_name, reason=None): return self.item_remove(self.inventory, item, qty_to_rem, event_name, reason)

    def inventory_remove_stack(self, item, event_name, reason=None):
        # remove the entire stack. item must be in self.inventory
        self.inventory.remove(item)
        self.inventory_log_event(event_name, item['spec'], -item.get('stack',1), item.get('expire_time',-1), level = item.get('level',None), reason=reason)
        return item.get('stack',1)

    def inventory_has_space_for(self, item, max_slots):
        spec = gamedata['items'][item['spec']]
        stack = item.get('stack',1)
        assert not spec.get('fungible',False)
        max_stack = spec.get('max_stack',1)

        # join existing stack?
        for existing in self.inventory:
            if existing['spec'] == item['spec'] and \
               existing.get('level',1) == item.get('level',1) and \
               (existing.get('stack',1) + stack) <= max_stack:
                return True

        # make new stack?
        if len(self.inventory) < max_slots:
            return True

        return False

    # Add as much of this one item stack to inventory as
    # possible. Return size of the stack that was added to inventory.
    # this function should NOT throw exceptions, as it would cause item-duping bugs
    def inventory_add_item(self, item, max_slots):
        if 'spec' not in item:
            gamesite.exception_log.event(server_time, 'inventory_add_item: invalid item '+repr(item))
            return 0

        if item['spec'] not in gamedata['items']:
            gamesite.exception_log.event(server_time, 'inventory_add_item: unknown spec '+item['spec'])
            return 0

        spec = gamedata['items'][item['spec']]
        max_stack = spec.get('max_stack',1)
        fungible = spec.get('fungible',False)
        stack = item.get('stack',1)
        undiscardable = item.get('undiscardable',False)
        expire_time = item.get('expire_time', -1)

        count = 0
        while stack > 0:
            dest = None

            if max_stack > 1:
                # see if we can join an existing stack
                for existing in self.inventory:
                    if existing['spec'] == item['spec'] and \
                       existing.get('level',1) == item.get('level',1) and \
                       existing.get('stack',1) < max_stack and existing.get('expire_time',-1) == expire_time:
                        dest = existing
                        break
            if dest:
                dest['stack'] = dest.get('stack',1) + 1
                if undiscardable: dest['undiscardable'] = 1
                stack -= 1
                count += 1
                #gamesite.exception_log.event(server_time, 'join existing stack '+repr(dest))
                continue

            if fungible:
                # add as much as possible to resources
                if spec['resource'] == 'gamebucks':
                    self.resources.gain_gamebucks(stack, reason='item')
                    count += stack; stack = 0
                elif spec['resource'] in gamedata['resources']:
                    gained_res = self.resources.gain_res({spec['resource']:stack}, reason='item_fungible')
                    gained = sum(gained_res.itervalues(),0)
                    admin_stats.econ_flow_res(self, 'item', 'fungible', gained_res)
                    count += gained
                    stack -= gained
                elif spec['resource'] == 'lottery_scans':
                    if expire_time < 0 or expire_time > server_time:
                        self.do_apply_aura('lottery_scans', stack = stack,
                                           duration = (expire_time - server_time) if expire_time > 0 else -1,
                                           ignore_limit = True)
                    count += stack; stack = 0
                else:
                    gamesite.exception_log.event(server_time, 'unhandled fungible resource'+spec['resource'])
                    break
                break
            else:
                # out of space?
                if max_slots >= 0 and (len(self.inventory) >= max_slots):
                    #gamesite.exception_log.event(server_time, 'all %s slots used (%d)' % (max_slots, len(self.inventory)))
                    break

                # add whole item to inventory
                new_item = {'spec': item['spec']}
                if item.get('level',1) != 1:
                    new_item['level'] = item['level']
                if stack > 1:
                    new_item['stack'] = stack
                if undiscardable:
                    new_item['undiscardable'] = 1
                if expire_time > 0:
                    new_item['expire_time'] = expire_time
                self.inventory.append(new_item)

                count += stack
                stack = 0


        # update item stack count
        if 'stack' in item:
            del item['stack']
        if stack > 1:
            item['stack'] = stack

        return count

    def send_inventory_update(self, retmsg):
        res = self.resources.calc_snapshot()
        retmsg.append(["INVENTORY_UPDATE", res.max_inventory(), self.inventory, res.reserved_inventory()])

    # log fishing-related events
    def fishing_log_event(self, event_name, queue_entry, ui_index = None, time_left = None, loot = None):
        slate_id = None
        if self.cooldown_active('fish_slate_assigned'):
            slate_id = self.cooldowns['fish_slate_assigned']['data']['slate']
        props = {'attempt_id': queue_entry.craft_state.get('attempt_id', None),
                 'slate_id': slate_id,
                 'recipe_id': queue_entry.craft_state['recipe']}
        if ui_index is not None: props['ui_index'] = ui_index
        if time_left is not None: props['time_left'] = time_left
        if loot: props['loot'] = loot
        props['sum'] = self.get_denormalized_summary_props('brief')
        metric_event_coded(self.user_id, event_name, props)

    def send_mailbox_update(self, retmsg):
        retmsg.append(["MAIL_UPDATE", None, self.mailbox])

    def mailbox_append(self, msg, safe_not_to_copy = False):
        if 'attachments' in msg:
            dict_increment(self.history, 'mail_attachments_received', len(msg['attachments']))
        if not (safe_not_to_copy):
            # nasty things happen when callers pass in references to gamedata (e.g. item tables get mutated)
            # so be safe by copying everything
            msg = copy.deepcopy(msg)
        if 'time' not in msg: msg['time'] = server_time # ensure a (send) "time" field is prevent
        msg['received_time'] = server_time
        self.mailbox.append(msg)

    # return unique player history key for a daily tip or message
    @staticmethod
    def get_daily_tip_key(kind, data, ref_time):
        assert kind in ('daily_tip', 'daily_msg')
        ret = kind+':'+data['name']
        if ('repeat_interval' in data) and ('start_time' in data):
            run_num = (ref_time - data['start_time'])//data['repeat_interval']
            ret += ':run%d' % run_num
        return ret

    def get_daily_tips(self, session, retmsg):
        ref_time = self.get_absolute_time()
        popup_tip = None # only one popup tip is allowed
        pageable_tips = [] # any number of pageable tips are allowed (oldest->newest)
        all_pageable_tips_seen = True

        for tip in gamedata['daily_tips']:
            if ('show_if' in tip) and (not Predicates.read_predicate(tip['show_if']).is_satisfied(self, None)): continue

            key = self.get_daily_tip_key('daily_tip', tip, ref_time)
            already_understood = (self.history.get(key, 0) >= 2)

            kind = tip.get('kind', 'popup')
            if kind == 'pageable':
                data = tip.copy()
                data['understood'] = int(already_understood)
                pageable_tips.append(data)
                if (not already_understood):
                    all_pageable_tips_seen = False
            elif kind == 'popup':
                if popup_tip: continue # already have one
                if already_understood and (not tip.get('recurring',False)): continue # already understood
                popup_tip = tip

        if popup_tip:
            key = self.get_daily_tip_key('daily_tip', popup_tip, ref_time)
            if ('action' in popup_tip) and (self.history.get(key, 0) < 1):
                session.execute_consequent_safe(popup_tip['action'], self, retmsg, reason='get_daily_tips')
                session.setmax_player_metric(key, 1)
            retmsg.append(["DISPLAY_DAILY_TIP", popup_tip['name']])

        if pageable_tips and (not all_pageable_tips_seen):
            pageable_tips.reverse()
            retmsg.append(["DISPLAY_DAILY_TIP_PAGES", pageable_tips])

    def get_daily_messages(self, session, retmsg):
        got_any = False
        ref_time = self.get_absolute_time()

        for tip in gamedata['daily_messages']:
            key = self.get_daily_tip_key('daily_msg', tip, ref_time)
            if self.history.get(key, 0) and (not tip.get('recurring',False)): continue

            if 'expire_at' in tip:
                expire_time = tip['expire_at']
            elif 'end_time' in tip:
                if ('repeat_interval' in tip) and ('start_time' in tip):
                    # time remaining in this run
                    delta = (ref_time - tip['start_time']) % tip['repeat_interval']
                    expire_time = ref_time + (tip['end_time'] - tip['start_time'] - delta)
                else:
                    expire_time = tip['end_time']
            elif 'expire_in' in tip:
                expire_time = ref_time + tip['expire_in']
            else:
                expire_time = -1
            if expire_time > 0 and ref_time >= expire_time: continue

            if 'show_if' in tip and (not Predicates.read_predicate(tip['show_if']).is_satisfied(self, None)): continue
            msg = {'type': 'mail',
                   'expire_time': expire_time,
                   'msg_id': generate_mail_id(),
                   'from_name': tip['ui_sender'],
                   'subject': tip['ui_subject'],
                   'body': tip['ui_body']}
            if 'attachments' in tip:
                msg['attachments'] = []
                for a in tip['attachments']:
                    attachment = copy.deepcopy(a)
                    if 'item_duration' in attachment:
                        attachment['expire_time'] = session.get_item_spec_forced_expiration(gamedata['items'][attachment['spec']],
                                                                                            prev_expire_time = attachment['item_duration'] + server_time)
                        del attachment['item_duration']
                    msg['attachments'].append(attachment)
            if 'on_send' in tip:
               session.execute_consequent_safe(tip['on_send'], self, retmsg,
                                               context = {'home_region': self.home_region},
                                               reason='get_daily_messages')
            self.mailbox_append(msg)
            self.history[key] = 1
            got_any = True
        return got_any

    def get_daily_banner(self, session, retmsg):
        for ban in gamedata['daily_banners']:
            key = 'daily_banner:'+ban['name']
            if self.history.get(key, 0) and (not ban.get('recurring',False)): continue
            if 'show_if' in ban and (not Predicates.read_predicate(ban['show_if']).is_satisfied(self, None)): continue
            if 'on_view' in ban:
               session.execute_consequent_safe(ban['on_view'], self, retmsg, reason='get_daily_banner')
            self.history[key] = 1
            return Predicates.eval_cond_or_literal(ban['spin_header_content'], session, self)
        return None

    def apply_promo_code(self, session, retmsg, code):
        data = gamedata['promo_codes'].get(code, None)
        if not data: return
        for PRED in ('show_if', 'requires'):
            if PRED in data and (not Predicates.read_predicate(data[PRED]).is_satisfied(self, None)): return

        key = 'promo_code:'+code

        if 'cooldown' in data: # promo codes with cooldown are tracked via player cooldown
            if self.cooldown_active(key): return
            self.cooldown_trigger(key, data['cooldown'])

        else: # promo codes with no cooldown are once-only and tracked via player history
            if self.history.get(key, 0): return
            self.history[key] = 1

        session.increment_player_metric('promo_codes_applied', 1)
        if 'on_login' in data:
            session.execute_consequent_safe(data['on_login'], self, retmsg, reason='apply_promo_code',
                                            context = {'loot_reason':'promo_code',
                                                       'loot_reason_id': code,
                                                       'loot_mail_template': gamedata['strings']['promo_code_mail'] })

    # compress player.sessions by collapsing adjacent relogs that occur within a short period of time
    def prune_sessions(self):
        sessions = self.history.get('sessions', None)
        if not sessions: return
        THRESHOLD = gamedata['server']['session_merge_threshold']
        if THRESHOLD < 0: return

        new_sessions = []
        for s in sessions:
            assert s[0] > 0
            if len(new_sessions) > 0:
                last_s = new_sessions[-1]
                if last_s[1] > 0 and (s[0] - last_s[1] < THRESHOLD):
                    # merge onto last session
                    last_s[1] = s[1]
                    continue
            new_sessions.append(s)
        self.history['sessions'] = new_sessions
        #print 'pruned', len(sessions), 'to', len(new_sessions), 'sessions'

    # compress player.activity by removing "idle" and "harvest" entries
    def prune_activity(self):
        activity = self.history.get('activity', None)
        if not activity: return
        if gamedata['server'].get('log_activity_in_player_history', False):
            for stime, data in activity.items():
                if data['state'] in ('idle','harvest'):
                    del activity[stime]
        else:
            # delete it completely
            del self.history['activity']

    # delete oldest entries in the battle history to avoid explosive growth of playerdb files
    def prune_battle_history(self):
        max_summary_num = gamedata['battle_log_max_summary_num']
        max_summary_age = gamedata['battle_log_max_summary_age']
        max_age = gamedata['battle_log_max_age']

        if max_age < 0:
            self.battle_history = {} # blow it away
            return

        # compile list of all held summaries, sort by age
        all = []
        for sid, data in self.battle_history.iteritems():
            if 'summary' not in data: continue
            for s in data['summary']:
                if (server_time - s['time']) > max_summary_age: continue # omit very old summaries
                all.append((sid, s))

        # sort summaries by age, newest first
        all.sort(key = lambda sid_s: -1*(sid_s[1]['time']))

        # cut off summaries beyond the number limit
        all = all[0:max_summary_num]

        # reverse so oldest are first now
        all.reverse()

        # index by sid
        all_idx = {}
        for sid, s in all:
            if sid not in all_idx:
                all_idx[sid] = []
            all_idx[sid].append(s)

        # recreate the history, including only the new entries and summaries
        new_hist = {}
        for sid, data in self.battle_history.iteritems():
            if ('last_time' not in data) or (server_time - data['last_time']) > max_age:
                continue
            new_hist[sid] = data.copy()
            if 'summary' in new_hist[sid]:
                del new_hist[sid]['summary']
            if sid in all_idx:
                new_hist[sid]['summary'] = all_idx[sid]

        self.battle_history = new_hist

    def detect_login_abuse(self, cur_session_length = 0):
        # sets lockout_until and lockout_message fields if player is a login abuser
        # use cur_session_length > 0 for checking players who are already logged in

        if self.lockout_until > 0 and server_time < self.lockout_until:
            # already locked out
            return False, None
        if 'sessions' not in self.history:
            return False, None
        sessions = self.history['sessions']

        settings = gamedata['server']['login_abuse_detector']

        if cur_session_length > 0:
            if (server_time - self.last_lockout_check) < settings['live_check_interval']:
                # checked very recently
                return False, None
            else:
                self.last_lockout_check = server_time

        if self.history.get('money_spent', 0.0) >= settings.get('exempt_money_spent_over',9999999):
            return False, None

        # trigger on more than MAX_LOGIN_REPEATS attempts in the last REPEAT_RANGE seconds
        REPEAT_RANGE = settings['repeat_range']
        MAX_LOGIN_REPEATS = settings['max_login_repeats']
        REPEAT_PENALTY_TIME = settings['repeat_penalty_time']

        # trigger on continuous logins of more than CONTINUOUS_LIMIT seconds of the last CONTINUOUS_RANGE seconds
        CONTINUOUS_LIMIT = settings['continuous_limit']
        CONTINUOUS_WARN  = settings['continuous_warn']
        CONTINUOUS_RANGE = settings['continuous_range']
        CONTINUOUS_PENALTY_TIME = settings['continuous_penalty_time']

        CONTINUOUS_LIMIT_SEVERE = settings['continuous_limit_severe']
        CONTINUOUS_RANGE_SEVERE = settings['continuous_range_severe']

        repeat_count = 0
        continuous_time = cur_session_length
        continuous_time_severe = cur_session_length

        for i in xrange(len(sessions)-1, -1, -1):
            s = sessions[i]
            if s[0] < 0 or s[1] < 0: continue

            if s[1] < (server_time-REPEAT_RANGE) and s[1] < (server_time-CONTINUOUS_RANGE) and s[1] < (server_time-CONTINUOUS_RANGE_SEVERE):
                break
            if s[0] >= (server_time-REPEAT_RANGE):
                repeat_count += 1

            if s[0] >= self.last_lockout_end:
                if s[1] >= (server_time-CONTINUOUS_RANGE):
                    continuous_time += s[1]-max(s[0], server_time-CONTINUOUS_RANGE)
                if s[1] >= (server_time-CONTINUOUS_RANGE_SEVERE):
                    continuous_time_severe += s[1]-max(s[0], server_time-CONTINUOUS_RANGE_SEVERE)

        lockout = False
        is_naughty = False
        abuse_warning_msg = []
        reason = []

        pardoned = ((self.login_pardoned_until >= 0) and (server_time < self.login_pardoned_until))

        if repeat_count >= MAX_LOGIN_REPEATS:
            lockout = True
            self.lockout_until = server_time + REPEAT_PENALTY_TIME
            self.lockout_message = "CANNOT_LOG_IN_LOGIN_ABUSE_FREQUENCY"
            reason += ['%s - tried to log in more than %d times in %d min' % (self.lockout_message, MAX_LOGIN_REPEATS, REPEAT_RANGE/60)]
        elif False and ((continuous_time_severe >= CONTINUOUS_LIMIT_SEVERE) and (not pardoned)):
            lockout = True
            self.lockout_until = server_time + CONTINUOUS_PENALTY_TIME
            self.lockout_message = "CANNOT_LOG_IN_LOGIN_ABUSE_SEVERE"
            reason += ['%s - stayed logged in for %d (more than %d) out of the last %d hours' % (self.lockout_message, continuous_time_severe/3600, CONTINUOUS_LIMIT_SEVERE/3600, CONTINUOUS_RANGE_SEVERE/3600)]
        elif (continuous_time >= CONTINUOUS_LIMIT) and (not pardoned):
            lockout = True
            self.lockout_until = server_time + CONTINUOUS_PENALTY_TIME
            self.lockout_message = "CANNOT_LOG_IN_LOGIN_ABUSE"
            reason += ['%s - stayed logged in for %d (more than %d) out of the last %d hours' % (self.lockout_message, continuous_time/3600, CONTINUOUS_LIMIT/3600, CONTINUOUS_RANGE/3600)]
        elif (continuous_time >= CONTINUOUS_WARN) and (not pardoned):
            abuse_warning_msg += [["LOGIN_ABUSE_WARNING", continuous_time + settings['continuous_warn_fudge'], CONTINUOUS_LIMIT + settings['continuous_warn_fudge'], CONTINUOUS_RANGE]]

        if lockout:
            self.lockout_count += 1

        if lockout or reason:
            gamesite.exception_log.event(server_time, ('login abuse detected! user %d ($%0.2f) count %d cur_session_length %d ' % (self.user_id, self.history.get('money_spent',0), self.lockout_count, cur_session_length)) + string.join(reason,', '))

        if lockout:
            metric_event_coded(self.user_id, '0700_login_abuse_detected', {'reason': self.lockout_message})

        if lockout and (cur_session_length <= 0):
            # note: this is now fire-and-forget, not synchronous!
            player_table.store_async(self, lambda: None, False, 'login_abuse_detector')

        return is_naughty, abuse_warning_msg

    def get_alt_data(self, other):
        if other.is_ai(): return False
        key = str(other.user_id)
        return self.known_alt_accounts.get(key, None)

    def alt_record_attack(self, other):
        alt_data = self.get_alt_data(other)
        if not alt_data: return
        alt_data['attacks'] = alt_data.get('attacks',0) + 1

    def possible_alt_record_login(self, alt_id, ip = None):
        if alt_id == self.user_id: return
        key = str(alt_id)

        alt_data = self.known_alt_accounts.get(key, None)

        if alt_data is None:
            # move the ID from possible_alt_accounts to known_alt_accounts once detect_threshold logins have happened
            detect_threshold = gamedata['server']['alt_detect_logins']
            if detect_threshold < 0: return

            dict_increment(self.possible_alt_accounts, key, 1)
            if self.possible_alt_accounts[key] >= detect_threshold:
                alt_data = self.known_alt_accounts[key] = {}
                del self.possible_alt_accounts[key]
                if gamedata['server']['log_alt_accounts'] >= 2:
                    gamesite.exception_log.event(server_time, 'user %d identified alt account %d after %d logins' % (self.user_id, alt_id, detect_threshold))
            else:
                if gamedata['server']['log_alt_accounts'] >= 3:
                    gamesite.exception_log.event(server_time, 'user %d has possible alt: %d (%d logins)' % (self.user_id, alt_id, self.possible_alt_accounts[key]))

        if alt_data is not None:
            alt_data['logins'] = alt_data.get('logins',0) + 1
            alt_data['last_login'] = server_time # record time of last simultaneous login
            if ip:
                alt_data['last_ip'] = ip

    def is_alt_account_unattackable(self, other):
        if (not spin_secure_mode): return False
        limit = gamedata['server']['alt_no_attack_after']
        if limit < 0: return False
        alt_data = self.get_alt_data(other)
        return alt_data and (alt_data.get('attacks',0) >= limit)

    def is_alt_account_unprotectable(self, other):
        if (not spin_secure_mode): return False
        limit = gamedata['server']['alt_no_protect_after']
        if limit < 0: return False
        alt_data = self.get_alt_data(other)
        return alt_data and (alt_data.get('attacks',0) >= limit)

    def is_alt_account_unladderable(self, other):
        if (not spin_secure_mode): return False
        limit = gamedata['server'].get('alt_no_ladder_after',0)
        if limit < 0: return False
        alt_data = self.get_alt_data(other)
        return alt_data and (alt_data.get('attacks',0) >= limit)

    # accept URL parameters to override A/B test cohort assignment, and other developer-only variables
    def read_url_overrides(self, user, q):
        if not q: return
        for test_name in sorted(gamedata['abtests'].iterkeys()):
            data = gamedata['abtests'][test_name]
            if data['active'] and (test_name in q):
                group = q[test_name][0]
                if group in data['groups']:
                    gamesite.exception_log.event(server_time, 'override_abtests_from_url: user %d %s -> %s' % \
                                                 (self.user_id, test_name, group))
                    self.abtests[test_name] = group
                    metric_event_coded(self.user_id, '0800_abtest_joined', {'test_name': test_name, 'group_name': group,
                                                                            'reason': 'manual_override'})
                else:
                    gamesite.exception_log.event(server_time, 'override_abtests_from_url: user %d %s GROUP %s NOT FOUND' % \
                                                 (self.user_id, test_name, group))

        if self.is_developer() or (not spin_secure_mode):
            if ('event_time_override' in q):
                self.event_time_override = int(q['event_time_override'][0])
                gamesite.exception_log.event(server_time, 'event_time_override: user %d -> %d' % \
                                             (self.user_id, self.event_time_override))
            if ('ladder_rival_override' in q):
                id = int(q['ladder_rival_override'][0])
                self.ladder_rival_override = id if id >= 0 else None
                gamesite.exception_log.event(server_time, 'ladder_rival_override: user %d -> %d' % \
                                             (self.user_id, self.ladder_rival_override))
            if ('fast_travel' in q):
                self.travel_override = True
            if ('leaderboard_override' in q):
                self.leaderboard_override = q['leaderboard_override'][0]

    # update the player's membership in any ongoing A/B tests
    # called once per login
    def update_abtests(self, session, is_first_visit):
        user = session.user

        want_tests = []
        want_cohorts = []
        want_limits = []
        for test_name in sorted(gamedata['abtests'].iterkeys()):
            data = gamedata['abtests'][test_name]
            if data['active'] and (test_name not in self.abtests):
                if is_first_visit:
                    if not data.get('affect_new_users', 1):
                        #print 'FAILED affect_new'
                        continue
                else: # not first visit
                    if not data.get('affect_old_users', 1):
                        #print 'FAILED affect_old'
                        continue

                if ('eligible_en_locale' in data) and (not data['eligible_en_locale']) and \
                   ((not user.locale) or user.locale.startswith('en_')):
                    continue
                if ('eligible_country' in data) and \
                   ((not user.country) or user.country != data['eligible_country']):
                    continue

                if 'eligible' in data:
                    # predicate-based eligibility
                    if type(data['eligible']) == dict and 'predicate' in data['eligible']:
                        if not Predicates.read_predicate(data['eligible']).is_satisfied2(session,self,None):
                            #print 'FAILED PREDICATE', data['eligible'], self.price_region
                            continue
                    else:
                        gamesite.exception_log.event(server_time, 'unhandled "eligible" value %r' % data['eligible'])
                        continue

                groups = sorted(data['groups'].keys())

                if data.get('assign_by_predicate', False):
                    group = None
                    for grname in groups:
                        if ('assign_if' in data['groups'][grname]) and Predicates.read_predicate(data['groups'][grname]['assign_if']).is_satisfied2(session,self,None):
                            group = grname
                            break
                    if group is None:
                        continue
                else:
                    # assign randomly, with optional weighing
                    group = weighted_random_choice(groups, [data['groups'][g].get('weight',1) for g in groups], random.random())

                want_tests = []
                want_cohorts = []
                want_limits = []
                want_tests.append(test_name)
                want_cohorts.append(group)
                want_limits.append(data['groups'][group].get('N', -1))

                if len(want_tests) > 0 and gamesite.nosql_client:
                    # make query to the database
                    results = [gamesite.nosql_client.abtest_join_cohort(test, cohort, limit) for test, cohort, limit in zip(want_tests, want_cohorts, want_limits)]

                    for i in xrange(len(want_tests)):
                        test_name = want_tests[i]
                        group = want_cohorts[i]
                        if results[i]:
                            self.abtests[test_name] = group # success!
                            metric_event_coded(self.user_id, '0800_abtest_joined', {'test_name': test_name, 'group_name': group})

        # REPLACE OBJECT SPECS WITH A/B TEST VERSIONS
        patch_specs = False
        for test_name, group in self.abtests.iteritems():
            if test_name in gamedata['abtests'] and \
               group in gamedata['abtests'][test_name]['groups'] and \
               gamedata['abtests'][test_name]['active'] and \
               gamedata['abtests'][test_name]['groups'][group].get('patches_server_specs',0):
                patch_specs = True
                break
        if patch_specs:
            for obj in self.home_base_iter():
                obj.change_spec(self.get_abtest_spec(obj.spec.__class__, obj.spec.name))

    def update_inerts(self):
        to_remove = []
        for obj in self.home_base_iter():
            if obj.is_inert():
                if obj.spec.expires == 'session':
                    if obj.creation_time > 0:
                        # expire it
                        to_remove.append(obj)
                    else:
                        # set expiration for next login
                        obj.creation_time = server_time

        for obj in to_remove:
            self.home_base_remove(obj)

    # repair all damage. Used for freshening stale accounts so players aren't re-acquired to a dead base
    # must be called BEFORE session starts - does not send any client updates
    def repair_stale_account(self):
        for object in self.home_base_iter():
            if object.owner is not self: continue
            if object.is_building() and object.is_damaged():
                object.repair_finish_time = server_time - 1
            elif object.is_mobile() and object.is_damaged():
                object.heal_to_full()
        self.unit_repair_queue = []

    # migrate() is called on login, handles all migration of forwards-incompatible player state
    # migrate_proxy() is called when loading a Player other than the one who is currently logged in

    def migrate(self, session, user_id, account_creation_time, is_returning_user):
        # do all proxy steps first
        self.migrate_proxy()

        # update Base Defenders ui_name
        if '0' in self.squads:
            self.squads['0']['ui_name'] = gamedata['strings']['squads']['base_defenders']

        # ensure that player has all starting tech levels (if gamedata was changed after player was created)
        for key, start_level in gamedata['starting_conditions']['tech'].iteritems():
            if self.tech.get(key, 0) < start_level:
                self.tech[key] = start_level

        # migrate old user chat_gagged flag to player aura
        if session.user.chat_gagged:
            if self.apply_aura('chat_gagged', duration = -1, ignore_limit = True):
                session.user.chat_gagged = None

        # establish default non-auto-unit control setting on elder accounts
        if SpinConfig.game() == 'mf' and \
           Predicates.read_predicate({'predicate': 'NOT', 'subpredicates': [{'predicate':'LIBRARY', 'name': 'after_T117_merge'}]}).is_satisfied(self, None):
            if type(self.player_preferences) is not dict:
                self.player_preferences = {}
            if ('auto_unit_control' not in self.player_preferences):
                # make an explicit setting of the default the player would have seen upon account creation
                if self.abtests.get('T117_mission_reorg2','') == 'new':
                    value = 1
                else:
                    value = 0
                self.player_preferences['auto_unit_control'] = value

        # make sure old accounts have a free muscle box, if they haven't unlocked the tech yet
        REPAIR_DROID_DATE = 1337558400 # UNIX time when repair system was switched on for everyone (2012 May 21)
        if SpinConfig.game() == 'mf' and \
           account_creation_time < REPAIR_DROID_DATE and \
           self.resources.player_level < 8 and \
           self.tech.get('muscle_box_production',0) < 1 and \
           (not self.history.get('free_muscle_box_given', False)):
            has_muscle_box = False
            for obj in self.home_base_iter():
                if obj.spec.name == 'muscle_box':
                    has_muscle_box = True
                    break
            if not has_muscle_box:
                # give the player a muscle box
                builder = self.find_object_by_type(self.get_abtest_spec(GameObjectSpec, 'muscle_box').manufacture_category)
                if builder:
                    gamesite.exception_log.event(server_time, 'giving muscle box to user_id %d' % user_id)
                    self.history['free_muscle_box_given'] = True
                    newobj = instantiate_object_for_player(self, self, 'muscle_box', x=builder.x+10, y=builder.y+10)
                    self.home_base_add(newobj)

        UNIT_EQUIP_DATE = 1362070800 # UNIX time when mod techs were replaced by unit equipment (2013 Feb 26)
        if SpinConfig.game() == 'mf' and \
           (account_creation_time < UNIT_EQUIP_DATE and \
           (not self.history.get('unit_equip_migration_done',False))) or \
           (account_creation_time < 1362072578 and len(self.unit_equipment) == 0): # temporary - fix mis-migrated accounts

            try:
                def is_mod_tech(name):
                    return (name.endswith('_anti_ice') or name.endswith('_anti_radiation') or name.endswith('_health') or name.endswith('_damage') or name.endswith('_armor'))

                # instantly complete any ongoing research of mod techs
                for obj in self.home_base_iter():
                    if obj.is_building() and obj.is_researcher() and is_mod_tech(obj.research_item):
                        name = obj.research_item
                        obj.research_item = ''
                        obj.research_total_time = -1
                        obj.research_start_time = -1
                        obj.research_done_time = -1
                        self.tech[name] = self.tech.get(name,0)+1
                        if gamedata['server']['log_unit_equip_migration']:
                            gamesite.exception_log.event(server_time, 'unit_equip_migration: %d - completing research of %s to L%d' % (user_id, name, self.tech[name]))

                old_techs = {} # old mod techs that need to be retired
                new_tech = {} # new replacement for self.tech
                for name, level in self.tech.iteritems():
                    if not name: continue
                    if is_mod_tech(name):
                        old_techs[name] = level
                    else:
                        new_tech[name] = level

                migrate_radcold = {}
                migrate_damage = {}
                migrate_defense = {}

                for name, level in old_techs.iteritems():
                    tech_spec = gamedata['tech'][name]
                    if name.endswith('_anti_ice') or name.endswith('_anti_radiation'):
                        klass = tech_spec['affects_manufacture_category']
                        migrate_radcold[klass] = max(migrate_radcold.get(klass,0), level)
                    else:
                        unit_name = tech_spec['affects_unit']
                        if name.endswith('_health') or name.endswith('_armor'):
                            migrate_defense[unit_name] = max(migrate_defense.get(unit_name,0), level)
                        elif name.endswith('_damage'):
                            migrate_damage[unit_name] = max(migrate_damage.get(unit_name,0), level)
                        else:
                            gamesite.exception_log.event(server_time, 'unit_equip_migration: %d unhandled tech %s' % (user_id, name))

                # add items
                new_equipment = copy.deepcopy(self.unit_equipment)

                def give_unit_equip(equip, unit_name, item_name):
                    if item_name not in gamedata['items']:
                        raise Exception('bad item name '+item_name)
                    slot_type = gamedata['items'][item_name]['equip']['slot_type']
                    if unit_name not in equip: equip[unit_name] = {}
                    if slot_type not in equip[unit_name]: equip[unit_name][slot_type] = []
                    if item_name in equip[unit_name][slot_type]: return
                    equip[unit_name][slot_type].append(item_name)

                for category, level in migrate_radcold.iteritems():
                    if level > 0:
                        for unit_name, unit_data in gamedata['units'].iteritems():
                            if unit_name == 'repair_droid': continue
                            if self.tech.get(unit_data['level_determined_by_tech'], 0) < 1: continue # not researched
                            if unit_data['manufacture_category'] == category:
                                item_name = unit_name +'_radcold_rare'
                                give_unit_equip(new_equipment, unit_name, item_name)

                for unit_name, level in migrate_damage.iteritems():
                    if level > 0:
                        item_name = unit_name + '_damage_' + ('high' if level >= 5 else 'low')
                        give_unit_equip(new_equipment, unit_name, item_name)
                for unit_name, level in migrate_defense.iteritems():
                    if level > 0:
                        item_name = unit_name + '_armor_' + ('high' if level >= 5 else 'low')
                        give_unit_equip(new_equipment, unit_name, item_name)

                # atomically swap in new techs and unit equipment


                if len(old_techs) > 0:
                    if gamedata['server']['log_unit_equip_migration']:
                        gamesite.exception_log.event(server_time, 'unit_equip_migration: %d success\nOLD TECH:\n%s\nOLD EQUIP:\n%s\nNEW TECH:\n%s\n NEW EQUIP:\n%s\n' % (user_id, repr(self.tech), repr(self.unit_equipment), repr(new_tech), repr(new_equipment)))

                    # make backup copies of the old data just in case there is a problem
                    self.history['unit_equip_migration_old_tech'] = copy.deepcopy(self.tech)
                    self.history['unit_equip_migration_old_equipment'] = copy.deepcopy(self.unit_equipment)

                    self.tech = new_tech
                    self.unit_equipment = new_equipment

                self.history['unit_equip_migration_done'] = 1

            except:
                gamesite.exception_log.event(server_time, 'unit_equip_migration (player %d) Exception: %s' % (user_id, traceback.format_exc().strip())) # OK
                pass

        # remove invalid objects from donated units
        for obj_id, entry in self.donated_units.items():
            if entry['spec'] not in gamedata['units']:
                del self.donated_units[obj_id]

        # give free gamebucks
        if self.get_any_abtest_value('currency', gamedata['currency']) == 'gamebucks' and \
           (not self.history.get('free_gamebucks_given', False)):
            self.history['free_gamebucks_given'] = True
            if self.tutorial_state == "COMPLETE":
                bucks = self.get_any_abtest_value('free_gamebucks_veteran', gamedata['starting_conditions']['veteran_gamebucks'])
                reason = 'veteran'
            else:
                bucks = self.get_any_abtest_value('free_gamebucks_starting', gamedata['starting_conditions']['gamebucks'])
                reason = 'starting'
            self.resources.gain_gamebucks(bucks, reason=reason)
            if gamedata['server']['log_gamebucks_init']:
                gamesite.exception_log.event(server_time, 'giving %s %d gamebucks to user_id %d' % \
                                             (reason, bucks, user_id))

        # migrate XP from old to new system
        old_gen = self.history.get('xp_gen',0)
        cur_gen = gamedata['player_xp'].get('xp_gen',0)
        if old_gen < cur_gen:
            old_xp = self.resources.xp
            old_level = self.resources.player_level
            new_xp, new_level = self.recalculate_xp()
            if gamedata['server']['log_xp_migration']:
                gamesite.exception_log.event(server_time, 'player %d migrate_xp gen %d->%d: OLD xp %d level %d NEW xp %d level %d delta %+d' %
                                             (self.user_id,
                                              old_gen, cur_gen,
                                              old_xp, old_level,
                                              new_xp, new_level, new_level-self.resources.player_level))

            if old_gen < gamedata['player_xp'].get('xp_migrate_to',0):
                self.history['xp_gen'] = gamedata['player_xp'].get('xp_migrate_to',0) # mark as migrated
                if (new_xp > old_xp) or gamedata['player_xp'].get('xp_migrate_allow_loss', False):
                    self.resources.xp = new_xp
                    self.resources.player_level = new_level
                    if ('xp_migration_mail' in gamedata['strings']) and ((new_xp != old_xp) or (new_level != old_level)):
                        self.mailbox_append(self.make_system_mail(gamedata['strings']['xp_migration_mail'],
                                                                  replace_s = '%d' % (new_xp - old_xp), replace_level = '%d' % new_level))

        # fix TR turret head tech XP - we forgot to add upgrade_xp to the MG and Mortar turret head techs
        if gamedata['game_id'] == 'tr' and account_creation_time < 1426718214 and self.history.get('turret_head_mg_mortar_xp_fixed',0) < 1:
            missing_xp = 0
            for techname in ('turret_head_mg','turret_head_mortar'):
                time_series = self.history.get('tech:'+techname+'_at_time',{})
                if len(time_series) > 1: # only give XP for upgrades completed AFTER the initial migration
                    spec = self.get_abtest_spec(TechSpec, techname)
                    migrated_level = min(time_series.values())
                    for stime, level in time_series.iteritems():
                        if level > migrated_level:
                            missing_xp += spec.get_leveled_quantity(spec.upgrade_xp, level)
            if missing_xp > 0:
                self.resources.gain_xp(missing_xp, 'turret_head_mg_mortar_xp_fix')
                self.mailbox_append(self.make_system_mail(gamedata['strings']['turret_head_mg_mortar_xp_fix_mail'],
                                                          replace_s = '%d' % missing_xp))
                if gamedata['server']['log_xp_migration']:
                    gamesite.exception_log.event(server_time, 'player %d turret_head_mg_mortar_xp_fix added %d missing XP' % (self.user_id, missing_xp))
            self.history['turret_head_mg_mortar_xp_fixed'] = 1

        # fix TR building/tech XP added 2015 April 23
        if gamedata['game_id'] == 'tr' and \
           account_creation_time < 1429904541 and \
           len(gamedata['player_xp']['level_xp']) >= 50 and \
           self.history.get('201504_xp_fixed',0) < 1:
            missing_xp = 0
            missing_xp_dict = {}
            for techname in ('turret_head_tow','turret_head_hel_laser','turret_head_artillery'):
                spec = self.get_abtest_spec(TechSpec, techname)
                for level in xrange(1, 1+self.tech.get(techname, 0)):
                    xp = spec.get_leveled_quantity(spec.upgrade_xp, level)
                    missing_xp_dict['%s:L%d' % (techname, level)] = xp
                    missing_xp += xp
            for obj in self.my_home.iter_objects():
                if obj.is_building():
                    if obj.spec.name in ('barrier', 'airfield', 'fishing_factory', 'flight_center', 'hardware_depot', 'hardware_factory',
                                         'leader_factory', 'leader_lab', 'motor_pool', 'squad_bay', 'transmitter', 'warehouse', 'weapon_factory',
                                         'weapon_lab', 'turret_emplacement'):
                        for level in xrange(1, 1+obj.level):
                            xp = obj.spec.get_leveled_quantity(obj.spec.upgrade_xp, level)
                            if xp < 0:
                                coeff = gamedata['player_xp']['buildings'][obj.spec.name if level > 1 else 'level_1']
                                cost = sum((obj.spec.get_leveled_quantity(getattr(obj.spec, 'build_cost_'+res), level) for res in gamedata['resources']), 0)
                                xp = int(coeff * cost)
                            if xp > 0:
                                key = '%s:L%d' % (obj.spec.name, level)
                                missing_xp_dict[key] = missing_xp_dict.get(key,0) + xp
                                missing_xp += xp
            self.history['201504_xp_prefix'] = self.resources.xp # save previous XP, in case we mess up
            if missing_xp > 0:
                self.resources.gain_xp(missing_xp, '201504_xp_fix')
                self.mailbox_append(self.make_system_mail(gamedata['strings']['201504_xp_fix_mail'],
                                                          replace_s = '%d' % missing_xp))
                if gamedata['server']['log_xp_migration']:
                    gamesite.exception_log.event(server_time, 'player %d 201504_xp_fix added %d missing XP' % (self.user_id, missing_xp))
                    #gamesite.exception_log.event(server_time, 'player %d 201504_xp_fix added %d missing XP %r' % (self.user_id, missing_xp, missing_xp_dict))
            self.history['201504_xp_fixed'] = 1
            self.history['201504_xp_fixed_at'] = server_time

        if 'destination' in self.travel_state:
            # get rid of legacy destination field
            del self.travel_state['destination']
        if 'dest_loc' not in self.travel_state or (self.travel_state['dest_loc'] is not None and type(self.travel_state['dest_loc']) not in [tuple,list]):
            self.travel_state['dest_loc'] = None
        if 'attacks_made' not in self.travel_state:
            self.travel_state['attacks_made'] = 0


        # dump alt_account data if too old
        if self.history.get('alt_account_data_epoch',-1) < gamedata['server'].get('alt_account_data_epoch',-1):
            self.possible_alt_accounts = {}
            self.known_alt_accounts = {}
        self.history['alt_account_data_epoch'] = server_time

        # change format of known_alt_accounts
        if self.known_alt_accounts is None:
            self.known_alt_accounts = {}
        elif type(self.known_alt_accounts) is list:
            # migrate from old list format
            self.known_alt_accounts = dict([(str(alt_id), {'logins':999,'attacks':999}) for alt_id in self.known_alt_accounts])

        self.update_map_placement(session, None)

        # ensure CC level history value is set up
        if gamedata['townhall']+'_level' not in self.history:
            self.history[gamedata['townhall']+'_level'] = self.get_townhall_level()

        # ensure largest_purchase history value is set up
        if ('money_purchase_history' in self.history) and (('largest_purchase' not in self.history) or ('largest_purchase_gamebucks' not in self.history)):
            largest = 0
            largest_gamebucks = 0
            for x in self.history['money_purchase_history']:
                if 'dollar_amount' in x:
                    largest = max(largest, x['dollar_amount'])

                # note: doesn't handle in-kind payments like payer promos/TrialPay
                spellname = None
                if x.get('spellname','').startswith('BUY_GAMEBUCKS_'):
                    spellname = x['spellname']
                elif x.get('description','').startswith('BUY_GAMEBUCKS_'):
                    spellname = x['description'].split(',')[0]
                if spellname:
                    try:
                        gamebucks = session.user.parse_buy_gamebucks_spell_quantity(spellname, None)
                        largest_gamebucks = max(gamebucks, largest_gamebucks)
                    except:
                        pass

            self.history['largest_purchase'] = largest
            self.history['largest_purchase_gamebucks'] = largest_gamebucks

        # check resource levels
        if gamedata['server'].get('log_storage_limit', True) and gamedata['loot_storage_limit'] > 0:
            snap = self.resources.calc_snapshot()
            for res in gamedata['resources']:
                if snap.cur_res(res) > int(gamedata['loot_storage_limit']*snap.max_res(res)):
                    gamesite.exception_log.event(server_time, 'player %d logged in with %s storage %d > %d max' % (self.user_id, res, snap.cur_res(res), snap.max_res(res)))
                    if gamedata['server'].get('fix_storage_limit', False):
                        self.resources.gain_res({res: -1 * (snap.cur_res(res) - snap.max_res(res))}, reason = 'storage_limit', break_limit = True)

        # get rid of bloated obsolete history fields
        BLOAT = ['logins_by_day', 'purchase_ui_log', 'resources_harvested_at_time', 'resources_looted_at_time', 'stored_iron_at_time', 'stored_water_at_time',
                 'units_manufactured_at_time', 'units_killed_at_time', 'units_lost_at_time', 'items_looted_at_time',
                 'resources_stolen_at_time', 'attacks_launched_at_time', 'attacks_launched_vs_human_at_time', 'attacks_launched_vs_ai_at_time', 'attacks_suffered_at_time',
                 'revenge_attacks_launched_vs_human_at_time', 'revenge_attacks_suffered_at_time']
        for field in BLOAT:
            if field in self.history: del self.history[field]

        # get rid of obsolete Scores1 time series history fields
        for k in self.history.keys():
            if obsolete_time_series_re.match(k):
                del self.history[k]

        # fix bad intro mails
        if self.history.get('inventory_intro_mail_sent',0) < 2:
            to_remove = []
            for mail in self.mailbox:
                if mail.get('subject',None) == 'Your First Message' and len(mail.get('attachments',[])) < 1:
                    to_remove.append(mail)
            if len(to_remove) > 0:
                gamesite.exception_log.event(server_time, 'player %d fixing bad intro mail %s' % (self.user_id, repr(to_remove)))
                for mail in to_remove:
                    self.mailbox.remove(mail)

        # fix TR token item expiration time (ai_piper week 157 had incorrect expiration time without the +2day buffer)
        if gamedata['game_id'] == 'tr' and server_time < 1433005200:
            for item in self.inventory + self.loot_buffer:
                if item.get('spec',None) == 'token' and item.get('expire_time',None) == 1432832400:
                    item['expire_time'] = 1433005200

        self.send_inventory_intro_mail(session, None)
        self.reseed_lottery(session, force = False)

        # initialize achievement_points score
        if self.history.get('achievement_points_published',0) < 1:
            points = self.get_achievement_points()
            if points > 0:
                self.modify_scores({'achievement_points':points}, method='=', reason = 'login_migrate')
            self.history['achievement_points_published'] = 1

        # publish any modified scores
        self.publish_scores(reason = 'migrate')

    def recalculate_xp(self):
        new_player_xp = gamedata['player_xp']

        xp = {'starting_conditions':gamedata['starting_conditions']['xp']}
        xp['loot'] = int(new_player_xp['loot'] * self.history.get('resources_looted',0))

        DEPOSIT_FACTOR = 0.07 # accounts for deposits (not recorded in player history) - based on average amount
        xp['harvesting'] = int(new_player_xp['harvest'] * (1.0+DEPOSIT_FACTOR) * self.history.get('resources_harvested',0))

        xp['research'] = 0
        for name, level in self.tech.iteritems():
            for lev in xrange(1,level+1):
                if name in gamedata['starting_conditions']['tech'] and lev <= gamedata['starting_conditions']['tech'][name]:
                    continue
                spec = self.get_abtest_spec(TechSpec, name)
                override = spec.get_leveled_quantity(spec.upgrade_xp, lev)
                if override >= 0:
                    xp['research'] += override
                else:
                    xp['research'] += int(new_player_xp['research'] * \
                                          sum((spec.get_leveled_quantity(getattr(spec, 'cost_'+res), lev) for res in gamedata['resources']), 0))

        xp['buildings'] = 0
        for obj in self.home_base_iter():
            if obj.is_building() and (obj.spec.name in new_player_xp['buildings']):
                start_lev = 1
                for item in gamedata['starting_conditions']['buildings']:
                    if item['spec'] == obj.spec.name:
                        start_lev = max(start_lev, item.get('level',1)+1)
                        break
                for lev in xrange(start_lev,obj.level+1):
                    override = obj.spec.get_leveled_quantity(obj.spec.upgrade_xp, lev)
                    if override >= 0:
                        xp['buildings'] += override
                    else:
                        coeff = new_player_xp['buildings'][obj.spec.name if lev > 1 else 'level_1']
                        cost = sum((obj.spec.get_leveled_quantity(getattr(obj.spec, 'build_cost_'+res), lev) for res in gamedata['resources']), 0)
                        xp['buildings'] += int(coeff * cost)

        xp['quests'] = 0
        for name, data in self.completed_quests.iteritems():
            if name not in gamedata['quests']: continue
            quest = gamedata['quests'][name]
            if ('quest_reward_resources' in new_player_xp):
                xp['quests'] += int(new_player_xp['quest_reward_resources'] * sum((getattr(quest, 'reward_'+res, 0) for res in gamedata['resources']), 0))
            elif ('reward_xp' in quest):
                xp['quests'] += max(int(quest['reward_xp'] * new_player_xp['quests']), new_player_xp['quests_min'])

        total_xp = sum(xp.itervalues(), 0)
        new_level = bisect.bisect(new_player_xp['level_xp'], total_xp) - 1
        return total_xp, new_level

    # reseed lottery, if cooldown is up or 'force' is true
    def reseed_lottery(self, session, force = False):
        slot_tables = self.get_any_abtest_value('lottery_slot_tables', gamedata.get('lottery_slot_tables',None))
        if slot_tables is None: return

        if force or (self.lottery_slate is None) or (len(self.lottery_slate) != len(slot_tables)) or \
           (not self.cooldown_active('lottery_reseed')):

            new_slate = dict((slot_name, session.get_loot_items(self, tab, -1, -1)) for slot_name, tab in slot_tables.iteritems())
            weights = self.get_any_abtest_value('lottery_slot_weights', gamedata.get('lottery_slot_weights', None))

            if weights:
                for slot_name in slot_tables:
                    assert slot_name in weights # sanity check
                new_weights = copy.deepcopy(weights)
            else:
                new_weights = None

            # update atomically, in case there was an exception above
            self.lottery_slate = new_slate
            self.lottery_slate_weights = new_weights
            self.cooldown_trigger('lottery_reseed', gamedata['lottery_reseed_cooldown'])

    # get the current lottery slate
    def get_lottery_slate(self, session):
        # shouldn't need to reseed, since this is set up on login and respin, and otherwise it needs to stay the same so the GUI matches
        # self.reseed_lottery(session, force = False)
        assert self.lottery_slate
        return self.lottery_slate

    def send_inventory_intro_mail(self, session, retmsg):
        # retmsg will be None if called from migrate() on load

        sent = False

        if self.tutorial_state == "COMPLETE" and \
           self.get_any_abtest_value('enable_inventory', gamedata['enable_inventory']) and \
           Predicates.read_predicate({'predicate':'LIBRARY', 'name': 'send_inventory_intro_mail_when'}).is_satisfied2(session, self, None):

            if (self.history.get('inventory_intro_mail_sent', 0) < 2):
                self.history['inventory_intro_mail_sent'] = 2
                self.mailbox_append(self.make_system_mail(gamedata['strings']['inventory_intro_mail']))
                sent = True


            if (not self.history.get('free_transmitter_given', False)) and self.get_any_abtest_value('give_free_transmitter', False):
                transmitter_spec = self.get_abtest_spec(GameObjectSpec, 'transmitter')
                if GameObjectSpec.get_leveled_quantity(transmitter_spec.requires,1).is_satisfied2(session, self, None):
                    self.history['free_transmitter_given'] = 1
                    self.mailbox_append(self.make_system_mail(gamedata['strings']['free_transmitter_mail']))
                    sent = True

        if sent and (retmsg is not None):
            self.send_history_update(retmsg)
            self.send_mailbox_update(retmsg)

    def send_loot_mail(self, opponent_name, opponent_level, items, retmsg, mail_template = None):
        self.mailbox_append(self.make_system_mail(mail_template if mail_template else gamedata['strings']['loot_mail'],
                                                  attachments = items,
                                                  replace_s = opponent_name,
                                                  replace_level = str(opponent_level),
                                                  replace_time = time.strftime('%H:%S', time.gmtime(server_time)),
                                                  replace_day = time.strftime('%d %b %Y', time.gmtime(server_time)),
                                                  ))
        self.send_mailbox_update(retmsg)

    def send_lottery_mail(self, items, retmsg):
        self.mailbox_append(self.make_system_mail(gamedata['strings']['lottery_mail'],
                                                  attachments = items,
                                                  ))
        self.send_mailbox_update(retmsg)

    # ugly API, needs rework
    def make_system_mail(self, data, duration = None, attachments = None, to_user_id = None, extra_props = None,
                         replace_s = '', replace_level = '', replace_time = '', replace_day = '', replacements = None):

        if to_user_id is None: to_user_id = self.user_id

        # "data" should be an entry in gamedata['strings']
        if duration is None:
            if 'expire_at' in data:
                duration = data['expire_at'] - server_time
            elif 'duration' in data:
                duration = data['duration']
            else:
                duration = 2*365*24*60*60

        ret = {'type':'mail',
               'msg_id': generate_mail_id(),
               'to': [to_user_id]}

        for src_key, dst_key in (('ui_from','from_name'), ('ui_subject','subject'), ('ui_body','body')):
            ret[dst_key] = data[src_key].replace('%s',replace_s).replace('%level',replace_level).replace('%time',replace_time).replace('%day',replace_day)
            if replacements:
                for k, v in replacements.iteritems():
                    ret[dst_key] = ret[dst_key].replace(k, v)

        if duration < 0:
            ret['expire_time'] = -1
        else:
            ret['expire_time'] = server_time + duration

        if attachments is not None:
            ret['attachments'] = attachments
        elif 'attachments' in data:
            ret['attachments'] = data['attachments']

        for PRED in ('show_if', 'discard_if'):
            if PRED in data:
                ret[PRED] = data[PRED]

        if extra_props:
            for k, v in extra_props.iteritems():
                ret[k] = v
        return ret

    def update_map_placement(self, session, retmsg):
        # assign location on world map
        self.my_home.base_landlord_id = self.user_id
        self.my_home.base_ui_name = 'Home Base' # unconditional
        self.my_home.base_type = 'home'
        self.my_home.base_id = home_base_id(self.user_id) # always reset this, in case we mess around with playerdb files

        if self.my_home.base_region != self.home_region:
            gamesite.exception_log.event(server_time, 'player %d my_home.base_region %s != home_region %s' % (self.user_id, repr(self.my_home.base_region), repr(self.home_region)))
            self.my_home.base_region = self.home_region

        if self.home_region and (self.home_region not in gamedata['regions']):
            # pluck from invalid region
            self.home_region = self.my_home.base_region = None
            self.my_home.base_map_loc = None
            self.history['map_placement_gen'] = -1

        force_region = None
        if (not self.home_region):
            force_region = self.get_any_abtest_value('force_initial_region', gamedata['starting_conditions'].get('force_initial_region', None))

            # catch returning vets who were plucked off the map here
            # note: maptool.py now sets map_placement_gen = -1 after being plucked, however we have earlier churned players where it is set 0
            if (force_region is None) and \
               self.eligible_for_quarries() and \
               (self.history.get('map_placement_gen',0) < 0 or \
                (('map_placement_gen' in self.history) and (self.history['map_placement_gen'] == 0))):
                force_region = self.get_any_abtest_value('returning_veteran_region', gamedata['starting_conditions'].get('returning_veteran_region', None))
                if (force_region is not None) and gamedata['server']['log_stale_accounts']:
                    gamesite.exception_log.event(server_time, 'placing returning vet %d into region %s' % (self.user_id, force_region))

        if self.history.get('map_placement_gen', 0) < gamedata['territory']['map_placement_gen'] and \
           (self.eligible_for_quarries() or (force_region is not None)):
            success = self.change_region(force_region if (force_region is not None) else None, None, session, retmsg, reason='update_map_placement')
            if success and retmsg:
                self.send_history_update(retmsg)

        # update nosql state of home base
#        if 0:
#            if (self.history.get('nosql_test_gen',0) < NOSQL_GEN or self.history.get('nosql_region',None) != self.home_region):
#                reason = 'update_map_placement'
#                old_nosql_region = self.history.get('nosql_region', None)
#                if old_nosql_region:
#                    self.my_home.nosql_pluck(reason)
#                self.history['nosql_region'] = self.home_region
#                self.history['nosql_test_gen'] = NOSQL_GEN
#                if self.history['nosql_region']:
#                    self.my_home.nosql_plant(reason)

        return True

    def change_region(self, request_region, request_loc, session, retmsg, reason = ''):
        with admin_stats.latency_measurer('change_region(%s)' % reason):
            return self._change_region(request_region, request_loc, session, retmsg, reason = reason)

    # main region-change function
    # pass None to get a random region
    # returns whether it succeeded or not
    def _change_region(self, request_region, request_loc, session, retmsg, reason = ''):
        if (not gamesite.nosql_client):
            return False

        new_region = request_region
        new_region_pop = None
        new_loc = request_loc

        if gamedata['server']['log_map']:
            gamesite.exception_log.event(server_time, 'map: player %d change_region %s %s' % (self.user_id, repr(new_region), repr(new_loc)))

        randgen = random.Random(self.user_id ^ gamedata['territory']['map_placement_gen'] ^ int(server_time))

        if (new_region is None) or (type(new_region) is list):
            # load-balance to lowest-population applicable region

            if type(new_region) is list:
                regions = new_region
                new_region = None
            else:
                regions = sorted([x['id'] for x in gamedata['regions'].itervalues() if \
                                  (x.get('auto_join',True) and \
                                   (('auto_join_if' not in x) or Predicates.read_predicate(x['auto_join_if']).is_satisfied(self,None)) and \
                                   (('show_if' not in x) or Predicates.read_predicate(x['show_if']).is_satisfied(session.player, None)) and \
                                   (('requires' not in x) or Predicates.read_predicate(x['requires']).is_satisfied(session.player, None)) and \
                                   ((not x.get('developer_only',0)) or session.player.is_developer()))
                                  ])

            if gamedata['server']['log_map']:
                gamesite.exception_log.event(server_time, 'map: player %d change_region candidates %s' % (self.user_id, repr(regions)))

            populations = dict([(r, gamesite.nosql_client.get_map_feature_population(r,'home',reason='change_region')) for r in regions])

            # remove overpopulated (hard-capped) regions from consideration
            for r in [temp for temp in regions]:
                hard_cap = gamedata['regions'][r].get('pop_hard_cap',-1)
                if (hard_cap >= 0) and populations[r] >= hard_cap:
                    regions.remove(r)

            if len(regions) < 1:
                gamesite.exception_log.event(server_time, 'map: no regions for player %d (all disabled or hard-capped) - pops: %s' % (self.user_id, repr(populations)))
                if self.home_region:
                    # continue with taking player off the map
                    new_region = 'LIMBO'
                else:
                    return False

            else:
                new_region = regions[0]
                new_region_pop = populations.get(new_region, 0)
                for r in regions:
                    # if a region is under soft population cap, and preferred predicate is true, then pick it over all others.
                    # otherwise, just pick the lowest-pop region.
                    pop = populations.get(r, 0)
                    soft_cap = gamedata['regions'][r].get('pop_soft_cap',-1)
                    if pop < new_region_pop:
                        new_region_pop = pop
                        new_region = r
                    elif ('prefer_if' in gamedata['regions'][r]) and (soft_cap < 0 or pop < soft_cap) and Predicates.read_predicate(gamedata['regions'][r]['prefer_if']).is_satisfied(self,None):
                        # if we find a preferred region that has not reached its soft cap yet, immediately choose it
                        new_region = r
                        break

        if (new_region not in gamedata['regions']) and new_region != 'LIMBO':
            if gamedata['server']['log_map']:
                gamesite.exception_log.event(server_time, 'map: player %d change_region picked invalid region %s' % (self.user_id, repr(new_region)))
            return False
        if new_region in gamedata['regions'] and gamedata['regions'][new_region].get('developer_only',0) and (not session.player.is_developer()):
            return False

        # remove from old place
        old_region = None
        old_loc = None

        if self.home_region:
            assert self.my_home.base_region == self.home_region
            old_region = self.home_region
            old_loc = self.my_home.base_map_loc

        if new_region != 'LIMBO':
            # get population
            if new_region_pop is None:
                new_region_pop = gamesite.nosql_client.get_map_feature_population(new_region,'home',reason='change_region_get_pop')

            map_dims = gamedata['regions'][new_region]['dimensions']
            BORDER = gamedata['territory']['border_zone_player']

            if new_loc:
                new_loc = (int(new_loc[0]), int(new_loc[1]))
                assert new_loc[0] >= BORDER and new_loc[0] < map_dims[0]-BORDER and \
                       new_loc[1] >= BORDER and new_loc[1] < map_dims[1]-BORDER


            # place in new region via rejection sampling
            if new_loc:
                # search within a radius around new_loc
                trials_set = set()
                rad = gamedata['territory']['neighbor_search_radius']
                for i in xrange(100):
                    tr = (new_loc[0] + int((2*randgen.random()-1)*rad),
                          new_loc[1] + int((2*randgen.random()-1)*rad))
                    if tr[0] < BORDER or tr[0] >= map_dims[0]-BORDER or tr[1] < BORDER or tr[1] >= map_dims[1]-BORDER:
                        continue # skip, out of bounds
                    trials_set.add(tr)
                trials = list(trials_set)
            else:
                # search the entire map

                # radius: how far from the center of the map we can place the player
                radius = [map_dims[0]//2 - BORDER, map_dims[1]//2 - BORDER]

                # when entering a low-population region, prefer placing player close to the center of the map
                if new_region_pop is not None:
                    cap = gamedata['regions'][new_region].get('pop_hard_cap',-1)
                    if cap > 0:
                        # "fullness": ratio of the current population to centralize_below_pop * pop_hard_cap
                        fullness = new_region_pop / float(cap * gamedata['territory'].get('centralize_below_pop', 0.5))
                        if fullness < 1:
                            # keep radius above a minimum, and raise it with the square root of fullness since open area grows as radius^2
                            radius = [max(gamedata['territory'].get('centralize_min_radius',10), int(math.sqrt(fullness) * x)) for x in radius]

                # rectangle within which we can place the player
                placement_range = [[map_dims[0]//2 - radius[0], map_dims[0]//2 + radius[0]],
                                   [map_dims[1]//2 - radius[1], map_dims[1]//2 + radius[1]]]
                trials = map(lambda x: (min(max(placement_range[0][0] + int((placement_range[0][1]-placement_range[0][0])*randgen.random()), 2), map_dims[0]-2),
                                        min(max(placement_range[1][0] + int((placement_range[1][1]-placement_range[1][0])*randgen.random()), 2), map_dims[1]-2)), xrange(100))

            trials = filter(lambda x: not Region(gamedata, new_region).obstructs_bases(x), trials)

            if gamedata['server']['log_map']:
                gamesite.exception_log.event(server_time, 'map: player %d change_region attempting to place in %s' % (self.user_id, repr(new_region)))

            i = 0
            for tr in trials:
                i += 1
                self.my_home.base_region = new_region
                self.my_home.base_map_loc = tr
                props = self.my_home.get_cache_props(extra_props = {'protection_end_time': self.resources.protection_end_time})

                if (new_region == old_region):
                    success = gamesite.nosql_client.move_map_feature(self.my_home.base_region, self.my_home.base_id, props, old_loc = old_loc,
                                                                     exclusive = gamedata['territory']['exclusive_zone_player'], originator=self.user_id, reason='change_region')
                else:
                    success = gamesite.nosql_client.create_map_feature(self.my_home.base_region, self.my_home.base_id, props,
                                                                       exclusive = gamedata['territory']['exclusive_zone_player'], originator=self.user_id, reason='change_region')
                if success:
                    break
                else:
                    self.my_home.base_region = old_region
                    self.my_home.base_map_loc = old_loc
                    # note! temporarily leave self.home_region pointing to the old region, so that we can clear the squads out

            if (not self.my_home.base_region) or ((self.my_home.base_region == old_region) and (self.my_home.base_map_loc == old_loc)):
                if not new_loc: # don't print this warning when player deliberately tries to enter a crowded neighborhood
                    gamesite.exception_log.event(server_time, 'map: failed to place player %d in region %s after %d trials' % (self.user_id, new_region, i))
                return False

            session.player_base_lock = (self.my_home.base_region, self.my_home.base_id)
            self.my_home.base_climate = Region(gamedata, self.my_home.base_region).read_climate_name(self.my_home.base_map_loc)
            scenery_removed, scenery_added = self.my_home.spawn_scenery(self, self.user_id + self.my_home.base_map_loc[0] + map_dims[0]*self.my_home.base_map_loc[1], overwrite = True)

            if gamedata['server']['log_map']:
                gamesite.exception_log.event(server_time, 'map: placed player %d on %s at %s' % (self.user_id,
                                                                                                 self.my_home.base_region,
                                                                                             str(self.my_home.base_map_loc)))
        elif old_region: # going into limbo
            self.my_home.base_region = None
            self.my_home.base_map_loc = None
            scenery_removed = scenery_added = []

        ladder_reset = False

        if old_region:
            # recall squads
            for squad_sid in self.squads.iterkeys():
                squad_id = int(squad_sid)
                if self.squad_is_deployed(squad_id):
                    success, affected_objects, map_features, error_code = self.squad_exit_map(None, squad_id, force = True, originator=self.user_id, reason='change_region')

            if self.my_home.base_region != old_region:
                # remove from old region (drops old lock as well)
                gamesite.nosql_client.drop_map_feature(old_region, self.my_home.base_id, originator=self.user_id, reason='change_region(leave_old)')

                old_is_ladder = gamedata['regions'][old_region].get('ladder_pvp', gamedata.get('ladder_pvp', False))
                new_is_ladder = self.my_home.base_region and gamedata['regions'][self.my_home.base_region].get('ladder_pvp', gamedata.get('ladder_pvp', False))
                if old_is_ladder and (not new_is_ladder) and gamedata['matchmaking']['zero_points_on_ladder_exit']:
                    # switching out of ladder - reset scores
                    ladder_reset = True
                    self.modify_scores({'trophies_pvp':gamedata['trophy_floor']['pvp']}, method='=', reason = 'change_region')

                if self.my_home.base_region:
                    cons = gamedata['regions'][self.my_home.base_region].get('on_enter', None)
                    if cons:
                        # be careful about leaving the player in a broken state here!
                        session.execute_consequent_safe(cons, self, retmsg, reason='change_region:on_enter(%s)' % self.my_home.base_region)

            else:
                # changed location within one region - no need to drop old stuff
                pass

        self.history['map_placement_gen'] = gamedata['territory']['map_placement_gen']

        self.home_region = self.my_home.base_region
        self.travel_begin(None, 0) # reset travel

        if retmsg is not None: # only run this code OUTSIDE the pre-first-session-change login path
            retmsg.append(["REGION_CHANGE", self.home_region, self.my_home.base_map_loc, False, self.my_home.base_climate])
            if self.home_region and gamedata['regions'][self.home_region].get('enable_turf_control',False):
                retmsg.append(["REGION_TURF_UPDATE", self.home_region, gamesite.nosql_client.alliance_turf_get_by_region(self.home_region, reason = 'change_region')])
            retmsg.append(["PLAYER_TRAVEL_UPDATE", self.travel_state])
            retmsg.append(["SQUADS_UPDATE", self.squads])

            session.init_region_chat(session.player.home_region, retmsg)

            # note: objects only added/removed to session when this is triggered OUTSIDE the login path
            retmsg += [["OBJECT_REMOVED2", session.rem_object(obj.obj_id).obj_id] for obj in scenery_removed if session.has_object(obj.obj_id)]
            retmsg += [["OBJECT_CREATED2", session.add_object(obj).serialize_state()] for obj in scenery_added]

            if session.player.get_daily_messages(session, retmsg): # may trigger message
                session.player.send_mailbox_update(retmsg)

        # update player cache
        gamesite.pcache_client.player_cache_update(self.user_id, {'home_region':self.home_region, 'home_base_loc':self.my_home.base_map_loc}, reason ='change_region')

        metric_event_coded(self.user_id, '4701_change_region_success', {'request_region':request_region, 'request_loc':request_loc,
                                                                        'new_region': self.home_region, 'new_loc': self.my_home.base_map_loc,
                                                                        'ladder_reset': ladder_reset,
                                                                        'old_region':old_region, 'old_loc':old_loc, 'reason':reason})

        return True

    # returns a list of "waves" where each wave is a dictionary of {unit_spec:quantity},
    # based on the "wave_table" that calibrates units against what the player has unlocked
    def get_ai_attack_units(self, attack_data):
        data = None
        # find table entry based on the highest-tech unit the player already has
        for entry in gamedata['ai_attacks']['wave_table']:
            techname = entry['player_lacks']
            if self.tech.get(techname,0) < 1:
                data = entry
                break
        if not data:
            # use last entry if player is a baller and has everything
            data = gamedata['ai_attacks']['wave_table'][-1]

        wave_size = attack_data['waves']
        waves = [dict([(data[kind],qty) for kind, qty in sz.iteritems() if qty>0]) for sz in wave_size]
        return waves

    # unused for now
    def get_repeat_attack_cooldown_expire_time(self, victim_id, victim_base_id):
        # only applies to legacy PvP
        if self.is_ladder_player() or (not self.is_legacy_pvp_player()): return 0

        ai_or_human = 'ai' if is_ai_user_id_range(victim_id) else 'human'

        config = self.get_any_abtest_value('repeat_attack_cooldown', gamedata['repeat_attack_cooldown'])[ai_or_human]

        if config['base'] <= 0: return 0
        if victim_id == self.user_id: return 0
        if victim_base_id != home_base_id(victim_id): return 0 # no cooldown for quarry/squad attacks

        last_time = -1 # time of very last attack
        last_count = 0 # number of attacks within cooldown reset time

        # XXX calculate based on player.cooldowns

        last_count -= config['freebies']

        if last_count > 0:
            ret = int(last_time + config['base'] * math.pow(config['growth'], last_count-1))
            if gamedata['server']['log_repeat_attack_cooldown_calc']:
                gamesite.exception_log.event(server_time, 'repeat_attack vs %d:%s (%s) last_time %d last_count %d = %d more sec (%s)' % \
                                             (victim_id, victim_base_id, ai_or_human, last_time, last_count, ret - server_time, repr(config)))
            return ret
        return 0

def init_game(player, add_extras):
    override = player.get_any_abtest_value('starting_conditions', {})

    player.tutorial_state = override['tutorial_state'] if ('tutorial_state' in override) else gamedata['starting_conditions'].get('tutorial_state', 'START')
    if player.tutorial_state == "COMPLETE":
        # for games without a rails tutorial, perform post-tutorial state setup here
        player.set_post_tutorial_state()

    tech = override['tech'] if ('tech' in override) else gamedata['starting_conditions']['tech']
    for key, level in tech.iteritems():
        player.tech[key] = level
    player.recalc_stattab(player)

    buildings = override['buildings'] if ('buildings' in override) else gamedata['starting_conditions']['buildings']
    for b in buildings:
        obj = instantiate_object_for_player(player, player, b['spec'], x=b['xy'][0], y=b['xy'][1], level = b.get('level',1))
        # begin with damage (note: must be >= the tutorial damage limit in main.js)
        obj.hp = int(b.get('hp_ratio',1) * obj.max_hp)
        player.home_base_add(obj)

        key = 'building:'+obj.spec.name+':num_built'
        dict_increment(player.history, key, 1)

        if obj.spec.history_category:
            key = obj.spec.history_category+'_max_level'
            player.history[key] = max(player.history.get(key,0), obj.level)
            key = obj.spec.history_category+'_built'
            dict_increment(player.history, key, 1)
        if obj.spec.track_level_in_player_history:
            key = obj.spec.name+'_level'
            player.history[key] = max(player.history.get(key,0), obj.level)


    barrier_locs = override['barriers'] if ('barriers' in override) else gamedata['starting_conditions']['barriers']
    for loc in barrier_locs:
        player.home_base_add(instantiate_object_for_player(player, player, 'barrier', x=loc[0], y=loc[1]))

    # starting units
    units = override['units'] if ('units' in override) else gamedata['starting_conditions']['units']
    for u in units:
        player.home_base_add(instantiate_object_for_player(player, player, u['spec'], x=u['xy'][0], y=u['xy'][1]))

    deposit_config = player.get_any_abtest_value('iron_deposits', gamedata['server']['iron_deposits'])
    if deposit_config['max'] > 0:
        loc = deposit_config.get('starting_location', [72,63])
        deposit = instantiate_object_for_player(player, player, 'iron_deposit', x=loc[0], y=loc[1], metadata = deposit_config.get('starting_contents', {'iron': 150}))
        player.home_base_add(deposit)

    player.my_home.init_production(player)

    # completed quests
    quests = override['completed_quests'] if ('completed_quests' in override) else gamedata['starting_conditions']['completed_quests']
    for quest in quests:
        player.completed_quests[quest] = {'count':1, 'time':server_time}
        dict_increment(player.history, 'quests_completed', 1)
        dict_increment(player.history, 'quest:'+quest+':completed', 1)

    # override resource levels
    for res in gamedata['resources']:
        if res in override:
            setattr(player.resources, res, override[res])
    if 'xp' in override: player.resources.xp = override['xp']

def spawn_tutorial_units(session, retmsg):
    override = session.player.get_any_abtest_value('starting_conditions', {})
    data_list = override['attacking_units'] if ('attacking_units' in override) else gamedata['starting_conditions']['attacking_units']
    if not data_list: return
    for data in data_list:
        obj = instantiate_object_for_player(session.player, RogueOwner, data['spec'], x=data['xy'][0], y=data['xy'][1])
        obj.unpersist_state(data)
        session.viewing_base.adopt_object(obj)
        session.add_object(obj)
        retmsg.append(["OBJECT_CREATED2", obj.serialize_state()])
    # start the tutorial with a null attack log open
    session.open_attack_log(-1, -1, -1)

# FOR TESTING ONLY - create "someone else's" base
def setup_test_user(facebook_id, user_id, ui_name):
    gamesite.exception_log.event(server_time, 'Setting up test user account...')
    user = User(user_id)
    user.facebook_name = ui_name
    user.facebook_id = facebook_id
    #user_table.store_sync(user)
    user_table.store_async(user, lambda: None, False, 'setup_test_user')

    player = LivePlayer(user_id)
    player.alias = ui_name
    init_game(player, 1)
    player.read_only = 0
    for obj in player.home_base_iter():
        obj.heal_to_full()
    player.my_home.init_production(player)
    player.tutorial_state = "COMPLETE"

    player.home_base_add(instantiate_object_for_player(player, EnvironmentOwner, gamedata['default_debris_inert'], x=10, y=10))
    player_table.store_async(player, lambda: None, False, 'setup_test_user')





# new AI base construction

# firing them all at once overloads the OSX file descriptor limit for
# the async stores, so pace it out by doing them a few at a time

def setup_ai_bases():
    strid_list = [strid for strid, data in gamedata['ai_bases_server']['bases'].iteritems() if data.get('enable',1)]
    for i in xrange(10):
        setup_next_ai_base(strid_list)

def setup_next_ai_base(strid_list):
    if len(strid_list) < 1: return
    update_server_time()
    strid = strid_list.pop()
    setup_ai_base(strid, functools.partial(setup_next_ai_base, strid_list))

def setup_ai_base(strid, cb):
    if 'ai_bases' not in gamedata:
        gamesite.exception_log.event(server_time, 'Loading full ai_bases data...')
        gamedata['ai_bases'] = SpinConfig.load(SpinConfig.gamedata_component_filename("ai_bases_compiled.json"))

    data = gamedata['ai_bases']['bases'][strid]
    kind = data.get('kind', 'ai_base')

    gamesite.exception_log.event(server_time, 'Setting up AI %4d: %s L%d' % (int(strid), data['ui_name'], data['resources']['player_level']))

    user = User(int(strid))
    user.facebook_first_name = user.facebook_name = data['ui_name']
    user.facebook_id = -1 # XXX None
    user_table.store_async(user, lambda: None, False, 'setup_ai_bases')

    player = LivePlayer(user.user_id)
    player.read_only = 1
    player.alias = data['ui_name']
    player.tutorial_state = "COMPLETE"
    player.resources.unpersist_state(data['resources'])
    player.my_home.deployment_buffer = data.get('deployment_buffer', 1)

    if 'base_climate' in data:
        assert (data['base_climate'] in gamedata['climates']) or (data['base_climate'] is None)
        player.my_home.base_climate = data['base_climate'] or gamedata.get('default_climate', None)

    if 'base_richness' in data: player.my_home.base_richness = data['base_richness']
    if 'base_ncells' in data: player.my_home.base_ncells = data['base_ncells']
    if 'base_resource_loot' in data: player.my_home.base_resource_loot = data['base_resource_loot']

    player.tech = copy.copy(gamedata['ai_bases_server']['ai_starting_conditions']['tech'])
    for techname, techlevel in data.get('tech',{}).iteritems():
        player.tech[techname] = techlevel
    if 'unit_equipment' in data:
        player.unit_equipment = copy.copy(data['unit_equipment'])
    player.recalc_stattab(player)

    if ('scenery' not in data) or data.get('random_scenery',False):
        player.my_home.spawn_scenery(player, user.user_id, overwrite = True)

    if 'scenery' in data:
        for p in data['scenery']:
            player.home_base_add(instantiate_object_for_player(player, EnvironmentOwner, p['spec'], x=p['xy'][0], y=p['xy'][1]))

    if kind == 'ai_base':
        for p in data['buildings']:
            obj = instantiate_object_for_player(player, player, p['spec'], x=p['xy'][0], y=p['xy'][1], level=p.get('level',1))
            if 'force_level' in p: obj.force_ai_level = int(p['force_level'])
            if 'equipment' in p: obj.equipment = copy.deepcopy(p['equipment'])
            if 'hp_ratio' in p: obj.hp = int(obj.hp * p['hp_ratio'])

            # max out harvesters
            if obj.is_producer():
                obj.produce_start_time = 1
                obj.produce_rate = 9999999
            player.home_base_add(obj)

        for p in data['units']:
            obj = instantiate_object_for_player(player, player, p['spec'], x=p['xy'][0], y=p['xy'][1], level=p.get('level',1))
            if 'force_level' in p: obj.force_ai_level = int(p['force_level'])

            if 'orders' in p: obj.orders = p['orders']
            if 'patrol' in p: obj.patrol = p['patrol']
            if 'temporary' in p: obj.temporary = p['temporary']
            player.home_base_add(obj)

        player.my_home.init_production(player)
    else:
        xypos = player.my_home.midcell()
        player.home_base_add(instantiate_object_for_player(player, player, gamedata['townhall'], x=xypos[0], y=xypos[1], level=1))

    # populate cache entry
    gamesite.pcache_client.player_cache_update(user.user_id,
                                               {'player_level': player.resources.player_level,
                                                'ui_name': player.alias, 'social_id': 'ai',
                                                'facebook_id': '-1', # XXX remove later
                                                }, reason = 'setup_ai_base')

    player_table.store_async(player, cb, False, 'setup_ai_bases')

def ai_base_source_file(id):
    if type(id) is int:
        # look in AI bases
        source_file = gamedata['ai_bases_server']['bases'][str(id)]['base_source_file']
        source_file = source_file.replace('$GAME_ID', SpinConfig.game()) # not game_id, because we want to strip 'test' suffix if present
        return SpinConfig.gamedata_component_filename(source_file)
        #return '../gamedata/'+source_file
    else:
        return id # literal path



# pull out acquisition event data from a hit on the site
def get_acquisition_data_from_url(url, user_id):

    # get rid of crap on the end of the URL
    if url.endswith('/'): url = url[:-1]
    elif url.endswith('%2F'): url = url[:-3]

    q = urlparse.parse_qs(urlparse.urlparse(url).query)
    ret = None
    if q.has_key('spin_campaign'):
        ret = {'type':'ad_click', 'url': url, 'campaign_name':q['spin_campaign'][0]}
        MAP = {'spin_ge': 'age_group', 'spin_aimg': 'ad_image',
               'spin_attl': 'ad_title', 'spin_atxt': 'ad_text',
               'spin_tgt': 'ad_target',
               'spin_atgt': 'ad_skynet', # NOTE! skynet uses atgt for targeting
               'spin_rtgt': 'skynet_retarget', # retargeted ads are handled separately
               'spin_ati_context': 'adotomi_context',
               'dauup_id': 'dauup_context', 'pd_id': 'dauup_context', 'da_id': 'dauup2_context',
               'cid': 'liniad', 'dp': 'liniad'}
        for key, val in MAP.iteritems():
            if q.has_key(key):
                v = str(q[key][0])
                if val == 'liniad':
                    if ('liniad' in gamedata['adnetworks']):
                        if ('cid' in q) and ('dp' in q) and ('spin_campaign' in q) and re.compile(gamedata['adnetworks']['liniad']['require_spin_campaign']).match(str(q['spin_campaign'][0])):
                            ret['liniad_context'] = {'cid':str(q['cid'][0]), 'dp':str(q['dp'][0])}
                else:
                    ret[val] = v
                    if key == 'spin_tgt':
                        ret[val] = ret[val].lower()
                    elif key == 'pd_id' and (SpinConfig.game() != 'mf'):
                        # special case for DAU-UP - attach both APIs on a pd_id hit
                        ret['dauup2_context'] = v
                    elif key == 'spin_atgt':
                        # when we see a skynet targeting in the URL, engage our FB conversion pixels
                        ret['fb_conversion_pixels_context'] = v

    elif q.has_key('campaign'):
        ret = {'type':'ad_click', 'url': url, 'campaign_name':q['campaign'][0]}
    elif q.has_key('spin_ref'):
        ret = {'type':q['spin_ref'][0], 'url': url}
        if q.has_key('spin_ref_user_id'):
            ret['referring_user_id'] = q['spin_ref_user_id'][0]
            if ret['referring_user_id'] == str(user_id):
                ret['useless'] = 1 # self-referral
        if q.has_key('spin_gift_id'):
            ret['gift_id'] = q['spin_gift_id'][0]
    elif q.has_key('fb_source'):
        ret = {'type': 'ad_click', 'url': url, 'campaign_name': q['fb_source'][0] }
        if q.has_key('fb_ref'):
            ret['fb_ref'] = q['fb_ref'][0]
        if (q.has_key('notif_t') and q['notif_t'][0] == 'app_notification'):
            ret['useless'] = 1 # app-to-user notification - already acquired
    elif q.has_key('spin_promo_code'):
        ret = {'type': 'ad_click', 'url': url, 'campaign_name': 'promo_code' }
    elif q.has_key('ref'):
        ref = q['ref'][0]
        if ref == 'notif':
            if q.has_key('notif_t'):
                notif_t = q['notif_t'][0]
                if notif_t == 'app_request':
                    if q.has_key('request_ids'):
                        ids = q['request_ids'][0].split(',')
                        ret = {'type': 'facebook_app_request', 'facebook_request_ids': ids,
                               'url': url}
            else:
                # unfortunately, not all request links contain the IDs
                ret = {'type': 'facebook_app_request', 'url': url}
        else:
            ret = {'type': 'unknown', 'url': url}
    if ret:
        ret['time'] = server_time

        # mark super-common FB bookmark clicks as useless for acquisition tracking purposes,
        # to avoid userdb bloat
        if ('fb_source' in q and q['fb_source'][0].endswith('bookmark')) or \
           ('notif_t' in q and q['notif_t'][0] == 'app_request') or \
           ('ref' in q and q['ref'][0] == 'bookmarks'):
            ret['useless'] = 1

    return ret

def metric_event(user_id, event, props = {}, send_to_kissmetrics=True):
    #log.msg(("metric_event(%d, '%s', " % (user_id, event)) +repr(props)+')')

    assert 'code' in props

    if SpinConfig.config['enable_kissmetrics'] and send_to_kissmetrics:
        km = KISSmetrics.KM(SpinConfig.config['kissmetrics_api_key'], async=gamesite.AsyncHTTP_metrics)
        km.identify(str(user_id))
        km.record(event, props.copy())

    props['user_id'] = user_id
    props['event_name'] = event
    gamesite.metrics_log.event(server_time, props)


def metric_event_coded(user_id, event_name, props):
    props['code'] = int(event_name[0:4])
    metric_event(user_id, event_name, props)

def metric_alias(user_id, anon_id):
    if not SpinConfig.config['enable_kissmetrics']:
        return
    km = KISSmetrics.KM(SpinConfig.config['kissmetrics_api_key'], async=gamesite.AsyncHTTP_metrics)
    km.alias(str(user_id), anon_id)

# parse client-supplied canvas_oversample for metrics
def parse_canvas_oversample(v):
    if v is None: return None
    if type(v) not in (int, float):
        assert type(v) in (str, unicode)
        if '.' in v: v = float(v)
        else: v = int(v)
    return v

# Facebook Open Graph object endpoint
class OGPAPI(resource.Resource):
    isLeaf = True

    @classmethod
    def object_type(cls, name):
        if name == 'literal': return name
        if name == 'gamebucks' and SpinConfig.game() == 'mf':
            # backwards-compatibility hack
            name = 'alloy'
        return SpinConfig.game()+'_'+name

    def get_object_endpoint(self, params, override_host = None):
        port = SpinConfig.config['proxyserver']['external_http_port']
        port_str = (':%d' % port) if port != 80 else ''
        host = override_host or SpinConfig.config['proxyserver'].get('external_host', socket.gethostname())

        # note: use stable ordering of key/value pairs for the query string, so that the canonical URL is deterministic
        qs = urllib.urlencode(sorted(params.items(), key = lambda k_v: k_v[0]))
        return ("http://%s%s/OGPAPI?" % (host, port_str)) + qs

    def render_GET(self, request):
        SpinHTTP.set_access_control_headers(request)
        ret = catch_all('OGPAPI request %s args %r' % (request.uri.decode('utf-8'), dict((k,v[0].decode('utf-8')) for k,v in request.args.iteritems())))(self.handle_request)(request)
        if ret is None:
            request.setResponseCode(http.BAD_REQUEST)
            ret = 'spinpunch error'
        return ret

    @admin_stats.measure_latency('OGPAPI')
    def handle_request(self, request):
        if gamedata['server']['log_fb_open_graph']:
            gamesite.exception_log.event(server_time, 'OGPAPI HIT: '+repr(request)+' args '+repr(request.args))

        if 'type' not in request.args:
            # bad hit, like from a web crawler
            request.setResponseCode(http.BAD_REQUEST)
            return 'spinpunch error'

        ret = '<!DOCTYPE html>\n<html>\n'
        type = request.args['type'][0]
        # order of precedence:
        # image_url > art_asset_file > art_asset_s3
        image_url = None
        art_asset_file = None
        art_asset_s3 = None
        my_extra_prefix = ''
        my_og_type = None
        my_url = None
        my_spin_ref = None
        my_spin_ref_user_id = None
        my_spin_link_qs = None
        my_ui_name = None
        my_ui_description = None
        my_ui_determiner = None
        extra_props = {}
        extra_raw_props = []

        if type in (OGPAPI.object_type('gamebucks'), OGPAPI.object_type('alloy')):
            my_url = self.get_object_endpoint({'type':type})
            my_extra_prefix = ' product: http://ogp.me/ns/product#' # ' fbpayment:http://ogp.me/ns/fb/fbpayment#'
            my_og_type = 'og:product' # 'fbpayment:currency'
            my_ui_name = gamedata['strings']['game_name'] +' ' + gamedata['store']['gamebucks_ui_name']
            my_ui_description = "Can be spent in game on speed-ups, resources, and special items"
            my_ui_determiner = 'the'
            art_asset_s3 = gamedata['store']['fb_open_graph_gamebucks_icon']
            #extra_raw_props.append(('fbpayment:rate', gamedata['store']['gamebucks_per_fbcredit']))
            for currency, amount in gamedata['store']['gamebucks_open_graph_prices']:
                extra_raw_props.append(('product:price:amount', amount))
                extra_raw_props.append(('product:price:currency', currency))

        elif type == OGPAPI.object_type('sku'):
            spellname = request.args['spellname'][0]
            if spellname not in gamedata['spells']:
                request.setResponseCode(http.NOT_FOUND)
                return 'invalid spellname'
            spell = gamedata['spells'][spellname]
            assert spell['price_formula'] == 'constant' # price must be only a function of the URL!
            my_url_props = {'type':type, 'spellname': spellname}
            if 'want_loot' in request.args:
                my_url_props['want_loot'] = request.args['want_loot'][0]
            my_url = self.get_object_endpoint(my_url_props)
            my_extra_prefix = ' product: http://ogp.me/ns/product#'
            my_og_type = 'og:product'
            # note: for localized languages, we'll have to have individual SKUs here
            spellarg = None
            if 'quantity' in request.args:
                spellarg = int(request.args['quantity'][0])
            elif 'want_loot' in request.args: # opt-in to item bundle
                spellarg = {'want_loot': bool(int(request.args['want_loot'][0]))}
            else:
                spellarg = {'want_loot': 0} # default
            my_ui_name = Store.format_ui_string(None, spellname, spellarg, spell, spell['ui_name'])
            my_ui_description = Store.format_ui_string(None, spellname, spellarg, spell, spell['ui_description'])

            art_asset_s3 = spell.get('fb_open_graph_s3_image', gamedata['store']['fb_open_graph_gamebucks_icon'])
            if 'open_graph_prices' in spell:
                for i in xrange(len(spell['open_graph_prices'])):
                    # for details see https://developers.facebook.com/docs/payments/ads_virtual_goods
                    if 'open_graph_original_prices' in spell:
                        currency, amount = spell['open_graph_original_prices'][i]
                        extra_raw_props.append(('product:original_price:amount', amount))
                        extra_raw_props.append(('product:original_price:currency', currency))
                    currency, amount = spell['open_graph_prices'][i]
                    extra_raw_props.append(('product:price:amount', amount))
                    extra_raw_props.append(('product:price:currency', currency))
            if 'open_graph_purchase_limit' in spell:
                extra_raw_props.append(('product:purchase_limit', spell['open_graph_purchase_limit']))

        elif type == OGPAPI.object_type('achievement'):
            name = request.args['name'][0]
            data = gamedata['achievements'][name]
            my_url = self.get_object_endpoint({'type':type, 'name':name})
            my_og_type = data['fb_open_graph'].get('fb_type', 'game.achievement').replace('$APP_NAMESPACE', SpinConfig.config['facebook_app_namespace'])
            my_ui_name = data['fb_open_graph'].get('fb_name', data['ui_name'])
            my_ui_description = data['fb_open_graph'].get('fb_description', data['ui_description'])
            art_asset_s3 = data['fb_open_graph']['s3_image']
            if my_og_type == 'game.achievement':
                extra_raw_props.append(('game:points', data['fb_open_graph']['points']))

        elif type == OGPAPI.object_type('base'):
            user_id = int(request.args['user_id'][0])
            base = gamedata['ai_bases_server']['bases'][str(user_id)]
            #art_asset_file =gamedata['art'][base['portrait']]['states']['normal']['images'][0]
            my_url = self.get_object_endpoint({'type':type,'user_id':user_id})
            if 'fb_open_graph' in base:
                my_ui_name = base['fb_open_graph'].get('name', base['ui_name'])
                my_ui_description = base['fb_open_graph']['description']
                art_asset_s3 = base['fb_open_graph']['s3_image']
            else:
                my_ui_name = "%s Level %d" % (base['ui_name'], base['resources']['player_level'])
                my_ui_description = "A vicious computer opponent" # ui_name

            extra_props['level'] = base['resources']['player_level']
            extra_props['owner'] = base['ui_name']
            extra_props['user_id'] = user_id

        elif type == OGPAPI.object_type('player_level'):
            level = int(request.args['level'][0])
            my_url = self.get_object_endpoint({'type':type, 'level': level})
            my_ui_name = "Level %d" % level
            extra_props['level'] = level

        elif type in [OGPAPI.object_type(x) for x in ('spec_building','spec_unit','spec_mobile','spec_inert','spec_tech','spec_aura')]:
            spec_name = request.args['spec'][0]
            level = int(request.args['level'][0]) if ('level' in request.args) else -1

            spec = GameObjectSpec.lookup(spec_name)
            # need to get the raw gamedata spec for UI strings
            raw_spec = gamedata[Spec.KEY_MAP[spec.kind]][spec_name]
            my_ui_name = "%s" % raw_spec['ui_name']
            my_ui_description = "%s" % raw_spec['ui_description']

            if 'external_art_asset' in raw_spec:
                art_asset_s3 = raw_spec['external_art_asset']

            url_params = {'type':type,'spec':spec_name}
            if level > 0:
                url_params['level'] = str(level)
                my_ui_name += " Level %d" % level
                extra_props['level'] = level

            my_url = self.get_object_endpoint(url_params)

        elif type == OGPAPI.object_type('ranking'):
            #value = int(request.args['value'][0])
            #percentile = str(request.args['percentile'][0])
            #category = str(request.args['category'][0])
            #extra_props['value'] = value
            #extra_props['percentile'] = percentile

            my_ui_name = 'Leaderboard Ranking'
            if 'category' in request.args:
                category = str(request.args['category'][0])
                extra_props['category'] = category
                my_ui_name += ': '+category

            my_url = self.get_object_endpoint(dict([(key, val[0]) for key, val in request.args.iteritems()]))
            #my_ui_description = 'For '+category

        elif type == OGPAPI.object_type('literal'):
            for MANDATORY_ARG in ('spin_ref', 'ui_name'):
                if MANDATORY_ARG not in request.args:
                    request.setResponseCode(http.BAD_REQUEST)
                    return 'missing %s' % MANDATORY_ARG

            my_ui_name = request.args['ui_name'][0].decode('utf-8')
            if ('ui_description' in request.args):
                my_ui_description = request.args['ui_description'][0].decode('utf-8')
            else:
                my_ui_description = SpinConfig.config['proxyserver'].get('fbexternalhit_description', '')
            my_spin_ref = str(request.args['spin_ref'][0])
            if ('spin_ref_user_id' in request.args):
                my_spin_ref_user_id = str(request.args['spin_ref_user_id'][0])
            if ('spin_link_qs' in request.args):
                my_spin_link_qs = SpinJSON.loads(request.args['spin_link_qs'][0])
                assert my_spin_link_qs.__class__ is dict
            my_url = self.get_object_endpoint(dict([(key, val[0]) for key, val in request.args.iteritems()]))

        else:
            raise Exception('unknown type "%s"' % type)

        ns = SpinConfig.config['facebook_app_namespace']
        ret += '<head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# %s: http://ogp.me/ns/fb/%s#%s">\n' % (ns, ns, my_extra_prefix)
        ret += '<meta property="fb:app_id" content="%s" />\n' % SpinConfig.config['facebook_app_id']
        ret += '<meta property="og:type"   content="%s" />\n' % (my_og_type if my_og_type else '%s:%s' % (ns, type))
        #ret += '<meta property="og:url"    content="http://apps.facebook.com/%s?spin_campaign=open_graph" />\n' % (SpinConfig.config['facebook_app_namespace'])
        ret += '<meta property="og:url"    content="%s" />\n' % my_url
        ret += u'<meta property="og:title"  content="'+cgi_escape(my_ui_name,True)+u'" />\n'

        if my_ui_description:
            ret += u'<meta property="og:description"  content="'+cgi_escape(my_ui_description,True)+u'" />\n'
        if my_ui_determiner is not None:
            ret += u'<meta property="og:determiner"  content="'+cgi_escape(my_ui_determiner,True)+u'" />\n'

        if not image_url:
            # add image file, either from in-game art asset (200x200px minimum!),
            # or use a generic default Mars Frontier image if none is specified

            if ('image_url' in request.args): # allow client-provided fallback
                image_url = str(request.args['image_url'][0])
            elif art_asset_file:
                if 'art_cdn_path' in SpinConfig.config['proxyserver']:
                    art_server = SpinConfig.config['proxyserver']['art_cdn_path']
                else:
                    # URL to art asset assumes proxyserver is running on same host if no CDN is in use!
                    art_server = '%s:%d/' %  (SpinConfig.config['proxyserver'].get('external_host', gamesite.config.game_host),
                                              SpinConfig.config['proxyserver']['external_http_port'])
                image_url = 'http://%s%s' % (art_server, art_asset_file)
            elif art_asset_s3:
                image_url = 'http://s3.amazonaws.com/'+gamedata['public_s3_bucket']+'/facebook_assets/%s' % art_asset_s3
            else:
                image_url = SpinConfig.config['proxyserver'].get('fbexternalhit_image', '')

        ret += '<meta property="og:image"  content="%s" />\n' % image_url

        for key, val in extra_props.iteritems():
            ret += '<meta property="%s:%s"  content="%s" />\n' % (ns, key, cgi_escape(str(val),True))
        for key, val in extra_raw_props:
            ret += '<meta property="%s"  content="%s" />\n' % (key, cgi_escape(str(val),True))

        if not my_spin_ref:
            my_spin_ref = 'open_graph_'+type

        # add JavaScript code to redirect end-user browser hits (not Facebook back-end Open Graph hits) to the game
        game_qs = 'spin_ref='+my_spin_ref
        if my_spin_ref_user_id:
            game_qs += '&spin_ref_user_id='+my_spin_ref_user_id
        if my_spin_link_qs:
            game_qs += '&'+urllib.urlencode(my_spin_link_qs)
        ret += '</head>\n<body onload="top.location.href = \'//apps.facebook.com/%s/?%s\';"></body>\n</html>' % \
               (SpinConfig.config['facebook_app_namespace'], game_qs)
        return ret.encode('utf-8')

OGPAPI_instance = OGPAPI()

# small interface used by the proxy server to communicate with us
class CONTROLAPI(resource.Resource):
    isLeaf = True
    def __init__(self, gameapi):
        resource.Resource.__init__(self)
        self.gameapi = gameapi

    def render_POST(self, request): return self.render_GET(request)
    def render_GET(self, request):
        update_server_time()
        ret = None

        if ('secret' in request.args and 'method' in request.args):
            secret = str(request.args['secret'][0])
            method = str(request.args['method'][0])
            args = dict([(k, str(v[0])) for k, v in request.args.iteritems() if k not in ('secret','method')])

            with admin_stats.latency_measurer('CONTROLAPI(HTTP:%s)' % method):
                ret = catch_all('CONTROLAPI (method %r args %r)' % (method, args))(self.handle)(request, secret, method, args)

        if ret is None:
            request.setResponseCode(http.BAD_REQUEST)
            ret = 'error\n'
        return ret

    def kill_session(self, request, session, body = None):
        if not body: body = 'ok\n'
        d = self.gameapi.log_out_async(session, 'forced_relog')
        d.addCallback(lambda _, session=session: ascdebug('kill_session %d %s async end' % (session.user.user_id, session.session_id)))
        d.addCallback(lambda _, body=body, request=request: SpinHTTP.complete_deferred_request(body, request))

        return server.NOT_DONE_YET

    # function for receiving cross-server IPC broadcasts
    def chat_recv(self, channel, id, sender_info, text):
        assert channel == 'CONTROL'
        if gamedata['server']['log_controlapi']:
            gamesite.exception_log.event(server_time, 'CONTROLAPI(CHAT): %s got %s %s' % (spin_server_name, repr(sender_info), text))
        ret = None

        try:
            with admin_stats.latency_measurer('CONTROLAPI(CHAT:%s)' % sender_info['method']):
                ret = self.handle(None, sender_info['secret'], sender_info['method'], sender_info['args'])
        except:
            gamesite.exception_log.event(server_time, 'CONTROL chat_recv exception method %r args %r: %s' % (sender_info['method'], sender_info['args'], traceback.format_exc().strip())) # OK

        return ret

    # encapsulate state needed to load, mutate, then store player and user JSON structs
    class AsyncSupport(object):
        def __init__(self, user_id, method_name, handler, d):
            self.user_id = user_id
            self.method_name = method_name
            self.handler = handler
            self.d = d
            self.player_raw = None
            self.user_raw = None
            self.has_player = False
            self.has_user = False
            self.wrote_player = False
            self.wrote_user = False
            self.error = None
            self.val = None # return value
        def start(self):
            if self.handler.need_player:
                io_system.async_read_player(self.user_id, self.player_read_success, self.player_read_error, reason='CustomerSupport')
            else:
                self.has_player = True
                self.player_raw = ''
            if self.handler.need_user:
                io_system.async_read_user(self.user_id, self.user_read_success, self.user_read_error, reason='CustomerSupport')
            else:
                self.has_user = True
                self.user_raw = ''
            self.try_mutate()
        def player_read_error(self, reason):
            self.has_player = True
            self.error = reason
            self.try_mutate()
        def player_read_success(self, buf):
            self.has_player = True
            if buf != 'NOTFOUND':
                self.player_raw = buf
            else:
                self.error = 'player not found'
            self.try_mutate()
        def user_read_error(self, reason):
            self.has_user = True
            self.error = reason
            self.try_mutate()
        def user_read_success(self, buf):
            self.has_user = True
            if buf != 'NOTFOUND':
                self.user_raw = buf
            else:
                self.error = 'user not found'
            self.try_mutate()
        def try_mutate(self):
            if (not self.has_player) or (not self.has_user): return # I/O not done yet
            if (self.player_raw is None) or (self.user_raw is None) or self.error:
                # failed reading - stop here, don't write
                self.d.callback(CustomerSupport.ReturnValue(error = 'error on player %d: %s' % (self.user_id, self.error or 'unknown')))
                return
            try:
                if self.handler.want_raw:
                    player_json = None
                    user_json = None
                    self.val = self.handler.exec_offline_raw(self.user_raw, self.player_raw)
                else:
                    if self.handler.need_player:
                        player_json = SpinJSON.loads(self.player_raw)
                    else:
                        player_json = None
                    if self.handler.need_user:
                        user_json = SpinJSON.loads(self.user_raw)
                    else:
                        user_json = None
                    self.val = self.handler.exec_offline(user_json, player_json)
            except:
                gamesite.exception_log.event(server_time, 'CustomerSupport offline exception player %d method %r args %r: %s' % (self.user_id, self.method_name, self.handler.args, traceback.format_exc().strip())) # OK
                self.d.callback(CustomerSupport.ReturnValue(error = traceback.format_exc().strip())) # OK
                return

            assert self.val
            if self.handler.read_only:
                self.d.callback(self.val)
                return
            else:
                if self.handler.need_player:
                    assert player_json
                    player_json['generation'] = player_json.get('generation',-1)+1
                    player_buf = SpinJSON.dumps(player_json, pretty = True, newline = True, size_hint = 1024*1024, double_precision = 5)
                    io_system.async_write_player(self.user_id, player_buf, self.player_write_success, False, reason='CustomerSupport')
                else:
                    self.wrote_player = True
                if self.handler.need_user:
                    assert user_json
                    user_buf = SpinJSON.dumps(user_json, pretty = True, newline = True, size_hint = 1024*1024, double_precision = 5)
                    io_system.async_write_user(self.user_id, user_buf, self.user_write_success, False, reason='CustomerSupport')
                else:
                    self.wrote_user = True
                self.try_finish()

        def player_write_success(self):
            self.wrote_player = True
            self.try_finish()
        def user_write_success(self):
            self.wrote_user = True
            self.try_finish()
        def try_finish(self):
            if (not self.wrote_player) or (not self.wrote_user): return # I/O not done yet
            self.d.callback(self.val)

    def handle(self, request, secret, method_name, args):
        assert secret == str(SpinConfig.config['proxy_api_secret'])

        if (method_name in CustomerSupport.methods):
            # new-style CustomerSupport handlers that operate on a session or playerdb/userdb backing store
            user_id = None
            if 'user_id' in args:
                user_id = int(args['user_id'])
            elif 'facebook_id' in args:
                user_id = gamesite.social_id_table.social_id_to_spinpunch('fb'+args['facebook_id'], False)
            if not user_id:
                raise Exception('must supply user_id or facebook_id')

            handler = CustomerSupport.methods[method_name](server_time, user_id, gamedata, gamesite, args)

            # see if the user is logged in
            session = get_session_by_user_id(user_id)

            if session:
                # ONLINE edit

                ret = server.NOT_DONE_YET

                def handle_online(request, session, handler, method_name, args, _):
                    try:
                        val = handler.exec_online(session, session.outgoing_messages)
                    except:
                        gamesite.exception_log.event(server_time, 'CustomerSupport online exception player %d method %r args %r: %s' % \
                                                     (session.user.user_id, method_name, args, traceback.format_exc().strip())) # OK
                        val = CustomerSupport.ReturnValue(error = traceback.format_exc().strip()) # OK

                    if val.async:
                        assert isinstance(val.async, defer.Deferred) # sanity check

                        def online_error(fail, session, method_name, args):
                            gamesite.exception_log.event(server_time, 'CustomerSupport online async exception player %d method %r args %r: %s' % \
                                                         (session.user.user_id, method_name, args, fail.getTraceback().strip())) # OK
                            # turn exception into a regular result
                            return CustomerSupport.ReturnValue(error = fail.getTraceback().strip()) # OK

                        val.async.addErrback(online_error, session, method_name, args)

                        session.start_async_request(val.async)
                        val.async.addCallback(lambda async_result, request=request: SpinHTTP.complete_deferred_request(async_result.as_body(), request))

                    else:
                        if val.kill_session:
                            ret = self.kill_session(request, session, body = val.as_body()) # this adds complete_deferred_request() when necessary
                        else:
                            ret = val.as_body()
                        session.queue_flush_outgoing_messages()
                        SpinHTTP.complete_deferred_request(ret, request)

                d = make_deferred('CustomerSupport:'+method_name+'(online)')

                # if player logged out, this is going to fail
                def handle_online_race(request, fail):
                    fail.trap(Session.AlreadyLoggedOut)
                    SpinHTTP.complete_deferred_request(CustomerSupport.ReturnValue(error = 'Race condition: Player just logged out. Please try again.').as_body(), request)

                d.addCallbacks(functools.partial(handle_online, request, session, handler, method_name, args),
                               functools.partial(handle_online_race, request))

                session.after_async_request(d)

            else:
                # OFFLINE edit
                ret = None
                d = make_deferred('CustomerSupport:'+method_name+'(offline)')

                if not handler.read_only:
                    # get lock
                    state = gamesite.lock_client.player_lock_acquire_attack(user_id, -1, owner_id=-1)
                    if state != Player.LockState.being_attacked:
                        ret = CustomerSupport.ReturnValue(error = 'player %d offline but locked' % user_id).as_body()
                    else:
                        def unlock(val, uid):
                            gamesite.lock_client.player_lock_release(uid, -1, Player.LockState.being_attacked, expected_owner_id = -1)
                            return val
                        d.addBoth(unlock, user_id) # OK

                if ret is None: # no lock error
                    d.addCallback(lambda val, request=request: SpinHTTP.complete_deferred_request(val.as_body(), request))

                    self.AsyncSupport(user_id, method_name, handler, d).start()
                    ret = server.NOT_DONE_YET

        else:

            # custom handlers that do not work with live sessions
            # these are more for server-global operations, plus the terminate_session special case

            handler = getattr(self, 'handle_'+method_name, None)
            if handler is None:
                request.setResponseCode(http.BAD_REQUEST)
                return 'badmethod\n'

            self.trim_args(handler, args)
            ret = handler(request, **args)

        # note: can go asynchronous
        return ret if (ret is not None) else 'ok\n'

    # for forwards-compatibity, prevent CONTROLAPI crashes when receiving unexpected keyword arguments from new code
    warned_args = set()
    def trim_args(self, handler, passed_args):
        named_args, var_args, varkw, defaults = inspect.getargspec(handler)
        if varkw: return passed_args # function accepts **kwargs
        for p in passed_args.keys():
            if p not in named_args:
                key = (handler.__name__, p) # unique tuple to only warn once
                if key not in self.warned_args:
                    self.warned_args.add(key)
                    gamesite.exception_log.event(server_time, '%s: Dropping unrecognized arg "%s"' % \
                                                 (handler.__name__, p))
                del passed_args[p]
        return passed_args

    def handle_terminate_session(self, request, session_id = None):
        # remember that this ID is invalid, in case the client tries to use it again
        invalid_sessions[session_id] = invalid_sessions.get(session_id, 0) + 1
        invalid_sessions_by_time.append((server_time, session_id))

        # collect garbage
        while len(invalid_sessions_by_time) > 0 and (server_time - invalid_sessions_by_time[0][0]) >= gamedata['server']['session_signature_time_tolerance']:
            t, sid = invalid_sessions_by_time.popleft()
            invalid_sessions[sid] -= 1
            if invalid_sessions[sid] <= 0:
                del invalid_sessions[sid]

        self.gameapi.AsyncLogin.cancel_existing(None, session_id)

        if session_id in session_table: # note: we DO want to see logout_in_progress sessions here, to wait until they finish logout before responding
            # note: this goes asynchronous
            ascdebug('terminate_session %s async start' % (session_id))
            return self.kill_session(request, session_table[session_id])
        else:
            # still return 'ok' even if session was not found, since it may have timed out
            ascdebug('terminate_session %s ok' % (session_id))
            return 'ok\n'

    def handle_sql_on(self, request):
        gamesite.sql_init()
    def handle_sql_off(self, request):
        gamesite.sql_shutdown()
    def handle_nosql_on(self, request):
        gamesite.nosql_init()
    def handle_nosql_off(self, request):
        gamesite.nosql_shutdown()
    def handle_maint_kick(self, request):
        return SpinJSON.dumps({'result': gamesite.start_maint_kick()}, newline=True)
    def handle_panic_kick(self, request):
        gamesite.panic_kick(request.transport)
        return SpinJSON.dumps({'result': 'ok'})
    def handle_change_state(self, request, state = None):
        return SpinJSON.dumps({'result':gamesite.change_state(state)}, newline=True)
    def handle_reconfig(self, request):
        return SpinJSON.dumps({'result':gamesite.reconfig()}, newline=True)
    def handle_shutdown(self, request, force = False):
        if (not force) and len(session_table) > 0:
            return SpinJSON.dumps({'error':'not shutting down - %d sessions still active\n' % len(session_table)})

        # redundant with gamesite.shutdown(), but makes the status_json result show correct shutting_down state
        status_json = gamesite.change_state('shutting_down')

        request.setHeader('Connection', 'close')
        reactor.stop()

        return SpinJSON.dumps({'result':status_json}, newline=True)

    def handle_ping(self, request):
        pass
    def handle_sleep(self, request, duration = 5):
        time.sleep(float(duration))
    def handle_admin_stats_reset(self, request):
        admin_stats.reset()
    def handle_reimport(self, request, module = None):
        reload(globals()[module])
        gamesite.exception_log.event(server_time, 'reloaded module %s!' % module)
    def handle_setup_ai_base(self, request, idnum = None):
        setup_ai_base(str(idnum), lambda: SpinHTTP.complete_deferred_request(SpinJSON.dumps({'result':'ok'}), request))
        return server.NOT_DONE_YET
    def handle_server_eval(self, request, expr = None):
        result = eval(expr)
        ui_result = ('\n'+result) if isinstance(result, basestring) else (' '+repr(result))
        gamesite.exception_log.event(server_time, 'eval %s ->%s' % (expr, ui_result))
        return SpinJSON.dumps({'result': repr(result)}, newline=True)
    def handle_system_announcement(self, request, body = None):
        for session in iter_sessions():
            for channel in ('GLOBAL', 'ALLIANCE', 'REGION'):
                session.chat_recv(channel, None, {'chat_name':'System', 'type':'system', 'time': server_time, 'facebook_id':'-1', 'user_id':-1}, body)

    # one server gets this request, and then it goes out to all local sessions and other servers via broadcast
    def handle_censor_chat_message(self, request, channel = None, message_id = None, target_user_id = None, new_type = None):
        assert channel and message_id
        if target_user_id: target_user_id = int(target_user_id)
        gamesite.chat_mgr.send(channel, None,
                               {'time': server_time,
                                'type': 'message_hide', 'new_type': (new_type or 'abuse_violated'),
                                'chat_name': 'System', 'user_id': -1,
                                'target_user_id': target_user_id,
                                'target_message_id': message_id}, '', log = True)
        return SpinJSON.dumps({'result': 'ok'}, newline=True)
    def handle_broadcast_map_update(self, request, region_id = None, base_id = None, data = None, server = None, originator = None, map_time = None):
        assert region_id and base_id and server
        # note: ignore our own broadcasts
        if server != spin_server_name:
            self.gameapi.broadcast_map_update(region_id, base_id, data, originator, send_to_net = False, map_time = map_time)
    def handle_broadcast_map_attack(self, request, msg = None, region_id = None, feature = None,
                                    attacker_id = None, defender_id = None, summary = None, pcache_info = None, server = None, map_time = None):
        # note: ignore our own broadcasts
        if server != spin_server_name:
            self.gameapi.broadcast_map_attack(region_id, feature, attacker_id, defender_id, summary, pcache_info, msg = msg, send_to_net = False, map_time = map_time)
    def handle_broadcast_turf_update(self, request, region_id = None, data = None):
        for session in iter_sessions():
            if session.player.home_region == region_id:
                session.send([["REGION_TURF_UPDATE", session.player.home_region, data]])

class Store(object):

    # given a list of damaged units and/or in-production manuf queue items, return a dictionary mapping
    # from unit specname to rough gamebucks equivalent of speedup cost.
    @classmethod
    def get_unit_cost_detail(cls, session, player, damaged_obj_list = [], manuf_queue = [], manuf_prog = 0):
        ret = {'non_squad':{}, 'squad':{}}
        # note: assumes that object HP values are up to date
        for obj in damaged_obj_list:
            r = ret['squad' if SQUAD_IDS.is_mobile_squad_id(obj.squad_id or 0) else 'non_squad']
            r[obj.spec.name] = r.get(obj.spec.name,0) + obj.cost_to_repair(player)['time']
        for item in manuf_queue:
            t = max(0, item['total_time'] - manuf_prog)
            manuf_prog = max(0, manuf_prog - item['total_time'])
            ret['non_squad'][item['spec_name']] = ret['non_squad'].get(item['spec_name'],0) + t

        # convert from seconds to (fractional) gamebucks
        return dict((kind, dict((specname, Store.get_speedup_price(player, 'unit_repair', seconds, 'gamebucks', quantize = False)) \
                    for specname, seconds in ret[kind].iteritems())) \
                    for kind in ret if ret[kind])

    @classmethod
    def get_free_speedup_time(cls, session, player):
        return Predicates.eval_cond_or_literal(player.get_any_abtest_value('free_speedup_time', gamedata['store']['free_speedup_time']), session, player)

    # for historical reasons, the core time/cost computation is done in units of fbcredits
    @classmethod
    def get_speedup_price_fbcredits(cls, player, kind, seconds):
        mins_per_credit = player.get_any_abtest_value('speedup_minutes_per_credit', gamedata['store']['speedup_minutes_per_credit'])
        if type(mins_per_credit) is dict:
            mins_per_credit = mins_per_credit.get(kind, mins_per_credit['default'])
        return (seconds/60.0)/mins_per_credit

    @classmethod
    def get_speedup_price(cls, player, kind, seconds, currency, quantize = True):
        fbcredits_price = Store.get_speedup_price_fbcredits(player, kind, seconds)
        if currency == 'gamebucks':
            ret = player.get_any_abtest_value('gamebucks_per_fbcredit', gamedata['store']['gamebucks_per_fbcredit']) * fbcredits_price
        elif currency == 'fbcredits':
            ret = fbcredits_price
        else:
            raise Exception('unhandled currency '+currency)

        if quantize: # snap to next-highest integer price
            return int(ret) + 1
        return ret

    # get price in either FB credits or user's currency
    # this must match Store.get_price in the game client code, or else there will be trouble!!!
    # return -1 if the order is invalid (e.g. because upgrade/research requirements are not met)
    @classmethod
    def get_price(cls, session, sale_currency, unit_id, spell, spellarg, price_description, error_reason):

        p, p_currency = Store.get_base_price(session, unit_id, spell, spellarg, price_description, error_reason, sale_currency)

        if p <= 0:
            return p

        # only check for currency match when price > 0
        if (not (sale_currency.startswith('item:') or sale_currency.startswith('score:') or (sale_currency in gamedata['resources']))):
            spell_currency = spell.get('currency', session.player.get_any_abtest_value('currency', gamedata['currency']) if session else gamedata['currency'])
            # wildcard matches for unknown real currencies
            if spell_currency == 'fbpayments:*' and sale_currency.startswith('fbpayments:') or \
               spell_currency == 'xsolla:*' and sale_currency.startswith('xsolla:'):
                pass
            elif sale_currency != spell_currency:
                error_reason.append('buyer offered %s but spell can only be bought with %s' % (sale_currency, spell_currency))
                return -1

        # convert base price currency to what the buyer wants to pay with
        if sale_currency == p_currency:
            return p
        elif sale_currency == 'fbcredits':
            if p_currency == 'gamebucks':
                return int(p/(session.player.get_any_abtest_value('gamebucks_per_fbcredit', gamedata['store']['gamebucks_per_fbcredit']) if session else gamedata['store']['gamebucks_per_fbcredit']))+1
            else:
                error_reason.append('unknown p_currency '+p_currency)
                return -1
        elif sale_currency == 'gamebucks':
            if p_currency == 'fbcredits':
                return p * (session.player.get_any_abtest_value('gamebucks_per_fbcredit', gamedata['store']['gamebucks_per_fbcredit']) if session else gamedata['store']['gamebucks_per_fbcredit'])
            else:
                error_reason.append('unknown p_currency '+p_currency)
                return -1
        else:
            error_reason.append('unknown sale currency '+sale_currency)
            return -1

    # look through the store catalog for the SKU representing this BUY_ITEM spellarg
    @classmethod
    def buy_item_find_skudata(cls, spellarg, player):
        catpath = spellarg.get('catpath',None)
        specname = spellarg['skudata'].get('item',None)
        tablename = spellarg['skudata'].get('loot_table',None)
        if (not catpath) or (not specname and not tablename): return None
        stack = spellarg['skudata'].get('stack', 1) if specname else 1
        level = spellarg['skudata'].get('level', 1) if specname else 1
        melt_time = spellarg['skudata'].get('melt_time',-1)
        melt_dur = spellarg['skudata'].get('melt_duration',-1)
        tm = player.get_absolute_time()

        cat = None
        catlist = gamedata['store']['catalog']
        for pat in catpath:
            cat = None
            for entry in catlist:
                if ('name' in entry) and (entry['name'] == pat) and \
                   (('activation' not in entry) or (Predicates.read_predicate(entry['activation']).is_satisfied(player,None))) and \
                   (('start_time' not in entry) or (entry['start_time'] < tm)) and \
                   (('expire_time' not in entry) or (entry['expire_time'] >= tm)):
                    cat = entry
                    break
            if not cat: return None
            catlist = entry.get('skus', [])

        if not cat: return None

        ret = None
        pr = -1

        def sku_match(skudata, player, specname, tablename, level, stack, melt_time, melt_dur, tm):
            assert (specname and not tablename) or (tablename and not specname) # either one, not both
            if ('price' not in skudata): return False
            if (melt_time > 0) and (tm >= melt_time): return False
            if ('expire_time' in skudata) and (tm >= skudata['expire_time']): return False
            if ('start_time' in skudata) and (tm < skudata['start_time']): return False
            if specname:
                if (skudata.get('item',None) != specname) or (skudata.get('stack',1) != stack) or (skudata.get('level',1) != level): return False
            elif tablename:
                if skudata.get('loot_table',None) != tablename: return False
            if (skudata.get('melt_time',-1) != melt_time): return False
            if (skudata.get('melt_duration',-1) != melt_dur): return False
            if ('show_if' in skudata) and (not Predicates.read_predicate(skudata['show_if']).is_satisfied(player, None)): return False
            if ('requires' in skudata) and (not Predicates.read_predicate(skudata['requires']).is_satisfied(player, None)): return False
            return True

        for skudata in cat['skus']:
            if sku_match(skudata, player, specname, tablename, level, stack, melt_time, melt_dur, tm):
                if pr < 0 or skudata['price'] < pr:
                    ret = skudata
                    pr = skudata['price']

        # also look in extra_store_specials
        if catpath[0] == 'specials':
            for test_name, group in player.abtests.iteritems():
                if (test_name in gamedata['abtests']) and gamedata['abtests'][test_name]['active']:
                    data = gamedata['abtests'][test_name]['groups'][group]
                    if ('extra_store_specials' in data):
                        extras = data['extra_store_specials'];
                        for skudata in extras:
                            if sku_match(skudata, player, specname, tablename, level, stack, melt_time, melt_dur, tm):
                                if pr < 0 or skudata['price'] < pr:
                                    ret = skudata
                                    pr = skudata['price']

        return ret

    # get_base_price returns the "base" FB credits price before A/B test price caps are applied
    @classmethod
    def get_base_price(cls, session, unit_id, spell, spellarg, price_description, error_reason, sale_currency):
        assert spell.has_key('paid')
        p_currency = 'fbcredits'

        for PRED in ('requires',): # XXXXXX this never checked show_if - should it?
            if PRED in spell:
                if session and (not Predicates.read_predicate(spell[PRED]).is_satisfied2(session, session.player, None)):
                    error_reason.append('spell "%s" predicate is not satisfied' % PRED)
                    return -1, p_currency

        if 'cooldown_name' in spell:
            cd_name = spell['cooldown_name']
            if session.player.cooldown_active(cd_name):
                to_go = session.player.cooldowns[cd_name]['end'] - server_time
                error_reason.append('spell cooldown %s has not expired yet (%d sec to go)' % (cd_name, to_go))
                return -1, p_currency

        if spell.get('flash_offer',False) and session and session.player.flash_offer != spell['flash_offer']:
            error_reason.append('offer "%s" is not active' % spell['flash_offer'])
            return -1, p_currency

        formula = spell['price_formula']
        if formula == 'constant':
            if 'currency' in spell: p_currency = spell['currency']
            return spell['price'], p_currency
        elif formula == 'item':
            skudata = Store.buy_item_find_skudata(spellarg, session.player)
            if not skudata or ('price' not in skudata):
                error_reason.append('skudata not found for %s' % repr(spellarg))
                return -1, p_currency

            stack = spellarg.get('stack',1)
            assert stack >= 1

            if 'item' in spellarg['skudata']:
                if spellarg['skudata']['item'] not in gamedata['items']:
                    error_reason.append('item "%s" does not exist' % spellarg['skudata']['item'])
                    return -1, p_currency
                spec = gamedata['items'][spellarg['skudata']['item']]

                if ('store_requires' in spec) and (not Predicates.read_predicate(spec['store_requires']).is_satisfied(session.player, None)):
                    error_reason.append('item "%s" store_requires predicate failed' % spellarg['spec'])
                    return -1, p_currency

            elif 'loot_table' in spellarg['skudata']:
                if spellarg['skudata']['loot_table'] not in gamedata['loot_tables']:
                    error_reason.append('loot table "%s" does not exist' % spellarg['skudata']['loot_table'])
                    return -1, p_currency

            p_currency = skudata.get('price_currency', p_currency)
            return skudata['price'], p_currency

        elif formula == 'fb_inapp_currency_fbcredits':
            # charge at least as much as the gamebucks are worth in credits
            # OLD fbcredits method
            return max(1, int(math.ceil(spellarg / float(gamedata['store']['gamebucks_per_fbcredit'])))), p_currency
        elif formula == 'fb_inapp_currency_gamebucks':
            p_currency = 'gamebucks'
            return spellarg, p_currency
        elif formula == 'arbitrary_real_currency':
            # NEW fbpayments method
            p_currency = sale_currency
            real_currency = str(sale_currency.split(':')[1])
            for curname, srate in gamedata['store']['gamebucks_open_graph_prices']:
                if curname == real_currency:
                    return spellarg * float(srate), p_currency
            error_reason.append('gamedata.store.gamebucks_open_graph_prices has no entry for currency "%s"' % real_currency)
            return -1, p_currency
        elif formula == 'gamebucks_topup':
            bucks_per_credit = session.player.get_any_abtest_value('gamebucks_per_fbcredit_topup', gamedata['store']['gamebucks_per_fbcredit_topup'])
            if bucks_per_credit < 0:
                error_reason.append('gamebucks topup SKU not enabled for this player')
                return -1, p_currency
            return max(1, int(math.ceil(spellarg / float(bucks_per_credit)))), p_currency
        elif formula.startswith('barrier_upgrade'):
            min_level = 99
            for obj in session.player.home_base_iter():
                if obj.spec.name == 'barrier':
                    min_level = min(min_level, obj.level)
            up_level = int(formula[-1])
            if min_level >= up_level:
                error_reason.append('no barriers are beneath the upgrade level for this purchase')
                return -1, p_currency
            return spell['price'], p_currency
        elif formula.startswith('grow_base_perimeter'):
            to_level = int(formula[-1])
            if session.viewing_base is not session.player.my_home:
                error_reason.append('can only run this SKU at home base')
                return -1, p_currency
            if session.viewing_base.base_size >= to_level:
                error_reason.append('player base is already grown to this size')
                return -1, p_currency
            if 'currency' in spell: p_currency = spell['currency']
            return spell['price'], p_currency
        elif formula == 'speedup' or formula == 'speedup_gamebucks':

            # possible race condition due to unserialized AJAX
            if not session.has_object(unit_id):
                error_reason.append('race condition - object does not exist in session')
                return -1, p_currency
            unit = session.get_object(unit_id)

            if unit.owner is not session.player:
                error_reason.append('player does not own this object')
                return -1, p_currency
            if (not unit.spec.quarry_buildable) and (unit not in session.player.home_base_iter()):
                error_reason.append('this object is not in the player\'s home base, and is not quarry_buildable')
                return -1, p_currency

            if unit.is_damaged() and (not unit.is_repairing()):
                error_reason.append('cannot speed up an object that is damaged but not repairing')
                return -1, p_currency

            fin_time = unit.activity_finish_time()
            if fin_time < 0:
                error_reason.append('object is not doing anything')
                return -1, p_currency
            price_description.append(unit.activity_description(session.player))
            time_to_finish = fin_time - server_time

            allow_free_speedup = True
            always_free_speedup = False

            # check permission to speed up something other than a repair or upgrade
            if (not unit.is_repairing()) and (not unit.is_upgrading()) and (not unit.is_under_construction()):
                if unit.is_manufacturing():
                    if not session.player.unit_speedups_enabled():
                        return -1, p_currency

                    always_free_speedup = True
                    for item in unit.manuf_queue:
                        item_spec = session.player.get_abtest_spec(GameObjectSpec, item['spec_name'])
                        if item_spec.get_leveled_quantity(item_spec.always_free_speedup, item['level']):
                            continue
                        else:
                            always_free_speedup = False

                        if item_spec.get_leveled_quantity(item_spec.no_free_speedup, item['level']):
                            allow_free_speedup = False

                if unit.is_crafting():
                    if not session.player.crafting_speedups_enabled():
                        return -1, p_currency
                    for entry in unit.crafting.queue:
                        recipe = gamedata['crafting']['recipes'].get(entry.craft_state['recipe'],None)
                        if recipe:
                            cat = gamedata['crafting']['categories'][recipe['crafting_category']]
                            if not cat.get('speedupable', True):
                                return -1, p_currency

            # subtract additional "grace period" to work around
            # fencepost issues when client's clock is just slightly
            # behind server's clock (e.g. 9m59s vs. 10m01s)
            time_to_finish -= 60

            if always_free_speedup:
                error_reason.append('all queued units have always_free_speedup (%d sec)' % time_to_finish)
                return 0, p_currency
            if allow_free_speedup and time_to_finish <= Store.get_free_speedup_time(session, session.player):
                # this isn't really an error, it just means the price should be zero. We still accept
                # the order if the client offers more than zero credits.
                error_reason.append('within free activity speedup time (%d sec)' % time_to_finish)
                return 0, p_currency
            else:
                if allow_free_speedup and (not session.player.get_any_abtest_value('count_free_speedup_time', gamedata['store']['count_free_speedup_time'])):
                    time_to_finish -= Store.get_free_speedup_time(session, session.player)
                time_to_finish = max(time_to_finish, 0)
                price_description.append('%.1fmin' % (time_to_finish/60))

                # apply upgrade_speedup_cost_factor
                if unit.is_building() and (not unit.is_repairing()) and unit.is_upgrading():
                    factor = unit.spec.get_leveled_quantity(unit.spec.upgrade_speedup_cost_factor, unit.level + 1)
                    time_to_finish *= factor

                if formula == 'speedup_gamebucks':
                    p_currency = 'gamebucks'
                price = Store.get_speedup_price(session.player, unit.activity_speedup_kind(), time_to_finish, p_currency)
                return price, p_currency

        elif formula == 'player_aura_speedup_gamebucks':
            aura_name = spellarg
            p_currency = 'gamebucks'

            aura_spec = gamedata['auras'].get(aura_name)
            if (not aura_spec) or not aura_spec.get('speedupable', 0):
                error_reason.append('invalid or non-speedupable aura: %s' % aura_name)
                return -1, p_currency

            aura = None
            for a in session.player.player_auras:
                if a['spec'] == aura_name and ('end_time' in a):
                    aura = a
                    break
            if not aura:
                error_reason.append('aura not found: %s' % aura_name)
                return -1, p_currency

            time_to_finish = max(aura['end_time'] - server_time, 0)
            price = Store.get_speedup_price(session.player, 'player_aura', time_to_finish, p_currency)
            return price, p_currency
        elif formula == 'squad_movement_speedup_gamebucks':
            if not session.player.squad_speedups_enabled():
                return -1, p_currency
            squad_id = spellarg
            p_currency = 'gamebucks'
            squad = session.player.verify_squad(squad_id, require_at_home = False, require_away = True)
            if ('map_path' in squad) and (squad['map_path'][-1]['eta'] >= server_time):
                time_to_finish = max(squad['map_path'][-1]['eta'] - server_time, 1)
            else:
                time_to_finish = 1 # minimum time
            price = Store.get_speedup_price(session.player, 'squad_movement', time_to_finish, p_currency)
            return price, p_currency
        elif formula == 'unit_repair_speedup' or formula == 'unit_repair_speedup_gamebucks':
            if not session.player.unit_speedups_enabled():
                return -1, p_currency

            if len(session.player.unit_repair_queue) < 1:
                error_reason.append('repair queue is empty (xp=%d)' % session.player.resources.xp)
                return -1, p_currency

            price_description.append('unit_repair')
            time_to_finish = session.player.unit_repair_queue[-1]['finish_time'] - server_time
            if (not session.player.get_any_abtest_value('count_free_speedup_time', gamedata['store']['count_free_speedup_time'])):
                time_to_finish -= Store.get_free_speedup_time(session, session.player)
            time_to_finish -= 60 # desync grace period
            # NOTE! unit repair speedups do not have the "5 minute instant" option!
            if time_to_finish <= 0: time_to_finish = 0
            price_description.append(session.player.get_object_by_obj_id(session.player.unit_repair_queue[0]['obj_id']).spec.name)
            price_description.append('%.1fmin' % (time_to_finish/60))

            if formula == 'unit_repair_speedup_gamebucks':
                p_currency = 'gamebucks'
            price = Store.get_speedup_price(session.player, 'unit_repair', time_to_finish, p_currency)
            return price, p_currency

        elif formula == 'repair_all' or formula == 'repair_all_gamebucks':
            if formula == 'repair_all_gamebucks': p_currency = 'gamebucks'

            if spellarg == session.player.my_home.base_id:
                base = session.player.my_home
                do_units = True
            elif spellarg == session.viewing_base.base_id:
                assert session.viewing_base.base_landlord_id == session.player.user_id
                base = session.viewing_base
                do_units = False
            else:
                raise Exception('base not in the session: '+spellarg)

            if not session.player.unit_speedups_enabled():
                do_units = False

            sum_price = 0
            sum_time = 0
            n_buildings = 0
            n_units = 0

            for obj in base.iter_objects():
                if obj.is_building() and obj.is_damaged():
                    n_buildings += 1
                    if obj.is_repairing():
                        repair_time = obj.repair_finish_time - server_time
                    else:
                        repair_time = obj.time_to_repair(session.player)

                    if repair_time < 0:
                        repair_time = 0
                    sum_time += repair_time
                    time_to_finish = repair_time - Store.get_free_speedup_time(session, session.player)
                    if time_to_finish <= 0:
                        pass
                    else:
                        sum_price += Store.get_speedup_price(session.player, 'building_repair', time_to_finish, p_currency)

            if session.player.get_any_abtest_value('building_repair_sum_times', gamedata['store']['building_repair_sum_times']):
                # apply pricing function to sum of all repair times rather than summing individual prices
                # this is always <= the sum_price, because of how the time rounding works
                # also do not subtract free time from total calc
                time_to_finish = sum_time
                if time_to_finish <= Store.get_free_speedup_time(session, session.player):
                    sum_price = 0
                else:
                    sum_price = Store.get_speedup_price(session.player, 'building_repair', time_to_finish, p_currency)

            if sum_price == 0:
                error_reason.append('within free (building) repair speedup time')

            # compute unit repair costs
            if do_units:
                # note: ignore the repair queue, but sum unit times before applying formula
                total_rep_time = 0

                for obj in base.iter_objects():
                    if obj.is_mobile() and obj.is_damaged() and session.player.can_repair_unit(obj):
                        n_units += 1
                        total_rep_time += obj.time_to_repair(session.player)

                if total_rep_time > 0:
                    time_to_finish = total_rep_time
                    if (not session.player.get_any_abtest_value('count_free_speedup_time', gamedata['store']['count_free_speedup_time'])):
                        time_to_finish -= Store.get_free_speedup_time(session, session.player)
                    if time_to_finish <= 0: time_to_finish = 0

                    unit_price = Store.get_speedup_price(session.player, 'unit_repair', time_to_finish, p_currency)
                    sum_price += unit_price

            price_description.append('%dbuildings' % n_buildings)
            price_description.append('%dunits' % n_units)
            return sum_price, p_currency

        elif (formula == 'upgrade') or (formula == 'research') or (formula == 'craft_gamebucks'):
            unit = None

            if unit_id == GameObject.VIRTUAL_ID and session.player.is_cheater and formula == 'research':
                pass
            else:
                if not session.has_object(unit_id):
                    # possible race condition due to unserialized AJAX
                    error_reason.append('race condition - object does not exist in session')
                    return -1, p_currency
                unit = session.get_object(unit_id)

            if unit:
                if unit.owner is not session.player:
                    error_reason.append('player does not own this object')
                    return -1, p_currency
                if (not (formula == 'upgrade' and unit.spec.quarry_buildable)) and (unit not in session.player.home_base_iter()):
                    error_reason.append('this object is not in the player\'s home base, and is not quarry_buildable')
                    return -1, p_currency

                if (not unit.is_building()):
                    error_reason.append('only buildings can be upgraded or perform research or crafting')
                    return -1, p_currency
                if unit.is_damaged():
                    error_reason.append('cannot upgrade, research, or craft because building is damaged')
                    return -1, p_currency
                # can't upgrade or research while busy, with the one exception that instant research is allowed if building is currently researching
                if unit.is_busy() and (not ((formula == 'research') and unit.is_researching())):
                    error_reason.append('cannot upgrade, research, or craft while busy with activity: '+unit.activity_description(session.player))
                    return -1, p_currency

            if formula == 'upgrade':
                # check requirements

                max_level = unit.spec.maxlevel
                if unit.spec.max_ui_level and (not session.player.is_cheater):
                    max_level = min(max_level, Predicates.eval_cond_or_literal(unit.spec.max_ui_level, session, session.player))

                if unit.level >= unit.spec.maxlevel:
                    error_reason.append('unit has already reached max level')
                    return -1, p_currency
                if unit.spec.requires and (not session.player.is_cheater):
                    req = GameObjectSpec.get_leveled_quantity(unit.spec.requires, unit.level+1)
                    if (not req.is_satisfied(session.player, None)):
                        error_reason.append('upgrade requirements not satisfied')
                        return -1, p_currency

                if (not session.player.is_cheater):
                    for res, resdata in gamedata['resources'].iteritems():
                        if (not resdata.get('allow_instant', True)) and \
                           GameObjectSpec.get_leveled_quantity(getattr(unit.spec, 'build_cost_'+res, 0), unit.level+1) > 0:
                            error_reason.append('requires rare resource: %s' % resdata['name'])
                            return -1, p_currency

                price_description.append('level'+str(unit.level+1))
                price = GameObjectSpec.get_leveled_quantity(unit.spec.upgrade_credit_cost, unit.level+1)
                if price > 0:
                    factor = session.player.get_any_abtest_value('building_muffin_factor', gamedata['store']['building_muffin_factor'])
                    if factor != 1:
                        price = int((factor*price)+0.5) # round()

            elif formula == 'craft_gamebucks':
                p_currency = 'gamebucks' # more modern JSON now uses gamebucks as the currency unit
                arg = gamesite.gameapi.CraftSpellarg(spellarg)
                recipe = gamedata['crafting']['recipes'][arg.recipe_name]

                if (not session.player.is_cheater):
                    for res, resdata in gamedata['resources'].iteritems():
                        if (not resdata.get('allow_instant', True)) and \
                           GameObjectSpec.get_leveled_quantity(recipe['cost'].get(res,0), arg.recipe_level) > 0:
                            error_reason.append('requires rare resource: %s' % resdata['name'])
                            return -1, p_currency

                can_craft_retmsg = []
                if not gamesite.gameapi.can_craft(session, session.player, unit, arg, retmsg = can_craft_retmsg,
                                                  check_predicates = (not session.player.is_cheater), take_resources = False, take_ingredients = False):
                    error_reason.append('cannot craft because: '+repr(can_craft_retmsg))
                    return -1, p_currency

                #if 'level' in spellarg: price_description.append('level'+str(arg.recipe_level))
                price = GameObjectSpec.get_leveled_quantity(recipe.get('craft_gamebucks_cost',-1), arg.recipe_level)

            else:
                assert formula == 'research'
                spec = session.player.get_abtest_spec(TechSpec, spellarg)
                if session.player.tech.has_key(spellarg):
                    new_level = session.player.tech[spellarg] + 1
                else:
                    new_level = 1

                # check requirements
                max_level = spec.maxlevel
                if spec.max_ui_level and (not session.player.is_cheater):
                    max_level = min(max_level, Predicates.eval_cond_or_literal(spec.max_ui_level, session, session.player))

                if new_level > max_level:
                    error_reason.append('tech already at max level')
                    return -1, p_currency
                if spec.developer_only and (spin_secure_mode or (not session.player.is_developer())):
                    error_reason.append('research is restricted to developer mode only')
                    return -1, p_currency
                if unit:
                    if (not unit.is_researcher()):
                        error_reason.append('building is not capable of research')
                        return -1, p_currency
                    if spec.research_category not in unit.spec.get_research_categories(session.player):
                        error_reason.append(unit.spec.name+' building not capable of researching category '+spec.research_category)
                        return -1, p_currency
                if spec.requires and (not session.player.is_cheater):
                    req = TechSpec.get_leveled_quantity(spec.requires, new_level)
                    if (not req.is_satisfied(session.player, None)):
                        error_reason.append('research requirements not satisfied')
                        return -1, p_currency
                if spec.show_if and (not session.player.is_cheater):
                    if not spec.show_if.is_satisfied(session.player, None):
                        error_reason.append('research show_if not satisfied')
                        return -1, p_currency
                if spec.activation and (not session.player.is_cheater):
                    if not spec.activation.is_satisfied(session.player, None):
                        error_reason.append('research activation not satisfied')
                        return -1, p_currency

                if (not session.player.is_cheater):
                    for res, resdata in gamedata['resources'].iteritems():
                        if (not resdata.get('allow_instant', True)) and \
                           TechSpec.get_leveled_quantity(getattr(spec, 'cost_'+res, 0), new_level) > 0:
                            error_reason.append('requires rare resource: %s' % resdata['name'])
                            return -1, p_currency

                price_description.append('level'+str(new_level))
                price = TechSpec.get_leveled_quantity(spec.research_credit_cost, new_level)
                if price > 0:
                    factor = session.player.get_any_abtest_value('tech_muffin_factor', gamedata['store']['tech_muffin_factor'])
                    if factor != 1:
                        price = int((factor*price)+0.5) # round()
            return price, p_currency

        elif (formula == 'resource_boost') or formula == ('resource_boost_gamebucks'):
            if formula == 'resource_boost_gamebucks': p_currency = 'gamebucks'

            snap = session.player.resources.calc_snapshot()
            if spell['resource'] in snap.res_max:
                max_res = snap.max_res(spell['resource'])
                cur_res = snap.cur_res(spell['resource'])
            else:
                raise Exception('Unknown resource type '+spell['resource'])

            if spell['boost_amount'] < 1:
                amount = int(spell['boost_amount'] * max_res)
                if (cur_res + amount) > max_res:
                    error_reason.append('no room for partial boost')
                    return -1, p_currency
            else:
                if cur_res >= max_res:
                    error_reason.append('no room for full boost')
                    return -1, p_currency
                amount = max_res - cur_res

            return ResPrice.get_resource_price(gamedata, session, spell['resource'], amount, p_currency), p_currency
        elif (formula == 'resource_topup'):
            p_currency = 'gamebucks'
            price = 0
            snap = session.player.resources.calc_snapshot()

            # get A/B test overrides for resource parameters
            overrides = session.player.get_any_abtest_value('resources', {})

            for res in spellarg:
                allowed = gamedata['resources'][res].get('allow_topup',False)
                if res in overrides:
                    allowed = overrides[res].get('allow_topup', allowed)
                if not allowed:
                    error_reason.append('topup not allowed for resource '+res)
                    return -1, p_currency

                if snap.cur_res(res) + spellarg[res] > snap.max_res(res):
                    error_reason.append('no room for topup boost')
                    return -1, p_currency
                price += ResPrice.get_resource_price(gamedata, session, res, spellarg[res], p_currency)
            return price, p_currency
        else:
            raise Exception('Unknown price formula')

    # return the abbreviated order description that will be written to log files
    # note: this must coordinate with SpinUpcache.classify_purchase() to return reasonable results for SQL insertion
    @classmethod
    def get_description(cls, session, unit_id, spellname, spellarg, price_description):
        descr = spellname

        # special cases that want to parse the spellarg a bit
        if spellname == 'CRAFT_FOR_MONEY':
            # return format expected by SpinUpcache.classify_purchase(), matching the speedup version
            descr += ','+session.get_object(unit_id).spec.name+','+spellarg['recipe']
            if 'level' in spellarg:
                descr += ','+str(spellarg['level'])

        else: # default case
            if spellarg:
                if type(spellarg) in (dict,list):
                    s = SpinJSON.dumps(spellarg)
                else:
                    s = str(spellarg)
                descr += ','+s

            if unit_id and unit_id != GameObject.VIRTUAL_ID:
                object = session.get_object(unit_id)
                descr += ','+object.spec.name

        if price_description and len(price_description) > 0:
            descr += ','+string.join(price_description, ',')

        return descr

    # convert Facebook Credits to US Dollar receipts
    @classmethod
    def fbcredits_to_dollars(cls, fb_credits_amount):
        return 0.07 * fb_credits_amount
    # convert Kongregate Kreds to US Dollar receipts
    @classmethod
    def kgcredits_to_dollars(cls, kg_credits_amount):
        return 0.07 * kg_credits_amount

    # convert promotional gamebucks amount to US Dollar receipts
    # note: only used for platform offers that pay out in gamebucks, NOT for in-game purchases
    @classmethod
    def promo_gamebucks_to_dollars(cls, gamebucks):
        fb_credits_amount = gamebucks / float(gamedata['store']['gamebucks_per_fbcredit'])
        return 0.07 * fb_credits_amount


    @classmethod
    def format_ui_string(cls, session, spellname, spellarg, spell, s):
        if spell.get('price_formula',None) == 'gamebucks_topup':
            qty = spellarg
        elif ('quantity' in spell):
            qty = spell['quantity']
        else:
            qty = 0

        if '%GAMEBUCKS_QUANTITY' in s:
            divisor = gamedata['store']['gamebucks_display_divisor']
            if session: divisor = session.player.get_any_abtest_value('gamebucks_display_divisor', divisor)
            if divisor == 1:
                s_qty = str(qty)
            else:
                if (qty%divisor) != 0:
                    gamesite.exception_log.event(server_time, 'fractional displayed gamebucks amount for spell %s' % spellname)
                s_qty = str(int(qty/divisor))
            s = s.replace('%GAMEBUCKS_QUANTITY', s_qty)
        if '%GAMEBUCKS_NAME' in s:
            ui_name = gamedata['store']['gamebucks_ui_name']
            if session: ui_name = session.player.get_any_abtest_value('gamebucks_ui_name', ui_name)
            s = s.replace('%GAMEBUCKS_NAME', ui_name)
        if '%GAMEBUCKS_PAYMENT_NAME' in s:
            s = s.replace('%GAMEBUCKS_PAYMENT_NAME', gamedata['store'].get('gamebucks_payment_ui_name', gamedata['store']['gamebucks_ui_name']))
        if '%GAME_NAME' in s:
            s = s.replace('%GAME_NAME', gamedata['strings']['game_name'])
        if '%ITEM_NAME' in s:
            if 'ui_name' in spellarg['skudata']:
                ui_name = spellarg['skudata']['ui_name']
            else:
                spec = gamedata['items'][spellarg['skudata']['item']]
                ui_name = spec['ui_name']
                stack = spellarg.get('stack',1)
                if stack > 1:
                    ui_name = ('%dx ' % stack) + ui_name
            s = s.replace('%ITEM_NAME', ui_name)
        if '%ITEM_BUNDLE' in s:
            ui_bundle = ''
            want_loot = spell.get('loot_table')
            if want_loot and spellarg and (isinstance(spellarg, int) or isinstance(spellarg, basestring)):
                want_loot = False # quantity-based SKU
            if want_loot and spellarg and isinstance(spellarg, dict) and not spellarg.get('want_loot', False):
                want_loot = False
            # session is None for OGPAPI, which makes want_loot opt-in
            if want_loot and ((session is None) or session.get_loot_items(session.player, gamedata['loot_tables'][spell['loot_table']]['loot'], -1, -1)):
                ui_bundle = ' (plus FREE items)'
            s = s.replace('%ITEM_BUNDLE', ui_bundle)
        return s

    # given the order_info passed from the client, return a dictionary with
    # the proper fields for the Credits API filled out ('title', 'description', 'price', 'image_url', etc)
    @classmethod
    def make_credit_order(cls, order_id, order_info, currency):
        assert currency in ('fbcredits', 'kgcredits')
        session_id = str(order_info['session_id'])
        session = get_session_by_session_id(session_id)
        assert session
        unit_id = order_info['unit_id']
        spellname = order_info['spellname']
        spellarg = order_info.get('spellarg', None)
        client_price = order_info['client_price']
        tag = order_info.get('tag', '')
        server_time_according_to_client = order_info.get('server_time_according_to_client', None)
        spell = gamedata['spells'][spellname]
        assert spell['paid']
        assert spell['currency'] == currency

        item = {}
        item[{'fbcredits':'title','kgcredits':'name'}[currency]] = cls.format_ui_string(session, spellname, spellarg, spell, spell['ui_name'])
        price_description = []
        error_reason = []

        if server_time_according_to_client is not None:
            error_reason.append('clock offset %d' % (server_time - server_time_according_to_client))

        price = Store.get_price(session, currency, unit_id, spell, spellarg, price_description, error_reason)

        if price < 0 or client_price <= 0:
            raise Exception(('make_credit_order(%s): Invalid order by user %d: ' % (currency, session.user.user_id)) + repr(order_info) + ' get_price() failed with reason: '+ repr(error_reason))
        elif client_price < price:
            # client thinks price is lower than server does (e.g. due to clock time mismatch)
            raise Exception('make_credit_order(%s): Rejecting lower client price %d < price %d by user %d: ' % (currency, client_price,price,session.user.user_id) + repr(order_info) + ' reason: '+ repr(error_reason))
        elif client_price > price:
            # client thinks price is higher than server does (e.g. due to clock time mismatch)
            if 0:
                gamesite.exception_log.event(server_time, 'make_credit_order(%s): Accepting higher client_price %d > price %d by user %d: ' % (currency, client_price,price,session.user.user_id) + ' reason: ' +repr(error_reason))
            # accept the higher price (!)
            price = client_price

        item['price'] = price
        item['description'] = cls.format_ui_string(session, spellname, spellarg, spell, spell['ui_description'])
        item['image_url'] = order_info['image_url']

        if currency == 'fbcredits':
            item['product_url'] = order_info['product_url']

            # pass session_id so it will be sent back in payment_status_update
            my_data = {'session_id':session_id, 'unit_id':unit_id, 'spellname': spellname, 'spellarg': spellarg, 'client_price': client_price, 'tag':tag}
            if server_time_according_to_client is not None:
                my_data['server_time_according_to_client'] = server_time_according_to_client

            item['data'] = SpinFacebook.order_data_encode(my_data)

        descr = Store.get_description(session, unit_id, spellname, spellarg, price_description)
        dollar_amount = {'fbcredits':Store.fbcredits_to_dollars, 'kgcredits':Store.kgcredits_to_dollars}[currency](price)

        metric_event_coded(session.user.user_id, '4065_order_prompt_response', {'Billing Amount': dollar_amount,
                                                                                'Billing Description': descr,
                                                                                'order_id': order_id,
                                                                                'currency':currency
                                                                                })
        return item

    # the customer has agreed to pay - perform the actions required by the order
    # return the session (to allow for flushing right after this is called)
    # throws exceptions to indicate order errors
    # NOTE: this is only used for (old) FB Credits, Kongregate, Xsolla, and promo (in-kind) Gamebucks orders
    # (new) FB Payments go through a different code path!

    @classmethod
    def execute_credit_order(cls, order_id, gameapi, session, buyer, receiver, currency, credits_amount, my_data):
        assert currency in ('fbcredits', 'kgcredits', 'gamebucks') or currency.startswith('xsolla:')
        # note that gamebucks here is only used for platform offers that pay out in gamebucks, NOT in-game purchases

        tag = None

        # check for in-app currency order (see https://developers.facebook.com/docs/payments/app_currency_orders/)
        if 'modified' in my_data:
            assert currency == 'fbcredits'
            m = my_data['modified']
            if 0:
                gamesite.exception_log.event(server_time, ('in-app currency order (FB buyer %s): ' % buyer) + repr(my_data))
            assert m['credits_amount'] == credits_amount
            assert str(m['product']) == str(OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('gamebucks')}))
            assert m['product_amount'] <= gamedata['store']['gamebucks_per_fbcredit'] * m['credits_amount']

            # note: we have to find the session manually, because this request comes from Facebook without passing through the client!
            if session is None:
                session = get_session_by_facebook_id(buyer)
            if session is None: raise Exception(('session not found for in-app currency order! (FB buyer %s)' % buyer)+repr(my_data))
            unit_id = GameObject.VIRTUAL_ID
            spellname = 'FB_PROMO_GAMEBUCKS'
            spellarg = m['product_amount']
            network_id = session.user.facebook_id
            dollar_amount = Store.fbcredits_to_dollars(credits_amount)

        # TrialPay order
        elif my_data.get('spellname') == 'FB_TRIALPAY_GAMEBUCKS':
            assert session
            assert currency == 'gamebucks'
            assert my_data['currency_url'] == str(OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('gamebucks')}))
            unit_id = GameObject.VIRTUAL_ID
            spellname = 'FB_TRIALPAY_GAMEBUCKS'
            spellarg = credits_amount
            network_id = session.user.facebook_id
            dollar_amount = Store.promo_gamebucks_to_dollars(credits_amount)

        else:
            if session is None:
                session = get_session_by_session_id(my_data['session_id'])
            unit_id = my_data['unit_id']
            spellname = my_data['spellname']
            spellarg = my_data.get('spellarg', None)
            tag = my_data.get('tag', None)
            if currency.startswith('xsolla:'):
                network_id = session.user.get_xsolla_id()
                dollar_amount = my_data['usd_receipts']
            elif currency == 'fbcredits':
                network_id = session.user.facebook_id
                dollar_amount = Store.fbcredits_to_dollars(credits_amount)
            elif currency == 'kgcredits':
                network_id = session.user.kg_id
                dollar_amount = Store.kgcredits_to_dollars(credits_amount)

        server_time_according_to_client = my_data.get('server_time_according_to_client', None)

        assert session
        assert (not session.logout_in_progress)

        if network_id != receiver:
            gamesite.exception_log.event(server_time, 'execute_order: strange, receiver is mismatched (%s %s)' % (network_id, receiver))

        price_description, detail_props = Store.execute_order(gameapi, session, session.outgoing_messages,
                                                              currency, credits_amount,
                                                              unit_id, spellname, spellarg,
                                                              server_time_according_to_client,
                                                              usd_equivalent = dollar_amount)

        descr = Store.get_description(session, unit_id, spellname, spellarg, price_description)

        admin_stats.add_revenue(session.user.user_id, dollar_amount, descr)

        metric_event_coded(session.user.user_id, '1000_billed', {'Billing Amount': dollar_amount,
                                                                 'Billing Description': descr,
                                                                 'currency': currency,
                                                                 'currency_amount': credits_amount,
                                                                 'country_tier': session.player.country_tier,
                                                                 'last_purchase_time': session.player.history.get('last_purchase_time',-1),
                                                                 'prev_largest_purchase': session.player.history.get('largest_purchase',0),
                                                                 'num_purchases': session.player.history.get('num_purchases',0),
                                                                 'order_id': order_id})

        gamesite.credits_log.event(server_time, {'user_id':session.user.user_id,
                                                 'event_name':'1000_billed',
                                                 'code':1000,
                                                 'Billing Amount': dollar_amount,
                                                 'Billing Description': descr,
                                                 'currency': currency,
                                                 'currency_amount': credits_amount,
                                                 'summary': session.player.get_denormalized_summary_props('brief'),
                                                 'country_tier': session.player.country_tier,
                                                 'last_purchase_time': session.player.history.get('last_purchase_time',-1),
                                                 'prev_largest_purchase': session.player.history.get('largest_purchase',0),
                                                 'num_purchases': session.player.history.get('num_purchases',0),
                                                 'order_id': order_id})

        session.activity_classifier.spent_money(dollar_amount, descr)

        if session.player.history.get('money_spent', 0) == 0:
            session.player.history['time_of_first_purchase'] = server_time

        if session.user.account_creation_time > 0:
            daynum = int((server_time - session.user.account_creation_time)/(60*60*24))
            if 'money_spent_by_day' not in session.player.history:
                session.player.history['money_spent_by_day'] = {}
            dict_increment(session.player.history['money_spent_by_day'], str(daynum), dollar_amount)
        dict_setmax(session.player.history, 'last_purchase_time', server_time)

        # new-style player metrics (redundant with old style above)
        session.increment_player_metric('money_spent', dollar_amount)
        session.increment_player_metric('num_purchases', 1)
        session.setmax_player_metric('largest_purchase', dollar_amount)

        if 'money_purchase_history' not in session.player.history:
            session.player.history['money_purchase_history'] = []

        session.player.history['money_purchase_history'].append({'time': server_time,
                                                                 'age': -1 if session.player.creation_time < 0 else (server_time - session.player.creation_time),
                                                                 'dollar_amount': dollar_amount,
                                                                 'credit_amount': credits_amount,
                                                                 'currency': currency,
                                                                 'order_id': order_id,
                                                                 'description': descr})

        session.send_adnetwork_purchase_event(session.outgoing_messages, order_id, dollar_amount) # note: post-FB-tax
        session.send_adnetwork_events(session.outgoing_messages)

        # update client's version of spend metrics
        session.deferred_history_update = True
        if tag: # send acknowledgement to client
            session.outgoing_messages.append([{'fbcredits':"FBCREDITS_ORDER_ACK",'kgcredits':"KGCREDITS_ORDER_ACK"}[currency], tag, True])
        session.queue_flush_outgoing_messages()
        return session

    @classmethod
    def execute_gamebucks_order(cls, gameapi, session, retmsg, amount_willing_to_pay,
                                unit_id, spellname, spellarg,
                                server_time_according_to_client):
        price_description, detail_props = Store.execute_order(gameapi, session, retmsg, 'gamebucks', amount_willing_to_pay,
                                                              unit_id, spellname, spellarg,
                                                              server_time_according_to_client)

        descr = Store.get_description(session, unit_id, spellname, spellarg, price_description)

        if amount_willing_to_pay > 0:
            # only record non-free orders
            if 'gamebucks_purchase_history' not in session.player.history:
                session.player.history['gamebucks_purchase_history'] = []

            session.player.history['gamebucks_purchase_history'].append({'time': server_time,
                                                                         'age': -1 if session.player.creation_time < 0 else (server_time - session.player.creation_time),
                                                                         'gamebucks_amount': amount_willing_to_pay,
                                                                         'gamebucks_balance': session.player.resources.gamebucks - amount_willing_to_pay,
                                                                         'description': descr})

            session.increment_player_metric('gamebucks_spent', amount_willing_to_pay, time_series = False)
            #session.increment_player_metric('num_gamebucks_purchases', 1)
            session.setvalue_player_metric('gamebucks_balance', session.player.resources.gamebucks - amount_willing_to_pay, bucket=True, bucket_size=15*60)

        # log zero-gamebucks free orders (e.g. daily expeditions) as well as non-free orders
        metric_event_coded(session.user.user_id, '1400_gamebucks_spent', {'Billing Description': descr,
                                                                          'gamebucks_price': amount_willing_to_pay})
        money_spent = session.player.history.get('money_spent', 0)

        if gamedata['server']['log_gamebucks_spend'] and ((money_spent > 0) or (gamedata['server']['log_gamebucks_spend'] != 'paying_only')):
            props = {'user_id': session.user.user_id,
                     'summary': session.player.get_denormalized_summary_props('brief'),
                     'event_name': '1400_gamebucks_spent',
                     'code': 1400,
                     'gamebucks_price': amount_willing_to_pay,
                     'Billing Description': descr}
            if money_spent > 0:
                props['money_spent'] = money_spent
            props.update(detail_props)
            gamesite.gamebucks_log.event(server_time, props)

        if money_spent > 0 and amount_willing_to_pay > 0:
            admin_stats.add_gamebucks_spend(session.user.user_id, amount_willing_to_pay, descr)
            session.activity_classifier.spent_gamebucks(amount_willing_to_pay, descr)

        return descr

    @classmethod
    def execute_order(cls, gameapi, session, retmsg, currency, amount_willing_to_pay,
                      unit_id, spellname, spellarg,
                      server_time_according_to_client,
                      usd_equivalent = None, gift_order = None, payment_id = None):

        # verify that the order is possible and that amount_willing_to_pay is correct
        spell = gamedata['spells'][spellname]
        assert spell['paid']

        price_description = []
        error_reason = []
        detail_props = {}

        if server_time_according_to_client is not None:
            error_reason.append('clock offset %d' % (server_time - server_time_according_to_client))

        # As of October 2014, Facebook is now sending us fbpayments orders with currencies other than those we publish via gamebucks_open_graph_prices.
        # According to the docs, they "invent" a currency->gamebucks exchange rate into the new currency based on the first published currency (always USD for us)
        # We have no choice but to trust that this is a fair amount (!)
        if spell['price_formula'] == 'arbitrary_real_currency' and \
           currency.startswith('fbpayments:') and \
           (not any(str(currency.split(':')[1]) == curname for curname, srate in gamedata['store']['gamebucks_open_graph_prices'])):
            gamesite.exception_log.event(server_time, 'player %d making %s order (payment_id %r) with unknown currency %s amount %s, trusting Facebook that it is worth %d gamebucks!' % \
                                         (session.player.user_id, spellname, payment_id, currency, repr(amount_willing_to_pay), spellarg))
            store_price = amount_willing_to_pay

        else:
            store_price = Store.get_price(session, currency, unit_id, spell, spellarg, price_description, error_reason)

        if gift_order and (not (spellname.startswith("BUY_GAMEBUCKS_") or spellname == "FB_GAMEBUCKS_PAYMENT")):
            raise Exception('gift_order for a non-gamebucks SKU user %d' % session.user.user_id)

        # for logging only
        unit_description = 'none'
        if session.has_object(unit_id):
            obj = session.get_object(unit_id)
            unit_description = obj.spec.name
            if obj.is_building():
                unit_description += '/' + obj.activity_description(session.player)

        if store_price < 0:
            raise Exception(('execute_order(%r %s): Invalid order by user %d: ' % (amount_willing_to_pay, currency, session.user.user_id)) + repr((unit_description, spellname, spellarg)) + ' get_price() failed with reason: '+repr(error_reason))

        # to avoid exceptions due to slight clock desync, accept payment amounts slightly below the actual server-determined price for time-based gamebucks orders
        if (amount_willing_to_pay < store_price) and (currency == 'gamebucks') and \
           (amount_willing_to_pay > 0) and (amount_willing_to_pay >= store_price - gamedata['server'].get('gamebucks_grace_amount',1)) and \
           (('REPAIR' in spellname) or ('SPEEDUP' in spellname)):
            store_price = amount_willing_to_pay

        if round(amount_willing_to_pay,2) < round(store_price,2):
            raise Exception(('execute_order(%r %s): Rejecting unfavorable price mismatch! (store %r order %r) by user %d payment_id %r ' % \
                             (amount_willing_to_pay, currency, store_price, amount_willing_to_pay, session.user.user_id, payment_id)) + \
                            repr((unit_description, spellname, spellarg)) + \
                            ' get_price() reason: ' + \
                            repr(error_reason)
                            )
        elif round(amount_willing_to_pay,2) > round(store_price,2):
            if (amount_willing_to_pay - store_price) > (10 if currency == 'gamebucks' else 1):
                gamesite.exception_log.event(server_time, (('execute_order(%r %s): Accepting favorable price mismatch! (store %r order %r) by user %d payment_id %r ' % \
                                                            (amount_willing_to_pay, currency, store_price, amount_willing_to_pay, session.user.user_id, payment_id)) + \
                                                           repr((unit_description, spellname, spellarg)) + \
                                                           ' get_price() reason: ' + \
                                                           repr(error_reason)))

        if currency == 'fbcredits':
            record_spend_type = 'money'
            record_price_type = 'fb_price'
            record_amount = Store.fbcredits_to_dollars(amount_willing_to_pay)
        elif currency == 'kgcredits':
            record_spend_type = 'money'
            record_price_type = 'kg_price'
            record_amount = Store.kgcredits_to_dollars(amount_willing_to_pay)
        elif currency.startswith('fbpayments:') or currency.startswith('xsolla:'):
            record_spend_type = 'money'
            record_price_type = 'price'
            record_amount = usd_equivalent
        elif currency == 'gamebucks':
            record_spend_type = 'gamebucks'
            record_price_type = 'gamebucks_price'
            record_amount = amount_willing_to_pay
        elif currency.startswith('item:') or currency.startswith('score:'):
            item_name = currency.split(':')[1]
            record_spend_type = item_name
            record_price_type = item_name+'_price'
            record_amount = amount_willing_to_pay
        elif currency in gamedata['resources']:
            record_spend_type = currency
            record_price_type = currency+'_price'
            record_amount = amount_willing_to_pay
        else:
            raise Exception('unknown currency '+currency)

        # note: there is no need for requirements checking here,
        # because Store.get_price() takes care of it (by returning -1
        # if requirements are not met)

        object = None

        if spellname == "SPEEDUP_FOR_MONEY":
            object = session.get_object(unit_id)
            if object.is_repairing():
                object.repair_finish_time = server_time - 1
                speedup_type = 'repair'
            elif object.is_upgrading():
                assert object.upgrade_start_time > 0
                object.upgrade_done_time = object.upgrade_total_time
                speedup_type = 'upgrade'
            elif object.is_under_construction():
                assert object.build_start_time > 0
                object.build_done_time = object.build_total_time
                speedup_type = 'construct'
            elif object.is_researching():
                assert object.research_start_time > 0
                object.research_done_time = object.research_total_time
                speedup_type = 'research'
            elif object.is_manufacturing():
                assert object.manuf_start_time > 0
                detail_props['unit_cost'] = cls.get_unit_cost_detail(session, session.player, manuf_queue = object.manuf_queue,
                                                                     manuf_prog = object.manuf_done_time + server_time - object.manuf_start_time)
                object.manuf_done_time = sum([item['total_time'] for item in object.manuf_queue])
                speedup_type = 'produce'
            elif object.is_crafting():
                entry = object.crafting.queue[0]
                recipe = gamedata['crafting']['recipes'][entry.craft_state['recipe']]
                time_left = object.crafting.finish_time() - server_time
                object.crafting.speedup()
                speedup_type = 'craft'
                if recipe['crafting_category'] == 'fishing':
                    session.player.fishing_log_event('5151_fish_speedup', entry, time_left = time_left)
            else:
                speedup_type = 'unknown'
            gameapi.ping_object(session, retmsg, object.obj_id, session.viewing_base)

            metric_event_coded(session.user.user_id, '5010_purchase_speedup', {'building_type':object.spec.name,
                                                                               'speedup_type':speedup_type,
                                                                               'currency':currency,
                                                                               record_price_type: amount_willing_to_pay})


            hist_type = speedup_type
            if hist_type == 'upgrade':
                hist_type = 'building_upgrade'
            session.increment_player_metric('speedups_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_speedups', record_amount)
            session.increment_player_metric(hist_type+'_speedups_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_'+hist_type+'_speedups', record_amount)

            session.increment_player_metric('building:'+object.spec.name+':speedups_purchased', 1, time_series = False)
            session.increment_player_metric('building:'+object.spec.name+':'+record_spend_type+'_spent_on_speedups', record_amount)
            session.increment_player_metric('building:'+object.spec.name+':'+hist_type+'_speedups_purchased', 1, time_series = False)
            session.increment_player_metric('building:'+object.spec.name+':'+record_spend_type+'_spent_on_'+hist_type+'_speedups', record_amount)

        elif spellname == "SQUAD_MOVEMENT_SPEEDUP_FOR_MONEY":
            squad_id = spellarg

            squad = session.player.verify_squad(squad_id, require_at_home = False, require_away = True)
            if 'map_path' not in squad:
                raise Exception('squad is not moving')

            new_lock_gen = -1
            # copy path and set ETAs into the past
            new_path = squad['map_path'][:]
            for waypt in new_path:
                waypt['eta'] = server_time - 1

            state = gamesite.nosql_client.map_feature_lock_acquire(session.player.home_region, session.player.squad_base_id(squad_id), session.player.user_id, do_hook = False, reason='SQUAD_MOVEMENT_SPEEDUP_FOR_MONEY')
            if state != Player.LockState.being_attacked: # mutex locked
                raise Exception('unable to lock squad')

            try:
                # verify that the squad in map_cache matches where the playerdb state says it is
                entry = gamesite.nosql_client.get_map_feature_by_base_id(session.player.home_region, session.player.squad_base_id(squad_id), reason='SQUAD_MOVEMENT_SPEEDUP_FOR_MONEY')
                if not entry:
                    raise Exception('squad not found on map')

                # get rid of lock info, as if we return the feature, it'll definitely be unlocked
                for FIELD in ('LOCK_STATE', 'LOCK_OWNER'):
                    if FIELD in entry: del entry[FIELD]

                if entry['base_map_loc'][0] != squad['map_loc'][0] or entry['base_map_loc'][1] != squad['map_loc'][1]:
                    gamesite.exception_log.event(server_time, 'player %d squad %d trying to speed up, but base location mismatches: squad %s map_cache %s' % \
                                                 (session.player.user_id, squad_id, repr(squad['map_loc']), repr(entry['base_map_loc'])))
                    raise Exception('database position disagrees with in-memory state')

                new_entry = copy.copy(entry)
                new_entry['base_map_path'] = new_path
                if not gamesite.nosql_client.move_map_feature(session.player.home_region, new_entry['base_id'], new_entry,
                                                              old_loc=entry['base_map_loc'], old_path=entry.get('base_map_path',None),
                                                              originator=session.player.user_id, reason='SQUAD_MOVEMENT_SPEEDUP_FOR_MONEY'):
                    raise Exception('database update failed')

                new_lock_gen = entry.get('LOCK_GENERATION',-1)+1
                squad['map_path'] = new_path
                retmsg.append(["REGION_MAP_UPDATES", session.player.home_region, [new_entry], server_time])
                retmsg.append(["SQUADS_UPDATE", session.player.squads])

            finally:
                gamesite.nosql_client.map_feature_lock_release(session.player.home_region, session.player.squad_base_id(squad_id), session.player.user_id,
                                                               generation = new_lock_gen,
                                                               do_hook = False, reason='SQUAD_MOVEMENT_SPEEDUP_FOR_MONEY')

        elif spellname == "PLAYER_AURA_SPEEDUP_FOR_MONEY":
            aura_name = spellarg
            aura = None
            for a in session.player.player_auras:
                if a['spec'] == aura_name and ('end_time' in a):
                    aura = a
                    break
            assert aura
            aura['end_time'] = server_time - 1
            session.player.prune_player_auras()
            session.deferred_player_auras_update = True
            session.increment_player_metric('player_aura_speedups_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_player_aura_speedups', record_amount)

        elif spellname == "UNIT_REPAIR_SPEEDUP_FOR_MONEY":

            damaged_obj_list = [] # for accounting only
            for item in session.player.unit_repair_queue:
                obj = session.player.get_object_by_obj_id(item['obj_id'], fail_missing = False)
                if obj: damaged_obj_list.append(obj)
            detail_props['unit_cost'] = cls.get_unit_cost_detail(session, session.player, damaged_obj_list = damaged_obj_list)

            for item in session.player.unit_repair_queue:
                item['finish_time'] = server_time - 1
            gameapi.do_unit_repair_tick(session, retmsg, must_reply = True)
            session.increment_player_metric('speedups_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_speedups', record_amount)
            session.increment_player_metric('unit_repair_speedups_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_unit_repair_speedups', record_amount)
            retmsg.append(["SQUADS_UPDATE", session.player.squads]) # to unblock GUI

        elif spellname == "REPAIR_ALL_FOR_MONEY":

            if spellarg == session.player.my_home.base_id:
                base = session.player.my_home
                do_units = True
                write_base = False
            elif spellarg == session.viewing_base.base_id:
                assert session.viewing_base.base_landlord_id == session.player.user_id
                base = session.viewing_base
                do_units = False
                write_base = True
            else:
                raise Exception('base not in the session: '+spellarg)

            if not session.player.unit_speedups_enabled():
                do_units = False

            if do_units:
                detail_props['unit_cost'] = cls.get_unit_cost_detail(session, session.player, damaged_obj_list = [object for object in session.player.home_base_iter() if object.is_mobile() and object.is_damaged() and session.player.can_repair_unit(object)])

                # kill the entire repair queue (refunding resources for repairs already queued, because client may have sent REPAIR first)
                if gamedata['unit_repair_refund_on_paid_repair']:
                    session.player.unit_repair_cancel_all()
                else:
                    session.player.unit_repair_queue = []

                session.player.unit_repair_send(retmsg)

                for object in session.player.home_base_iter():
                    if object.is_mobile() and object.is_damaged() and session.player.can_repair_unit(object):
                        object.heal_to_full()
                        if session.has_object(object.obj_id): retmsg.append(["OBJECT_STATE_UPDATE2", object.serialize_state()])
                        session.player.send_army_update_one(object, retmsg)

                retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

            # now handle base buildings

            if write_base and session.viewing_base_lock != base.lock_id():
                # not going to hold it for an extended period of time, so no need to broadcast
                assert gamesite.nosql_client.map_feature_lock_acquire(base.base_region, base.base_id, session.player.user_id,
                                                                      generation=base.base_generation, do_hook=False, reason=spellname) \
                                                                      == Player.LockState.being_attacked # generation=-1?
            to_remove = []
            try:
                for object in base.iter_objects():
                    if object.is_mobile() and object.is_temporary(): # get rid of temporary units
                        to_remove.append(object)
                        continue
                    if object.is_building() and object.is_damaged():
                        object.repair_finish_time = server_time - 1
                        if session.has_object(object.obj_id):
                            gameapi.ping_object(session, retmsg, object.obj_id, base)
                        if write_base:
                            base.nosql_write_one(object, spellname)
                for object in to_remove:
                    base.drop_object(object)
                    if session.has_object(object.obj_id):
                        retmsg.append(["OBJECT_REMOVED2", object.obj_id])
                        session.rem_object(object.obj_id)
            finally:
                if write_base and session.viewing_base_lock != base.lock_id():
                    gamesite.nosql_client.map_feature_lock_release(base.base_region, base.base_id, session.player.user_id, generation=base.base_generation, reason=spellname)

            metric_event_coded(session.user.user_id, '5060_purchase_base_repair', {'currency': currency,
                                                                                   'base_id': spellarg,
                                                                                   record_price_type: amount_willing_to_pay})
            session.increment_player_metric('base_repairs_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_base_repairs', record_amount)

        elif spellname == "UPGRADE_FOR_MONEY":
            object = session.get_object(unit_id)
            assert gameapi.do_upgrade_instant(session, retmsg, object)
            metric_event_coded(session.user.user_id, '5050_purchase_building_upgrade', {'building_type':object.spec.name, 'level':object.level,
                                                                                        'currency': currency,
                                                                                        record_price_type: amount_willing_to_pay
                                                                                        })
            session.increment_player_metric('building_upgrades_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_building_upgrades', record_amount)
            session.increment_player_metric('building:'+object.spec.name+':upgrades_purchased', 1, time_series = False)
            session.increment_player_metric('building:'+object.spec.name+':'+record_spend_type+'_spent_on_upgrades', record_amount)

        elif spellname == "CRAFT_FOR_MONEY":
            object = session.get_object(unit_id)
            assert gameapi.do_craft(session, session.player, retmsg, object, gameapi.CraftSpellarg(spellarg),
                                    check_predicates = (not session.player.is_cheater), take_resources = False, take_ingredients = False, take_time = False)
            # run the completion
            gameapi.ping_object(session, retmsg, object.obj_id, session.viewing_base)

        elif spellname.startswith("UPGRADE_BARRIERS_LEVEL"):
            new_level = int(spellname[-1])
            assert new_level <= GameObjectSpec.lookup('barrier').maxlevel
            res = session.player.resources.calc_snapshot().serialize()
            for obj in session.player.home_base_iter():
                if obj.spec.name == 'barrier':
                    if obj.level < new_level:
                        # heal to full
                        obj.halt_repair()
                        obj.change_level(new_level)
                        obj.heal_to_full()
                        retmsg.append(["OBJECT_STATE_UPDATE", obj.serialize_state(), res])
            metric_event_coded(session.user.user_id, '5070_purchase_barrier_upgrade', {'level':new_level,
                                                                                       'currency':currency,
                                                                                       record_price_type: amount_willing_to_pay})
            session.increment_player_metric('barrier_upgrades_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_barrier_upgrades', record_amount)

        elif spellname.startswith("GROW_BASE_PERIMETER"):
            # accept any spellname of the form GROW_BASE_PERIMETERx_... where "x" is the new level to grow to
            new_level = int(spellname.split('_')[2][-1])
            assert new_level >= 0 and new_level <= 1
            assert new_level > session.viewing_base.base_size
            session.viewing_base.base_size = new_level
            retmsg.append(["BASE_SIZE_UPDATE", session.viewing_base.base_size])
            metric_event_coded(session.user.user_id, '5080_purchase_base_boundary_growth', {'level': new_level,
                                                                                            'currency': currency,
                                                                                            record_price_type: amount_willing_to_pay})
            session.increment_player_metric('base_growth_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_base_growth', record_amount)

        elif spellname.startswith("CHANGE_REGION"):
            if not gameapi.execute_spell(session, retmsg, spellname, spellarg, reason = 'purchased_change_region'):
                raise Exception('player %d %s(%s) purchase failure' % (session.player.user_id, spellname, repr(spellarg)))
            session.increment_player_metric('base_relocations_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_base_relocations', record_amount)
            session.player.send_history_update(retmsg)

        elif spellname == "RESEARCH_FOR_MONEY":
            techname = spellarg
            tech = session.player.get_abtest_spec(TechSpec, techname)
            assert tech

            lab = None # identify which lab was responsible for the research

            for obj in session.player.home_base_iter():
                if obj.is_building() and obj.is_researcher():
                    if tech.research_category in obj.spec.get_research_categories(session.player):
                        lab = obj

            session.give_tech(session.player, retmsg, techname, session.player.tech.get(techname,0)+1, lab, 'instant')

            metric_event_coded(session.user.user_id, '5040_purchase_tech', {'tech_type':techname, 'level':session.player.tech[techname],
                                                                    'currency': currency,
                                                                    record_price_type: amount_willing_to_pay,
                                                                    })
            session.increment_player_metric('techs_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_techs', record_amount)
            session.increment_player_metric('tech:'+techname+':purchased', 1, time_series = False)
            session.increment_player_metric('tech:'+techname+':'+record_spend_type+'_spent', record_amount)

            if session.player.tech[techname] == 1:
                session.increment_player_metric('tech_unlocks_purchased', 1, time_series = False)
                session.increment_player_metric(record_spend_type+'_spent_on_tech_unlocks', record_amount)

            session.activity_classifier.researched_tech()

            if tech.completion:
                session.execute_consequent_safe(tech.get_leveled_quantity(tech.completion, session.player.tech[techname]), session.player, retmsg, reason='tech:completion')

        elif spellname.startswith("BOOST_") or spellname == "BUY_RESOURCES_TOPUP":
            arg = spellarg if spellname == "BUY_RESOURCES_TOPUP" else None
            assert gameapi.execute_spell(session, retmsg, spellname, arg, reason = 'purchased_boost')
            metric_event_coded(session.user.user_id, '5020_purchase_boost', {'sku':spellname,
                                                                             'currency': currency,
                                                                             record_price_type: amount_willing_to_pay,
                                                                             })
            session.increment_player_metric('resource_boosts_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_resource_boosts', record_amount)

        elif spellname.startswith("BUY_GAMEBUCKS_") or spellname in ("FB_PROMO_GAMEBUCKS", "FB_TRIALPAY_GAMEBUCKS", "XSOLLA_PAYMENT", "FB_GAMEBUCKS_PAYMENT"):
            spell = gamedata['spells'][spellname]
            want_loot = spell.get('loot_table') # whether to give loot items

            if spellname in ("FB_PROMO_GAMEBUCKS", "FB_TRIALPAY_GAMEBUCKS", "XSOLLA_PAYMENT", "FB_GAMEBUCKS_PAYMENT", "BUY_GAMEBUCKS_TOPUP"):
                bucks = int(spellarg)
            else:
                bucks = spell['quantity']
                if want_loot:
                    if spellarg:
                        assert isinstance(spellarg, dict)
                        if not spellarg.get('want_loot', True):
                            want_loot = False

            session.player.resources.gain_gamebucks(bucks, reason='payment')
            session.setvalue_player_metric('gamebucks_balance', session.player.resources.gamebucks, bucket=True, bucket_size=15*60)

            session.setmax_player_metric('largest_purchase_gamebucks', bucks)

            session.increment_player_metric('gamebucks_purchased', bucks)
            session.increment_player_metric(record_spend_type+'_spent_on_gamebucks', record_amount)

            if spellname in ("FB_PROMO_GAMEBUCKS", "FB_TRIALPAY_GAMEBUCKS", "FB_GAMEBUCKS_PAYMENT"):
                session.increment_player_metric('promo_gamebucks_earned', bucks)
                props = {'amount_added':bucks,
                         'sku': spellname,
                         'currency': currency,
                         record_price_type: amount_willing_to_pay}
                if session.player.last_payer_promo > session.user.last_login_time:
                    # if a payer promo was offered during this login, assume the gamebucks were awarded by claiming it
                    session.increment_player_metric('payer_promo_gamebucks_earned', bucks)
                    metric_event_coded(session.user.user_id, '4501_payer_promo_claimed', props.copy())
                metric_event_coded(session.user.user_id, '4590_promo_gamebucks_earned', props.copy())

            items = []
            loggable_items = []
            discovered_where = None

            if want_loot: # item bundle
                assert not gift_order # XXX no code path yet for gifted bundles
                loot_table = gamedata['loot_tables'][spell['loot_table']]
                items += session.get_loot_items(session.player, loot_table['loot'], -1, -1)
                if items:
                    loggable_items = copy.deepcopy(items) # because inventory operations might mutate it
                    if session.player.get_any_abtest_value('modal_looting', gamedata['modal_looting']) and \
                       session.player.find_object_by_type(gamedata['inventory_building']):

                        # add directly to inventory, allowing over-stuffed warehouse?
                        bypass_pred = session.player.get_any_abtest_value('buy_gamebucks_bypass_loot_buffer', gamedata['store'].get('buy_gamebucks_bypass_loot_buffer', None))

                        if bypass_pred and ((bypass_pred in (1,True)) or Predicates.read_predicate(bypass_pred).is_satisfied2(session, session.player, {})):
                            # go directly into inventory
                            for item in items:
                                session.player.inventory_add_item(item, -1)
                                spec = gamedata['items'].get(item['spec'])
                                if spec and spec.get('fungible') and spec['resource'] == 'lottery_scans':
                                    session.deferred_player_auras_update = True
                            session.player.send_inventory_update(retmsg)
                            discovered_where = 'inventory'

                        else:
                            # use loot buffer

                            # give promo warehouse space? (XXX note: no GUI for this on the client)
                            promo_warehouse_pred = session.player.get_any_abtest_value('buy_gamebucks_promo_warehouse_space_if', gamedata['store'].get('buy_gamebucks_promo_warehouse_space_if',None))
                            if promo_warehouse_pred and ((promo_warehouse_pred in (1,True)) or Predicates.read_predicate(promo_warehouse_pred).is_satisfied2(session, session.player, {})):
                                cls.give_promo_warehouse_space(session, retmsg, items)

                            session.player.loot_buffer += items
                            retmsg.append(["LOOT_BUFFER_UPDATE", session.player.loot_buffer, True])
                            discovered_where = 'loot_buffer'

                        for item in loggable_items:
                            session.player.inventory_log_event('5125_item_obtained', item['spec'], item.get('stack',1), item.get('expire_time',-1), level=item.get('level',None), reason=spellname)

                    else:
                        session.player.send_loot_mail('', 0, items, retmsg, mail_template = gamedata['strings']['gamebucks_loot_mail'])
                        discovered_where = 'messages'


                if items:
                    extra_description = Store.buy_gamebucks_sku_get_loot_table_parameter(session, session.player, loot_table, 'metrics_description')
                    if extra_description:
                        price_description.append(extra_description)

                # very important to do this last, since it may change the loot/description
                on_purchase_cons = Store.buy_gamebucks_sku_get_loot_table_parameter(session, session.player, loot_table, 'on_purchase')
                if on_purchase_cons:
                     session.execute_consequent_safe(on_purchase_cons, session.player, retmsg, reason=spellname+':loot_table')

            # show "additional" gamebucks earned for purchase as if it were an item
            if 'nominal_quantity' in spell and spell['nominal_quantity'] < spell['quantity'] and \
               cls.buy_gamebucks_dialog_gamebucks_as_item(session, session.player):
                gamebucks_item = {'spec':'gamebucks', 'stack': spell['quantity'] - spell['nominal_quantity']}
                items = [gamebucks_item,] + items
                loggable_items = [gamebucks_item,] + loggable_items
                if discovered_where is None:
                    discovered_where = 'inventory' # assume already added

            if loggable_items and discovered_where:
                retmsg.append(["ITEMS_DISCOVERED", loggable_items, -1, discovered_where])

            if gift_order:
                # try to send gamebucks gift. On failure, leave the gamebucks in the player's balance
                total_gift_amount = 0
                for entry in gift_order['gifts']:
                    if total_gift_amount > bucks: break
                    entry['success'] = False
                    ui_data = gamedata['strings']['gift_order_mail']
                    item_name = 'alloy' if SpinConfig.game()=='mf' else 'gamebucks'
                    gift_amount = entry['gamebucks']
                    assert gift_amount >= 1
                    if session.player.resources.gamebucks < gift_amount:
                        gamesite.exception_log.event(server_time, 'player %d insufficient gamebucks to send gift' % (session.user.user_id))
                        break
                    recipient_user_id = entry['recipient_user_id']
                    if recipient_user_id == session.user.user_id: continue # just to be safe
                    gamesite.msg_client.msg_send([{'type': 'mail',
                                                   'gift_order': gift_order,
                                                   'from': session.player.user_id,
                                                   'to': [recipient_user_id],
                                                   'expire_time': server_time + gamedata['server']['message_expire_time']['gift_order'],
                                                   'from_fbid': str(session.user.facebook_id),
                                                   'from_name': unicode(session.user.get_chat_name(session.player)),
                                                   'attachments': [{'spec':item_name, 'stack':gift_amount}],
                                                   'subject': ui_data['ui_subject'].replace('%sender', session.user.get_chat_name(session.player)).replace('%GAMEBUCKS_NAME',gamedata['store']['gamebucks_ui_name']),
                                                   'body': ui_data['ui_body'].replace('%sender', session.user.get_chat_name(session.player)).replace('%GAMEBUCKS_NAME',gamedata['store']['gamebucks_ui_name']).replace('%time', time.strftime('%H:%S', time.gmtime(server_time))).replace('%day', time.strftime('%d %b %Y', time.gmtime(server_time)))}])
                    session.player.resources.gain_gamebucks(-gift_amount, reason='gift_order')
                    total_gift_amount += gift_amount
                    entry['success'] = True
                    session.increment_player_metric('gift_orders_sent', 1)
                    session.increment_player_metric('gamebucks_spent_on_gift_orders', gift_amount)

                    # send notifications
                    config = gamedata['fb_notifications']['notifications'].get('you_sent_gift_order',None)
                    if config and session.user.facebook_id:
                        notif_text = config['ui_name'].replace('%GAMEBUCKS_AMOUNT', str(gift_amount)).replace('%RECEIVER', entry['recipient_ui_name']).replace('%GAMEBUCKS_NAME',gamedata['store']['gamebucks_ui_name'])
                        session.player.do_send_fb_notification_to(session.user.facebook_id, notif_text, config, config['ref'])
                    config = gamedata['fb_notifications']['notifications'].get('you_got_gift_order',None)
                    if config and entry.get('recipient_facebook_id'):
                        notif_text = config['ui_name'].replace('%GAMEBUCKS_AMOUNT', str(gift_amount)).replace('%SENDER', session.user.get_chat_name(session.player)).replace('%GAMEBUCKS_NAME',gamedata['store']['gamebucks_ui_name'])
                        session.player.do_send_fb_notification_to(entry['recipient_facebook_id'], notif_text, config, config['ref'])

                retmsg.append(["YOU_SENT_GIFT_ORDER", gift_order])

            if ('give_units' in spell) and (not gift_order):
                if session.player.get_any_abtest_value('reward_units_by_mail', gamedata['reward_units_by_mail']):
                    cc_level = session.player.get_townhall_level() if ('level_by_cc' in spell['give_units']) else -1

                    # pick appropriate packaged item SKU for the unit at the level the player is going to get
                    def item_sku(player, unit_name, cc_level):
                        level = max(player.tech.get(gamedata['units'][unit_name]['level_determined_by_tech'],0),1)
                        if cc_level < 0:
                            # no automatic upgrade by CC - round conservatively
                            if level >= 8: level = 8
                            elif level >= 4: level = 4
                            else: level = 1
                        else:
                            table = gamedata['reward_unit_level_by_cc_level']
                            index = min(max(cc_level-1, 0), len(table)-1)
                            level = max(level, table[index])

                            # round generously
                            if level > 4: level = 8
                            elif level > 1: level = 4
                            else: level = 1

                        return 'packaged_'+unit_name+ (('_L%d' % level) if (level > 1) else '')

                    unit_items = [{'spec':item_sku(session.player, name, cc_level), 'stack':qty} for name, qty in spell['give_units'].iteritems() if (name in gamedata['units'])]
                    session.player.send_loot_mail('', 0, unit_items, retmsg, mail_template = gamedata['strings']['buy_gamebucks_bonus_mail'])
                    retmsg.append(["YOU_GOT_BONUS_UNITS"])
                else:
                    session.spawn_new_units_for_player(session.player, retmsg, spell['give_units'])

            session.deferred_player_state_update = True

            if 1:
                # the other purchase_ui_log events are all client-side, but we have to do this on the server
                # because Facebook's credit API callback is unreliable :(
                purchase_ui_event_props = {'code':4450, 'event_name': '4450_buy_gamebucks_payment_complete',
                                           'user_id': session.player.user_id,
                                           'sku': Store.get_description(session, unit_id, spellname, spellarg, price_description),
                                           'api': currency.split(':')[0],
                                           'gamebucks': bucks,
                                           'currency': currency, 'currency_price': amount_willing_to_pay,
                                           'usd_equivalent': usd_equivalent,
                                           'last_purchase_time': session.player.history.get('last_purchase_time',-1),
                                           'prev_largest_purchase': session.player.history.get('largest_purchase',0),
                                           'num_purchases': session.player.history.get('num_purchases',0),
                                           'gift_order': gift_order,
                                           'gui_version': Predicates.eval_cond_or_literal(session.player.get_any_abtest_value('buy_gamebucks_dialog_version', gamedata['store'].get('buy_gamebucks_dialog_version',1)), session, session.player),
                                           'gui_look': Predicates.eval_cond_or_literal(session.player.get_any_abtest_value('buy_gamebucks_dialog_look', gamedata['store'].get('buy_gamebucks_dialog_look',None)), session, session.player),
                                           }
                for aura in session.player.player_auras:
                    if aura['spec'] in ('flash_sale','item_bundles') and aura.get('end_time', -1) > server_time:
                        for FIELD in ('kind', 'duration', 'tag'):
                            if FIELD in aura['data']:
                                purchase_ui_event_props['flash_sale_'+FIELD] = aura['data'][FIELD]
                gamesite.purchase_ui_log.event(server_time, purchase_ui_event_props)

        elif spellname.startswith("BUY_PROTECTION"):
            assert gameapi.execute_spell(session, retmsg, spellname, None, reason = 'purchased_protection')
            session.increment_player_metric('protections_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_protection', record_amount)

        elif spellname.startswith("FREE_RANDOM_") or spellname.startswith("BUY_RANDOM_"):
            # returns item list here for logging
            items = gameapi.execute_spell(session, retmsg, spellname, None, reason = 'purchased_random_item')
            assert items
            price_description.append(SpinJSON.dumps({'items':items}))
            if (not spellname.startswith("FREE_RANDOM_")):
                session.increment_player_metric('random_items_purchased', 1, time_series = False)
                session.increment_player_metric(record_spend_type+'_spent_on_random_items', record_amount)
            else:
                session.increment_player_metric('free_random_items', 1, time_series = False)
            session.player.send_history_update(retmsg)

        elif spellname == "BUY_ITEM":
            assert gameapi.execute_spell(session, retmsg, spellname, spellarg, reason = 'purchased_item')
            if 'item' in spellarg['skudata']:
                session.increment_player_metric('item:'+spellarg['skudata']['item']+':purchased', int(spellarg['skudata'].get('stack',1)), time_series = False)
            session.increment_player_metric('items_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_items', record_amount)

        elif spellname == "CHANGE_ALIAS":
            if not gameapi.execute_spell(session, retmsg, spellname, spellarg, reason = 'purchased_alias_change'):
                try:
                    err_arg = SpinHTTP.unwrap_string(spellarg[0])
                except:
                    err_arg = repr(spellarg)
                raise Exception('player %d %s(%s) purchase failure' % (session.player.user_id, spellname, err_arg))
            session.increment_player_metric('alias_changes_purchased', 1, time_series = False)
            session.player.send_history_update(retmsg)

        elif spellname == "BUY_LOTTERY_TICKET":
            scanner = session.player.find_lottery_building()
            assert scanner
            scanner.contents += 1
            session.increment_player_metric('lottery_tickets_purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_lottery_tickets', record_amount)
            session.increment_player_metric(record_spend_type+'_spent_on_lottery', record_amount)
            retmsg.append(["OBJECT_STATE_UPDATE2", scanner.serialize_state()])

        elif spellname == "LOTTERY_SCAN":
            object = session.get_object(unit_id)
            assert gameapi.do_lottery_scan(session, retmsg, object, spellname, 'paid')

        elif spellname.startswith("OFFER"):
            spell = gamedata['spells'][spellname]
            assert gameapi.execute_spell(session, retmsg, spell['effect']['spellname'], spell['effect']['spellarg'], reason = 'flash_offer')

            # only allow one purchase
            if spell.get('flash_offer',False): session.player.flash_offer = None

            session.increment_player_metric('flash_offers_purchased', 1, time_series = False)
            session.increment_player_metric('flash_offer:'+spellname+':purchased', 1, time_series = False)
            session.increment_player_metric(record_spend_type+'_spent_on_flash_offers', record_amount)

        else:
            raise Exception('Unknown paid spell ' + spellname)

        return price_description, detail_props

    @classmethod
    def give_promo_warehouse_space(cls, session, retmsg, items):
        warehouse = session.player.find_object_by_type(gamedata['inventory_building'])
        if not warehouse: return False
        if warehouse.level >= warehouse.spec.maxlevel: return False
        can_fit = False
        while warehouse.level < warehouse.spec.maxlevel:
            can_fit, extra_slots_needed = inventory_items_can_all_fit(items, session.player.inventory, session.player.resources.calc_snapshot())
            if can_fit: break
            if not gamesite.gameapi.do_upgrade_instant(session, retmsg, warehouse, ignore_requires = True): break
            metric_event_coded(session.user.user_id, '4461_promo_warehouse_upgrade', {'level': warehouse.level})

        return can_fit

    @classmethod
    def buy_gamebucks_dialog_gamebucks_as_item(cls, session, player):
        # whether to show "extra" discount gamebucks in ITEMS_DISCOVERED even though they are just part of the SKU
        # this should happen whenever the "version 2" scrollable buy_gamebucks dialog is in use
        return Predicates.eval_cond_or_literal(player.get_any_abtest_value('buy_gamebucks_dialog_version', gamedata['store'].get('buy_gamebucks_dialog_version',1)), session, player) == 2

    # retrieve a parameter on a loot-bearing BUY_GAMEBUCKS SKU by inspecting its loot table
    # (similar to client's buy_gamebucks_sku2_get_loot_table_parameter())
    @classmethod
    def buy_gamebucks_sku_get_loot_table_parameter(cls, session, player, master_table, param_name):
        # note: this has some opinions about the loot table structure.
        # case 1 - parameter is on the master loot table
        if param_name in master_table:
            return Predicates.eval_cond_or_literal(master_table[param_name], session, player)

        # case 2 - master loot table indirects exactly once to another table
        if len(master_table['loot']) < 1: return None # empty
        if 'multi' in master_table['loot'][0]: return None # literal table
        if 'cond' not in master_table['loot'][0]: raise Exception('unexpected master loot table structure: %r' % master_table['loot'])
        table_ref = Predicates.eval_cond_or_literal(master_table['loot'][0]['cond'], session, player)
        if table_ref:
            if 'table' not in table_ref: raise Exception('unexpected subordinate loot table structure: %r' % table_ref)
            sub_table = gamedata['loot_tables'][table_ref['table']]
            if param_name in sub_table:
                return Predicates.eval_cond_or_literal(sub_table[param_name], session, player)

        return None

def fungible_inventory_item_can_fit(spec, stack, resource_state):
    if spec['resource'] == 'gamebucks': return True
    elif spec['resource'] in resource_state:
        return (stack + resource_state[spec['resource']][1] <= resource_state[spec['resource'][0]])
    return False

# returns (can_fit, extra_slots_needed)
def inventory_items_can_all_fit(items, inventory, snapshot):
    max_usable_inventory = snapshot.max_usable_inventory()
    can_fit = True
    extra_slots_needed = 0

    # operate on a copy of the inventory and resources
    scratch = copy.deepcopy(inventory)
    scratch_resource_state = dict((res,[snapshot.max_res(res), snapshot.cur_res(res)]) for res in gamedata['resources'])

    for item in items:
        spec = gamedata['items'][item['spec']]
        max_stack = spec.get('max_stack', 1)
        togo = item.get('stack', 1)

        if spec.get('fungible'):
            # check for entire fungible amount to fit
            if fungible_inventory_item_can_fit(spec, togo, scratch_resource_state):
                if spec['resource'] in scratch_resource_state:
                    scratch_resource_state[spec['resource']][1] += togo
                continue
            else:
                can_fit = False
                extra_slots_needed += 1
        else:
            # check for stackable item
            for inv in scratch:
                if inv['spec'] == item['spec'] and inv.get('level',1) == item.get('level',1):
                    inv_stack = inv.get('stack',1)
                    if inv_stack < max_stack:
                        added = min(togo, max_stack - inv_stack)
                        togo -= added
                        inv['stack'] = inv_stack + added

            if togo <= 0: continue # able to accommodate everything just by stacking
            if len(scratch) >= max_usable_inventory:
                # now we need another slot
                can_fit = False
                extra_slots_needed += 1
            scratch.append(copy.deepcopy(item))

    return can_fit, extra_slots_needed

class CREDITAPI(resource.Resource):
    isLeaf = True
    def __init__(self, gameapi):
        resource.Resource.__init__(self)
        self.gameapi = gameapi
    def render_GET(self, request):
        return self.render_POST(request)
    def render_POST(self, request):
        SpinHTTP.set_access_control_headers(request)
        ret = catch_all('CREDITAPI')(self.handle_request)(request)
        if ret is None:
            request.setResponseCode(http.BAD_REQUEST)
            ret = 'spinpunch error'
        return ret

    @admin_stats.measure_latency('CREDITAPI')
    def handle_request(self, request):
        SpinHTTP.set_access_control_headers(request)

        signed_request = request.args['signed_request'][0]
        request_data = SpinFacebook.parse_signed_request(signed_request, SpinConfig.config['facebook_app_secret'])
        if request_data is None:
            raise Exception('bad signature: checksum verification failed')

        method = request.args['method'][0]

        #print "PAYMENT REQUEST", method, request_data

        # check expiration time of signed request
        if request_data.has_key('expires') and \
           (server_time >= int(request_data['expires'])) and \
           spin_secure_mode:
            raise Exception('bad signature: timestamp expired')

        retmsg = {}
        retmsg['method'] = method

        if method == 'payments_get_item_price':
            # NEW FB Payments flow (with dynamic pricing)
            if gamedata['server']['log_fbpayments'] >= 3:
                gamesite.exception_log.event(server_time, 'payments_get_item_price %s' % (repr(request_data)))
            payment = request_data['payment']
            #request_id = payment['request_id']
            quantity = int(payment['quantity'])
            product_url = str(payment['product'])
            user_currency = payment['user_currency'] # note: ignore this, because we want to use the spell currency

            # sanity-check the SKU
            query = urlparse.parse_qs(urllib.splitquery(product_url)[1])

            assert (quantity == 1)
            assert len(query) == 2 and ('type' in query) and ('spellname' in query)
            assert str(query['type'][0]) == OGPAPI.object_type('sku')
            spellname = str(query['spellname'][0])
            assert product_url == OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('sku'), 'spellname': spellname})
            spell = gamedata['spells'][spellname]
            assert spell['price_formula'] == 'constant' # price must be only a function of the URL!
            assert 'currency' in spell
            assert spell['currency'].startswith('fbpayments:')

            session = get_session_by_facebook_id(request_data['user_id'])
            if session is None:
                gamesite.exception_log.event(server_time, 'payments_get_item_price on unknown session: %s' % repr(request_data))

            # shouldn't depend on these
            user_id = session.user.user_id if session else 0
            unit_id = GameObject.VIRTUAL_ID
            spellarg = None

            price_description = []
            error_reason = []

            price = Store.get_price(session, spell['currency'], unit_id, spell, spellarg, price_description, error_reason)
            if price < 0:
                raise Exception(('make_credit_order(user %s spell %s): Invalid order by user %d: ' % (user_currency, spell['currency'], user_id)) + repr(payment) + ' get_price() failed with reason: '+ repr(error_reason))

            retmsg['content'] = {
                # note: can override title and description here, if necessary, as well as quantity min/max limits
                'product': product_url,
                'amount': price,
                'currency': spell['currency'].split(':')[1]
                }
            metric_event_coded(user_id, '4073_fbpayments_order_prompt_response', copy.deepcopy(retmsg['content']))

        else:
            # OLD FB Credits flow
            payload = request_data['credits']
            order_id = payload['order_id']

            if method == 'payments_get_items':
                buyer = str(payload.get('buyer', -1))
                receiver = str(payload.get('receiver', -1))
                order_info = SpinJSON.loads(payload['order_info'])

                item = Store.make_credit_order(order_id, order_info, 'fbcredits')

                retmsg['content'] = [item]

            elif method == 'payments_status_update':
                order_details = SpinJSON.loads(payload['order_details'])
                # override order_id with value from order_details, according to instructions at http://developers.facebook.com/docs/payments/callback/
                order_id = order_details.get('order_id', order_id)
                buyer = str(order_details.get('buyer', -1))
                receiver = str(order_details.get('receiver', -1))
                fb_credits_amount = order_details['amount']
                status = payload['status']

                if status == 'placed':
                    # okay to actually give the stuff here
                    session = Store.execute_credit_order(order_id, self.gameapi, None, buyer, receiver, 'fbcredits', fb_credits_amount, SpinFacebook.order_data_decode(order_details['items'][0]['data']))

                    if not session: raise Exception('execute_credit_order() returned no session')

                    retmsg['content'] = {}
                    retmsg['content']['order_id'] = order_id
                    retmsg['content']['status'] = 'settled'

                    # do not return HTTP response until player state is fully flushed
                    def complete_settlement(request, session, retmsg):
                        # send mtime/spend update to player cache so upcache will pick it up immediately
                        gamesite.pcache_client.player_cache_update(session.user.user_id,
                                                                   {'last_mtime': server_time,
                                                                    'money_spent': session.player.history.get('money_spent',0.0)}, reason = 'purchase')

                        # update the user's credit balance
                        # (after a delay, to allow time for Facebook to process the order)
                        reactor.callLater(10, session.user.retrieve_facebook_credit_info_start)

                        request.write(SpinJSON.dumps(retmsg))
                        request.finish()

                    player_table.store_async(session.player, functools.partial(complete_settlement, request, session, retmsg), True, 'CREDITAPI')
                    return server.NOT_DONE_YET

                elif status == 'settled':
                    # spurious second call, do nothing
                    retmsg['content'] = {}
                    retmsg['content']['status'] = 'settled'

                elif status == 'disputed':
                    gamesite.exception_log.event(server_time, 'Order disputed! '+ repr(order_id) + ' ' + repr(order_details))
                    #retmsg['content'] = {}
                    #retmsg['content']['status'] = 'refunded'

                    my_data = SpinFacebook.order_data_decode(order_details['items'][0]['data'])

                    session_id = my_data['session_id']
                    session = get_session_by_session_id(session_id)
                    assert session
                    unit_id = my_data['unit_id']

                    # XXX spell may be undefined here when the order is a Facebook payer promo, need to fix this.

                    spellname = my_data['spellname']
                    spell = gamedata['spells'][spellname]
                    spellarg = my_data.get('spellarg', None)



                    price_description = []
                    error_reason = []

                    # just to fill in price_description as a side effect
                    Store.get_price(session, 'fbcredits', unit_id, spell, spellarg, price_description, error_reason)

                    dollar_amount = Store.fbcredits_to_dollars(fb_credits_amount)
                    descr = Store.get_description(session, unit_id, spellname, spellarg, price_description)

                    metric_event_coded(session.user.user_id, '1300_order_disputed', {'Billing Amount': -dollar_amount,
                                                                                     'Billing Description': descr,
                                                                                     'order_id': order_id
                                                                                     })

                    gamesite.credits_log.event(server_time, {'user_id':session.user.user_id,
                                                             'event_name':'1300_order_disputed',
                                                             'code':1300,
                                                             'Billing Amount': -dollar_amount,
                                                             'Billing Description': descr,
                                                             'order_id': order_id
                                                             })



                else:
                    raise Exception('unhandled payment status ' + status)
            else:
                raise Exception('unhandled method ' + method)

        return SpinJSON.dumps(retmsg)

# Kongregate API endpoint, mainly for payments

class KGAPI(resource.Resource):
    isLeaf = True
    def __init__(self, gameapi):
        resource.Resource.__init__(self)
        self.gameapi = gameapi
    def render_GET(self, request):
        return self.render_POST(request)
    def render_POST(self, request):
        SpinHTTP.set_access_control_headers(request)
        ret = catch_all('KGAPI')(self.handle_request)(request)
        if ret is None:
            request.setResponseCode(http.BAD_REQUEST)
            ret = 'spinpunch error'
        return ret

    @admin_stats.measure_latency('KGAPI')
    def handle_request(self, request):
        SpinHTTP.set_access_control_headers(request)

        signed_request = request.args['signed_request'][0]
        request_data = SpinKongregate.parse_signed_request(signed_request, SpinConfig.config['kongregate_api_key'])
        if not request_data:
            raise Exception('bad signature: checksum verification failed')

        order_id = str(request_data['order_id'])
        order_info = SpinFacebook.order_data_decode(request_data['order_info'])
        retmsg = {}

        if request_data['event'] == 'item_order_request':

            retmsg['items'] = [Store.make_credit_order(order_id, order_info, 'kgcredits')]

        elif request_data['event'] == 'item_order_placed':

            retmsg['status'] = 'canceled' # first set this in case of failure

            # okay to actually give the stuff here
            session = Store.execute_credit_order(order_id, self.gameapi, None,
                                                 str(request_data['buyer_id']),
                                                 str(request_data['recipient_id']),
                                                 'kgcredits', order_info['client_price'], # must trust this?
                                                 order_info)

            if not session: raise Exception('execute_kgcredit_order() returned no session')

            # do not return HTTP response until player state is fully flushed
            def complete_settlement(request, session, retmsg):
                retmsg['state'] = 'completed'
                # send mtime/spend update to player cache so upcache will pick it up immediately
                gamesite.pcache_client.player_cache_update(session.user.user_id,
                                                           {'last_mtime': server_time,
                                                            'money_spent': session.player.history.get('money_spent',0.0)}, reason = 'purchase')
                request.write(SpinJSON.dumps(retmsg))
                request.finish()

            player_table.store_async(session.player, functools.partial(complete_settlement, request, session, retmsg), True, 'KGAPI')
            return server.NOT_DONE_YET
        else:
            raise Exception('unhandled "event" ' + request_data['event'])

        return SpinJSON.dumps(retmsg)

# TrialPay API endpoint - see http://help.trialpay.com/facebook/offer-wall/

class TRIALPAYAPI(resource.Resource):
    isLeaf = True
    def __init__(self, gameapi):
        resource.Resource.__init__(self)
        self.gameapi = gameapi
    def render_GET(self, request):
        return self.render_POST(request)
    def render_POST(self, request):
        SpinHTTP.set_access_control_headers(request)
        ret = catch_all('TRIALPAYAPI')(self.handle_request)(request)
        if ret is None:
            request.setResponseCode(http.BAD_REQUEST)
            ret = 'spinpunch error'
        return ret

    @admin_stats.measure_latency('TRIALPAYAPI')
    def handle_request(self, request):
        SpinHTTP.set_access_control_headers(request)
        # find session
        user_id = int(request.args['order_info'][0])
        session = get_session_by_user_id(user_id)
        if not session:
            raise Exception('session not found for TRIALPAYAPI order (user_id %d)' % user_id)
        return self.handle_payment(request, session,
                                   SpinHTTP.get_twisted_header(request, 'TrialPay-HMAC-MD5'),
                                   request.args,
                                   request.content.read())

    def handle_payment(self, request, session, their_hash, request_args, request_body):
        # note: request may be null if this is called asynchronously
        # confirm Facebook App ID matches
        assert str(request_args['app_id'][0]) == SpinConfig.config['facebook_app_id']

        # verify hash
        our_hash = hmac.new(str(SpinConfig.config['trialpay_notification_key']), msg=str(request_body), digestmod=hashlib.md5).hexdigest()
        if their_hash != our_hash:
            raise Exception('TRIALPAYAPI hash mismatch: theirs %s ours %s body %r' % (their_hash, our_hash, request_body))

        gamebucks_amount = int(request_args['reward_amount'][0])

        if gamebucks_amount > 0:
            # we (ab)use the credit order path here to share all of its metrics output
            Store.execute_credit_order(request_args['oid'][0], self.gameapi, session, session.user.facebook_id, session.user.facebook_id,
                                       'gamebucks', gamebucks_amount,
                                       # awkward syntax here
                                       {'spellname': 'FB_TRIALPAY_GAMEBUCKS',
                                        'session_id': session.session_id,
                                        'currency_url': str(request_args['currency_url'][0])})

            # As of September 2015, TrialPay is now doing rapid-fire transactions on small amounts (~2 gamebucks)
            # that cause asynchronous stores to overlap. So, only synchronize on large transactions.

            if gamebucks_amount >= gamedata['server'].get('trialpay_sync_threshold',50):
                # do not return HTTP response until player state is fully flushed

                def complete_settlement(request, session):
                    # send mtime/spend update to player cache so upcache will pick it up immediately
                    gamesite.pcache_client.player_cache_update(session.user.user_id,
                                                               {'last_mtime': server_time,
                                                                'money_spent': session.player.history.get('money_spent',0.0)}, reason = 'purchase')
                    if request:
                        request.write('1')
                        request.finish()

                player_table.store_async(session.player, functools.partial(complete_settlement, request, session), True, 'TRIALPAYAPI')
                return server.NOT_DONE_YET

        return str('1')

# Xsolla API endpoint

class XSAPI(resource.Resource):
    isLeaf = True
    def __init__(self, gameapi):
        resource.Resource.__init__(self)
        self.gameapi = gameapi
    def render_GET(self, request):
        return self.render_POST(request)
    def render_POST(self, request):
        SpinHTTP.set_access_control_headers(request)
        ret = catch_all('XSAPI')(self.handle_request)(request)
        if ret is None:
            request.setResponseCode(http.BAD_REQUEST)
            ret = SpinJSON.dumps({'error': {'code':'FATAL_ERROR', 'message': 'game server exception'}})
        return ret

    @admin_stats.measure_latency('XSAPI')
    def handle_request(self, request):
        request_body = request.content.read()

        # check signature
        their_sig = SpinHTTP.get_twisted_header(request, 'Authorization')[len('Signature '):]
        our_sig = SpinXsolla.make_signature(SpinConfig.config, request_body)
        if their_sig != our_sig:
            gamesite.exception_log.event(server_time, 'XSAPI hash mismatch: theirs %s ours %s body %r' % (their_sig, our_sig, request_body))
            request.setResponseCode(http.BAD_REQUEST)
            return SpinJSON.dumps({'error': {'code':'INVALID_SIGNATURE', 'message': 'XSAPI hash mismatch (by server)'}})

        request_data = SpinJSON.loads(request_body)

        # find session
        xs_id = request_data['user']['id']
        session = get_session_by_xsolla_id(xs_id)
        if not session:
            gamesite.exception_log.event(server_time, 'session not found for XSAPI order (xs_id %s)' % xs_id)
            request.setResponseCode(http.BAD_REQUEST)
            # do not send INVALID_USER, because Xsolla caches this, and we don't want to cache "invalid" for a valid
            # user who does not happen to be logged in right now.
            return SpinJSON.dumps({'error': {'code':'INCORRECT_INVOICE', 'message': 'session not found (by server)'}})

        if request_data['notification_type'] == 'user_validation':
            # since we found the session, the user is already considered valid
            pass
        elif request_data['notification_type'] == 'payment':
            return self.handle_payment(request, session, request_data)
        else:
            raise Exception('unknown XSAPI notification_type '+request_data['notification_type'])

        request.setResponseCode(http.NO_CONTENT)
        return ''

    def handle_payment(self, request, session, request_data):
        if request_data['transaction'].get('dry_run',0) and spin_secure_mode and not SpinConfig.config.get('xsolla_sandbox_mode', False):
            raise Exception('sandbox purchases not allowed in secure mode')

        gamebucks_amount = int(request_data['purchase']['virtual_currency']['quantity'])
        real_currency = 'xsolla:'+request_data['purchase']['virtual_currency']['currency']
        real_currency_amount = request_data['purchase']['virtual_currency']['amount']

        # try to find the source SKU this purchase came from
        spellname, spellarg = session.user.find_buy_gamebucks_spell(session, real_currency, real_currency_amount, gamebucks_amount)
        if spellname is None: # fallback
            spellname = 'XSOLLA_PAYMENT'
            spellarg = gamebucks_amount

        if gamebucks_amount > 0:
            # we (ab)use the credit order path here to share all of its metrics output
            assert request_data['payment_details']['payout']['currency'] == 'USD'
            usd_receipts = request_data['payment_details']['payout']['amount']

            # take out Armor Games' 40% revenue share from usd_receipts, since it's used for management reporting purposes
            if session.user.frame_platform == 'ag':
                usd_receipts = round(usd_receipts*0.6, 2)

            Store.execute_credit_order(request_data['transaction']['id'], self.gameapi, session,
                                       request_data['user']['id'], request_data['user']['id'],
                                       real_currency,
                                       real_currency_amount,
                                       # awkward syntax here
                                       {'spellname': spellname, 'spellarg': spellarg, 'unit_id': GameObject.VIRTUAL_ID,
                                        'session_id': session.session_id,
                                        'usd_receipts': usd_receipts})

            # do not return HTTP response until player state is fully flushed
            def complete_settlement(request, session):
                # send mtime/spend update to player cache so upcache will pick it up immediately
                gamesite.pcache_client.player_cache_update(session.user.user_id,
                                                           {'last_mtime': server_time,
                                                            'money_spent': session.player.history.get('money_spent',0.0)}, reason = 'purchase')
                if request:
                    request.setResponseCode(http.NO_CONTENT)
                    request.write('')
                    request.finish()

            player_table.store_async(session.player, functools.partial(complete_settlement, request, session), True, 'XSAPI')
            return server.NOT_DONE_YET

        request.setResponseCode(http.NO_CONTENT)
        return ''

    # not part of the API handler - this is called on behalf of the client via GAMEAPI
    def get_token(self, session, retmsg, spellname, spellarg): # spellname being an xsolla BUY_GAMEBUCKS SKU
        spell = gamedata['spells'][spellname]
        assert spell['currency'].startswith('xsolla:')
        for PRED in ('show_if', 'requires'):
            if (PRED in spell) and (not Predicates.read_predicate(spell[PRED]).is_satisfied2(session, session.player, None)):
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", spell[PRED]])
                return None
        real_currency = spell['currency'].split(':')[1]
        gamebucks_quantity = spell['quantity']
        gamebucks_ui_description = Store.format_ui_string(session, spellname, None, spell, spell['ui_name'])
        url, method, headers, body = SpinXsolla.make_token_request(SpinConfig.config,
                                                                   session.user.get_xsolla_id(), session.user.get_email(),
                                                                   real_currency,
                                                                   session.user.country, session.user.locale.split('_')[0] if session.user.locale else 'en',
                                                                   gamebucks_quantity, gamebucks_ui_description,
                                                                   session.player.level(), session.user.account_creation_time)
        if gamedata['server'].get('log_xsolla', False):
            gamesite.xsolla_log.event(server_time, SpinJSON.dumps({'url':url, 'method':method, 'headers':headers, 'body':body}))
        d = make_deferred('SpinXsolla:get_token') # OK - doesn't block message processing
        gamesite.AsyncHTTP_Xsolla.queue_request(server_time, url,
                                                lambda result, _d=d: _d.callback(SpinJSON.loads(result)['token']),
                                                method=method, headers=headers, postdata=body)
        return d

# handler for game client API calls
class GAMEAPI(resource.Resource):
    isLeaf = True
    def __init__(self):
        resource.Resource.__init__(self)
        self.quarry_query_cache = {}
        self.deferred_sessions = set() # sessions that have pending deferred traffic that needs to be sent out
        self.deferred_session_flusher = None # IDelayedCall for flushing the deferred sessions

    def add_deferred_session(self, session):
        self.deferred_sessions.add(session)
        if not self.deferred_session_flusher:
            self.deferred_session_flusher = reactor.callLater(gamedata['server'].get('deferred_message_coalesce_time',1), self.flush_deferred_sessions)
    def flush_deferred_sessions(self):
        self.deferred_session_flusher = None
        if not self.deferred_sessions: return
        myset = self.deferred_sessions
        self.deferred_sessions = set()
        for session in myset:
            session.do_flush_outgoing_messages()

    def render_OPTIONS(self, request):
        # necessary for FireFox 3.6
        SpinHTTP.set_access_control_headers(request)
        return ''
    def render_GET(self, request):
        return self.render_POST(request)


    # after an attack on another player, clear lock on victim's base and record state
    # unfortunately, this has to be asynchronous. Returns a Deferred instance that will
    # be called when all I/O finishes.

    # wrap complete_attack in an exception trap, because it is part of the logout path -
    # if execution gets aborted, the session will be left in a broken state

    def complete_attack(self, session, retmsg, client_props = None, reason='unknown'):

        try:
            return self._complete_attack(session, retmsg, client_props=client_props, reason=reason)
        except:
            gamesite.exception_log.event(server_time, 'complete_attack exception on player %d: %s' % (session.user.user_id, traceback.format_exc().strip())) # OK?

        # error path
        session.complete_attack_in_progress = False
        d, session.complete_attack_d = session.complete_attack_d, None
        if not d: d = make_deferred('complete_attack(fail)')
        reactor.callLater(0, d.callback, False)
        return d

    @admin_stats.measure_latency('_complete_attack')
    def _complete_attack(self, session, retmsg, client_props = None, reason='unknown'):
        if session.complete_attack_in_progress:
            assert session.complete_attack_d
            if gamedata['server']['log_abnormal_logins'] >= 2:
                gamesite.exception_log.event(server_time, 're-entered complete_attack() from %s: %d at %s' % (reason, session.user.user_id, session.viewing_base.base_id))
            return session.complete_attack_d

        ascdebug('complete_attack %d' % session.user.user_id)

        assert session.complete_attack_d is None
        assert not session.complete_attack_in_progress

        session.complete_attack_d = make_deferred('_complete_attack')
        session.complete_attack_in_progress = True

        # record last bits of damage
        if session.damage_log:
            session.damage_log.record_multi(session.iter_objects())

        outcome = 'none'
        completion_consequent = None
        mutated_auras = False
        summary = None

        apm = None
        if client_props and client_props.get('apm',-1) > 0:
            apm = client_props['apm']

        # type of I/O we have to do
        io_type = None

        if (not session.home_base) and session.has_attacked and session.player is session.viewing_player:
            # quarry reinforcement or quarry/squad mutation
            assert session.viewing_base_lock is not None
            io_type = 'store_viewing_base'

        elif (not session.home_base) and session.has_attacked:

            # last-chance check for battle stars
            session.claim_all_battle_stars()

            base_damage = session.viewing_base.calc_base_damage()

            # classify battle outcome as victory or defeat
            outcome = 'defeat'

            if session.is_ladder_battle():
                outcome = 'victory' if session.viewing_base.ladder_victory_satisfied(session, base_damage) else 'defeat'

            elif session.viewing_base.base_type == 'quarry':
                guards_left = False
                # note: check the *session* for map objects not in the *base*
                for object in session.iter_objects():
                    if (object.owner is session.viewing_player) and object.is_mobile() and (not object.is_destroyed()) and session.viewing_base.can_deploy_unit(object.spec):
                        guards_left = True
                        break
                if (not guards_left) and session.viewing_base.quarry_victory_satisfied():
                    outcome = 'victory'
            elif session.viewing_base.base_type == 'squad':
                squad_victory = True
                for object in session.iter_objects():
                    if object.owner is session.viewing_player and object.is_mobile() and (not object.is_destroyed()):
                        squad_victory = False
                        break
                if squad_victory:
                    outcome = 'victory'
            else:
                outcome = 'victory' if session.viewing_base.common_victory_satisfied(session, base_damage) else 'defeat'

            defender_outcome = 'defeat' if (outcome == 'victory') else 'victory'

            is_conquest = (outcome == 'victory' and \
                           session.player.tutorial_state == "COMPLETE" and \
                           session.viewing_base is session.viewing_player.my_home and \
                           (session.viewing_player.resources.player_level >= session.player.resources.player_level) and \
                           (session.viewing_player.is_ai() or (not session.user.is_friends_with(session.viewing_user.social_id))))

            # modify trophy auras depending on bonus damage
            if ('ladder_bonus_damage' in gamedata['matchmaking']):
                bonus = 0
                for entry in gamedata['matchmaking']['ladder_bonus_damage']:
                    if base_damage >= entry[0]:
                        bonus = entry[1]
                        break
                if bonus > 0:
                    for aura in session.player.player_auras:
                        if aura['spec'].startswith('trophy_pvp_plus'):
                            winner_pts = aura.get('stack',1)
                            if winner_pts > 0:
                                winner_pts += max(1, int(winner_pts*bonus))
                                aura['stack'] = winner_pts
                    for aura in session.viewing_player.player_auras:
                        if aura['spec'].startswith('trophy_pvp_minus'):
                            loser_pts = -aura.get('stack',1)
                            if loser_pts < 0:
                                loser_pts = -(abs(loser_pts) + max(1,int(abs(loser_pts)*bonus)))
                                aura['stack'] = -loser_pts

            if session.is_ladder_battle():

                # reset ladder matchmaking cooldown
                if session.player.is_ladder_player(): session.player.cooldown_reset('ladder_match')

                if gamedata['server']['log_ladder_pvp'] >= 2:
                    gamesite.exception_log.event(server_time, 'ladder attack END: %s %s (DMG %.02f +%dres -%dres +%dunits -%dunits)' % \
                                                 (session.format_ladder_state(),
                                                  outcome, base_damage,
                                                  sum([session.loot.get(resname,0) for resname in gamedata['resources']],0),
                                                  sum([session.loot.get(resname+'_lost',0) for resname in gamedata['resources']],0),
                                                  sum(session.loot.get('units_killed',{}).itervalues(),0),
                                                  sum(session.loot.get('units_lost',{}).itervalues(),0)))

            # run battle end auras for both players
            mutated_auras = session.player.run_battle_end_auras(outcome, session, retmsg)
            session.viewing_player.run_battle_end_auras(defender_outcome, session, retmsg)

            # collect summary info that will be stored in both players' battle histories
            attacker_name = session.user.get_ui_name(session.player)
            defender_name = session.viewing_user.get_ui_name(session.viewing_player)
            facebook_friends = (not session.viewing_player.is_ai()) and session.user.is_friends_with(session.viewing_user.social_id)

            summary = { 'time': session.attack_log.log_time,
                        'duration': int(server_time - session.attack_log.log_time),
                        'logfile': session.attack_log.log_file if session.attack_log.log_file else '',
                        'replay_version': gamedata.get('replay_version', 0),
                        'involved_players': [session.user.user_id, session.viewing_user.user_id],
                        'battle_type': 'attack',
                        'attacker_id': session.user.user_id,
                        'attacker_type': 'human',
                        'attacker_name': attacker_name,
                        'attacker_facebook_id': session.user.facebook_id,
                        'attacker_social_id': session.user.social_id,
                        'attacker_level': session.player.resources.player_level,
                        'attacker_townhall_level': session.player.get_townhall_level(),
                        'attacker_summary': session.player.get_denormalized_summary_props('brief'),
                        'home_base': session.home_base,
                        'base_id': session.viewing_base.base_id,
                        'base_ui_name': session.viewing_base.base_ui_name,
                        'base_type': session.viewing_base.base_type,
                        'base_creation_time': session.viewing_base.base_creation_time,
                        'starting_base_damage': session.starting_base_damage,
                        'base_times_attacked': session.viewing_base.base_times_attacked,
                        'base_ncells': session.viewing_base.ncells(),
                        'base_map_loc': copy.deepcopy(session.viewing_base.base_map_loc),
                        'ladder_state': copy.deepcopy(session.ladder_state),
                        'defender_id': session.viewing_user.user_id,
                        'defender_name': defender_name,
                        'defender_facebook_id': session.viewing_user.facebook_id,
                        'defender_level': session.viewing_player.resources.player_level,
                        'defender_townhall_level': session.viewing_player.get_townhall_level(),
                        'defender_type': session.viewing_player.ai_or_human(),
                        'defender_is_ai': session.viewing_player.is_ai(),
                        'base_damage': base_damage,
                        'attacker_outcome': outcome,
                        'defender_outcome': defender_outcome }
            summary.update(session.res_looter.battle_summary_props())
            if facebook_friends: summary['facebook_friends'] = True
            if session.viewing_user.social_id: summary['defender_social_id'] = session.viewing_user.social_id
            if session.auto_resolved: summary['auto_resolved'] = 1
            if (not session.viewing_player.is_ai()):
                summary['defender_summary'] = session.viewing_player.get_denormalized_summary_props('brief')

            streak_cds = ['battle_streak']
            if session.is_ladder_battle():
                streak_cds.append('battle_streak_ladder')
            for cd in streak_cds:
                cd_stack = session.player.cooldown_active(cd)
                if cd_stack > 0:
                    summary[cd] = cd_stack

            # add cached alliance info for attacker/defender
            # this is denormalized to show players historical data
            for role, id, cache in (('attacker', session.alliance_id_cache, session.alliance_info_cache),
                                    ('defender', session.viewing_alliance_id_cache, session.viewing_alliance_info_cache)):
                if id >= 0 and cache:
                    # update involved_alliances only for PvP battles
                    if (not session.viewing_player.is_ai()) or session.is_ladder_battle():
                        if 'involved_alliances' not in summary: summary['involved_alliances'] = []
                        if id not in summary['involved_alliances']:
                            summary['involved_alliances'].append(id)

                    for FIELD in ('id','ui_name','chat_tag'):
                        if FIELD in cache:
                            summary[role+'_alliance_'+FIELD] = cache[FIELD]

            if apm is not None: summary['attacker_apm'] = apm
            if session.viewing_base.base_template: summary['base_template'] = session.viewing_base.base_template
            if session.viewing_base.base_region:
                summary['base_region'] = session.viewing_base.base_region
                summary['attacker_home_base_loc'] = copy.deepcopy(session.player.my_home.base_map_loc)
            if session.defending_squads: summary['defending_squads'] = session.defending_squads.keys()
            if session.deployable_squads: summary['deployable_squads'] = session.deployable_squads.keys()
            if session.deployed_units: summary['deployed_units'] = session.deployed_units.copy()
            if session.items_expended: summary['items_expended'] = copy.deepcopy(session.items_expended)
            if session.damage_log:
                damage_report = session.damage_log.finalize()
                if damage_report:
                    summary['damage'] = damage_report

            if session.viewing_base.base_type == 'quarry':
                # awkward - the actual conquer happens AFTER this...
                summary['base_times_conquered'] = session.viewing_base.base_times_conquered + (1 if outcome == 'victory' else 0)

            if 'battle_stars' in session.loot:
                summary['battle_stars'] = copy.deepcopy(session.loot['battle_stars'])

            if session.user.last_sprobe_result and session.user.last_sprobe_result.get('viewing_base_id',None) == session.viewing_base.base_id:
                # we got an sprobe result during the battle - record the framerate
                framerate = session.user.last_sprobe_result['tests'].get('graphics',{}).get('framerate',None)
                if framerate is not None: summary['framerate'] = framerate

                # see if we can record a ping sample
                connection_method = session.user.last_sprobe_result['tests'].get('connection',{}).get('method',None)
                if connection_method is not None:
                    ping = session.user.last_sprobe_result['tests'].get(connection_method,{}).get('ping',None)
                    if ping is not None: summary['active_player_ping'] = ping

            if (not session.viewing_player.is_ai()) and (session.defender_protection_expired_at > 0):
                if session.defender_protection_expired_at > server_time:
                    # attacked through protection - this should never happen
                    gamesite.exception_log.event(server_time, 'defender_protection_expired_at > server_time ! player %d vs %d exp %d server_time %d' % \
                                                 (session.player.user_id, session.viewing_player.user_id, session.defender_protection_expired_at, server_time))
                else:
                    summary['defender_protection_expired_at'] = session.defender_protection_expired_at

            if session.viewing_base.base_expire_time and session.viewing_base.base_expire_time > 0:
                summary['base_expire_time'] = session.viewing_base.base_expire_time

            if (not session.viewing_player.is_ai()):

                if (session.viewing_base is session.viewing_player.my_home):
                    # home base PvP attack

                    # determine attack severity
                    precurve_storage_damage = session.viewing_base.calc_resource_damage()

                    # adjust by minimum damage threshold
                    min_damage = session.viewing_player.get_leveled_quantity(session.viewing_player.get_any_abtest_value('protection_min_damage', gamedata['server']['protection_min_damage']))
                    storage_damage = (precurve_storage_damage - min_damage) / (1.0 - min_damage)

                    was_revenge = False
                    if gamedata['matchmaking']['revenge_time'] > 0:
                        # record revenge status

                        # if this was a revenge counterattack, remove the cooldowns to "settle the score" between these players
                        if session.player.cooldown_active('revenge_defender:%d' % session.viewing_player.user_id):
                            was_revenge = True
                            summary['is_revenge'] = 1
                            # but only do this in ladder and legacy PvP
                            if session.player.is_ladder_player() or session.player.is_legacy_pvp_player():
                                session.player.cooldown_reset('revenge_defender:%d' % session.viewing_player.user_id)
                                session.viewing_player.cooldown_reset('revenge_attacker:%d' % session.player.user_id)
                        else:
                            # create a revenge allowance
                            # victim can take revenge against attacker
                            session.viewing_player.cooldown_trigger('revenge_defender:%d' % session.player.user_id, gamedata['matchmaking']['revenge_time'])
                            # attacker is subject to revenge from victim
                            session.player.cooldown_trigger('revenge_attacker:%d' % session.viewing_player.user_id, gamedata['matchmaking']['revenge_time'])

                    fatigue_cdname = ('ladder_fatigue' if session.is_ladder_battle() else 'battle_fatigue')

                    # add battle fatigue on attacker against this victim
                    if gamedata['anti_bullying']['enable_'+fatigue_cdname]:
                        # note: for MAP ladder battles, only apply fatigue on victory
                        if (not session.is_ladder_battle()) or (session.player.is_ladder_player() or outcome == 'victory'):
                            duration = Predicates.eval_cond(gamedata['anti_bullying'][fatigue_cdname+'_duration'], session, session.player)
                            if duration > 0:
                                session.player.cooldown_trigger(fatigue_cdname+':%d' % session.viewing_player.user_id, duration, add_stack = 1)

                    # remove battle fatigue on victim against this attacker
                    # XXX this used to be unconditional for ladder battles, it might have let alt-abusing players hit themselves more often
                    if (not session.is_ladder_battle()) or (session.viewing_player.is_ladder_player() and (not was_revenge)):
                        session.viewing_player.cooldown_reset(fatigue_cdname+':%d' % session.player.user_id)

                    # record attack for alt abuse/bullying detection (obsolete)
                    # if (not (session.player.isolate_pvp and session.viewing_player.isolate_pvp)):
                    #     add_recent_attack(session.player.user_id, session.viewing_player.user_id, precurve_storage_damage, server_time, reason='complete_attack')

                    protection_based_on = session.viewing_player.get_any_abtest_value('protection_based_on', gamedata['server']['protection_based_on'])
                    ladder_prot_time = session.viewing_base.calc_ladder_protection(base_damage)

                    # update victim's protection timer
                    if session.is_ladder_battle() and (session.protection_eligible is True):
                        protection_based_on = 'ladder_battle'
                        prot_time = ladder_prot_time
                        if prot_time > 0:
                            session.viewing_player.set_protection_end_time(session, server_time + int(prot_time),
                                                                           '3881_protection_from_ladder_battle',
                                                                           {'attacker_id': session.player.user_id,
                                                                            'base_damage': base_damage,
                                                                            'precurve_storage_damage': precurve_storage_damage})

                            if gamedata['server']['enable_protection_fatigue']:
                                session.player.cooldown_trigger('protection_fatigue:%d'%session.viewing_player.user_id, gamedata['server']['protection_fatigue_duration'], add_stack = 1)
                                if gamedata['server']['enable_alliance_protection_fatigue']:
                                    other_alliance_id = gamesite.sql_client.get_users_alliance(session.viewing_player.user_id, reason = 'complete_attack_protection_fatigue')
                                    for aid in [other_alliance_id,] + session.viewing_player.get_sticky_alliances():
                                        if aid > 0:
                                            session.player.cooldown_trigger('protection_fatigue:a%d' % aid, gamedata['server']['protection_fatigue_duration'], add_stack = 1)

                                if gamedata['server']['global_protection_cooldown'] > 0:
                                    session.viewing_player.cooldown_trigger('global_protection', int(prot_time + gamedata['server']['global_protection_cooldown']*prot_time))
                        else:
                            session.viewing_player.set_protection_end_time(session, -1, None)

                    # ordinary attacks: based on damage suffered (only if the battle_start code made it eligible)
                    elif (session.protection_eligible is True):
                        min_time = session.viewing_player.get_leveled_quantity(session.viewing_player.get_any_abtest_value('protection_time_min', gamedata['server']['protection_time_min']))
                        max_time = session.viewing_player.get_leveled_quantity(session.viewing_player.get_any_abtest_value('protection_time_max', gamedata['server']['protection_time_max']))
                        prot_time = 0

                        if protection_based_on == 'ladder_battle':
                            prot_time = ladder_prot_time
                        else:
                            if protection_based_on == 'storage_only':
                                damage = storage_damage
                            else:
                                damage = base_damage

                            if damage > 0:
                                damage = min(1.0, max(0.0, damage))
                                prot_time = min_time + damage * (max_time - min_time)

                            if gamedata['server'].get('cap_nonladder_protection_to_ladder', True):
                                # do not give more protection than the ladder would
                                prot_time = min(prot_time, ladder_prot_time)

                        if prot_time > 0:
                            session.viewing_player.set_protection_end_time(session, server_time + int(prot_time),
                                                                           '3882_protection_from_nonladder_battle',
                                                                           {'attacker_id': session.player.user_id,
                                                                            'base_damage': base_damage,
                                                                            'damage':damage,
                                                                            'precurve_storage_damage': precurve_storage_damage})

                            if gamedata['server']['enable_protection_fatigue']:
                                session.player.cooldown_trigger('protection_fatigue:%d'%session.viewing_player.user_id, gamedata['server']['protection_fatigue_duration'], add_stack = 1)
                                if gamedata['server']['enable_alliance_protection_fatigue']:
                                    other_alliance_id = gamesite.sql_client.get_users_alliance(session.viewing_player.user_id, reason = 'complete_attack_protection_fatigue')
                                    for aid in [other_alliance_id,] + session.viewing_player.get_sticky_alliances():
                                        if aid > 0:
                                            session.player.cooldown_trigger('protection_fatigue:a%d' % aid, gamedata['server']['protection_fatigue_duration'], add_stack = 1)
                        else:
                            session.viewing_player.set_protection_end_time(session, -1, None)

                    else:
                        # temp, for tracking how the test works
                        protection_based_on = 'none_given'
                        prot_time = 0
                        session.viewing_player.set_protection_end_time(session, -1, None)

                    summary['prot_time'] = prot_time

                    retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])

                    if gamedata['server']['log_protection_timer']:
                        gamesite.exception_log.event(server_time, 'prot time calc (%s): %6d (L%2d) vs %6d (L%2d) %8s: loot %7d units %3d HP damage %.3f res damage %.3f (curved %.3f) -> %d' % \
                                                     (protection_based_on,
                                                      session.user.user_id,
                                                      session.player.resources.player_level,
                                                      session.viewing_user.user_id,
                                                      session.viewing_player.resources.player_level,
                                                      'friend' if session.viewing_user.is_friends_with(session.user.social_id) else 'stranger',
                                                      sum((session.loot.get(res,0) for res in gamedata['resources']),0),
                                                      sum(session.loot.get('units_killed',{}).itervalues()),
                                                      base_damage,
                                                      precurve_storage_damage,
                                                      storage_damage,
                                                      prot_time))

                    session.viewing_player.ladder_point_decay_check(session, None, base_damage = base_damage, base_repair_time = -1) # PvP attack victim

                    # send real-time Facebook notification to the victim
                    # XXX not working for quarries or squads because we have no way to write viewing_player.last_fb_notification_time as global state
                    config = gamedata['fb_notifications']['notifications']['you_got_attacked']
                    notif_text = config['ui_name']

                    # use first name only if it's a stranger
                    if False and (session.viewing_user.is_friends_with(session.user.social_id)):
                        # Facebook says template functionality is going away, so stop using this
                        notif_attacker = '{'+str(session.user.facebook_id)+'}'
                    else:
                        notif_attacker = session.user.get_ui_name(session.player)

                    notif_text = notif_text.replace('%ATTACKER', notif_attacker)
                    session.viewing_player.send_fb_notification(session.viewing_user, notif_text, config)

                # END is human home base

            # END is human

            if is_conquest:
                session.increment_player_metric('conquests', 1, time_series = False)

            session.protection_eligible = None # reset flag

            session.viewing_player.lock_state = Player.LockState.open
            session.viewing_player.lock_time = 0

            # update victim's state record

            if session.viewing_base is not session.viewing_player.my_home:
                assert session.viewing_base_lock is not None

                io_type = 'store_viewing_base'

                # check for victory condition
                if session.viewing_base.base_type == 'quarry' or (not session.viewing_base.base_type):
                    if outcome == 'victory':
                        # give instant travel to first reinforcements
                        session.player.travel_instantly_to(session.viewing_base)
                        retmsg.append(["PLAYER_TRAVEL_UPDATE", session.player.travel_state])

                        # quarry was conquered
                        if gamedata['server']['log_quarries']:
                            gamesite.exception_log.event(server_time, 'player %d\'s quarry %s was conquered by %d!' % \
                                                         (session.viewing_player.user_id, session.viewing_base.base_ui_name, session.player.user_id))
                        session.viewing_base.quarry_conquer(session.viewing_player, session.player)
                        session.increment_player_metric('quarries_conquered', 1, time_series = False)
                        if SpinConfig.game() in ('tr','dv'): # NASTY HACK
                            session.increment_player_metric('quarries_conquered_for_achievement', 1, time_series = False)
                        metric_event_coded(session.user.user_id, '4710_quarry_conquered', {'region': session.viewing_base.base_region,
                                                                                           'base_id': session.viewing_base.base_id,
                                                                                           'last_landlord_id': session.viewing_player.user_id})

                        # check if a strongpoint was conquered
                        template = gamedata['quarries_server']['templates'][session.viewing_base.base_template]
                        if template.get('turf_points',0) > 0:
                            session.increment_player_metric('strongpoints_conquered', 1, time_series = False)

                        # allow instant collection
                        session.player.cooldown_reset('quarry_collect')
                        retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])

                        # get rid of any remaining guard units (including ones that were not deployed due to climate restrictions)
                        # this may be redundant with object_combat_updates etc. for units that were deployed, but I think we need to do this to be fully safe against exploits/weird states
                        if gamesite.nosql_client and session.player.home_region:
                            for base_id, feature in session.defending_squads.iteritems():
                                squad_id = feature['squad_id']
                                if SQUAD_IDS.is_mobile_squad_id(squad_id):
                                    for state in gamesite.nosql_client.get_mobile_objects_by_base(session.player.home_region, session.viewing_player.squad_base_id(squad_id), reason='complete_attack(victory/defending_units)'):
                                        if session.has_object(state['obj_id']): continue # skip objects in session?
                                        if state.get('hp_ratio',1) > 0 or state.get('hp',1) > 0:
                                            if True: # (not session.viewing_base.can_deploy_unit(session.player.get_abtest_spec(GameObjectSpec, state['spec']))):
                                                # gamesite.exception_log.event(server_time, "destroying player %d's defending %s at %s since it is incompatible with the climate" % (session.viewing_player.user_id, spec.name, session.viewing_base.base_id))
                                                gamesite.nosql_client.update_mobile_object(session.player.home_region, {'obj_id':state['obj_id'], 'hp_ratio':0}, partial = True, reason = 'complete_attack(victory/defending_units)')
                                    gamesite.nosql_client.drop_map_feature(session.player.home_region, base_id)
                                    session.forget_base_lock(base_id)

                            if 1:
                                # kick any additional squads at or inbound to here back to home base
                                # this finds any squads that were not in the original defending_squads query, like ones that were on the way but not arrived yet
                                defense_features = [x for x in gamesite.nosql_client.get_map_features_by_loc(session.player.home_region, session.viewing_base.base_map_loc, reason='complete_attack(victory/defending_squads)') if x.get('base_type',None)=='squad']
                                for feature in defense_features:
                                    self.broadcast_map_attack(session.player.home_region, feature, session.player.user_id, session.viewing_player.user_id,
                                                              None,
                                                              [self.get_player_cache_props(u,p,aid) for u,p,aid in ((session.user,session.player,session.alliance_id_cache),(session.viewing_user,session.viewing_player,session.viewing_alliance_id_cache))],
                                                              msg = "REGION_MAP_ATTACK_DIVERT")
                                    gamesite.nosql_client.drop_map_feature(session.player.home_region, feature['base_id'])

                elif session.viewing_base.base_type == 'hive':
                    template = gamedata['hives_server']['templates'].get(session.viewing_base.base_template, None)

                    if outcome == 'victory':
                        # AI hive was defeated
                        io_type = 'del_viewing_base'

                        if gamedata['server']['log_hives']:
                            gamesite.exception_log.event(server_time, 'player %d (L%d)\'s hive %s in %s was conquered by %d!' % \
                                                         (session.viewing_player.user_id, session.viewing_player.resources.player_level,
                                                          session.viewing_base.base_ui_name, str(session.player.home_region), session.player.user_id))
                        session.increment_player_metric('hives_destroyed', 1, time_series = False)
                        session.loot['hives_destroyed'] = 1

                        if template and 'completion' in template:
                            completion_consequent = template['completion']

                    else:
                        # failed to defeat hive
                        if template and 'failure' in template:
                            completion_consequent = template['failure']

                    if (outcome != 'victory' and gamedata.get('pve_repair_on_defeat', False)) or gamedata.get('pve_repair_on_victory', False):
                        session.viewing_base.reset_to_full_health()

                elif session.viewing_base.base_type == 'squad':
                    # this is handled seamlessly because ping_squads will remove dead squads automatically, and the store_viewing_base MapCache update are no-ops
                    pass

                if io_type == 'del_viewing_base':
                    # remove base from the map XXX move into BaseTable.delete()
                    gamesite.nosql_client.drop_map_feature(session.viewing_base.base_region, session.viewing_base.base_id, reason='complete_attack')
                    session.forget_base_lock(session.viewing_base.base_id)

                # check for dead squads
                if session.using_squad_deployment() and session.viewing_player.is_human() and (session.viewing_player is not session.player):
                    if outcome == 'victory':
                        for base_id, feature in session.defending_squads.iteritems():
                            if SQUAD_IDS.is_mobile_squad_id(feature['squad_id']):
                                # note: there's a funky race condition here when the viewing_player is getting weeded off the map for churning,
                                # but has left squads behind. This results in session.viewing_player.home_region being None here. So use player.home_region instead.
                                gamesite.nosql_client.drop_map_feature(session.player.home_region, base_id)
                                session.forget_base_lock(base_id)

                        # note: ping_squads doesn't work here because session.viewing_player's playerdb could be way out of date, and have stuff in my_base that conflicts with the map


            elif session.viewing_player.is_ai():
                base = gamedata['ai_bases_server']['bases'][str(session.viewing_user.user_id)]
                if outcome == 'victory' and (('completion' in base) or session.is_ladder_battle()):
                    # "story" base - use Consequent system
                    completion_consequent = base.get('completion', None)

                    if ('fb_open_graph' in base) and base['fb_open_graph'].get('enable', True):
                        session.user.create_fb_open_graph_action('conquer',
                                                                 {OGPAPI.object_type('base'): OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('base'),
                                                                                                                                   'user_id':session.viewing_user.user_id})})
                    if gamedata.get('pve_repair_on_victory', False):
                        session.viewing_base.reset_to_full_health()
                        # almost always want to persist also, otherwise loot state would be lost!
                        if gamedata.get('pve_persist_on_victory', False):
                            io_type = 'store_ai_instance'
                        else:
                            io_type = 'del_ai_instance'
                    else:
                        # delete garbage AI instance
                        io_type = 'del_ai_instance'

                else:
                    # run failure consequent
                    if 'failure' in base and outcome == 'defeat':
                        completion_consequent = base['failure']

                    # store all "trash" bases and uncompleted "story" bases as temporary instances
                    if (outcome != 'victory' and gamedata.get('pve_repair_on_defeat', False)) or gamedata.get('pve_repair_on_victory', False):
                        session.viewing_base.reset_to_full_health()

                    io_type = 'store_ai_instance'

                    # get rid of Lion Stone
                    if LION_STONE_ID in session.user.client_ai_friends:
                        retmsg.append(["REM_FRIEND", LION_STONE_ID])
                        session.user.client_ai_friends.remove(LION_STONE_ID)
                        session.user.client_friends.remove(LION_STONE_ID)

                if session.is_ladder_battle() and (not gamedata['matchmaking']['ladder_match_ai_persist']):
                    io_type = None

                if not base.get('persistent', True): # do not store bases marked non-persistent
                    io_type = None

                if io_type == 'store_ai_instance':
                    # set expiration time
                    if session.viewing_player.expiration_time < 0:
                        persist_time = -1

                        # use instance cooldown to limit expiration time to this refresh only
                        # XXX NOTE! does not work on L1 bases where the cooldown is not running yet!
                        if ('ui_instance_cooldown' in base):
                            togo = session.player.cooldown_togo(base['ui_instance_cooldown'])
                            if togo > 0:
                                persist_time = togo

                        if persist_time <= 0:
                            mintime, maxtime = session.player.get_any_abtest_value('ai_base_persistence_time', gamedata['ai_base_persistence_time'])
                            persist_time = int(mintime + random.random()*float(maxtime - mintime))

                        session.viewing_player.expiration_time = server_time + persist_time

            else:
                io_type = 'store_viewing_player'

                # update victim's PvP trophy count
                if (not session.viewing_player.isolate_pvp):
                    for stat in ('trophies_pvp', 'trophies_pvv'):
                        session.viewing_player.modify_scores({stat: session.loot.get('viewing_'+stat, 0)}, reason = 'complete_attack(defender)')

                if (outcome != 'victory' and gamedata.get('pvp_repair_on_defeat', False)) or gamedata.get('pvp_repair_on_victory', False):
                    session.viewing_base.reset_to_full_health()

                # update victim's player cache entry
                cache_props = {'lootable_buildings': session.viewing_player.get_lootable_buildings(),
                               'base_damage': session.viewing_player.my_home.calc_base_damage(),
                               'base_repair_time': -1,
                               'last_defense_time': server_time,
                               'last_fb_notification_time': session.viewing_player.last_fb_notification_time
                               }
                gamesite.pcache_client.player_cache_update(session.viewing_user.user_id, cache_props, reason = 'attack_victim')

                if 0 and outcome == 'victory':
                    if session.viewing_user.facebook_id:
                        session.user.create_fb_open_graph_action('defeat', {'profile': session.viewing_user.facebook_id})

            # award bonus XP
            if outcome == 'victory':
                xp = 0
                xp_why = []
                amount = sum((session.loot.get(res,0) for res in gamedata['resources']),0)
                if amount > 0:
                    coeff = gamedata['player_xp']['pve_loot_xp' if session.viewing_player.is_ai() else 'pvp_loot_xp']
                    xp += int(amount*coeff*gamedata['player_xp']['loot_victory_bonus'])
                    xp_why.append('loot_victory_bonus')
                levels = session.loot.get('destroyed_building_levels',0)
                if levels > 0:
                    xp += int(levels*gamedata['player_xp']['destroy_building_victory_bonus'])
                    xp_why.append('destroy_building_victory_bonus')
                self.give_xp(session, retmsg, xp, ','.join(xp_why), None)
                session.loot['xp'] = session.loot.get('xp',0) + xp

            event_props = {'battle_outcome':outcome,
                           'starting_base_damage': session.starting_base_damage,
                           'base_damage': base_damage,
                           'base_id':session.viewing_base.base_id,
                           'opponent_user_id':session.viewing_user.user_id,
                           'opponent_level':session.viewing_player.resources.player_level,
                           'opponent_type':session.viewing_player.ai_or_human(),
                           'loot': session.loot.copy(),
                           'ladder_state': session.ladder_state,
                           'gain_xp':session.loot.get('xp', 0),
                           'units_lost':sum(session.loot.get('units_lost', {}).itervalues()),
                           'units_killed':sum(session.loot.get('units_killed', {}).itervalues()),
                           }
            for res in gamedata['resources']:
                event_props['gain_'+res] = session.loot.get(res,0)
            if 'battle_stars' in session.loot:
                event_props['battle_stars'] = copy.deepcopy(session.loot['battle_stars'])

            if gamedata['server'].get('log_battle_end',False) or LOTS_OF_METRICS:
                metric_event_coded(session.user.user_id, '3830_battle_end', event_props.copy())
            session.attack_event(session.user.user_id, '3830_battle_end', event_props.copy())

            if session.is_ladder_battle() and ((not session.using_squad_deployment()) or gamedata['server'].get('log_ladder_pvp_on_map',False)):
                session.player.record_ladder_pvp_event('3306_ladder_attack_end', {'defender_id': session.viewing_player.user_id,
                                                                                  'outcome': outcome,
                                                                                  'base_damage': base_damage,
                                                                                  'attacker_stars': sum(session.loot.get('battle_stars',{}).itervalues(),0),
                                                                                  'duration': int(server_time - session.attack_log.log_time),
                                                                                  'attacker_pts': session.player.ladder_points(),
                                                                                  'defender_pts': session.viewing_player.ladder_points(),
                                                                                  'attacker_pts_delta': session.loot.get('trophies_pvp',0),
                                                                                  'defender_pts_delta': session.loot.get('viewing_trophies_pvp',0),
                                                                                  'attacker_res': session.player.resources.get_fungible_amounts(),
                                                                                  'defender_res': session.viewing_player.resources.get_fungible_amounts(),
                                                                                  'attacker_res_delta': dict((res,session.loot.get(res,0)) for res in gamedata['resources']),
                                                                                  'defender_res_delta': dict((res,(-1*session.loot.get(res+'_lost',0))) for res in gamedata['resources']),
                                                                                  'items_expended': sum(session.items_expended.get(str(session.player.user_id),{}).itervalues(), 0),
                                                                                  'deployed_donated_unit_space': session.deployed_donated_unit_space,
                                                                                  'battle_streak_ladder': session.player.cooldown_active('battle_streak_ladder'),
                                                                                  'ladder_state': session.ladder_state})
        # after defending against an AI attack at home
        elif session.home_base and session.has_attacked:

            outcome = 'victory'

            # defeat if CC is destroyed
#            for obj in session.player.home_base_iter():
#                if obj.spec.name == gamedata['townhall']:
#                    if obj.is_destroyed():
#                        outcome = 'defeat'
#                        break

            # defeat if attack was not completely deployed
            if session.player.tutorial_state == "COMPLETE":
                if len(session.incoming_attack_units) > 0:
                    if gamedata['server'].get('log_ai_attack_results', False):
                        gamesite.exception_log.event(server_time, '%d defense loss (%s) - more units: %s' % \
                                                     (session.player.user_id, repr(session.incoming_attack_type), repr(session.incoming_attack_units)))
                    outcome = 'defeat'
                else:
                    # defeat if any enemy units remain
                    for obj in session.cur_objects.objects.itervalues():
                        if obj.team == 'enemy' and (not obj.is_destroyed()):
                            if gamedata['server'].get('log_ai_attack_results', False):
                                gamesite.exception_log.event(server_time, '%d defense loss (%s) - undestroyed enemy %s' % \
                                                             (session.player.user_id, repr(session.incoming_attack_type), obj.spec.name))
                            outcome = 'defeat'
                            break

                if outcome == 'defeat':
                    # "surrender" by blowing up CC
                    for obj in session.viewing_base.iter_objects():
                        if obj.spec.name == gamedata['townhall']:
                            assert obj.owner is session.player
                            if obj.is_destroyed(): continue
                            obj.halt_all()
                            obj.hp = max(int(gamedata['ai_attacks_client']['surrender_cc_min_health']*obj.max_hp), min(obj.hp, int(gamedata['ai_attacks_client']['surrender_cc_health']*obj.max_hp)))
                            if session.damage_log: session.damage_log.record(obj)

                            if session.has_object(obj.obj_id):
                                retmsg.append(["OBJECT_STATE_UPDATE2", obj.serialize_state()])

                if gamedata['server'].get('log_ai_attack_results', False):
                    gamesite.exception_log.event(server_time, '%d defense %s (against %s)' % \
                                                             (session.player.user_id, outcome, repr(session.incoming_attack_type)))

            mutated_auras = session.player.run_battle_end_auras(outcome, session, retmsg)

            event_props = {'battle_outcome':outcome,
                           'gain_xp':session.loot.get('xp', 0),
                           'loot':session.loot.copy(),
                           'ladder_state': session.ladder_state,
                           'units_lost':sum(session.loot.get('units_lost', {}).itervalues()),
                           'units_killed':sum(session.loot.get('units_killed', {}).itervalues()),
                           }
            for res in gamedata['resources']:
                event_props['gain_'+res] = -1*session.loot.get(res,0)
            session.attack_event(session.user.user_id, '3860_ai_attack_end', event_props.copy())
            if LOTS_OF_METRICS:
                metric_event_coded(session.user.user_id, '3860_ai_attack_end', event_props.copy())

            base_damage = session.player.my_home.calc_base_damage()

            # update player's battle history
            if session.incoming_attack_id > 0:
                if str(session.incoming_attack_id) not in gamedata['ai_bases_server']['bases']:
                    gamesite.exception_log.event(server_time, '%d defense %s (against %s) - cannot find incoming_attack_id %s in ai_bases!' % \
                                                 (session.player.user_id, outcome, repr(session.incoming_attack_type), repr(session.incoming_attack_id)))
                else:
                    summary = { 'time': session.attack_log.log_time,
                                'duration': int(server_time - session.attack_log.log_time),
                                'logfile': session.attack_log.log_file if session.attack_log.log_file else '',
                                'replay_version': gamedata.get('replay_version', 0),
                                'involved_players': [session.user.user_id],
                                'battle_type': 'defense',
                                'attacker_id': session.incoming_attack_id,
                                'attacker_type': 'ai',
                                'attack_type': session.incoming_attack_type,
                                'attacker_name': gamedata['ai_bases_server']['bases'][str(session.incoming_attack_id)]['ui_name'],
                                'attacker_facebook_id': -1,
                                'attacker_level': gamedata['ai_bases_server']['bases'][str(session.incoming_attack_id)]['resources']['player_level'],
                                'attacker_is_ai': True,
                                'ladder_state': copy.deepcopy(session.ladder_state),
                                'home_base': session.home_base,
                                'base_id': session.viewing_base.base_id,
                                'base_ui_name': session.viewing_base.base_ui_name,
                                'base_type': session.viewing_base.base_type,
                                'base_ncells': session.viewing_base.ncells(),
                                'base_map_loc': copy.deepcopy(session.viewing_base.base_map_loc),
                                'starting_base_damage': session.starting_base_damage, # note, this will ignore repairs since the start of the session
                                'defender_id': session.user.user_id,
                                'defender_type': 'human',
                                'defender_name': session.user.get_ui_name(session.player),
                                'defender_facebook_id': session.user.facebook_id,
                                'defender_social_id': session.user.social_id,
                                'defender_level': session.player.resources.player_level,
                                'defender_townhall_level': session.player.get_townhall_level(),
                                'defender_summary': session.player.get_denormalized_summary_props('brief'),
                                'base_damage': base_damage,
                                'attacker_outcome': 'victory' if (outcome == 'defeat') else 'defeat',
                                'defender_outcome': outcome }
                    if apm is not None: summary['defender_apm'] = apm
                    if session.auto_resolved: summary['auto_resolved'] = 1
                    summary.update(session.res_looter.battle_summary_props())

                    streak_cds = ['battle_streak']
                    if session.is_ladder_battle():
                        streak_cds.append('battle_streak_ladder')
                    for cd in streak_cds:
                        cd_stack = session.player.cooldown_active(cd)
                        if cd_stack > 0:
                            summary[cd] = cd_stack

                    # add cached alliance info for attacker/defender
                    # this is denormalized to show players historical data
                    for role, id, cache in (('defender', session.alliance_id_cache, session.alliance_info_cache),):
                        if id >= 0 and cache:
                            # note: no involved_alliances here, since it's not PvP
                            for FIELD in ('id','ui_name','chat_tag'):
                                if FIELD in cache:
                                    summary[role+'_alliance_'+FIELD] = cache[FIELD]
                    if session.viewing_base.base_region: summary['base_region'] = session.viewing_base.base_region
                    if session.defending_squads: summary['defending_squads'] = session.defending_squads.keys()
                    if session.deployed_units: summary['deployed_units'] = session.deployed_units.copy()
                    if session.deployable_squads: summary['deployable_squads'] = session.deployable_squads.keys()
                    if session.items_expended: summary['items_expended'] = copy.deepcopy(session.items_expended)
                    if session.damage_log:
                        damage_report = session.damage_log.finalize()
                        if damage_report:
                            summary['damage'] = damage_report

                    if session.user.last_sprobe_result and session.user.last_sprobe_result.get('viewing_base_id',None) == session.viewing_base.base_id:
                        # see if we can record a ping sample (no framerate recording because it's the player's own home base)
                        connection_method = session.user.last_sprobe_result['tests'].get('connection',{}).get('method',None)
                        if connection_method is not None:
                            ping = session.user.last_sprobe_result['tests'].get(connection_method,{}).get('ping',None)
                            if ping is not None: summary['active_player_ping'] = ping

            if outcome == 'victory':
                data = session.incoming_attack_data
                if data and ('completion' in data):
                    completion_consequent = data['completion']

        if session.has_attacked:

            if completion_consequent:
                completion_context = {}
                if 'battle_stars' in session.loot:
                    completion_context['battle_stars'] = session.loot['battle_stars']
                    completion_context['n_battle_stars'] = len(session.loot['battle_stars'])
                session.execute_consequent_safe(completion_consequent, session.player, retmsg, context=completion_context, reason='complete_attack')

            # special case - adjust hive kill points by region factor
            if ('hive_kill_points' in session.loot) and session.viewing_base.base_region and (session.viewing_base.base_region in gamedata['regions']):
                session.loot['hive_kill_points'] = max(1, int(gamedata['regions'][session.viewing_base.base_region].get('hive_kill_point_scale',1)*session.loot['hive_kill_points']))

            if mutated_auras:
                session.deferred_player_auras_update = True

            if (session.viewing_player.is_ai() or session.incoming_attack_data) and (outcome == 'victory'):
                session.user.repopulate_ai_list(session)

            # update score_foo history fields for leaderboard rankings
            if (not session.player.isolate_pvp):
                stats = {}

                # collect stats increments that will be added to player score counters
                if (session.viewing_player.is_ai() or \
                    (session.viewing_player is not session.player) and (not session.user.is_friends_with(session.viewing_user.social_id))):
                    stats['xp'] = session.loot.get('xp', 0)
                    stats['conquests'] = 1 if is_conquest else 0
                    stats['resources_looted'] = sum((session.loot.get(res,0) for res in gamedata['resources']),0)
                    stats['havoc_caused'] = session.loot.get('havoc_caused',0) if is_conquest else 0
                    stats['damage_inflicted'] = session.loot.get('damage_inflicted',0)
                    stats['hive_kill_points'] = session.loot.get('hive_kill_points',0) # must be set via SESSION_LOOT consequent

                stats['tokens_looted'] = sum([item.get('stack',1) for item in session.loot.get('items',[]) \
                                              if gamedata['items'][item['spec']].get('category')=='token'], 0)

                # collect trophy stats - note, trophies can come from AI attacks, but other stats cannot
                for st in ('trophies_pvp', 'trophies_pve', 'trophies_pvv'):
                    stats[st] = session.loot.get(st, 0)

                session.player.modify_scores(stats, reason = 'complete_attack(attacker)')

            # finalize battle summary
            if summary:
                summary['loot'] = copy.deepcopy(session.loot) # grab loot here since completion consequent may have modified it
                session.player.append_battle_summary(session, summary['attacker_id'] if summary['battle_type'] == 'defense' else summary['defender_id'], summary)

                # send log to MongoDB
                if gamedata['server'].get('nosql_battle_record',True) and summary.get('attack_type',None) != 'tutorial' and summary['defender_id'] != LION_STONE_ID:
                    gamesite.nosql_client.battle_record(summary, reason=summary['battle_type'])

                if summary['battle_type'] == 'attack': # offensive attack
                    if not summary['defender_is_ai']: # PvP
                        # mail the victim a "you've been attacked" message and battle summary
                        gamesite.msg_client.msg_send([{'from': session.player.user_id,
                                                       'to': [summary['defender_id']],
                                                       'type': 'i_attacked_you',
                                                       'expire_time': server_time + gamedata['server']['message_expire_time']['i_attacked_you'],
                                                       'from_fbid': str(summary['attacker_facebook_id']),
                                                       'from_name': unicode(session.user.get_ui_name(session.player)),
                                                       'summary': summary}])

                    if summary['base_type'] != 'home' and 'base_region' in summary:
                        # offense attack against quarry or squad
                        # broadcast map attack to victim
                        self.broadcast_map_attack(summary['base_region'], session.viewing_base.get_cache_props(),
                                                  summary['attacker_id'], summary['defender_id'],
                                                  # The only part of the summary actually used by the client is the defender_outcome.
                                                  # Trim it down to hide sensitive info like analytics summary data. (XXX simplify args)
                                                  {'defender_outcome': summary['defender_outcome']},
                                                  [self.get_player_cache_props(u,p,aid) for u,p,aid in ((session.user,session.player,session.alliance_id_cache),(session.viewing_user,session.viewing_player,session.viewing_alliance_id_cache))],
                                                  msg = "REGION_MAP_ATTACK_COMPLETE")

            session.player.send_history_update(retmsg)

            # check for player's own dead squads
            if session.using_squad_deployment():
                session.player.ping_squads_and_send_update(session, retmsg, originator=session.player.user_id, reason='complete_attack(attacker)')

            # END has_attacked

        session.has_attacked = False
        session.debug_log_action('_complete_attack')

        session.defender_cc_standing = False
        session.reset_attack_log()
        session.attack_finish_time = -1
        session.loot = {}
        session.starting_base_damage = None
        session.res_looter = None
        session.items_expended = {}
        session.auto_resolved = False
        session.resurrectable_objects = []
        session.incoming_attack_type = None
        session.incoming_attack_data = None
        session.incoming_attack_units = []
        session.incoming_attack_time = -1
        session.incoming_attack_wave_time = -1

        # force repairs to start to avoid exploits where you leave your own buildings unrepaired
        # note: not sending updates to retmsg, so we assume a session change will come right after this
        if session.home_base:
            self.do_start_repairs(session, None, session.player.my_home.base_id, repair_units = False)
            session.player.ladder_point_decay_check(session, retmsg) # after attack - player

        if summary:
            retmsg.append(["BATTLE_ENDED",
                           outcome,
                           summary,
                           session.viewing_base.get_cache_props(), # extra_props = {'deployment_buffer': session.viewing_base.deployment_buffer} ?
                           session.ladder_state])

        # queue the callback (and any future complete_attack()s called before the I/O completes), and call them after I/O completes

        def finish(session, io_type):
            if io_type == 'store_viewing_player':
                # release squads and home map feature lock
                session.release_base()

                # release lock AFTER playerdb store completes
                gamesite.lock_client.player_lock_release(session.viewing_user.user_id,
                                                         session.viewing_player.generation,
                                                         Player.LockState.being_attacked,
                                                         expected_owner_id = session.player.user_id)

            elif io_type == 'store_viewing_base' or io_type == 'del_viewing_base':
                if io_type == 'store_viewing_base':
                    session.viewing_base.send_map_feature_update(reason='complete_attack')
                session.release_base()

            session.complete_attack_in_progress = False
            d, session.complete_attack_d = session.complete_attack_d, None
            if d: d.callback(True)

        post_result = functools.partial(finish, session, io_type)

        if io_type is None:
            reactor.callLater(0, post_result)
        elif io_type == 'store_ai_instance':
            ai_instance_table.store_async(session.user.user_id, session.viewing_user.user_id, session.viewing_player, post_result, True, 'complete_attack')
        elif io_type == 'del_ai_instance':
            ai_instance_table.delete_async(session.user.user_id, session.viewing_user.user_id, post_result)
        elif io_type == 'store_viewing_player':
            player_table.store_async(session.viewing_player, post_result, True, 'complete_attack')
        elif io_type == 'store_viewing_base':
            if gamedata['server'].get('nosql_full_store', False):
                # should be unnecessary - all updates should have been written out individually
                base_table.store_async(session.viewing_base, post_result, True, 'complete_attack')
            else:
                reactor.callLater(0, post_result)
        elif io_type == 'del_viewing_base':
            base_table.delete_async(session.viewing_base.base_region, session.viewing_base.base_id, post_result)
        else:
            raise Exception('unknown io_type '+io_type)

        return session.start_async_request(session.complete_attack_d)

    # the outer change_session() function just checks whether the player is eligible to change sessions right now
    def change_session(self, session, retmsg, dest_user_id = None, dest_base_id = None, force = False, new_ladder_state = None, delay = 0, client_props = None):
        assert dest_user_id or dest_base_id
        assert not (dest_user_id and dest_base_id)
        pre_attack = client_props.get('pre_attack', None) if client_props else None

        if dest_user_id:
            # old inline path
            if (not force) and (session.viewing_user is not None) and (session.viewing_user.user_id == dest_user_id) and (session.viewing_base is session.viewing_player.my_home) and (not session.has_attacked):
                return session.start_async_request(defer.succeed(False)) # already viewing this base
        else:
            # new quarry path
            assert gamesite.nosql_client and session.player.home_region
            if (not force) and (session.viewing_base.base_id == dest_base_id) and (not session.has_attacked):
                return session.start_async_request(defer.succeed(False)) # already viewing this base

        if session.home_base and session.has_attacked:
            # reset daily attack timer
            session.player.last_daily_attack = server_time
            # do not do this from complete_attack, because that is called in the logout/relog path

        if dest_user_id == session.user.user_id:
            reason = 'change_session (home) %d' % (session.user.user_id)
            change = SessionChangeHome(session, retmsg, dest_user_id, dest_base_id, new_ladder_state, delay, pre_attack)
        elif dest_user_id:
            reason = 'change_session (old) %d -> %d' % (session.user.user_id, dest_user_id)
            change = SessionChangeOld(session, retmsg, dest_user_id, dest_base_id, new_ladder_state, delay, pre_attack)
        else:
            reason = 'change_session (new) %d:%s -> %s pre_attack %r' % (session.user.user_id, session.viewing_base.base_id, dest_base_id, pre_attack)
            change = SessionChangeNew(session, retmsg, dest_user_id, dest_base_id, new_ladder_state, delay, pre_attack)

        ascdebug(reason)
        session.debug_log_action(reason)

        # it's cleaner to string everything together in one callback chain
        master_d = make_deferred('change_session')

        def set_progress_and_pass_result(result, session, prog):
            #ascdebug('change_session set_progress_and_pass_result in_progress %r result %r' % (prog, result))
            session.visit_base_in_progress = prog
            return result
        master_d.addBoth(set_progress_and_pass_result, session, True) # OK

        master_d.addCallback(lambda _, self=self,session=session,retmsg=retmsg,client_props=client_props:
                             self.complete_attack(session, retmsg, client_props = client_props, reason='change_session'))

        # note: continue even if complete_attack() fails
        master_d.addErrback(report_and_absorb_deferred_failure, session)

        master_d.addCallback(lambda _, change=change: change.begin())

        # if the main session change fails after begin(), we need to insert a forced change back to base
        # (since we already ran complete_attack(), which irreversibly mutates state like res_looter)
        def handle_failed_change(self, session, retmsg):
            session.release_pre_locks()
            # go back home
            new_change = SessionChangeHome(session, retmsg, session.user.user_id, None, None, 0, None)
            reason = 'change_session (home) %d because of failure' % (session.user.user_id)
            ascdebug(reason)
            session.debug_log_action(reason)
            return new_change.begin().addCallback(lambda args, self=self: self.change_session_complete(*args))

        master_d.addCallback(lambda args, self=self, session=session, retmsg=retmsg:
                             # note: receives the list of arguments to pass from change.d's callback
                             # if args is None, that means the change attempt failed
                             self.change_session_complete(*args) if args else handle_failed_change(self, session, retmsg))

        # we DO care about exceptions inside change_session_complete(), since we need to release locks
        master_d.addErrback(report_and_reraise_deferred_failure, session)
        master_d.addErrback(lambda err, session=session: session.release_pre_locks()) # now swallow the exception

        master_d.addBoth(set_progress_and_pass_result, session, False) # OK

        reactor.callLater(0, master_d.callback, True)
        return session.start_async_request(master_d)

    def change_session_complete(self, session, retmsg, dest_user_id, dest_user, dest_player, dest_base_id,
                                dest_base, new_ladder_state, new_deployable_squads, new_defending_squads,
                                pre_attack):

        if dest_base_id:
            reason = 'change_session_complete (new) %d:%s -> %s (%d,%d,%d) pre_attack %r' % (session.user.user_id, session.viewing_base.base_id, dest_base_id, bool(dest_user), bool(dest_player), bool(dest_base), pre_attack)
        else:
            reason = 'change_session_complete (old) %d -> %d (%d,%d) pre_attack %r' % (session.user.user_id, dest_user_id, bool(dest_user), bool(dest_player), pre_attack)

        ascdebug(reason)
        session.debug_log_action(reason)

        cannot_spy = False

        if (not dest_player) or (not dest_user) or (dest_base_id and (not dest_base)):
            # error, revert to home base
            # sometimes playerdb/userdb files are missing when spying on brand new accounts that haven't been flushed yet

            my_filter = gamedata['server'].get('bad_internet_exception_log_filter', None)
            if (not my_filter) or (Predicates.read_predicate(my_filter).is_satisfied(session.player, None)):
                gamesite.exception_log.event(server_time, 'spy error: userdb %d playerdb %d basedb %d entry %s:%s (spied by user %d)' % (bool(dest_user), bool(dest_player), bool(dest_base), str(dest_user_id), str(dest_base_id), session.user.user_id))

            if dest_base_id:
                err_msg = "CANNOT_SPY_BASE_NOT_FOUND"
            elif is_ai_user_id_range(dest_user_id):
                err_msg = "CANNOT_SPY_INVALID_AI"
            else:
                err_msg = "CANNOT_SPY_PLAYER_NOT_FOUND"
            retmsg.append(["ERROR", err_msg, dest_base_id if dest_base_id else dest_user_id, 'change_session_complete'])
            cannot_spy = True

        if dest_base and \
           (not (gamesite.nosql_client and session.player.home_region)):
            if dest_base.base_landlord_id != session.player.user_id and \
               not session.player.travel_satisfied(dest_base) and (not session.player.is_cheater):
                retmsg.append(["ERROR", "CANNOT_SPY_TRAVEL_NOT_ARRIVED"])
                cannot_spy = True

        if dest_base and dest_base.base_type == 'hive':
            template = gamedata['hives_server']['templates'].get(dest_base.base_template, None)
            if template and ('activation' in template) and (not session.player.is_cheater):
                if (not Predicates.read_predicate(template['activation']).is_satisfied(session.player,None)):
                    retmsg.append(["ERROR", "CANNOT_SPY_INVALID_AI"])
                    cannot_spy = True

        # check for uncollected loot when leaving home base
        if dest_base or (dest_user is not session.user):
            # for safety, abort the session change instead of dumping buffered loot
            if session.player.loot_buffer:
                retmsg.append(["ERROR", "CANNOT_SPY_LOOT_BUFFER_NOT_EMPTY"])
                cannot_spy = True
            # dump buffered loot when leaving home base
            # session.player.loot_buffer_release('change_session_complete')

        # check for map violations

        if (not cannot_spy) and \
           (not dest_base_id) and dest_player and dest_user:
            map_ok, map_violation_error = session.player.can_spy_on_home(session.user, dest_player, dest_user.social_id, new_ladder_state, new_deployable_squads)
            if not map_ok:
                retmsg.append(["ERROR", map_violation_error])
                cannot_spy = True

        # in NoSQL-land when spying on a friendly squad or quarry, grab the lock immediately so that we can mutate objects we own
        if dest_base and (dest_base.base_type in ('squad','quarry')) and (dest_base.base_landlord_id == session.player.user_id) \
           and (gamesite.nosql_client and session.player.home_region):
            # XXXXXX hack - this is to fix squads in defending_squads dying since the order is query->complete_attack->session_change
            # the real solution is to move query AFTER complete_attack
            new_deployable_squads = {}
            for base_id in new_defending_squads.keys():
                if not gamesite.nosql_client.get_map_feature_by_base_id(dest_base.base_region, base_id, reason='change_session_complete'):
                    #gamesite.exception_log.event(server_time, 'dropping defending_squad %s' % base_id)
                    del new_defending_squads[base_id]

            #gamesite.exception_log.event(server_time, 'about to acquire_base %s deployable %s defending %s' % (dest_base.base_id, repr(new_deployable_squads), repr(new_defending_squads)))
            lock_errors = []
            state = session.do_acquire_base(dest_player, dest_base, new_deployable_squads, new_defending_squads, errors = lock_errors)
            if state != Player.LockState.being_attacked:
                retmsg.append(["ERROR", lock_errors[0], "nosql_spy"])
                cannot_spy = True
            else:
                session.has_attacked = True
                session.debug_log_action('reinforce')
                session.attack_finish_time = server_time + gamedata['reinforce_time']

        if cannot_spy:
            # send back to home base
            dest_user_id = session.user.user_id
            dest_base_id = None
            dest_base = None
            new_deployable_squads = {}
            defending_feature = {'base_id': 's%d_%d' % (dest_user_id, SQUAD_IDS.BASE_DEFENDERS),
                                 'base_landlord_id': dest_user_id,
                                 'squad_id': SQUAD_IDS.BASE_DEFENDERS}
            new_defending_squads = {defending_feature['base_id']: defending_feature}
            new_ladder_state = None
            pre_attack = None
            session.release_pre_locks()

        session.clear_objects()
        session.home_base = ((not dest_base_id) and (dest_user_id == session.user.user_id))

        if session.home_base:
            session.viewing_user = session.user
            session.viewing_player = session.player
        else:
            assert (dest_user and dest_player)
            session.viewing_user = dest_user
            session.viewing_player = dest_player

        if session.viewing_player is not session.player:
            if session.viewing_player.is_human():
                # record the fact that we do not have a write lock on session.viewing_player
                session.viewing_player.has_write_lock = False

            # set player.country here for viewed other players, for so anti-bullying predicate check will work
            if (session.viewing_player.country == 'unknown') and (session.viewing_user.country) and (session.viewing_user.country != 'unknown'):
                session.viewing_player.country = session.viewing_user.country

        debug_prev_base_id = session.viewing_base.base_id if session.viewing_base else 'null'

        if dest_base:
            session.viewing_base = dest_base
        else:
            session.viewing_base = session.viewing_player.my_home

        session.deployable_squads = new_deployable_squads
        session.defending_squads = new_defending_squads
        session.deployed_units = None
        session.deployed_donated_units = None
        session.protection_eligible = None # reset flag

        # simulate passage of time for repairs
        session.viewing_player.unit_repair_tick()
        for obj in session.viewing_base.iter_objects():
            if obj.is_building():
                # simulate passage of time for repairs, and also
                # kickstart research and upgrading if it got stopped for some reason, and the building is at full health
                obj.update_all()

        base_damage, base_repair_time = session.viewing_base.calc_base_damage_and_repair_time()

        session.starting_base_damage = base_damage

        if session.viewing_player is not session.player and session.viewing_player.is_human():
            session.viewing_player.ladder_point_decay_check(session, None, base_damage = base_damage, base_repair_time = base_repair_time) # session change - viewing_player

        if new_ladder_state and (not session.viewing_player.is_ai()) and \
           (not \
            ((session.player.is_ladder_player() and session.viewing_player.is_ladder_player()) or \
             (session.using_squad_deployment() and (session.player.home_region in gamedata['regions']) and \
              ('ladder_on_map_if' in gamedata['regions'][session.player.home_region]) and \
              Predicates.read_predicate(gamedata['regions'][session.player.home_region]['ladder_on_map_if']).is_satisfied(session.player, None) \
              ) \
             ) \
            ):
            gamesite.exception_log.event(server_time, 'ladder_state %s but not all players %d, %d are on the ladder - cancelling ladder state' % \
                                         (repr(new_ladder_state), session.player.user_id, session.viewing_player.user_id))
            new_ladder_state = None

            # sometimes we get here because the player cache's ladder_player/home_region is out of sync with viewing player
            # so update it to be safe
            props = {'home_region':session.viewing_player.home_region,
                     'ladder_player': int(session.viewing_player.is_ladder_player(ignore_global=True))}
            if (not gamedata['predicate_library']['pvp_requirement']['predicate'].startswith('ALWAYS_')):
                props['pvp_player'] = int(session.viewing_player.is_pvp_player())
            gamesite.pcache_client.player_cache_update(session.viewing_player.user_id, props, reason = 'fix_ladder_state')

        if new_ladder_state and (session.viewing_player is session.player):
            gamesite.exception_log.event(server_time, 'ladder_state %s but player %d is at home - cancelling ladder state' % \
                                         (repr(new_ladder_state), session.player.user_id))
            new_ladder_state = None

        if new_ladder_state:
            # re-adjust ladder state according to trophy count
            new_ladder_state = session.player.create_ladder_state(session.viewing_player.user_id, session.viewing_player)

        elif (not session.home_base) and (session.viewing_base is session.viewing_player.my_home):

            # possibly create ladder state by other means
            if (not new_ladder_state) and session.using_squad_deployment(new_deployable_squads) and session.player.can_ladder_battle_on_map(session.viewing_player):
                # create ladder state for ladder-on-map battle
                kind = 'MAP'
                new_ladder_state = session.player.create_ladder_state(session.viewing_player.user_id, session.viewing_player, on_map = True)

            if (not new_ladder_state) and session.player.can_take_ladder_revenge(session.viewing_player):
                # create artificial ladder state for revenge battle
                kind = 'REVENGE'
                new_ladder_state = session.player.create_ladder_state(session.viewing_player.user_id, session.viewing_player, scale_points = gamedata['matchmaking']['ladder_point_revenge_scale'])
                new_ladder_state['is_revenge'] = True

            if new_ladder_state and gamedata['server']['log_ladder_pvp'] >= 2:
                gamesite.exception_log.event(server_time, 'ladder %s battle: %d vs. %d %s' % (kind, session.player.user_id, dest_user_id, repr(new_ladder_state)))

        session.ladder_state = new_ladder_state

        # compute resource state for player
        player_snapshot = session.player.resources.calc_snapshot()

        if session.viewing_base is not session.viewing_player.my_home:
            if session.viewing_base.base_landlord_id == session.player.user_id and session.viewing_base.base_ui_name:
                session.ui_name = session.viewing_base.base_ui_name
            elif session.viewing_base.base_type == 'quarry':
                session.ui_name = session.viewing_user.get_ui_name(session.viewing_player) + "'s Quarry" # ui_name
            elif session.viewing_base.base_type == 'squad':
                session.ui_name = session.viewing_user.get_ui_name(session.viewing_player) + "'s "+gamedata['strings']['squads']['squad']
            else:
                session.ui_name = session.viewing_user.get_ui_name(session.viewing_player)

            if session.viewing_player is session.player:
                enemy_snapshot = player_snapshot
            else:
                enemy_snapshot = session.viewing_player.resources.calc_snapshot()
                if session.viewing_base.base_type == 'hive':
                    # always permit hive destruction when CC is dead at the end of the fight
                    session.defender_cc_standing = True

            if session.viewing_player is not session.player and \
               session.viewing_player.is_human() and \
               gamedata['prevent_same_alliance_attacks'] and \
               session.player.is_same_alliance(session.viewing_player.user_id):
                session.pvp_balance = 'same_alliance'
            else:
                session.pvp_balance = None

            if gamesite.nosql_client:
                spyee_lock_state = gamesite.nosql_client.map_feature_lock_get_state_batch(session.player.home_region, [session.viewing_base.base_id], reason = 'spy_quarry')[0][0]
            else:
                spyee_lock_state = Player.LockState.open

            session.defender_protection_expired_at = -1

        elif session.viewing_player is session.player:
            session.ui_name = 'Your base' # ui_name
            enemy_snapshot = player_snapshot
            session.pvp_balance = None
            spyee_lock_state = Player.LockState.open
            session.defender_protection_expired_at = -1

        else:
            props = {'opponent_user_id':session.viewing_user.user_id,
                     'opponent_level':session.viewing_player.resources.player_level,
                     'opponent_type':session.viewing_player.ai_or_human()
                     }

            session.ui_name = session.viewing_user.get_ui_name(session.viewing_player)

            # compute resource state for the adversary
            enemy_snapshot = session.viewing_player.resources.calc_snapshot()

            session.defender_cc_standing = False
            for obj in session.viewing_base.iter_objects():
                if obj.spec.name == gamedata['townhall']:
                    session.defender_cc_standing = (not obj.is_destroyed())
                    break
            session.defender_protection_expired_at = session.viewing_player.resources.protection_end_time if (not session.viewing_player.is_ai()) else -1

            session.pvp_balance = session.player.get_pvp_balance(session.viewing_player, session.viewing_base)

            if session.viewing_player.is_ai():
                spyee_lock_state = Player.LockState.open
            else:
                # do this here so we send an up-to-date guess about lock state to the client upon Spying
                session.viewing_player.bust_expired_locks()
                spyee_lock_state = gamesite.lock_client.player_lock_get_state_batch([session.viewing_user.user_id], reason = 'spy')[0][0]

            props['pvp_balance'] = (session.pvp_balance if session.pvp_balance else 'equal')
            if ((not session.using_squad_deployment()) or gamedata['server'].get('log_ladder_pvp_on_map',False)):
                if session.is_ladder_battle() or (session.viewing_player.is_human() and gamedata['server'].get('log_ladder_peek',False)):
                    session.player.record_ladder_pvp_event('3303_ladder_spy' if session.is_ladder_battle() else '3307_ladder_peek',
                                                           {'defender_id': session.viewing_player.user_id,
                                                            'attacker_pts': session.player.ladder_points(),
                                                            'defender_pts': session.viewing_player.ladder_points(),
                                                            'attacker_res': session.player.resources.get_fungible_amounts(),
                                                            'defender_res': session.viewing_player.resources.get_fungible_amounts(),
                                                            'battle_streak_ladder': session.player.cooldown_active('battle_streak_ladder'),
                                                            'ladder_state': session.ladder_state})

        # add relevant objects into the session
        session.deferred_object_state_updates = set() # no need to send anymore
        obj_states = []
        aura_states = []

        # from current base
        for obj in session.viewing_base.iter_objects():
            if not gamedata.get('enable_defending_units',True) and obj.is_mobile(): continue # no defending units

            # at home base, do not show units belonging to reserves or any squad other than base defenders
            if session.viewing_base.base_type == 'home' and obj.is_mobile() and obj.squad_id and obj.squad_id != SQUAD_IDS.BASE_DEFENDERS: continue

            # don't let non-repair-droid players see repair droids in others' bases
            if obj.spec.name == 'repair_droid': continue

            # last-chance check on unit level
            if obj.owner: obj.ensure_level(obj.owner.tech.get(obj.spec.level_determined_by_tech, 1))
            if obj.is_mobile(): obj.ensure_mobile_position(session.viewing_base.ncells())

            session.add_object(obj)
            obj_states.append(obj.serialize_state())
            if obj.auras: aura_states.append(obj.serialize_auras())

        # from defending squads
        if gamesite.nosql_client and session.player.home_region:
            for base_id, feature in session.defending_squads.iteritems():
                squad_id = feature['squad_id']
                if SQUAD_IDS.is_mobile_squad_id(squad_id):
                    for state in gamesite.nosql_client.get_mobile_objects_by_base(session.player.home_region, session.viewing_player.squad_base_id(squad_id), reason='change_session(defending_squads)'):
                        assert state['kind'] == 'mobile'
                        assert state['owner_id'] == session.viewing_player.user_id
                        obj = reconstitute_object(session.player, session.viewing_player, state, context = '%d vs %d at %s: defending_squads %d' % (session.player.user_id, session.viewing_player.user_id, session.viewing_base.base_id, squad_id))
                        if (not session.viewing_base.can_deploy_unit(obj.spec)): continue # ignore inapplicable units
                        obj.ensure_level(session.viewing_player.tech.get(obj.spec.level_determined_by_tech, 1))
                        obj.ensure_mobile_position(session.viewing_base.ncells())
                        session.add_object(obj)
                        obj_states.append(obj.serialize_state())
                        if obj.auras: aura_states.append(obj.serialize_auras())

        is_alt_account_unattackable = (session.viewing_player is not session.player) and \
                                      (session.viewing_base is session.viewing_player.my_home) and \
                                      session.player.is_alt_account_unattackable(session.viewing_player)

        # retrieve spyee's alliance info
        session.viewing_alliance_id_cache = -1
        session.viewing_alliance_info_cache = None

        if session.viewing_player is not session.player and (not session.viewing_player.is_ai()) and \
           gamesite.sql_client and session.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances']):
            session.viewing_alliance_id_cache = gamesite.sql_client.get_users_alliance(session.viewing_user.user_id, reason = 'VISIT_BASE')
            if session.viewing_alliance_id_cache > 0:
                session.viewing_alliance_info_cache = gamesite.sql_client.get_alliance_info(session.viewing_alliance_id_cache, reason = 'VISIT_BASE')

        # sanity check
        if session.ladder_state:
            if session.pvp_balance in ('player','enemy_strict','same_alliance'):
                gamesite.exception_log.event(server_time, 'pvp_balance %s disallows ladder attack %s' % \
                                             (session.pvp_balance, repr(new_ladder_state)))
                session.ladder_state = None
            if base_damage >= gamedata['matchmaking']['ladder_win_damage']:
                gamesite.exception_log.event(server_time, 'base already damaged above win threshold (%f) before ladder attack %s' % \
                                             (base_damage, repr(new_ladder_state)))

        # if we're going to immediately auto-resolve, THROW AWAY session change messages so the client doesn't even seen them
        if pre_attack >= 2:
            change_retmsg = []
        else:
            change_retmsg = retmsg

        change_retmsg.append(["SESSION_CHANGE",
                       session.viewing_user.user_id,
                       session.viewing_user.facebook_id,
                       session.ui_name,
                       int(session.home_base),
                       obj_states,
                       player_snapshot.serialize(),
                       enemy_snapshot.serialize(enemy = True),
                       -1, # conceal session.viewing_player.expiration_time
                       None, # old_battle_summary - obsolete
                       None, # outcome - obsolete
                       session.pvp_balance,
                       spyee_lock_state,
                       session.viewing_player.isolate_pvp,
                       0, # repeat_attack_cooldown expire time - obsolete
                       session.viewing_base.deployment_buffer,
                       session.viewing_base.base_id,
                       session.viewing_base.base_landlord_id,
                       session.viewing_base.base_climate,
                       session.viewing_base.base_map_loc,
                       session.viewing_base.base_expire_time,
                       session.viewing_base.base_ui_name,
                       session.viewing_base.base_type,
                       session.viewing_base.base_ncells,
                       session.viewing_player.my_home.base_id,
                       session.viewing_player.home_region,
                       is_alt_account_unattackable,
                       session.viewing_base.base_last_attack_time,
                       [x['squad_id'] for x in session.deployable_squads.itervalues()],
                       session.viewing_alliance_id_cache, session.viewing_alliance_info_cache,
                       session.ladder_state,

                       # viewing_trophy_data - obsolete
                       None,
                       session.player.warehouse_is_busy() if (not session.home_base) else False,

                       [x['squad_id'] for x in session.defending_squads.itervalues()],
                       session.viewing_player.is_pvp_player(),
                       [self.get_player_cache_props(session.user, session.player, session.alliance_id_cache)] + \
                       ([self.get_player_cache_props(session.viewing_user, session.viewing_player, session.viewing_alliance_id_cache)] if ((session.viewing_player is not session.player) and (not session.viewing_player.is_ai())) else []),
                       list(session.player.equipped_items_serialize()),
                       session.debug_session_change_count,
                       debug_prev_base_id
                       ])
        session.debug_session_change_count += 1
        for astate in aura_states:
            change_retmsg.append(["OBJECT_AURAS_UPDATE", astate])

        if session.player.prune_inventory(session):
            session.player.send_inventory_update(change_retmsg)

        session.player.prune_player_auras(is_session_change = True)
        session.viewing_player.prune_player_auras(is_session_change = True)

        # apply regional auras
        session.player.apply_regional_auras()
        session.viewing_player.apply_regional_auras()

        # set up PvP point auras
        if session.ladder_state:
            p = session.ladder_state['points']['victory'][str(session.player.user_id)]
            if p > 0: session.player.player_auras.append({'spec':'trophy_pvp_plus_attacker' if ('trophy_pvp_plus_attacker' in gamedata['auras']) else 'trophy_pvp_plus','stack':p})
            p = session.ladder_state['points']['defeat'][str(session.player.user_id)]
            if p < 0: session.player.player_auras.append({'spec':'trophy_pvp_minus_attacker' if ('trophy_pvp_minus_attacker' in gamedata['auras']) else 'trophy_pvp_minus','stack':-p})
            p = session.ladder_state['points']['victory'][str(session.viewing_player.user_id)]
            if p > 0: session.viewing_player.player_auras.append({'spec':'trophy_pvp_plus_defender' if ('trophy_pvp_plus_defender' in gamedata['auras']) else 'trophy_pvp_plus','stack':p})
            p = session.ladder_state['points']['defeat'][str(session.viewing_player.user_id)]
            if p < 0: session.viewing_player.player_auras.append({'spec':'trophy_pvp_minus_defender' if ('trophy_pvp_minus_defender' in gamedata['auras']) else 'trophy_pvp_minus','stack':-p})

            cc_delta_kind = None
            cc_delta_stacks = 0

            if (not session.viewing_player.is_ai()):
                cc_delta = session.player.get_townhall_level() - session.viewing_player.get_townhall_level()
                if cc_delta < 0:
                    cc_delta_kind = 'bonus'
                    cc_delta = -cc_delta
                elif cc_delta > 0:
                    cc_delta_kind = 'malus'

                if cc_delta_kind:
                    table = gamedata['matchmaking']['ladder_loot_'+cc_delta_kind]
                    cc_delta_stacks = table[min(cc_delta, len(table)-1)]
                    if cc_delta_stacks > 0:
                        aura = gamedata['auras']['pvp_loot_'+cc_delta_kind]
                        session.player.player_auras.append({'spec':aura['name'], 'stack': cc_delta_stacks, 'strength': abs(aura['effects'][0]['strength_per_stack'])*cc_delta_stacks})

            if gamedata['server']['log_ladder_pvp'] >= 3:
                gamesite.exception_log.event(server_time, 'ladder spy (DMG %.02f %s %+d): %s' % \
                                             (base_damage, cc_delta_kind if cc_delta_kind else '-', cc_delta_stacks, session.format_ladder_state()))

        elif (session.viewing_player is not session.player) and \
             (session.viewing_base is session.viewing_player.my_home) and \
             (not session.viewing_player.is_ai()) and \
             (base_damage < gamedata['matchmaking']['ladder_win_damage']) and \
             ('ladder_point_minloss_table' in gamedata['matchmaking']) and \
             session.using_squad_deployment() and \
             (session.player.home_region in gamedata['regions']) and \
             ('ladder_on_map_if' in gamedata['regions'][session.player.home_region]) and \
             Predicates.read_predicate(gamedata['regions'][session.player.home_region]['ladder_on_map_if']).is_satisfied(session.player, None):
            # create artificial point loss when crossing ladder_win_damage to punish players for getting so damaged they can't lose more points
            entry = gamedata['matchmaking']['ladder_point_minloss_table']['defender_defeat']
            delta = session.viewing_player.ladder_points() - session.player.ladder_points()
            p = max(min(int(entry['base'] - delta * entry['delta']), entry['min']), entry['max'])
            if session.viewing_player.home_region and session.viewing_player.home_region in gamedata['regions']:
                p *= gamedata['regions'][session.viewing_player.home_region].get('ladder_point_scale', 1) # note: this was not present earlier (by mistake), but players got used to it
                p *= Predicates.eval_cond_or_literal(gamedata['regions'][session.viewing_player.home_region].get('ladder_point_minloss_scale', 1), session, session.viewing_player)
                p = int(p)
            if p < 0:
                session.viewing_player.player_auras.append({'spec':'trophy_pvp_minus_minloss','stack':-p})

        # apply PvP fatigue aura
        if (not session.ladder_state) and \
           session.player.get_any_abtest_value('enable_sandstorm', gamedata['anti_bullying']['enable_sandstorm']) and \
           (session.viewing_player is not session.player) and \
           (session.viewing_base is session.viewing_player.my_home) and \
           (not session.viewing_player.is_ai()):
            cdname = 'battle_fatigue:%d' % session.viewing_user.user_id
            fatigue = session.player.cooldown_active(cdname)
            min_fatigue = gamedata['anti_bullying']['sandstorm_min_battle_fatigue']
            if fatigue > min_fatigue:
                togo = session.player.cooldown_togo(cdname)
                stack = fatigue - min_fatigue
                spec = gamedata['auras']['sandstorm']
                strength = stack * abs(spec['effects'][0]['strength_per_stack'])

                if (strength >= 1.0) or (fatigue >= gamedata['anti_bullying']['sandstorm_max_battle_fatigue']):
                    # switch to different aura that completely prevents attacks
                    spec = gamedata['auras']['sandstorm_max']
                    strength = 1
                    stack = -1

                session.player.do_apply_aura(spec['name'], strength = strength, duration = togo, stack = stack, ignore_limit = True)

        session.player.recalc_stattab(session.player)
        session.player.stattab.send_update(session, change_retmsg)
        if session.viewing_player is not session.player:
            # also iterate through hive/quarry buildings - right now we restrict this to AIs just for safety, but in theory it should work for players too
            session.viewing_player.recalc_stattab(session.player, additional_base = session.viewing_base if ((session.viewing_base is not session.viewing_player.my_home) and session.viewing_player.is_ai()) else None)
            session.viewing_player.stattab.send_update(session, change_retmsg)

        power_state = session.viewing_base.get_power_state()

        if session.home_base:
            session.player.unit_repair_send(change_retmsg)
        else:
            change_retmsg.append(["ENEMY_TECH_UPDATE", session.viewing_player.tech])
            change_retmsg.append(["ENEMY_UNIT_EQUIP_UPDATE", session.viewing_player.unit_equipment])

        change_retmsg.append(["BASE_POWER_UPDATE", power_state])
        change_retmsg.append(["BASE_SIZE_UPDATE", session.viewing_base.base_size])

        change_retmsg.append(["LOOT_BUFFER_UPDATE", session.player.loot_buffer, False])
        change_retmsg.append(["DONATED_UNITS_UPDATE", session.player.donated_units])

        session.res_looter = ResLoot.ResLoot(gamedata, session, session.viewing_player, session.viewing_base)

        # tell client about res looter state
        session.res_looter.send_update(change_retmsg)

        # if visiting a quarry that you own, force repairs to start
        if session.viewing_base.base_landlord_id == session.player.user_id and \
           session.viewing_base is not session.player.my_home:
            self.do_start_repairs(session, change_retmsg, session.viewing_base.base_id, repair_units = False)

        else:
            # fire AI base on_visit consequent
            on_visit_consequent = None

            if (session.viewing_base is session.viewing_player.my_home) and \
               session.viewing_player.is_ai():
                base = gamedata['ai_bases_server']['bases'].get(str(session.viewing_player.user_id), None)
                if base and ('on_visit' in base):
                    on_visit_consequent = base['on_visit']
            elif session.viewing_base.base_type == 'hive':
                template = gamedata['hives_server']['templates'].get(session.viewing_base.base_template, None)
                if template and ('on_visit' in template):
                    on_visit_consequent = template['on_visit']

            if on_visit_consequent:
                session.execute_consequent_safe(on_visit_consequent, session.player, change_retmsg, reason='on_visit')

        if pre_attack and (not cannot_spy): # immediately proceed with attack attempt
            do_attack_retmsg = [] # collect error messages separately
            attack_success = self.do_attack(session, do_attack_retmsg, [None, []])
            if not attack_success:
                session.release_pre_locks() # drop any pre-attack locks immediately

            if pre_attack >= 2: # pre-auto-resolve
                if attack_success:
                    self.auto_resolve(session, change_retmsg) # will be thrown away
                    if True: # dangerous - skips session change on client side
                        # first complete the attack manually so we get the battle-end messages
                        compl_d = self.complete_attack(session, retmsg)
                        compl_d.addErrback(report_and_absorb_deferred_failure, session)
                        # then go home, throwing away the session-change messages
                        compl_d.addCallback(lambda _, self=self, session=session, change_retmsg=change_retmsg: \
                                            self.change_session(session, change_retmsg, dest_user_id = session.player.user_id, force = True))
                        # then let the client know we skipped the session change
                        compl_d.addErrback(report_and_absorb_deferred_failure, session)
                        compl_d.addCallback(lambda _, session=session: session.outgoing_messages.append(["SESSION_CHANGE_SKIPPED"]))
                        return compl_d

                else:
                    retmsg += do_attack_retmsg # send error messages to client

                # safer, but sends ineffective session change to client
                # also necessary in case do_attack() fails
                return self.change_session(session, session.outgoing_messages, dest_user_id = session.player.user_id, force = True)

            else:
                retmsg += do_attack_retmsg

        else:
            assert not session.pre_locks

        return defer.succeed(not cannot_spy) # success

    def query_recent_attackers(self, session, retmsg, arg):
        tag = arg[1]

        if gamedata['server'].get('battle_history_source','nosql/sql') in ('nosql','nosql/sql'):
            # get summary data from database
            summaries = gamesite.nosql_client.battles_get(session.user.user_id, -1, -1, -1, time_range = [server_time - gamedata['server'].get('nosql_recent_attackers_time_limit',7*86400), server_time],
                                                          limit = gamedata['server'].get('nosql_battle_history_limit',50),
                                                          ai_or_human = SpinNoSQL.NoSQLClient.BATTLES_HUMAN_ONLY,
                                                          fields = ('attacker_id','attacker_type','defender_id'), reason = 'query_recent_attackers')
        else:
            # query ALL opponents
            summaries = sum([entry.get('summary',[]) for entry in session.player.battle_history.itervalues()], [])

        attacker_id_set = set()

        for s in summaries:
            if 'attacker_id' in s and \
               s.get('defender_id') == session.user.user_id and \
               s.get('attacker_type') == 'human': # check for home base attack?
                attacker_id_set.add(s['attacker_id'])

        retmsg.append(["QUERY_RECENT_ATTACKERS_RESULT", tag, list(attacker_id_set), None])

    # fields we care about for battle history (summary) queries
    BATTLE_HISTORY_FIELDS = ('time', 'duration', 'battle_type', 'ladder_state',
                             'attacker_id', 'defender_id', 'base_id', 'base_ui_name', 'base_map_loc', 'base_type',
                             'attacker_alliance_id', 'attacker_alliance_ui_name', 'attacker_alliance_chat_tag',
                             'defender_alliance_id', 'defender_alliance_ui_name', 'defender_alliance_chat_tag',
                             'facebook_friends',
                             'attacker_name', 'defender_name',
                             'attacker_level', 'defender_level',
                             'deployed_units',
                             'base_damage', 'loot', 'attacker_outcome', 'defender_outcome', 'prot_time',
                             'replay_version')

    def query_battle_history(self, session, retmsg, arg):
        target = arg[1] # look up battles against this player (-1 for anyone)
        source = arg[2] # from the perspective of this player (-1 for anyone)
        alliance_A = arg[3] # require involvement from this alliance
        alliance_B = arg[4]
        tag = arg[5]
        ai_or_human = arg[6]
        assert ai_or_human in ('any','ai','human')
        time_range = arg[7]
        if time_range:
            assert isinstance(time_range, list) and len(time_range) == 2 and all(isinstance(x, (int,float)) for x in time_range)

        # sanity check
        assert (source > 0) or (alliance_A > 0) or (alliance_B > 0)

        # permission check
        if source != session.user.user_id and (not session.player.is_developer()):
            # no peeking at others' battle histories unless you are a developer, or in the same alliance
            is_same_alliance = ((alliance_A > 0 or alliance_B > 0) and \
                                session.get_alliance_id(reason='query_battle_history') >= 0 and \
                                session.alliance_id_cache in (alliance_A, alliance_B))

            if (not is_same_alliance):
                retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                retmsg.append(["QUERY_BATTLE_HISTORY_RESULT", tag, [], [], None, True, 'illegal'])
                return

        # "nosql" for hot-only, "nosql/sql" for hot/cold, or "playerdb" (obsolete)
        battle_history_source = gamedata['server'].get('battle_history_source','nosql/sql') # also update query_recent_attackers()!

        battle_history = None
        if battle_history_source == 'playerdb':
            if source == session.user.user_id:
                # get any pending updates
                self.do_receive_mail(session, retmsg)
                battle_history = session.player.battle_history
            elif source == session.viewing_user.user_id:
                battle_history = session.viewing_player.battle_history
            elif (alliance_A > 0) or (alliance_B > 0):
                # alliance queries not supported from playerdb
                retmsg.append(["QUERY_BATTLE_HISTORY_RESULT", tag, [], [], None, True, 'offline'])
                return

        if battle_history_source in ('nosql','nosql/sql'):
            # get summary data from database
            # XXX need token-based paging to avoid infinite re-query if more than "limit" battles happen within one second

            # use "hot" MongoDB and/or "cold" PostgreSQL database depending on how far back in time we want to go

            # to ensure we don't miss any battles, we always do the hot query, and then also do the cold query
            # if the hot query is exhaustive.

            # hot query
            hot_limit = gamedata['server'].get('nosql_battle_history_limit', 50 if time_range else 10) # optimize for fast first range-less query
            hot_summaries = gamesite.nosql_client.battles_get(source, target, alliance_A, alliance_B, limit = hot_limit,
                                                              ai_or_human = {'any': SpinNoSQL.NoSQLClient.BATTLES_ALL,
                                                                             'ai': SpinNoSQL.NoSQLClient.BATTLES_AI_ONLY,
                                                                             'human': SpinNoSQL.NoSQLClient.BATTLES_HUMAN_ONLY}[ai_or_human],
                                                              time_range = time_range,
                                                              fields = self.BATTLE_HISTORY_FIELDS,
                                                              reason = 'query_battle_history(hot)')
            # is_final is true if there are no more battles earlier than this to query
            hot_is_final = len(hot_summaries) < hot_limit
            #gamesite.exception_log.event(server_time, 'HOT %r final %r' % ([x['time'] for x in hot_summaries], hot_is_final))

            # do we also need to do a cold query?
            if hot_is_final and \
               battle_history_source == 'nosql/sql' and \
               gamesite.sql_battles_client:
                # cold query
                cold_limit = gamedata['server'].get('sql_battle_history_limit', 50)
                cold_time_range = [-1, server_time]
                if time_range and time_range[0] > 0:
                    cold_time_range[0] = time_range[0]
                if time_range and time_range[1] > 0:
                    cold_time_range[1] = time_range[1]
                # don't overlap with hot data
                if hot_summaries:
                    cold_time_range[1] = min(cold_time_range[1], min(x['time'] for x in hot_summaries))
                cold_d = gamesite.sql_battles_client.battles_get_async(source, target, alliance_A, alliance_B, limit = cold_limit,
                                                                       ai_or_human = {'any': SpinSQLBattles.SQLBattlesClient.BATTLES_ALL,
                                                                                      'ai': SpinSQLBattles.SQLBattlesClient.BATTLES_AI_ONLY,
                                                                                      'human': SpinSQLBattles.SQLBattlesClient.BATTLES_HUMAN_ONLY}[ai_or_human],
                                                                       time_range = cold_time_range,
                                                                       reason = 'query_battle_history(cold)')
                if cold_d is None: # can happen if db is down
                    # return hot query only
                    result_d = defer.succeed((hot_summaries, hot_is_final, 'partial'))
                else:
                    # reformat results from raw summary list to (summaries, is_final, is_error)
                    cold_d.addCallback(lambda cold_summaries, cold_limit=cold_limit: (cold_summaries, len(cold_summaries) < cold_limit, None))

                    # merge hot and cold summaries, in descending time order
                    def merge_hot_and_cold(cold_result, hot_summaries, hot_is_final):
                        cold_summaries, cold_is_final, cold_is_error = cold_result
                        #gamesite.exception_log.event(server_time, 'COLD %r final %r' % ([x['time'] for x in cold_summaries], cold_is_final))
                        #gamesite.exception_log.event(server_time, 'FINAL %r final %r' % ([x['time'] for x in (hot_summaries+cold_summaries)], cold_is_final and hot_is_final))
                        return (hot_summaries + cold_summaries, cold_is_final and hot_is_final, None)
                    cold_d.addCallback(merge_hot_and_cold, hot_summaries, hot_is_final)

                    # if cold query fails, just return the hot results as if the cold query never happened
                    cold_d.addErrback(report_and_reraise_deferred_failure, session)
                    cold_d.addErrback(lambda _, hot_summaries=hot_summaries, hot_is_final=hot_is_final: (hot_summaries, hot_is_final, 'partial'))

                    result_d = cold_d

            else:
                # return hot query only
                result_d = defer.succeed((hot_summaries, hot_is_final, None))

        elif battle_history_source == 'playerdb' and battle_history:
            # pull summary data out of player.battle_history
            is_final = True
            is_error = None

            if target < 0:
                # query ALL opponents
                summaries = sum([entry.get('summary',[]) for entry in battle_history.itervalues()], [])
            else:
                # query ONE opponent
                key = str(target)
                if key in battle_history:
                    summaries = battle_history[key].get('summary',[])
                else:
                    summaries = []

            if time_range:
                summaries = filter(lambda x: x['time'] >= time_range[0] and x['time'] < time_range[1], summaries)

            if ai_or_human == 'ai':
                # do not list AI ladder battles here
                summaries = filter(lambda x: (x.get('attacker_type')=='ai' or x.get('defender_type')=='ai') and (not x.get('ladder_state')), summaries)
            elif ai_or_human == 'human':
                # list AI ladder battles here
                summaries = filter(lambda x: (x.get('attacker_type')=='human' and x.get('defender_type')=='human') or x.get('ladder_state'), summaries)
            result_d = defer.succeed((summaries, is_final, is_error))

        else:
            is_final = True
            is_error = None
            summaries = []
            result_d = defer.succeed((summaries, is_final, is_error))

        # on async failure, replace summaries/is_final with blank data, then respond to client
        result_d.addErrback(report_and_reraise_deferred_failure, session)
        result_d.addErrback(lambda _: ([], True, 'offline')) # return blank (summaries, is_final, is_error)
        result_d.addCallback(self.query_battle_history_complete, session, tag, source if (alliance_A <= 0 and alliance_B <= 0) else None)
        result_d.addErrback(report_and_absorb_deferred_failure, session)
        return None # note: asynchronous with other session traffic!

    def query_battle_history_complete(self, summaries_is_final_is_error, session, tag, source):
        if session.logout_in_progress: return
        summaries, is_final, is_error = summaries_is_final_is_error
        assert is_error in (None, 'partial', 'offline') # "partial" means we have some data, "offline" means none
        ret = []
        pcache_data = None
        latest_returned_time = -1 # timestamp of most recent battle summary returned

        if not isinstance(summaries, list):
            raise Exception('unexpected summaries: %r ' % summaries)

        if summaries:

            # perform player cache lookups
            qset = set()
            for s in summaries:
                if not isinstance(s, dict):
                    raise Exception('unexpected summary: %r' % s)
                for player_id in (s['attacker_id'], s['defender_id']):
                    if player_id != session.user.user_id:
                        qset.add(player_id)
            if qset:
                pcache_data = self.do_query_player_cache(session, list(qset), reason = 'query_battle_history')

            # extract the fields we want from the summaries
            ret = [dict((k,s[k]) for k in self.BATTLE_HISTORY_FIELDS if k in s) for s in summaries]
            latest_returned_time = max(s.get('time',-1) for s in summaries)

            # sort summaries by time
            ret.sort(key = lambda r: -r.get('time',-1))

        # update battle_history_seen
        if source and source == session.user.user_id:
            session.player.battle_history_seen = max(session.player.battle_history_seen, latest_returned_time)
            session.send([["NEW_BATTLE_HISTORIES", 0]])

        session.send([["QUERY_BATTLE_HISTORY_RESULT", tag, ret,
                       [self.sign_battle_history(r.get('time',-1), r.get('attacker_id',-1), r.get('defender_id',-1), r.get('base_id',None)) for r in ret],
                       pcache_data, is_final, is_error]], flush_now = True)

    def query_achievements(self, session, retmsg, arg):
        id = arg[1]; tag = arg[2]

        d = make_deferred('query_achievements')

        def complete_query(self, d, session, retmsg, tag, result):
            retmsg.append(["QUERY_ACHIEVEMENTS_RESULT", tag, result])
            d.callback(True)

        result = None

        # if querying yourself or the viewing player, return immediately
        if id == session.player.user_id:
            result = session.player.achievements
        elif id == session.viewing_player.user_id:
            result = session.viewing_player.achievements

        if result is not None:
            reactor.callLater(0, functools.partial(complete_query, self, d, session, retmsg, tag, result))
        else:
            # otherwise do an async load
            # XXX this could be vulnerable to DDOS
            def player_cb(continuation, success, player):
                result = player.achievements if (success and player) else None
                continuation(result)
            player_table.lookup_async(session.player, id, False,
                                      functools.partial(player_cb, functools.partial(complete_query, self, d, session, retmsg, tag)),
                                      'query_achievements')

        return session.start_async_request(d) # async

    # simulate player cache query results by just reading from the in-memory player
    def get_player_cache_props(self, user, player, alliance_id):
        #base_damage, base_repair_time = player.my_home.report_base_damage_and_repair_time_for_ladder(player)
        ret =  {'user_id': user.user_id,
                'ui_name': user.get_ui_name(player),
                'real_name': user.get_real_name(),
                'player_level': player.resources.player_level,
                'ladder_player': int(player.is_ladder_player()),
                'pvp_player': int(player.is_pvp_player()),
                'home_region': player.home_region,
                'home_base_loc': player.my_home.base_map_loc,
                'protection_end_time': conceal_protection_time(player.resources.protection_end_time),
                'base_damage':player.my_home.calc_base_damage(),
#                'base_repair_time':base_repair_time,
                'trophies_pvp': player.ladder_points(),
                'trophies_pvv': player.trophies_pvv()
                }
        if user.facebook_id: ret['facebook_id'] = user.facebook_id
        if user.ag_id: ret['ag_id'] = user.ag_id
        if user.kg_id: ret['kg_id'] = user.kg_id
        if user.social_id: ret['social_id'] = user.social_id
        if user.ag_avatar_url: ret['ag_avatar_url'] = user.ag_avatar_url
        if user.kg_avatar_url: ret['kg_avatar_url'] = user.kg_avatar_url
        if alliance_id is not None: ret['alliance_id'] = alliance_id
        return ret

    # handle a client-initiated player cache query
    def do_query_player_cache(self, session, user_ids, fields = None, get_trophies = True, reason = None):
        # only allow retrieval of a few user-visible fields
        manual_fields = (fields is not None)
        if fields is None:
            fields = ['user_id', 'player_level', 'social_id', 'ui_name', 'real_name', 'kg_avatar_url', 'ag_avatar_url', 'last_defense_time', 'last_login_time', 'uninstalled', # XXXXXX
                      'units_donated_cur_alliance', 'home_region', 'home_base_loc', 'ladder_player', 'pvp_player',
                      'LOCK_STATE', 'LOCK_OWNER', 'protection_end_time', 'base_damage', 'base_repair_time',
                      'facebook_id', 'kg_id', 'ag_id',
                      'facebook_name', 'facebook_first_name', # remove later
                      'alliance_id'] # note: alliance_id is cached, not ground truth

        result = gamesite.pcache_client.player_cache_lookup_batch(user_ids, fields = fields, reason = reason)

        if gamesite.sql_client and (not manual_fields) and get_trophies:
            # SPECIAL CASE - the client wants the current PvP trophy count as "trophies_pvp" for GUI display of matchmaking info
            scores = gamesite.mongo_scores2_client.player_scores2_get(user_ids,
                                                                      [('trophies_pvp', session.player.scores2_ladder_master_point()),
                                                                       ('trophies_pvv', session.player.scores2_ladder_master_point()),
                                                                       ],
                                                                      rank = False, reason = 'do_query_player_cache(%s)' % reason)
        else:
            scores = [[None,None]] * len(user_ids) # inner array must be same length as score query!

        for i in xrange(len(user_ids)):
            r = result[i]
            if r:
                # ensure backreference is present
                if ('user_id' not in r): r['user_id'] = user_ids[i]

                # prevent info leaks
                if ('protection_end_time' in r): r['protection_end_time'] = conceal_protection_time(r['protection_end_time'])

                # insert trophy info
                if gamesite.sql_client:
                    for stat, idx in (('trophies_pvp',0),('trophies_pvv',1)):
                        if scores[i][idx]:
                            r[stat] = scores[i][idx].get('absolute',0)
                        else:
                            r[stat] = 0

        return result

    def do_quarry_query_uncached(self, session, retmsg, region, updated_since, reason = ''):
        reason += ',incr' if updated_since > 0 else ',full'

        db_time = 1

        with admin_stats.latency_measurer('do_quarry_query_uncached('+reason+':get_map_features)'):
            result = list(gamesite.nosql_client.get_map_features(region, updated_since = updated_since, reason = 'do_quarry_query_uncached('+reason+')'))

        for x in result:
            db_time = max(db_time, x.get('last_mtime',-1))

        if gamedata['server']['enable_map_compression'] and updated_since < 0:
            with admin_stats.latency_measurer('do_quarry_query_uncached('+reason+':encode)'):
                codec, z_result = compress_and_wrap_string(SpinJSON.dumps(result))
        else:
            codec = 'raw'
            z_result = result

        return db_time, codec, z_result

    def sign_battle_history(self, battle_time, attacker, defender, base_id):
        tosign = AttackLog.base_name(battle_time, attacker, defender, base_id)
        return base64.urlsafe_b64encode(hmac.new(str(SpinConfig.config['proxy_api_secret']), msg=tosign, digestmod=hashlib.sha256).digest())

    def get_battle_log3(self, session, retmsg, arg):
        battle_time = arg[1]
        attacker = arg[2]
        defender = arg[3]
        base_id = arg[4]
        client_sig = arg[5]
        tag = arg[6]

        # the battle log itself does not have sufficient information (attacker/defender alliance IDs) to determine
        # access permission. So instead, we use a secure signature of the args from the battle history.
        if not session.player.is_developer():
            if session.user.user_id not in (attacker, defender) and \
               client_sig != self.sign_battle_history(battle_time, attacker, defender, base_id):
                retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                retmsg.append(["GET_BATTLE_LOG3_RESULT", tag, None])
                return

        metric_event_coded(session.user.user_id, '3831_battle_log_viewed', {'battle_time': battle_time,
                                                                            'attacker_id': attacker,
                                                                            'defender_id': defender,
                                                                            'base_id': base_id})

        # look for battle log
        if isinstance(io_system, S3IOSystem) and AttackLog.storage_s3_bucket():
            # try S3 download
            bucket = AttackLog.storage_s3_bucket()
            name = AttackLog.storage_s3_name(battle_time, attacker, defender, base_id)
            d_log_s3 = io_system.async_read_deferred((bucket, name), reason = 'GET_BATTLE_LOG3(log)')
            d_log_local = defer.succeed(None)
        else:
            # try local disk
            log_filename = AttackLog.storage_path(battle_time, attacker, defender, base_id)
            if os.path.exists(log_filename):
                d_log_local = defer.succeed(open(log_filename, 'rb').read())
            else:
                d_log_local = defer.succeed(None)
            d_log_s3 = defer.succeed(None)

        d_log_s3.addErrback(report_and_absorb_deferred_failure, session)
        d_log_local.addErrback(report_and_absorb_deferred_failure, session)

        # query for existence of a replay
        if isinstance(io_system, S3IOSystem) and AttackReplayReceiver.storage_s3_bucket():
            s3_bucket = AttackReplayReceiver.storage_s3_bucket()
            s3_name = AttackReplayReceiver.storage_s3_name(battle_time, attacker, defender, base_id)
            d_replay_exists_s3 = io_system.async_exists_deferred((s3_bucket, s3_name), reason = 'GET_BATTLE_LOG3(replay-exists)')
            d_replay_exists_local = defer.succeed(False)
        else:
            replay_filename = AttackReplayReceiver.storage_path(battle_time, attacker, defender, base_id)
            d_replay_exists_local = defer.succeed(os.path.exists(replay_filename))
            d_replay_exists_s3 = defer.succeed(False)

        d_replay_exists_s3.addErrback(report_and_absorb_deferred_failure, session)
        d_replay_exists_local.addErrback(report_and_absorb_deferred_failure, session)

        # wait for results of all queries
        d_all = defer.DeferredList([d_log_local, d_log_s3, d_replay_exists_local, d_replay_exists_s3])
        def cb(results, session, tag):
            ((success_log_local, data_log_local), (success_log_s3, data_log_s3), \
             (success_replay_exists_local, data_replay_exists_local), (success_replay_exists_s3, data_replay_exists_s3)) = results

            # see if we got valid log data
            raw_buf = None
            for data in (data_log_local, data_log_s3):
                if data and (data != 'NOTFOUND'):
                    raw_buf = data
                    break

            # gunzip and parse line-by-line JSON
            if raw_buf:
                with admin_stats.latency_measurer('GET_BATTLE_LOG3(parse)'):
                    ret = {'log': map(SpinJSON.loads, gzip.GzipFile(fileobj=cStringIO.StringIO(raw_buf)).readlines())}
            else:
                ret = None

            # see if we got any evidence of a replay existing
            if ret:
                ret['replay_exists'] = any(x is True for x in (data_replay_exists_local, data_replay_exists_s3))

            session.send([["GET_BATTLE_LOG3_RESULT", tag, ret]])

        d_all.addCallback(cb, session, tag)
        return session.start_async_request(d_all) # go async

    def get_battle_replay(self, session, retmsg, arg):
        battle_time = arg[1]
        attacker = arg[2]
        defender = arg[3]
        base_id = arg[4]
        client_sig = arg[5]
        tag = arg[6]

        # the battle replay itself does not have sufficient information (attacker/defender alliance IDs) to determine
        # access permission. So instead, we use a secure signature of the args from the battle history.
        # this also allows sharing of replays, when the signature is included
        if not session.player.is_developer():
            if session.user.user_id not in (attacker, defender) and \
               client_sig != self.sign_battle_history(battle_time, attacker, defender, base_id):
                retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                retmsg.append(["GET_BATTLE_REPLAY_RESULT", tag, None])
                return

        metric_event_coded(session.user.user_id, '3833_battle_replay_downloaded', {'battle_time': battle_time,
                                                                                   'attacker_id': attacker,
                                                                                   'defender_id': defender,
                                                                                   'base_id': base_id})

        if isinstance(io_system, S3IOSystem) and AttackReplayReceiver.storage_s3_bucket():
            # try S3 download
            bucket = AttackReplayReceiver.storage_s3_bucket()
            name = AttackReplayReceiver.storage_s3_name(battle_time, attacker, defender, base_id)
            d = io_system.async_read_deferred((bucket, name))
        else:
            filename = AttackReplayReceiver.storage_path(battle_time, attacker, defender, base_id)
            if os.path.exists(filename):
                d = defer.succeed(open(filename, 'rb').read())
            else:
                d = defer.succeed('NOTFOUND')

        # failure path
        d.addErrback(report_and_absorb_deferred_failure, session)

        # failure AND success path (failure indicated by buf being None or the 404 'NOTFOUND' value)
        def cb(buf, session, tag):
            if buf and (buf != 'NOTFOUND'):
                with admin_stats.latency_measurer('GET_BATTLE_REPLAY(gunzip)'):
                    raw_ret = gzip.GzipFile(fileobj=cStringIO.StringIO(buf)).read()
                with admin_stats.latency_measurer('GET_BATTLE_REPLAY(compress)'):
                    ret = compress_and_wrap_string(raw_ret)
            else:
                ret = None
            session.send([["GET_BATTLE_REPLAY_RESULT", tag, ret]])

        d.addCallback(cb, session, tag)

        return session.start_async_request(d) # go async

    def query_map_log(self, session, retmsg, arg):
        region_id = arg[1]
        time_range = arg[2]
        tag = arg[3]
        ret = list(gamesite.nosql_client.log_retrieve(gamesite.nosql_client.region_table_name(region_id, 'log'), time_range, reason='QUERY_MAP_LOG'))
        retmsg.append(["QUERY_MAP_LOG_RESULT", tag, ret])
        return None

    def do_complete_quest(self, session, retmsg, questname):
        quest = session.player.get_abtest_quest(questname)
        if quest.name in session.player.completed_quests:
            qdata = session.player.completed_quests[quest.name]
            if hasattr(quest, 'repeat_interval'):
                GRACE_PERIOD = 600 # grace period to deal with badly synced client clocks
                if (server_time - qdata['time']) < (quest.repeat_interval - GRACE_PERIOD):
                    # not enough time has passed yet to re-complete the quest
                    return
            else:
                # ignore duplicate request
                return
        else:
            qdata = None

        if (quest.show_if) and (not (quest.show_if.is_satisfied2(session, session.player, qdata))):
            retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED",
                           gamedata['quests'][questname]['show_if']])
            return

        # check quest activation
        if (quest.activation) and (not (quest.activation.is_satisfied2(session, session.player, qdata))):
            retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED",
                           gamedata['quests'][questname]['activation']])
            return

        # check quest goal completion
        if not (quest.goal.is_satisfied2(session, session.player, qdata)):
            retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED",
                           gamedata['quests'][questname]['goal']])
            return

        if not qdata:
            qdata = {'count':0}

        # mutate stored state for the quest
        qdata['count'] += 1
        qdata['time'] = server_time
        quest.goal.remember_state(session.player, qdata)
        session.player.completed_quests[quest.name] = qdata

        new_objects = session.player.give_quest_rewards(quest, session, retmsg)
        if hasattr(quest, 'repeat_interval'):
            session.increment_player_metric('repeatable_quests_completed', 1, time_series = False)
        else:
            session.increment_player_metric('quests_completed', 1, time_series = False)
            session.increment_player_metric('quest:'+questname+':completed', 1, time_series = False)

        for obj in new_objects:
            session.add_object(obj)
            retmsg.append(["OBJECT_CREATED2", obj.serialize_state()])
            if obj.auras:
                retmsg.append(["OBJECT_AURAS_UPDATE", obj.serialize_auras()])
            session.player.send_army_update_one(obj, retmsg)

        # recalculate resources since unit space/resources will have changed
        retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

        # special case - if it's the quest that finishes the extended tutorial, send mail
        # must come BEFORE COMPLETED_QUEST, because otherwise the new mail/history state will not be set up before player.update_quest_cache()
        session.player.send_inventory_intro_mail(session, retmsg)

        retmsg.append(["COMPLETED_QUEST", quest.name, qdata])

        # some quests may reveal new AI enemies on completion
        session.user.repopulate_ai_list(session)

        props = {'quest':quest.name,
                 'sum': session.player.get_denormalized_summary_props('brief')
                 }
        if hasattr(quest, 'repeat_interval'):
            evname = '4011_quest_complete_again'
            props['count'] = session.player.completed_quests[quest.name]['count']
        else:
            evname = '4010_quest_complete'
        metric_event_coded(session.user.user_id, evname, props)

    def do_claim_achievement(self, session, retmsg, name):
        if name in session.player.achievements:
            # ignore duplicate request
            return
        data = gamedata['achievements'][name]
        for PRED in ('activation', 'show_if'):
            if ((PRED in data) and (not (Predicates.read_predicate(data[PRED]).is_satisfied(session.player, None)))):
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", data[PRED]])
                return
        if (not Predicates.read_predicate(data['goal']).is_satisfied(session.player, None)):
            retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", data['goal']])
            return
        props = {'time': server_time}
        session.player.achievements[name] = props
        retmsg.append(["ACHIEVEMENT_CLAIMED", name, props])
        metric_event_coded(session.user.user_id, '4055_achievement_claimed', {'name': name, 'sum': session.player.get_denormalized_summary_props('brief')})
        session.player.modify_scores({'achievement_points':session.player.get_achievement_points()}, method='=', reason = 'claim_achievement')

        if data.get('chat_announce', True) and \
           session.alliance_chat_channel and \
           session.player.get_any_abtest_value('chat_alliance_achievements', gamedata['chat_alliance_achievements']):
            session.do_chat_send(session.alliance_chat_channel, 'I got an achievement!', bypass_gag = True, props = {'type':'earned_achievement', 'achievement_name': name})

    def give_xp_to(self, session, player, retmsg, amount, reason, xy, obj_session_id = -1):
        if amount <= 0: return
        player.resources.gain_xp(amount, reason=reason)
        if player is session.player:
            retmsg.append(["GAINED_XP2", amount, obj_session_id, xy if xy else [-1,-1], session.player.resources.xp])

    def give_xp(self, session, retmsg, amount, reason, xy, obj_session_id = -1):
        self.give_xp_to(session, session.player, retmsg, amount, reason, xy, obj_session_id = obj_session_id)

    # eventually move all CAST_SPELL and execute_order() stuff here?
    def execute_spell(self, session, retmsg, spellname, spellarg, reason = None):
        spell = gamedata['spells'][spellname]

        if ('cooldown_name' in spell) and not (session.player.is_cheater):
            cd_name = spell['cooldown_name']
            if session.player.cooldown_active(cd_name):
                to_go = session.player.cooldowns[cd_name]['end'] - server_time
                raise Exception('player %d: spell cooldown %s has not expired yet (%d sec to go)' % (session.player.user_id, cd_name, to_go))

        if ('new_store_requires' in spell) and (not Predicates.read_predicate(spell['new_store_requires']).is_satisfied(session.player, None)):
            raise Exception('player %d: not allowed to cast spell %s' % (session.player.user_id, spellname))

        success_ret = True

        if spellname == "GIVE_UNITS_LIMIT_BREAK":
            session.spawn_new_units_for_player(session.player, retmsg, spellarg, limit_break = True)
        elif spellname == "GIVE_UNITS":
            # see if there is enough space
            req = session.player.space_required_for_units(spellarg)
            cur = session.player.get_army_space_usage_by_squad()

            # check unit count limit
            for name, data in spellarg.iteritems():
                spec = session.player.get_abtest_spec(GameObjectSpec, name)
                if spec.limit >= 0:
                    if type(data) is int:
                        qty = data
                    else:
                        qty = data.get('qty',1)
                    if session.player.get_army_unit_count_by_specname().get(name, 0) + qty > spec.limit:
                        retmsg.append(["ERROR", "UNIT_COUNT_LIMIT"])
                        return False

            if (cur['ALL'] + req > session.player.stattab.total_space):
                retmsg.append(["ERROR", "UNIT_SPACE_LIMIT"])
                return False

            if (not session.player.squads_enabled()) or (not gamedata['produce_to_reserves']):
                if (cur[str(SQUAD_IDS.BASE_DEFENDERS)] + req > session.player.stattab.main_squad_space):
                    retmsg.append(["ERROR", "UNIT_SPACE_LIMIT"])
                    return False

            session.spawn_new_units_for_player(session.player, retmsg, spellarg)

        elif spellname.startswith("BOOST_"):
            res = session.player.resources.calc_snapshot()
            success = True

            if 'boost_amount' in spell:
                if spell['boost_amount'] >= 1:
                    if getattr(session.player.resources, spell['resource']) >= res.max_res(spell['resource']):
                        success = False
                    else:
                        amount_added = res.max_res(spell['resource']) - getattr(session.player.resources, spell['resource'])
                        session.player.resources.gain_res({spell['resource']:amount_added}, reason=reason)

                else:
                    amount_added = int(spell['boost_amount']*res.max_res(spell['resource']))
                    if getattr(session.player.resources, spell['resource']) + amount_added > res.max_res(spell['resource']):
                        success = False
                    else:
                        session.player.resources.gain_res({spell['resource']:amount_added}, reason=reason)

            elif 'give_amount' in spell:
                amount_added = spell['give_amount']
                if getattr(session.player.resources, spell['resource']) + amount_added > res.max_res(spell['resource']):
                    success = False
                else:
                    session.player.resources.gain_res({spell['resource']:amount_added}, reason=reason)
            else:
                raise Exception('Unhandled boost spell '+repr(spell))

            if success:
                admin_stats.econ_flow_res(session.player, reason, 'boost', {spell['resource']:amount_added})
            else:
                retmsg.append(["ERROR", "STORAGE_LIMIT", spell['resource']])
                return False

        elif spellname == "BUY_RESOURCES_TOPUP":
            snap = session.player.resources.calc_snapshot()
            success = True
            for res in spellarg:
                if getattr(session.player.resources, res) >= snap.max_res(res):
                    success = False
                    break
            if success:
                session.player.resources.gain_res(spellarg, reason=reason)
                admin_stats.econ_flow_res(session.player, reason, 'boost', spellarg)
            else:
                return False

        elif spellname == "BUILD_INSTANTLY_FOR_FREE":
            if not self.do_build(session, retmsg, spellarg, True):
                return False

        elif spellname == "UPGRADE_UNIQUE_INSTANTLY_FOR_FREE":
            specname = spellarg
            obj = session.player.find_object_by_type(specname)
            if (not obj) or (not obj.is_building()):
                retmsg.append(["ERROR", "BUILDING_NOT_FOUND", specname])
                return False
            if not self.do_upgrade_instant(session, retmsg, obj, ignore_requires = True):
                return False

        elif spellname == "CHANGE_REGION" or spellname.startswith("CHANGE_REGION_INSTANTLY"):
            if session.has_attacked or (not session.home_base):
                retmsg.append(["ERROR", "CANNOT_TRAVEL_DURING_BATTLE"])
                return False

            new_region = spellarg[0]
            new_loc = spellarg[1]
            spell = gamedata['spells']['CHANGE_REGION']
            cdname = spell['cooldown_name']

            if (not spellname.startswith("CHANGE_REGION_INSTANTLY")) and session.player.cooldown_active(cdname) and (not session.player.is_cheater):
                retmsg.append(["ERROR", "ON_COOLDOWN"])
                retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])
                return False

            if not session.player.eligible_for_quarries():
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", session.player.get_any_abtest_value('quarry_requirement', gamedata['territory']['quarry_requirement'])])
                return False

            assert (new_region is None) or (new_region in gamedata['regions'])

            # see if this is an ordinary request or a developer request
#            if session.player.is_developer(): # developer request
#                gamesite.exception_log.event(server_time, 'developer %d request to change region: %s %s' % \
#                                             (session.player.user_id, new_region, repr(new_loc)))
#                pass

            requirement = session.player.get_any_abtest_value('change_region_requirement', gamedata['territory']['change_region_requirement'])
            pred = Predicates.read_predicate(requirement)
            if not pred.is_satisfied(session.player, None):
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", requirement])
                return False

            if new_region:
                data = gamedata['regions'][new_region]
                if (session.player.home_region != new_region):
                    if (not data.get('open_join',True)) or \
                       ((not session.player.is_developer()) and data.get('developer_only',0)) or \
                       ((not session.player.is_developer()) and (data.get('pop_hard_cap',-1) >= 0 and gamesite.nosql_client.get_map_feature_population(new_region,'home',reason='change_region_specific') >= data['pop_hard_cap'])) or \
                       (('show_if' in data) and (not Predicates.read_predicate(data['show_if']).is_satisfied(session.player, None))) or \
                       ((spellname != "CHANGE_REGION_INSTANTLY_ANYWHERE") and ('requires' in data) and (not Predicates.read_predicate(data['requires']).is_satisfied(session.player, None))):
                        retmsg.append(["ERROR", "CANNOT_CHANGE_REGION_DESTINATION_FULL"])
                        return False

            reason = 'player_request'
            metric_event_coded(session.user.user_id, '4700_change_region_request', {'request_region':new_region, 'request_loc':new_loc,
                                                                                    'old_region':session.player.home_region, 'old_loc':session.player.my_home.base_map_loc, 'reason':reason})
            success = session.player.change_region(new_region, new_loc, session, retmsg, reason=reason)

            if success:
                session.player.cooldown_trigger(cdname, spell['cooldown'])
                retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])
            else:
                retmsg.append(["ERROR", "CANNOT_CHANGE_REGION_DESTINATION_OCCUPIED"])

            return success

        elif spellname == "APPLY_AURA":
            target = spellarg[0]
            aura_name = spellarg[1]
            aura_strength = spellarg[2]
            aura_duration = spellarg[3]
            aura_stack = spellarg[4] if len(spellarg) >= 5 else -1

            assert target == 'player'
            #assert aura_duration > 0

            success = session.player.apply_aura(aura_name, strength = aura_strength, duration = aura_duration, stack = aura_stack)
            if success:
                session.player.stattab.send_update(session, retmsg)
            else:
                retmsg.append(["ERROR", "PLAYER_AURA_LIMIT"])
                return False

        elif spellname in ("ALLIANCE_GIFT_LOOT", "FRIEND_GIFT_LOOT"):
            is_alliance = (spellname == "ALLIANCE_GIFT_LOOT")
            loot_table = spellarg[0]['loot']
            msg = spellarg[0].get('mail_template') or gamedata['strings'][{'ALLIANCE_GIFT_LOOT':'alliance_gift_mail', 'FRIEND_GIFT_LOOT':'friend_gift_mail'}[spellname]]
            target_id = spellarg[1]

            if (target_id == session.player.user_id) or \
               (is_alliance and ((not session.player.is_same_alliance(target_id)) or \
                                 (not session.alliance_info_cache))):
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED"])
                return False

            loot = session.get_loot_items(session.player, loot_table, spellarg[0].get('item_duration',-1), spellarg[0].get('item_expire_at',-1))
            if not loot: return True # items already expired

            # check for expiring items, and ensure the message itself does not persist after the last item expires
            loot_expire_time = -1
            for item in loot:
                if item.get('expire_time',-1) > 0:
                    loot_expire_time = min(loot_expire_time, item['expire_time']) if (loot_expire_time > 0) else item['expire_time']
            message_expire_time = server_time + msg['duration']
            if loot_expire_time > 0:
                message_expire_time = min(message_expire_time, loot_expire_time)
            if server_time >= message_expire_time: return True # already expired

            if is_alliance:
                my_role_info = session.alliance_info_cache['roles'][str(session.alliance_membership_cache.get('role', gamesite.sql_client.ROLE_DEFAULT))]
                sender_role_name = my_role_info['ui_name']
                alliance_name = alliance_display_name(session.alliance_info_cache)
            else:
                sender_role_name = alliance_name = ''

            msg_data = {'type':'mail',
                        'expire_time': message_expire_time,
                        'from': session.player.user_id,
                        'from_name': msg['ui_from'].replace('%SENDER_NAME', session.user.get_ui_name(session.player)).replace('%SENDER_ROLE_NAME', sender_role_name).replace('%ALLIANCE_NAME', alliance_name),
                        'to': [target_id],
                        'subject': msg['ui_subject'].replace('%SENDER_NAME', session.user.get_ui_name(session.player)),
                        'body': msg['ui_body'].replace('%SENDER_NAME', session.user.get_ui_name(session.player)).replace('%SENDER_ROLE_NAME', sender_role_name).replace('%ALLIANCE_NAME', alliance_name).replace('%day', time.strftime('%d %b %Y', time.gmtime(server_time))).replace('%time', time.strftime('%H:%M', time.gmtime(server_time))),
                        'attachments': loot
                        }
            for EXTRA in ('show_if', 'discard_if', 'receipt_duration'):
                if EXTRA in msg: msg_data[EXTRA] = msg[EXTRA]

            gamesite.msg_client.msg_send([msg_data])

            if is_alliance:
                pcache_data = self.do_query_player_cache(session, [target_id], reason = spellname, get_trophies = False)[0] or {}
                if session.alliance_chat_channel and pcache_data:
                    def format_item(item):
                        stack = item.get('stack',1)
                        stack_str = ('%dx ' % stack) if stack != 1 else ''
                        return stack_str + gamedata['items'][item['spec']]['ui_name']
                    session.do_chat_send(session.alliance_chat_channel,
                                         '', bypass_gag = True, props = {'type': 'alliance_gift_sent',
                                                                         'target_user_id': target_id,
                                                                         'target_chat_name': pcache_get_chat_name(pcache_data),
                                                                         'item_name': ', '.join([format_item(x) for x in loot])
                                                                         })
            if 'history_key' in spellarg[0]:
                history_key = spellarg[0]['history_key']
            elif is_alliance:
                history_key = 'alliance_gift_items_sent'
            else:
                history_key = 'friend_gift_items_sent'

            if history_key:
                session.increment_player_metric(history_key, len(loot), time_series = False)
                session.player.send_history_update(retmsg)

            if 'event_name' in spellarg[0]:
                event_name = spellarg[0]['event_name']
            elif is_alliance:
                event_name = '4170_alliance_gift_item_sent'
            else:
                event_name = None

            if event_name:
                event_props = {'attachments':loot, 'recipient_id':target_id}
                if is_alliance:
                    event_props['alliance_id'] = session.alliance_id_cache
                metric_event_coded(session.player.user_id, event_name, event_props)

        elif spellname.startswith("BUY_PROTECTION"):
            session.player.set_protection_end_time(session, max(session.player.resources.protection_end_time, server_time) + spell['duration'],
                                                   '3883_protection_from_spell', {'spellname': spellname, 'reason':reason})

        elif spellname.startswith("FREE_RANDOM_") or spellname.startswith("BUY_RANDOM_"):
            items = session.get_loot_items(session.player, gamedata['loot_tables'][spell['loot_table']]['loot'], -1, -1)

            success_ret = copy.deepcopy(items)
            metric_event_coded(session.user.user_id, '5100_free_random_item' if spellname.startswith("FREE_RANDOM_") else '5110_buy_random_item',
                               {'items':items})

            use_modal_looting = (session.player.get_any_abtest_value('modal_looting', gamedata['modal_looting']) and \
                                 session.player.find_object_by_type(gamedata['inventory_building']))

            if use_modal_looting:
                session.player.loot_buffer += items
                for item in items:
                    session.player.inventory_log_event('5125_item_obtained', item['spec'], item.get('stack',1), item.get('expire_time',-1), level=item.get('level',None), reason=spellname)

                retmsg.append(["LOOT_BUFFER_UPDATE", session.player.loot_buffer, True])
            else:
                session.player.send_loot_mail('', 0, items, retmsg, mail_template = spell['mail_template'])

            retmsg.append(["ITEMS_DISCOVERED", items, spell['mail_template'].get('duration',-1), 'loot_buffer' if use_modal_looting else 'messages'])

        elif spellname == "BUY_ITEM":
            skudata = Store.buy_item_find_skudata(spellarg, session.player)
            assert skudata

            on_purchase_cons = None

            if 'loot_table' in skudata:
                loot_table = gamedata['loot_tables'][skudata['loot_table']]
                items = session.get_loot_items(session.player, loot_table['loot'], -1, -1)
                on_purchase_cons = Store.buy_gamebucks_sku_get_loot_table_parameter(session, session.player, loot_table, 'on_purchase')

            elif 'item' in skudata:
                stack = int(skudata.get('stack',1))
                item = {'spec':skudata['item'], 'stack': stack}
                if 'level' in skudata: item['level'] = skudata['level']

                expire_time = -1
                melt_time = int(skudata.get('melt_time',-1))
                melt_dur = int(skudata.get('melt_duration',-1))
                if melt_dur > 0:
                    expire_time = server_time + melt_dur
                elif melt_time > 0:
                    expire_time = melt_time

                expire_time = session.get_item_spec_forced_expiration(gamedata['items'][item['spec']], prev_expire_time = expire_time)
                if expire_time > 0:
                    assert expire_time >= server_time # don't sell an expired item
                    item['expire_time'] = expire_time

                items = [item,]

            # for metrics only
            price = skudata['price']
            price_currency = skudata.get('price_currency','fbcredits')
            if price_currency == 'fbcredits':
                price = session.player.get_any_abtest_value('gamebucks_per_fbcredit', gamedata['store']['gamebucks_per_fbcredit']) * price
                price_currency = 'gamebucks'

            if price_currency != 'gamebucks':
                # record noncurrency (token) purchases in gamebucks log
                # currency (gamebucks) purchases will appear in gamebucks log as 1400_gamebucks_spent
                gamesite.gamebucks_log.event(server_time, {'user_id': session.user.user_id,
                                                           'event_name': '5120_buy_item',
                                                           'summary': session.player.get_denormalized_summary_props('brief'),
                                                           'code':5120, 'ui_index':spellarg.get('ui_index',-1),
                                                           'items':items, 'price':price, 'price_currency':price_currency})

            #retmsg.append(["ITEM_PURCHASED", items, -1])
            discovered_where = None

            if session.player.get_any_abtest_value('modal_looting', gamedata['modal_looting']) and \
               session.player.find_object_by_type(gamedata['inventory_building']) and \
               not skudata.get('send_by_mail', False):
                session.player.loot_buffer += items
                for item in items:
                    session.player.inventory_log_event('5125_item_obtained', item['spec'], item.get('stack',1), item.get('expire_time',-1), item.get('level',None), reason='store')
                retmsg.append(["LOOT_BUFFER_UPDATE", session.player.loot_buffer, True])
                discovered_where = 'loot_buffer'

            else:
                purchase_text = string.join([(('%dx ' % item['stack']) if item.get('stack',1) > 1 else '') + gamedata['items'][item['spec']]['ui_name'] for item in items], '\n')
                headline = gamedata['items'][items[0]['spec']]['ui_name']
                if len(items) > 1:
                    headline += '+'
                elif items[0].get('stack',1) > 1:
                    headline = ('%dx ' % items[0]['stack'])+headline

                session.player.send_loot_mail(purchase_text, headline, items, retmsg, mail_template = gamedata['strings']['buy_item_mail'])
                discovered_where = 'messages'

            if discovered_where:
                retmsg.append(["ITEMS_DISCOVERED", items, -1, discovered_where])

            if 'on_purchase' in skudata: # add to the one in the loot table
                if on_purchase_cons:
                    on_purchase_cons = {'consequent':'AND', 'subconsequents':[on_purchase_cons, skudata['on_purchase']]}
                else:
                    on_purchase_cons = skudata['on_purchase']

            if on_purchase_cons:
                session.execute_consequent_safe(on_purchase_cons, session.player, retmsg, reason='on_purchase')

        elif ('code' in spell) and (spell['code'] == 'projectile_attack'):
            if not session.has_attacked:
                retmsg.append(["ERROR", "CANNOT_USE_ITEM_OUTSIDE_OF_COMBAT"])
                return False
            if (session.viewing_base.base_climate and gamedata['climates'][session.viewing_base.base_climate].get('exclude_missiles', False)):
                retmsg.append(["ERROR", "CANNOT_USE_ITEM_UNDERGROUND"])
                return False
            props = {'spellname': spellname}
            if spellarg:
                props['spellarg'] = spellarg
            session.attack_event(session.player.user_id, '3960_combat_spell_cast', props)

        elif ('code' in spell) and (spell['code'] in ('instant_repair', 'instant_combat_repair')):
            do_units = False
            do_resurrect_units = False
            do_buildings = False

            if spell['code'] == 'instant_repair':
                if session.has_attacked or (not session.home_base):
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_IN_COMBAT"])
                    return False
                do_units = True
                do_resurrect_units = True
                do_buildings = True
            elif spell['code'] == 'instant_combat_repair':
                if (not session.has_attacked) or session.home_base: # important: don't allow use at home base (too many defenders will be repaired)
                    retmsg.append(["ERROR", "CANNOT_USE_ITEM_OUTSIDE_OF_COMBAT"])
                    return False
                do_units = True
                do_resurrect_units = True

            if session.has_attacked: # in combat, home or away
                props = {'spellname': spellname}
                if spellarg: props['spellarg'] = spellarg
                session.attack_event(session.player.user_id, '3960_combat_spell_cast', props)

            recalc_power = False
            for object in session.iter_objects():
                if object.owner is not session.player: continue
                if do_buildings and object.is_building() and object.is_damaged():
                    object.repair_finish_time = server_time - 1
                    self.ping_object(session, retmsg, object.obj_id, session.viewing_base)
                    if object.affects_power():
                        recalc_power = True
                elif do_units and object.is_mobile() and session.player.can_repair_unit(object): # and object.is_damaged():
                    # do this unconditionally, because object combat upates showing damage might be in-flight
                    session.player.unit_repair_cancel(object)
                    object.heal_to_full()
                    retmsg.append(["OBJECT_STATE_UPDATE2", object.serialize_state(fake_xy = [-1,-1])])

            # resurrect dead units
            if do_resurrect_units and session.has_attacked and (not session.home_base):
                to_remove = []
                for entry in session.resurrectable_objects:
                    object, death_location = entry
                    if object.owner is not session.player: continue
                    if not session.player.can_repair_unit(object): continue
                    to_remove.append(entry)
                    try:
                        assert not session.has_object(object.obj_id)
                        session.player.unit_repair_cancel(object)
                        object.heal_to_full()
                        session.add_object(object)
                        retmsg.append(["OBJECT_CREATED2", object.serialize_state(fake_xy = death_location)])
                        session.player.send_army_update_one(object, retmsg)
                    except:
                        gamesite.exception_log.event(server_time, 'player %d: error healing %s: %s' % (session.player.user_id, object.spec.name, traceback.format_exc().strip())) # OK

                for entry in to_remove:
                    session.resurrectable_objects.remove(entry)

            session.player.unit_repair_send(retmsg)
            if recalc_power:
                session.power_changed(session.viewing_base, None, retmsg)

        elif spell.get('code') == 'change_alias':
            new_alias = spellarg[0]
            assert type(new_alias) in (str, unicode)
            new_alias = SpinHTTP.unwrap_string(new_alias)
            new_alias = new_alias.strip()

            if not is_valid_alias(new_alias) or new_alias == session.player.alias:
                retmsg.append(["ERROR", "ALIAS_BAD"])
                return False

            # check uniqueness
            old_alias = session.player.alias
            old_name = session.user.get_ui_name(session.player)

            if gamesite.nosql_client.player_alias_exists(new_alias) or \
               not gamesite.nosql_client.player_alias_claim(new_alias.lower()):
                retmsg.append(["ERROR", "ALIAS_TAKEN"])
                return False
            if old_alias:
                gamesite.nosql_client.player_alias_release(old_alias) # for legacy case-sensitive aliases
                gamesite.nosql_client.player_alias_release(old_alias.lower())

            session.player.alias = new_alias
            # if the server crashes here, playerdb might have the old alias, but only the new alias will be reserved in the DB
            session.deferred_player_name_update = True
            if session.alliance_chat_channel:
                session.do_chat_send(session.alliance_chat_channel,
                                     'I have a new alias!',
                                     bypass_gag = True, props = {'type':'changed_alias',
                                                                 'old_name': old_name})
            self.send_player_cache_update(session, 'change_alias')

        elif spell.get('code') == 'change_title':
            new_title_name = spellarg[0]
            return session.change_player_title(new_title_name, retmsg, force = False, chat_announce = gamedata['server'].get('chat_title_changes',False))

        else:
            raise Exception('unknown spell '+spellname)

        if 'cooldown_name' in spell:
            if 'cooldown_origin' in spell:
                cooldown = spell['cooldown_interval'] - (server_time - spell['cooldown_origin']) % spell['cooldown_interval']
            else:
                cooldown = spell['cooldown']
            session.player.cooldown_trigger(spell['cooldown_name'], cooldown)
            retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])

        return success_ret

    def ping_object(self, session, retmsg, id, base):
        if id == GameObject.VIRTUAL_ID:
            # just ping player resources
            session.deferred_player_state_update = True
        else:
            # possible race condition due to unserialized AJAX
            if not session.has_object(id):
                #print 'race condition in ping_object, ignoring'
                return

            object = session.get_object(id)
            return self.do_ping_object(session, retmsg, object, base)

    @admin_stats.measure_latency('do_ping_object')
    def do_ping_object(self, session, retmsg, object, base, force_write = False):

            if not object.is_building():
                # no need to ping objects that aren't buildings
                return

            if object.owner is not session.player:
                # ping should be very cautious on objects not owned by player at his own base
                # since this case is brand new code. Be conservative and only answer "repair" pings.
                if object.is_repairing():
                    pass
                else:
                    return

            did_a_repair = False
            did_finish_construction = False
            did_an_upgrade = False
            did_a_research = False
            did_a_manufacture = False

            xp = 0
            xp_why = []

            if object.is_repairing():
                if server_time >= object.repair_finish_time:
                    # object fully repaired
                    did_a_repair = True
                    object.heal_to_full()
                    undamaged_time = object.repair_finish_time
                    object.repair_finish_time = -1
                    object.update_production(object.owner, base.base_type, base.base_region, compute_power_factor(base.get_power_state()))
                    object.update_all(undamaged_time)

            if object.is_under_construction() and (object.owner is session.player):
                prog = object.build_done_time
                if object.build_start_time >= 0:
                    prog += (server_time - object.build_start_time)
                if prog >= object.build_total_time:
                    # object fully constructed
                    did_finish_construction = True
                    object.build_total_time = -1
                    object.build_start_time = -1
                    object.build_done_time = -1
                    object.update_production(object.owner, base.base_type, base.base_region, compute_power_factor(base.get_power_state()))
                    if object.spec.upgrade_completion:
                        cons = object.get_leveled_quantity(object.spec.upgrade_completion)
                        if cons:
                            session.execute_consequent_safe(cons, session.player, retmsg, reason='building:upgrade_completion(%d)' % object.level)

                    # run metrics for home-base buildings
                    if base is object.owner.my_home:
                        session.deferred_history_update = True
                        num_built = sum([1 for p in object.owner.home_base_iter() if p.spec.name == object.spec.name])
                        session.setmax_player_metric('building:'+object.spec.name+':num_built', num_built, bucket = bool(object.spec.worth_less_xp))
                        if object.spec.history_category:
                            num_cat = sum([1 for p in object.owner.home_base_iter() if p.spec.history_category == object.spec.history_category])
                            session.setmax_player_metric(object.spec.history_category+'_built', num_cat, bucket = bool(object.spec.worth_less_xp))
                        if object.spec.track_level_in_player_history:
                            session.setmax_player_metric(object.spec.name+'_level', object.level, bucket = bool(object.spec.worth_less_xp))

            if object.is_upgrading() and (object.owner is session.player):
                prog = object.upgrade_done_time
                if object.upgrade_start_time >= 0:
                    prog += (server_time - object.upgrade_start_time)
                if prog >= object.upgrade_total_time:
                    # object fully upgraded
                    did_an_upgrade = True
                    if object.is_producer():
                        object.halt_production(object.owner)
                    object.change_level(object.level + 1)
                    object.upgrade_total_time = -1
                    object.upgrade_start_time = -1
                    object.upgrade_done_time = -1
                    object.update_production(object.owner, base.base_type, base.base_region, compute_power_factor(base.get_power_state()))
                    if object.spec.upgrade_completion:
                        cons = object.get_leveled_quantity(object.spec.upgrade_completion)
                        if cons:
                            session.execute_consequent_safe(cons, session.player, retmsg, reason='building:upgrade_completion(%d)' % object.level)

                    # run metrics for home-base buildings
                    if base is object.owner.my_home:
                        session.deferred_history_update = True
                        max_level = max([p.level for p in object.owner.home_base_iter() if p.spec.name == object.spec.name])
                        session.setmax_player_metric('building:'+object.spec.name+':max_level', max_level, bucket = bool(object.spec.worth_less_xp))
                        if object.spec.history_category:
                            max_level = max([p.level for p in object.owner.home_base_iter() if p.spec.history_category == object.spec.history_category])
                            session.setmax_player_metric(object.spec.history_category+'_max_level', max_level, bucket = bool(object.spec.worth_less_xp))
                        if object.spec.track_level_in_player_history:
                            session.setmax_player_metric(object.spec.name+'_level', object.level, bucket = bool(object.spec.worth_less_xp))
                    session.user.create_fb_open_graph_action_building_upgrade(object)

            if object.is_researching() and (object.owner is session.player):
                prog = object.research_done_time
                if object.research_start_time >= 0:
                    prog += (server_time - object.research_start_time)
                is_done = (prog >= object.research_total_time)

                if is_done:
                    # resarch is complete
                    did_a_research = True
                    tech_name = object.research_item
                    current = object.owner.tech.get(tech_name, 0)
                    object.research_item = ''
                    object.research_total_time = -1
                    object.research_start_time = -1
                    object.research_done_time = -1
                    session.give_tech(object.owner, retmsg, tech_name, current+1, object, 'use_resources')

                    spec = session.player.get_abtest_spec(TechSpec, tech_name)
                    if spec.completion:
                        session.execute_consequent_safe(spec.get_leveled_quantity(spec.completion, current+1), session.player, retmsg, reason='tech:completion')

            if object.is_crafting() and (object.owner is session.player):
                if object.update_crafting(-1):
                    # crafting is complete
                    # collect now if auto_collect applies
                    if gamedata['crafting']['categories'][gamedata['crafting']['recipes'][object.crafting.queue[0].craft_state['recipe']]['crafting_category']].get('auto_collect',True):
                        self.do_collect_craft(session, retmsg, object)

            if object.is_manufacturing() and (object.owner is session.player):
                did_a_manufacture |= self.do_ping_manufacturing(session, retmsg, base, object)

            if did_finish_construction or did_an_upgrade:
                # handle any updates to stattab
                if object.spec.manufacture_category or object.spec.provides_space or object.spec.provides_total_space or \
                   object.is_producer() or object.spec.provides_foremen:
                    object.owner.recalc_stattab(session.player)
                    if object.owner is session.player:
                        object.owner.stattab.send_update(session, retmsg)

            # if the action had any possible impact on power generation, then re-initialize harvesters
            if did_a_repair or did_finish_construction or did_an_upgrade:
                session.power_changed(base, object, retmsg)
                session.deferred_ladder_point_decay_check = True

            if did_finish_construction or did_an_upgrade:
                if object.spec.provides_inventory:
                    session.player.send_inventory_update(retmsg)

                if object.spec.name in (gamedata['townhall'],gamedata['region_map_building']):
                    # these buildings can enable regional map features, place player on map if not already there
                    session.player.update_map_placement(session, retmsg)

                if object.spec.name in (gamedata['townhall'], gamedata['inventory_building']):
                    # check if this triggered the inventory intro mail
                    session.player.send_inventory_intro_mail(session, retmsg)

                if object.spec.name == gamedata['townhall']:
                    # may have triggered adnetwork events
                    session.send_adnetwork_events(retmsg)

                    # keep map in sync
                    if session.player.home_region:
                        session.player.my_home.send_map_feature_update(reason='townhall_upgrade')

                # award XP for construction/upgrade
                if object.spec.name in gamedata['player_xp']['buildings']:
                    override = object.spec.get_leveled_quantity(object.spec.upgrade_xp, object.level)
                    if override >= 0:
                        xp += override
                    else:
                        amount = sum((GameObjectSpec.get_leveled_quantity(getattr(object.spec, 'build_cost_'+res), object.level) for res in gamedata['resources']),0)
                        if object.level == 1 and 'level_1' in gamedata['player_xp']['buildings']:
                            coeff = gamedata['player_xp']['buildings']['level_1']
                        else:
                            coeff = gamedata['player_xp']['buildings'][object.spec.name]
                        xp += int(coeff*amount)
                    xp_why.append('building')

            if did_a_repair or did_finish_construction or did_an_upgrade or did_a_research or did_a_manufacture:
                self.give_xp_to(session, object.owner, retmsg, xp, ','.join(xp_why), [object.x,object.y], obj_session_id = object.obj_id)

                retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])
                base.nosql_write_one(object, 'do_ping_object')
            elif force_write:
                base.nosql_write_one(object, 'do_ping_object')

            session.deferred_object_state_updates.add(object)

    def do_speedup_for_free(self, session, retmsg, object):
        assert object.is_building()
        if session.viewing_base is not session.player.my_home:
            if session.viewing_base.is_nosql_base() and object.spec.quarry_buildable and session.viewing_base.base_landlord_id == session.player.user_id:
                pass # OK to access remotely
            else:
                retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                return

        # max amount of time for which we allow free speed-ups
        free_time = Store.get_free_speedup_time(session, session.player)

        # just set the finish time to a time in the past, then
        # let ping_object handle the rest of the work

        if object.is_repairing():
            time_left = object.repair_finish_time - server_time
            if time_left <= free_time:
                object.repair_finish_time = server_time - 1
        elif object.is_upgrading():
            prog = object.upgrade_done_time
            if object.upgrade_start_time < 0:
                return
            else:
                prog += server_time - object.upgrade_start_time
            time_left = object.upgrade_total_time - prog
            if time_left <= free_time:
                object.upgrade_done_time = object.upgrade_total_time
        elif object.is_under_construction():
            prog = object.build_done_time
            if object.build_start_time < 0:
                return
            else:
                prog += server_time - object.build_start_time
            time_left = object.build_total_time - prog
            if time_left <= free_time:
                object.build_done_time = object.build_total_time
        elif object.is_researching():
            prog = object.research_done_time
            if object.research_start_time < 0:
                return
            else:
                prog += server_time - object.research_start_time
            time_left = object.research_total_time - prog
            if time_left <= free_time:
                object.research_done_time = object.research_total_time
        elif object.is_crafting():
            finish_time = object.crafting.finish_time()
            if finish_time < 0:
                return
            if (finish_time - server_time) <= free_time:
                object.crafting.speedup()
        elif object.is_manufacturing():
            # note: this only speeds up if ALL queued units fit in free_time
            # and there is no unit queued which has the no_free_speedup flag
            allow_free_speedup = True
            always_free_speedup = True
            for item in object.manuf_queue:
                item_spec = session.player.get_abtest_spec(GameObjectSpec, item['spec_name'])
                if item_spec.get_leveled_quantity(item_spec.always_free_speedup, item['level']):
                    continue
                else:
                    always_free_speedup = False

                if item_spec.get_leveled_quantity(item_spec.no_free_speedup, item['level']):
                    allow_free_speedup = False

            if always_free_speedup:
                free_time = 999999999
            elif not allow_free_speedup:
                free_time = 0

            prog = object.manuf_done_time
            if object.manuf_start_time < 0:
                return
            else:
                prog += server_time - object.manuf_start_time
            time_left = sum([item['total_time'] for item in object.manuf_queue]) - prog
            if time_left <= free_time:
                object.manuf_done_time = sum([item['total_time'] for item in object.manuf_queue])

        self.do_ping_object(session, retmsg, object, session.viewing_base, force_write = True)

    def do_cancel_upgrade(self, session, retmsg, object):
        if not object.is_upgrading():
            return # ignore invalid request

        if session.viewing_base is not session.player.my_home:
            if session.viewing_base.is_nosql_base() and object.spec.quarry_buildable and session.viewing_base.base_landlord_id == session.player.user_id:
                pass # OK to access remotely
            else:
                retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                return

        # figure out how many resources to return to player
        refund = dict((res,int(gamedata['upgrade_cancel_refund']*GameObjectSpec.get_leveled_quantity(getattr(object.spec, 'build_cost_'+res), object.level+1))) for res in gamedata['resources'])

        object.upgrade_total_time = -1
        object.upgrade_start_time = -1
        object.upgrade_done_time = -1

        refund = session.player.resources.gain_res(refund, reason='canceled_upgrade')
        admin_stats.econ_flow_res(session.player, 'investment', 'buildings', refund, spec = object.spec.name, level = object.level+1)

        power_factor = session.power_changed(session.viewing_base, object, retmsg)

        if object.is_producer(): # re-start harvester
            object.update_production(object.owner, session.viewing_base.base_type, session.viewing_base.base_region, power_factor)

        session.viewing_base.nosql_write_one(object, 'do_cancel_upgrade')
        retmsg.append(["OBJECT_STATE_UPDATE", object.serialize_state(), session.player.resources.calc_snapshot().serialize()])

    def do_upgrade(self, session, retmsg, object):
        if object.is_damaged() or object.is_busy():
            return # ignore invalid request

        if session.player.foreman_is_busy():
            retmsg.append(["ERROR", "FOREMAN_IS_BUSY"])
            return

        if object.level >= object.spec.maxlevel:
            retmsg.append(["ERROR", "MAX_LEVEL_REACHED", object.spec.maxlevel])
            return

        if session.viewing_base is not session.player.my_home:
            if session.viewing_base.is_nosql_base() and object.spec.quarry_buildable and session.viewing_base.base_landlord_id == session.player.user_id:
                pass # OK to access remotely
            else:
                retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                return

        fail = False

        # check if requirements are satisfied
        if object.spec.requires:
            req = GameObjectSpec.get_leveled_quantity(object.spec.requires, object.level+1)
            if (not session.player.is_cheater) and (not req.is_satisfied(session.player, None)):
                fail = True
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED",
                               gamedata['buildings'][object.spec.name]['requires']])

        # enforce cost constraint
        cost = {}
        for res in gamedata['resources']:
            cost[res] = GameObjectSpec.get_leveled_quantity(getattr(object.spec, 'build_cost_'+res), object.level+1)
            if cost[res] < 0:
                # object CANNOT be upgraded for resources, it must be done via instant purchase
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED"])
                return

            if getattr(session.player.resources, res) < cost[res]:
                fail = True
                retmsg.append(["ERROR", "INSUFFICIENT_"+res.upper(), cost[res]])
        if fail:
            return

        negative_cost = dict((res,-cost[res]) for res in cost)
        session.player.resources.gain_res(negative_cost, reason='building_upgrade')
        admin_stats.econ_flow_res(session.player, 'investment', 'buildings', negative_cost, spec = object.spec.name, level = object.level+1)

        # stop production
        if object.is_producer():
            object.halt_production(session.player)

        build_time = GameObjectSpec.get_leveled_quantity(object.spec.build_time, object.level+1)
        if build_time > 0:
            build_time = int(build_time / session.player.stattab.get_player_stat('foreman_speed'))

        object.upgrade_start_time = server_time
        if build_time >= 1:
            object.upgrade_total_time = build_time
            object.upgrade_done_time = 0
        else:
            object.upgrade_total_time = 1
            object.upgrade_done_time = 999

        # re-evaluate power situation
        session.power_changed(session.viewing_base, object, retmsg)

        retmsg.append(["OBJECT_STATE_UPDATE", object.serialize_state(), session.player.resources.calc_snapshot().serialize()])
        session.viewing_base.nosql_write_one(object, 'do_upgrade')

        if build_time < 1:
            self.ping_object(session, retmsg, object.obj_id, session.viewing_base)
        else:
            if (session.viewing_base is session.player.my_home) and object.spec.track_level_in_player_history:
                session.setmax_player_metric(object.spec.name+'_level_started', object.level+1, time_series = False) # bucket = bool(object.spec.worth_less_xp))

        session.activity_classifier.built_or_upgraded_building()

    def do_upgrade_instant(self, session, retmsg, object, ignore_requires = False):
        if object.owner is not session.player:
            retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
            return False
        if session.viewing_base is not session.player.my_home:
            if session.viewing_base.is_nosql_base() and object.spec.quarry_buildable and session.viewing_base.base_landlord_id == session.player.user_id:
                pass # OK to access remotely
            else:
                retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                return
        if object.is_damaged() or object.is_repairing():
            retmsg.append(["ERROR", "CANNOT_UPGRADE_BUILDING_WHILE_DAMAGED"])
            return False
        if object.is_busy() and (not object.is_upgrading()):
            retmsg.append(["ERROR", "CANNOT_UPGRADE_BUILDING_WHILE_BUSY"])
            return False
        if object.level >= object.spec.maxlevel:
            retmsg.append(["ERROR", "MAX_LEVEL_REACHED", object.spec.maxlevel])
            return False
        # check if requirements are satisfied
        if (not ignore_requires) and object.spec.requires and (not session.player.is_cheater):
            req = GameObjectSpec.get_leveled_quantity(object.spec.requires, object.level+1)
            if (not session.player.is_cheater) and (not req.is_satisfied(session.player, None)):
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED",
                               gamedata['buildings'][object.spec.name]['requires']])
                return False

        if object.is_producer():
            object.halt_production(session.player)

        object.upgrade_total_time = -1
        object.upgrade_start_time = -1
        object.upgrade_done_time = -1

        object.change_level(object.level+1)

        session.power_changed(session.viewing_base, object, retmsg)

        if object.spec.provides_inventory:
            session.player.send_inventory_update(retmsg)

        if object.spec.manufacture_category or object.spec.provides_space or object.spec.provides_total_space or object.is_producer() or object.spec.provides_foremen:
            session.player.recalc_stattab(session.player)
            session.player.stattab.send_update(session, retmsg)

        if object.is_producer():
            object.update_production(session.player, session.player.my_home.base_type, session.player.my_home.base_region, compute_power_factor(session.player.my_home.get_power_state()))

        retmsg.append(["OBJECT_STATE_UPDATE2", object.serialize_state()])
        session.viewing_base.nosql_write_one(object, 'do_upgrade_instant')

        if object.spec.name in gamedata['player_xp']['buildings']:
            override = object.spec.get_leveled_quantity(object.spec.upgrade_xp, object.level)
            if override >= 0:
                xp_amount = override
            else:
                xp_amount = int(gamedata['player_xp']['buildings'][object.spec.name] * \
                                sum((GameObjectSpec.get_leveled_quantity(getattr(object.spec, 'build_cost_'+res), object.level) for res in gamedata['resources']), 0))
            if xp_amount:
                self.give_xp_to(session, session.player, retmsg, xp_amount, 'building', [object.x,object.y], obj_session_id = object.obj_id)
                retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

        metric_event_coded(session.user.user_id, '4030_upgrade_building', {'building_type':object.spec.name, 'level':object.level, 'method':'instant'})

        if session.viewing_base is session.player.my_home:
            max_level = max([p.level for p in session.player.home_base_iter() if p.spec.name == object.spec.name])
            session.setmax_player_metric('building:'+object.spec.name+':max_level', max_level, bucket = bool(object.spec.worth_less_xp))

            if object.spec.history_category:
                max_level = max([p.level for p in session.player.home_base_iter() if p.spec.history_category == object.spec.history_category])
                session.setmax_player_metric(object.spec.history_category+'_max_level', max_level, bucket = bool(object.spec.worth_less_xp))
            if object.spec.track_level_in_player_history:
                session.setmax_player_metric(object.spec.name+'_level', object.level, bucket = bool(object.spec.worth_less_xp))

        if object.spec.name in (gamedata['townhall'],gamedata['region_map_building']):
            # these buildings can enable regional map features, place player on map if not already there
            session.player.update_map_placement(session, retmsg)

        if object.spec.name == gamedata['townhall']:
            # check if this triggered the inventory intro mail
            session.player.send_inventory_intro_mail(session, retmsg)
            # check for new ad network events
            session.send_adnetwork_events(retmsg)

            # keep map in sync
            if session.player.home_region:
                session.player.my_home.send_map_feature_update(reason='townhall_upgrade')

        session.user.create_fb_open_graph_action_building_upgrade(object)
        session.activity_classifier.built_or_upgraded_building()
        return True

    def do_research(self, session, retmsg, object, spellargs):
        tech_name = spellargs[0]

        if object.is_damaged() or object.is_busy():
            retmsg.append(["ERROR", "LAB_IS_BUSY", object.obj_id])
            return

        spec = session.player.get_abtest_spec(TechSpec, tech_name)

        # get current tech level
        if session.player.tech.has_key(tech_name):
            current = session.player.tech[tech_name]
        else:
            current = 0

        if current >= spec.maxlevel:
            retmsg.append(["ERROR", "MAX_LEVEL_REACHED", spec.maxlevel])
            return

        if spec.developer_only and (spin_secure_mode or (not session.player.is_developer())):
            retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
            return

        if spec.research_category not in object.spec.get_research_categories(session.player):
            retmsg.append(["ERROR", "OBJECT_IS_NOT_CAPABLE"])
            return

        fail = False

        # check if requirements are satisfied
        for reqname, reqlist in (('show_if', spec.show_if), ('activation', spec.activation), ('requires', spec.requires)):
            if reqlist:
                req = TechSpec.get_leveled_quantity(reqlist, current+1)
                if (not session.player.is_cheater) and (not req.is_satisfied(session.player, None)):
                    fail = True
                    retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED",
                                   TechSpec.get_leveled_quantity(gamedata['tech'][tech_name][reqname], current+1)])
                    break

        cost = {}
        for res in gamedata['resources']:
            cost[res] = TechSpec.get_leveled_quantity(getattr(spec, 'cost_'+res), current+1)
            if (not session.player.is_cheater) and (getattr(session.player.resources, res) < cost[res]):
                fail = True
                retmsg.append(["ERROR", "INSUFFICIENT_"+res.upper(), cost[res]])

        if fail:
            return

        # start the research
        negative_cost = dict((res,-cost[res]) for res in cost)
        session.player.resources.gain_res(negative_cost, reason='tech_research')
        admin_stats.econ_flow_res(session.player, 'investment', 'research', negative_cost, spec = tech_name, level = current+1)

        object.research_item = tech_name
        object.research_total_time = int(TechSpec.get_leveled_quantity(spec.research_time, current+1)/object.get_stat('research_speed', 1))
        object.research_start_time = server_time
        object.research_done_time = 0
        retmsg.append(["OBJECT_STATE_UPDATE", object.serialize_state(), session.player.resources.calc_snapshot().serialize()])

        session.activity_classifier.researched_tech()

    def do_cancel_research(self, session, retmsg, object):
        if not object.is_researching():
            return # ignore invalid request

        tech_name = object.research_item
        spec = session.player.get_abtest_spec(TechSpec, tech_name)

        if session.player.tech.has_key(tech_name):
            current = session.player.tech[tech_name]
        else:
            current = 0

        level_under_research = min(current + 1, spec.maxlevel)

        # figure out how many resources to return to player
        refund = dict((res, int(gamedata['research_cancel_refund']*TechSpec.get_leveled_quantity(getattr(spec, 'cost_'+res),level_under_research))) for res in gamedata['resources'])

        object.research_item = ''
        object.research_total_time = -1
        object.research_start_time = -1
        object.research_done_time = -1

        refund = session.player.resources.gain_res(refund, reason='canceled_research')
        admin_stats.econ_flow_res(session.player, 'investment', 'research', refund, spec = tech_name, level = current+1)

        retmsg.append(["OBJECT_STATE_UPDATE", object.serialize_state(), session.player.resources.calc_snapshot().serialize()])

    # parse the dictionary of arguments sent by the client for starting a craft operation
    class CraftSpellarg(object):
        def __init__(self, spellarg):
            self.recipe_name = spellarg['recipe']
            self.recipe_level = spellarg.get('level', 1)
            self.delivery_address = spellarg.get('delivery', None)
            self.do_replace = self.delivery_address and self.delivery_address.get('replace', False)
            self.ui_tag = spellarg.get('ui_tag', None)
            self.ui_index = spellarg.get('ui_index',None)
            if self.ui_tag: # sanity-check against DoS
                assert type(self.ui_tag) in (str, unicode)
                assert len(self.ui_tag) < 128

    def can_craft(self, session, player, object, arg, retmsg = None,
                  take_resources = True, take_ingredients = True, check_predicates = True):

        recipe = gamedata['crafting']['recipes'].get(arg.recipe_name, None)

        # check recipe sanity
        if (not recipe) or (not object.is_crafter()) or \
           (recipe['crafting_category'] not in object.spec.crafting_categories) or \
           (recipe['crafting_category'] not in gamedata['crafting']['categories']):
            if retmsg is not None: retmsg.append(["ERROR", "OBJECT_IS_NOT_CAPABLE"])
            return False

        catdata = gamedata['crafting']['categories'][recipe['crafting_category']]

        # check delivery options
        delivery = recipe.get('delivery', catdata.get('delivery', None))
        if delivery == 'building_slot':
            # check that target building exists, is in player's home base
            if (not arg.delivery_address) or \
               ('obj_id' not in arg.delivery_address) or ('slot_type' not in arg.delivery_address) or \
               (arg.delivery_address['slot_type'] != catdata['delivery_slot_type']) or \
               (not session.has_object(arg.delivery_address['obj_id'])):
                if retmsg is not None: retmsg.append(["ERROR", "OBJECT_IS_NOT_CAPABLE"])
                return False

            target = session.get_object(arg.delivery_address['obj_id'])

            if (target.owner is not player) or \
               (target not in player.home_base_iter()):
                if retmsg is not None: retmsg.append(["ERROR", "OBJECT_IS_NOT_CAPABLE"])
                return False

            # anti-race check #1 - check existing queue for anything that's already targeting this slot
            if object.crafting:
                for entry in object.crafting.queue:
                    addr = entry.craft_state.get('delivery',None)
                    if addr and addr.get('obj_id',None) == arg.delivery_address['obj_id'] and addr.get('slot_type',None) == arg.delivery_address['slot_type'] and addr.get('slot_index',0) == arg.delivery_address.get('slot_index',0):
                        if retmsg is not None: retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
                        return False

            # anti-race check #2 - check if destination slot is already full
            dest_addr = (arg.delivery_address['slot_type'],arg.delivery_address.get('slot_index',0))
            for product in GameObjectSpec.get_crafting_recipe_product_list(recipe, arg.recipe_level):
                if 'spec' in product: # only for deterministic products
                    product_spec = gamedata['items'][product['spec']]

                    if not arg.do_replace:
                        if not Equipment.equip_add(target.equipment or {}, target.spec, target.level, dest_addr, product, product_spec, probe_only = True):
                            if retmsg is not None: retmsg.append(["ERROR", "EQUIP_INVALID"])
                            return False

                    # check unique_equipped constraint
                    if check_predicates and ('unique_equipped' in product_spec):
                        # see if we are replacing an equivalent item
                        replacing_equivalent = False
                        if arg.do_replace:
                            old_item = Equipment.equip_get(target.equipment or {}, dest_addr)
                            if old_item and old_item['spec'] in gamedata['items'] and gamedata['items'][old_item['spec']].get('unique_equipped',None) == product_spec['unique_equipped']:
                                # replacing, no need to count
                                replacing_equivalent = True

                        if not replacing_equivalent:
                            # do need to check existing items
                            for item in session.player.equipped_item_iter():
                                item_spec = gamedata['items'].get(item['spec'], None)
                                if item_spec and item_spec.get('unique_equipped',None) == product_spec['unique_equipped']:
                                    if retmsg is not None: retmsg.append(["ERROR", "EQUIP_INVALID_UNIQUE", product_spec['name']])
                                    return False

                    # check limited_equipped constraint
                    if check_predicates and ('limited_equipped' in product_spec):
                        # see if we are replacing an equivalent item
                        replacing_equivalent = False
                        if arg.do_replace:
                            old_item = Equipment.equip_get(target.equipment or {}, dest_addr)
                            if old_item and old_item['spec'] in gamedata['items'] and gamedata['items'][old_item['spec']].get('limited_equipped',None) == product_spec['limited_equipped']:
                                # replacing, no need to count
                                replacing_equivalent = True

                        if not replacing_equivalent:
                            # do need to count existing items
                            if session.player.stattab.limited_equipped.get(product_spec['limited_equipped'],0) < \
                               product.get('stack',1) + session.player.count_limited_equipped_items(product_spec['limited_equipped']):
                                if retmsg is not None: retmsg.append(["ERROR", "EQUIP_INVALID_LIMITED", product_spec['name']])
                                return False

        # check workshop business
        if object.is_damaged() or object.is_upgrading() or object.is_under_construction() or object.is_researching() or object.is_manufacturing():
            if retmsg is not None: retmsg.append(["ERROR", "WORKSHOP_IS_BUSY", object.obj_id])
            return False

        # check foreman availability (but not if using "Instant" which will set take_resources false)
        if take_resources and catdata.get('foreman', False) and session.player.foreman_is_busy():
            if retmsg is not None: retmsg.append(["ERROR", "FOREMAN_IS_BUSY"])
            return False

        # check predicates
        if check_predicates:
            for PRED in ('show_if', 'activation','requires'):
                if PRED in recipe:
                    req = Predicates.read_predicate(GameObjectSpec.get_leveled_quantity(recipe[PRED], arg.recipe_level))
                    if (not player.is_cheater) and (not req.is_satisfied2(session, player, None)):
                        if retmsg is not None: retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", recipe[PRED]])
                        return False

        # check resource cost
        if take_resources and ('cost' in recipe):
            for res, amount_list in GameObjectSpec.get_leveled_quantity(recipe['cost'], arg.recipe_level).iteritems():
                amount = GameObjectSpec.get_leveled_quantity(amount_list, arg.recipe_level)
                if (not player.is_cheater) and (getattr(player.resources, res) < amount):
                    if retmsg is not None: retmsg.append(["ERROR", "INSUFFICIENT_"+res.upper(), amount])
                    return False

        # check inventory slot availability
#        if gamedata['crafting_delivery_method'] == 'reserve_slot_on_start':
#            # check for space
#            slots_needed = LootTable.max_slots_needed(gamedata['loot_tables'], recipe['product'])
#            snap = player.resources.calc_snapshot()
#            if snap.max_usable_inventory() - snap.cur_inventory() < slots_needed:
#                if retmsg is not None: retmsg.append(["ERROR", "INVENTORY_LIMIT"])
#                return

        # check for ingredient items (note: no recipe_level dependence)
        if take_ingredients and ('ingredients' in recipe):
            # have to pre-sum by specname in case there are multiple entries in the array with the same specname
            by_specname_and_level = {}
            ingr_list = GameObjectSpec.get_crafting_recipe_ingredients_list(recipe, arg.recipe_level)
            for entry in ingr_list:
                key = (entry['spec'], entry.get('level',None))
                by_specname_and_level[key] = by_specname_and_level.get(key,0) + entry.get('stack',1)
            for specname_level, qty in by_specname_and_level.iteritems():
                specname, level = specname_level
                if player.inventory_item_quantity(specname, level = level) < qty:
                    if retmsg is not None: retmsg.append(["ERROR", "CRAFT_INGREDIENT_MISSING", {'spec':specname, 'level':level}, qty])
                    return False

        # check for queue usage exclusivity and collection buffer
        if object.is_crafting():
            uncollected = 0
            for bus in object.crafting.queue:

                # exclusivity constraint - cannot start this craft if a recipe belonging to a different category is in the queue
                if catdata.get('exclusive',False):
                    if gamedata['crafting']['recipes'][bus.craft_state['recipe']]['crafting_category'] != recipe['crafting_category']:
                        if retmsg is not None: retmsg.append(["ERROR", "WORKSHOP_IS_BUSY", object.obj_id])
                        return False

                # queueability constraint - if crafting is still in progress, and new recipe is not queuable, then we cannot start it
                if not bus.is_complete(server_time):
                    if not catdata.get('queueable', True):
                        if retmsg is not None: retmsg.append(["ERROR", "WORKSHOP_IS_BUSY", object.obj_id])
                        return False

                # keep track of queue length
                uncollected += 1

            # if crafting buffer space is already full, cannot start a new job
            space = object.get_leveled_quantity(object.spec.crafting_queue_space)
            if (space >= 0) and (uncollected >= space):
                if retmsg is not None: retmsg.append(["ERROR", "WORKSHOP_IS_BUSY", object.obj_id])
                return False

        return True

    def do_craft(self, session, player, retmsg, object, arg,
                 check_predicates = True, take_resources = True, take_ingredients = True, take_time = True):

        if not self.can_craft(session, player, object, arg, retmsg = retmsg,
                              check_predicates = check_predicates, take_resources = take_resources, take_ingredients = take_ingredients):
            return

        # target object for delivery
        if arg.delivery_address and ('obj_id' in arg.delivery_address) and session.has_object(arg.delivery_address['obj_id']):
            target = session.get_object(arg.delivery_address['obj_id'])
        else:
            target = None

        recipe = gamedata['crafting']['recipes'][arg.recipe_name]
        catdata = gamedata['crafting']['categories'][recipe['crafting_category']]
        delivery = recipe.get('delivery', catdata.get('delivery', None))

        # subtract resources
        if take_resources and recipe.get('cost'):
            cost = dict((res,GameObjectSpec.get_leveled_quantity(amount, arg.recipe_level)) for res, amount in GameObjectSpec.get_leveled_quantity(recipe['cost'], arg.recipe_level).iteritems())
            negative_cost = dict((res,-cost[res]) for res in cost)
            player.resources.gain_res(negative_cost, reason='crafting')
            admin_stats.econ_flow_res(player, recipe.get('econ_category','crafting'), 'crafting', negative_cost)
        else:
            cost = {}

        # subtract ingredients (note: no recipe_level dependence)
        if take_ingredients and ('ingredients' in recipe):
            ingr_list = GameObjectSpec.get_crafting_recipe_ingredients_list(recipe, arg.recipe_level)
            for entry in ingr_list:
                player.inventory_remove_by_type(entry['spec'], entry.get('stack',1), '5130_item_activated', level = entry.get('level',None), reason='crafting')
            if player is session.player:
                session.player.send_inventory_update(retmsg)

        if take_time:
            # reduce craft time by structure speed bonus
            speed = object.get_stat('crafting_speed', object.get_leveled_quantity(object.spec.crafting_speed))
            craft_time = max(1, int(GameObjectSpec.get_leveled_quantity(recipe['craft_time'], arg.recipe_level) / speed))
        else:
            craft_time = -1

        # start crafting
        if not object.crafting:
            object.crafting = Business.QueuedBusiness(Business.CraftingBusiness)

        state = {'recipe':recipe['name'], 'cost':cost, 'attempt_id': generate_mail_id()}
        if arg.recipe_level: state['level'] = arg.recipe_level
        if take_ingredients and ('ingredients' in recipe): state['ingredients'] = copy.deepcopy(ingr_list)
        if arg.delivery_address: state['delivery'] = arg.delivery_address
        if arg.ui_tag: state['ui_tag'] = arg.ui_tag
        delay = 0
        for entry in object.crafting.queue:
            d = entry.total_time - entry.done_time
            if entry.start_time > 0:
                d -= min(max(server_time - entry.start_time, 0), entry.total_time)
            delay += d
        object.crafting.queue.append(Business.CraftingBusiness(state, init_total_time = craft_time, init_start_time = server_time + max(0, delay)))

        if recipe['crafting_category'] == 'fishing':
            player.fishing_log_event('5150_fish_start', object.crafting.queue[0], ui_index = arg.ui_index, time_left = craft_time)

        # destroy currently-equipped item in target slot
        if arg.do_replace and delivery == 'building_slot' and target.equipment and \
           Equipment.equip_has(target.equipment, (arg.delivery_address['slot_type'],arg.delivery_address.get('slot_index',0))):
            removed = Equipment.equip_remove(target.equipment, (arg.delivery_address['slot_type'],arg.delivery_address.get('slot_index',0)))
            if len(target.equipment) < 1:
                target.equipment = None
            assert removed
            player.inventory_log_event('5131_item_trashed', removed['spec'], -removed.get('stack',1), removed.get('expire_time',-1), level=removed.get('level',None), reason='replaced')
            if target is not object:
                retmsg.append(["OBJECT_STATE_UPDATE2", target.serialize_state()])
            player.recalc_stattab(player)
            player.stattab.send_update(session, retmsg)

        if 'on_start' in recipe:
            session.execute_consequent_safe(GameObjectSpec.get_leveled_quantity(recipe['on_start'], arg.recipe_level),
                                            player, retmsg, reason='crafting_recipe:%s:on_start' % recipe['name'])

        retmsg.append(["OBJECT_STATE_UPDATE2", object.serialize_state()])
        if player is session.player:
            retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

        session.power_changed(session.viewing_base, object, retmsg)
        return True

    def do_cancel_craft(self, session, retmsg, object, spellarg):
        if not object.is_crafting(): return

        # find the queue entry
        bus = None
        if 'ui_tag' in spellarg:
            for entry in object.crafting.queue:
                if entry.craft_state.get('ui_tag', None) == spellarg['ui_tag']:
                    bus = entry; break
        elif 'attempt_id' in spellarg:
            for entry in object.crafting.queue:
                if entry.craft_state.get('attempt_id', None) == spellarg['attempt_id']:
                    bus = entry; break;
        else:
            assert 'index' in spellarg
            if spellarg['index'] < len(object.crafting.queue):
                bus = object.crafting.queue[spellarg['index']]

        if (not bus) or spellarg['recipe'] != bus.craft_state['recipe']: # sanity check
            retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
            return

        recipe = gamedata['crafting']['recipes'].get(bus.craft_state['recipe'],None)
        time_left = object.crafting.finish_time() - server_time

        if recipe and (not gamedata['crafting']['categories'][recipe['crafting_category']].get('cancelable', True)):
            retmsg.append(["ERROR", "SERVER_PROTOCOL"]) # cannot be canceled
            return

        object.crafting.queue.remove(bus)
        if len(object.crafting.queue) < 1:
            object.crafting = None
        else:
            # update times on other queued items
            object.halt_crafting(True)
            object.update_crafting(-1)

        # figure out how many resources to return to player
        if recipe:
            cost = bus.craft_state.get('cost',{})
            refund = dict((res, int(gamedata['manufacture_cancel_refund']*cost.get(res,0))) for res in gamedata['resources'])
            refund = session.player.resources.gain_res(refund, reason='canceled_crafting')
            admin_stats.econ_flow_res(session.player, recipe.get('econ_category','crafting') if recipe else 'crafting', 'crafting', refund)

            refund_ingredients = gamedata['crafting']['categories'][recipe['crafting_category']].get('refund_ingredients', False)
            if refund_ingredients:
                ingr_list = bus.craft_state.get('ingredients',[])
                if ingr_list:
                    session.player.loot_buffer += ingr_list
                    for item in ingr_list:
                        session.player.inventory_log_event('5125_item_obtained', item['spec'], item.get('stack',1), item.get('expire_time',-1), level = item.get('level',None), reason='refund')
                    #session.give_loot(session.player, retmsg, ingr_list, 'refund', reason_id = recipe['name'])
                    session.player.send_inventory_update(retmsg)
                    retmsg.append(["LOOT_BUFFER_UPDATE", session.player.loot_buffer, True])

            if 'on_cancel' in recipe:
                session.execute_consequent_safe(recipe['on_cancel'], session.player, retmsg, reason='crafting_recipe:%s:on_cancel' % recipe['name'])

        retmsg.append(["OBJECT_STATE_UPDATE", object.serialize_state(), session.player.resources.calc_snapshot().serialize()])

        if recipe['crafting_category'] == 'fishing':
            session.player.fishing_log_event('5152_fish_cancel', bus, time_left = time_left)

        session.power_changed(session.viewing_base, object, retmsg)

    # collect product(s) for one crafting attempt.
    # returns [need_history_update, list_of_product_items, attempt_id for completed attempt]
    def do_collect_craft_one(self, session, retmsg, object, attempt_id):
        looted = []
        # find the queue entry
        bus = None
        if object.is_crafting() and object.crafting.queue:
            if attempt_id:
                bus_list = filter(lambda x: x.craft_state.get('attempt_id',None) == attempt_id, object.crafting.queue)
                if bus_list:
                    bus = bus_list[0]
            else:
                bus = object.crafting.queue[0]

        if (not bus) or (not bus.is_complete(server_time)): # attempt not found or not complete yet
            retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
            return False, looted, None

        object.crafting.queue.remove(bus)
        if len(object.crafting.queue) < 1:
            object.crafting = None

        recipe = gamedata['crafting']['recipes'].get(bus.craft_state['recipe'],None)
        if recipe:
            if bus.creation_time > 0:
                # approximate time at which results were "produced"
                # XXX this doesn't account for stoppage due to building damage - that will probably require another state variable in Business!
                ref_time = bus.creation_time + bus.total_time
            else:
                ref_time = session.player.get_absolute_time()
            prod_list = GameObjectSpec.get_crafting_recipe_product_list(recipe, bus.craft_state.get('level', 1))
            loot = session.get_loot_items(session.player, prod_list, -1, -1, duration_ref_time = ref_time)
            delivery_method = recipe.get('delivery', gamedata['crafting']['categories'][recipe['crafting_category']].get('delivery', None))

            for item in loot:
                session.increment_player_metric('item:'+item['spec']+':crafted', item.get('stack',1), time_series = False)

            if delivery_method == 'building_slot':
                assert len(loot) == 1
                item = loot[0]
                try:
                    delivery_address = bus.craft_state['delivery']
                    assert self.do_equip_building(session, retmsg, [None, delivery_address['obj_id'], (delivery_address['slot_type'],delivery_address.get('slot_index',0)), -1,
                                                                    item, # XXX do we need to copy this? copy.deepcopy(item)
                                                                    None, None],
                                                  force = True)
                    looted += loot
                    session.player.inventory_log_event('5125_item_obtained', item['spec'], item.get('stack',1), item.get('expire_time',-1), level = item.get('level',None), reason='crafted')
                except:
                    gamesite.exception_log.event(server_time, 'player %d crafting delivery %s target not found, discarding. %s' % \
                                                 (object.owner.user_id, repr(bus.craft_state), traceback.format_exc().strip())) # OK
            else:

                # returned "looted" list does include fungible items
                looted += loot

                # "direct deposit" fungible loot
                for item in loot:
                    is_fungible = False
                    spec = gamedata['items'].get(item['spec'], None)
                    if spec and spec.get('fungible',False):
                        if spec['resource'] == 'gamebucks':
                            session.player.resources.gain_gamebucks(item.get('stack',1), reason='crafting')
                            is_fungible = True
                        elif spec['resource'] in gamedata['resources']:
                            gained_res = session.player.resources.gain_res({spec['resource']: item.get('stack',1)}, reason='crafting')
                            admin_stats.econ_flow_res(session.player, 'crafting', 'fungible', gained_res)
                            # note: overflow is thrown away!
                            is_fungible = True
                    if is_fungible:
                        pass # already given, do NOT put in loot_buffer
                    else:
                        session.player.loot_buffer += loot
                        session.player.inventory_log_event('5125_item_obtained', item['spec'], item.get('stack',1), item.get('expire_time',-1), level = item.get('level',None), reason='crafted')

            if 'completion' in recipe:
                session.execute_consequent_safe(recipe['completion'], session.player, retmsg, reason='crafting_recipe:%s:completion' % recipe['name'])

            if recipe['crafting_category'] == 'fishing':
                session.player.fishing_log_event('5153_fish_collect', bus, loot = copy.deepcopy(loot))

        return True, looted, bus.craft_state.get('attempt_id', None)

    # collect a list of crafting attempts, or all completed attempts if attempt_id_list is None
    def do_collect_craft(self, session, retmsg, object, attempt_id_list = None):
        if not object.is_crafting():
            retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
            return

        looted = []
        completed_ids = []
        need_history_update = False

        if attempt_id_list is None:
            # create a list that will collect all completed attempts
            attempt_id_list = []
            for bus in object.crafting.queue:
                if bus.is_complete(server_time):
                    # None works here for ID-less entries because do_collect_craft_one() will assume you mean the first entry in the queue
                    attempt_id_list.append(bus.craft_state.get('attempt_id', None))

        for attempt_id in attempt_id_list:
            hist, loot, id = self.do_collect_craft_one(session, retmsg, object, attempt_id)
            need_history_update |= hist
            looted += loot
            if id: completed_ids.append(id)

        #session.player.send_inventory_update(retmsg)
        if session.has_object(object.obj_id):
            retmsg.append(["CRAFT_COMPLETE", object.obj_id, looted if looted else None, completed_ids])
        if looted:
            retmsg.append(["LOOT_BUFFER_UPDATE", session.player.loot_buffer, True])
        if completed_ids:
            retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

        session.power_changed(session.viewing_base, object, retmsg)

        if need_history_update and (object.owner is session.player):
            session.player.send_history_update(retmsg)

    def do_create_inert(self, session, retmsg, spellargs):
        # XXX to make inerts work in remote bases, need to prune them
        if session.viewing_base is not session.viewing_player.my_home: return

        base = session.viewing_base
        inert_type = spellargs[0]
        j = int(spellargs[1][0]); i = int(spellargs[1][1])
        metadata = spellargs[2]
        spec = GameObjectSpec.lookup(inert_type)
        assert spec.kind == 'inert'
        assert spec.client_can_create
        if metadata is not None:
            assert type(metadata) == dict

        if not session.has_attacked:
            if gamedata['server'].get('log_combat_race_conditions', False):
                gamesite.exception_log.event(server_time, 'player %d at %s: race condition in do_create_inert()' % (session.player.user_id,
                                                                                                                    session.viewing_base.base_id))
            return

        # limit # of client-creatable inert objects in base
        oldest = None
        current = 0
        for obj in base.iter_objects():
            if obj.is_inert() and obj.spec.client_can_create:
                current += 1
                if not oldest:
                    oldest = obj

        # remove oldest inert object
        if current >= gamedata['inert_limit'] and oldest:
            if session.has_object(oldest):
                retmsg.append(["OBJECT_REMOVED2", oldest.obj_id])
                session.rem_object(oldest)
            base.drop_object(oldest)

        newobj = instantiate_object_for_player(session.player, EnvironmentOwner, inert_type, x=j, y=i, metadata = metadata)

        base.adopt_object(newobj)
        session.add_object(newobj)

        retmsg.append(["OBJECT_CREATED2", newobj.serialize_state()])


    def do_build(self, session, retmsg, spellargs, is_instant):
        building_type = spellargs[0]
        j, i = spellargs[1]

        if (not is_instant) and session.player.foreman_is_busy():
            retmsg.append(["ERROR", "FOREMAN_IS_BUSY"])
            return

        spec = session.player.get_abtest_spec(GameObjectSpec, building_type)
        if spec.kind == 'inert':
            if (not session.player.is_cheater):
                retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                return
            is_instant = True # all inert builds are instant
        else:
            assert spec.kind == 'building'

        if spec.developer_only and (spin_secure_mode or (not session.player.is_developer())):
            retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
            return

        if session.viewing_base is not session.player.my_home:
            if session.viewing_base.is_nosql_base() and spec.quarry_buildable and session.viewing_base.base_landlord_id == session.player.user_id:
                pass # OK to build remotely
            else:
                retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                return

        if not session.viewing_base.is_building_location_valid([j,i], spec, None, ignore_collision = session.player.is_cheater,
                                                               ignore_perimeter = spec.ignore_perimeter or session.player.is_cheater):
            retmsg.append(["ERROR", "INVALID_BUILDING_LOCATION"])
            return

        fail = False

        # check if requirements are satisfied
        for reqname, reqlist in (('show_if', spec.show_if), ('requires', spec.requires)):
            if reqlist:
                req = GameObjectSpec.get_leveled_quantity(reqlist, 1)
                if (not session.player.is_cheater) and (not req.is_satisfied(session.player, None)):
                    fail = True
                    retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED",
                                   gamedata['buildings'][building_type][reqname]])
                    break

        cost = {}
        for res in gamedata['resources']:
            cost[res] = GameObjectSpec.get_leveled_quantity(getattr(spec, 'build_cost_'+res), 1)
            if (not is_instant) and (not session.player.is_cheater) and (getattr(session.player.resources,res) < cost[res]):
                fail = True
                retmsg.append(["ERROR", "INSUFFICIENT_"+res.upper(), cost[res]])

        # check power constraint, unless building requires zero power (e.g. it's a power plant)
        consumes_power = GameObjectSpec.get_leveled_quantity(spec.consumes_power_while_building, 1)
        power_state = session.viewing_base.get_power_state()
        if gamedata['enable_power'] and (not is_instant) and (GameObjectSpec.get_leveled_quantity(spec.consumes_power, 1) > 0) and \
           (power_state[1] + consumes_power) > power_state[0]:
            fail = True
            retmsg.append(["ERROR", "POWER_LIMIT"])

        if fail:
            return

        # check quantity constraint
        if (not session.player.is_cheater):
            # how many does the player already have?
            current = 0
            for obj in session.viewing_base.iter_objects():
                if obj.spec.name == spec.name:
                    current += 1

            # check townhall-level-based quantity constraint
            limit = GameObjectSpec.get_leveled_quantity(spec.limit, max(1, session.player.get_townhall_level()))
            if spec.limit_requires:
                limit = min(limit, len(spec.limit_requires))

            if (limit >= 0) and (current >= limit):
                retmsg.append(["ERROR", "BUILDING_LIMIT_EXCEEDED", limit])
                return

            # check predicate quantity constraint
            if spec.limit_requires:
                pred = spec.limit_requires[current]
                if not Predicates.read_predicate(pred).is_satisfied(session.player, None):
                    retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", pred])
                    return

        if (not is_instant):
            if (not session.player.is_cheater):
                negative_cost = dict((res,-cost[res]) for res in cost)
                session.player.resources.gain_res(negative_cost, reason='building_construction')
                admin_stats.econ_flow_res(session.player, 'investment', 'buildings', negative_cost, spec = building_type, level = 1)
            build_time = GameObjectSpec.get_leveled_quantity(spec.build_time, 1)
            if build_time > 0:
                build_time = int(build_time / session.player.stattab.get_player_stat('foreman_speed'))
        else:
            build_time = -1

        if build_time < 1:
            # special case for instant finish
            if spec.kind == 'inert':
                finish_time = -1
            else:
                finish_time = server_time + 1
        else:
            finish_time = server_time + build_time

        newobj = instantiate_object_for_player(session.player, EnvironmentOwner if spec.kind == 'inert' else session.player,
                                               building_type, x=j, y=i, build_finish_time=finish_time)

        if build_time < 1 and spec.kind != 'inert':
            newobj.build_done_time = 999 # special case for instant finish, necessary to make ping_object() do the right thing

        session.viewing_base.adopt_object(newobj) # this does the nosql write
        session.add_object(newobj)

        if spec.kind != 'inert':
            newobj.update_production(session.player, session.viewing_base.base_type, session.viewing_base.base_region, compute_power_factor(power_state))

        retmsg.append(["OBJECT_CREATED2", newobj.serialize_state()])
        retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

        # re-evaluate power situation
        session.power_changed(session.viewing_base, newobj, retmsg)

        if build_time < 1 and spec.kind != 'inert':
            self.ping_object(session, retmsg, newobj.obj_id, session.viewing_base)

        session.activity_classifier.built_or_upgraded_building()

    def do_move_building(self, session, retmsg, object, spellargs):
        j, i = spellargs[0]

        if (not object.is_building()) and (not session.player.is_cheater):
            retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
            retmsg.append(["OBJECT_STATE_UPDATE2", object.serialize_state()])
            return

        if object.is_building() and (object.is_repairing() or object.is_under_construction() or object.is_upgrading()):
            retmsg.append(["ERROR", "CANNOT_MOVE_BUILDING_WHILE_BUSY"])
            return

        if not session.viewing_base.is_building_location_valid([j,i], object.spec, object, ignore_collision = session.player.is_cheater,
                                                               ignore_perimeter = object.spec.ignore_perimeter or session.player.is_cheater):
            retmsg.append(["ERROR", "INVALID_BUILDING_LOCATION"])
            retmsg.append(["OBJECT_STATE_UPDATE2", object.serialize_state()])
            return

        # in quarry, object can be moved in quarry, object is player's, and player owns the quarry?
        if session.viewing_base.is_nosql_base() and object.spec.quarry_movable and (object.owner is session.player) and session.viewing_base.base_landlord_id == session.player.user_id:
            # do not allow quarry turrets to be moved in airborne quarries
            if (not session.player.is_cheater) and session.viewing_base.base_climate:
                data = gamedata['climates'][session.viewing_base.base_climate]
                if data.get('exclude_ground_units',False):
                    retmsg.append(["ERROR", "INVALID_BUILDING_LOCATION"])
                    return
            pass # OK
        elif session.has_attacked:
            retmsg.append(["ERROR", "CANNOT_CAST_SPELL_IN_COMBAT"])
            return
        elif (object in session.player.home_base_iter()):
            pass # OK
        else:
            retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
            return

        object.x = j
        object.y = i

        retmsg.append(["OBJECT_STATE_UPDATE2", object.serialize_state()])
        session.viewing_base.nosql_write_one(object, 'MOVE_BUILDING', fields = ['xy'])

    def do_make_droids(self, session, retmsg, object, spellargs):
        spec_name = spellargs[0]
        spec = session.player.get_abtest_spec(GameObjectSpec, spec_name)
        assert spec.kind == 'mobile'

        if not object.is_manufacturer():
            return

        if object.is_damaged() or object.is_repairing():
            retmsg.append(["ERROR", "FACTORY_DAMAGED"])
            return

        if object.is_upgrading():
            retmsg.append(["ERROR", "FACTORY_IS_UPGRADING"])
            return

        if spec.developer_only and (spin_secure_mode or (not session.player.is_developer())):
            retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
            return

        # figure out the level of the unit to be built
        if spec.level_determined_by_tech:
            tech_name = spec.level_determined_by_tech
            if (not session.player.tech.has_key(tech_name)):
                # player is missing prerequisite tech
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", tech_name])
                return
            level = session.player.tech[tech_name]
        else:
            level = 1

        assert level >= 1

        if spec.manufacture_category != object.spec.manufacture_category:
            retmsg.append(["ERROR", "OBJECT_IS_NOT_CAPABLE"])
            return
        if object.level < GameObjectSpec.get_leveled_quantity(spec.requires_factory_level, level):
            retmsg.append(["ERROR", "FACTORY_LEVEL_TOO_LOW"])
            return

        # if tech research exceeds max unit level, cap it there
        if level > spec.maxlevel:
            level = spec.maxlevel

        # check if requirements are satisfied
        if spec.requires:
            req = GameObjectSpec.get_leveled_quantity(spec.requires, 1)
            if (not session.player.is_cheater) and (not req.is_satisfied(session.player, None)):
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED",
                               gamedata['units'][spec_name]['requires']])
                return
        for pname, ppred in (('activation', spec.activation), ('show_if', spec.show_if)):
            if ppred:
                if not ppred.is_satisfied(session.player, None):
                    retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", gamedata['units'][spec_name][pname]])
                    return

        if object.is_damaged():
            retmsg.append(["ERROR", "FACTORY_DAMAGED"]); return
        if object.is_under_construction():
            retmsg.append(["ERROR", "FACTORY_UNDER_CONSTRUCTION"]); return

        cost = spec.cost_to_repair(level, 0, session.player, cost_mode = spec.COST_MODE_MANUFACTURE, builder = object)
        for res in gamedata['resources']:
            if (not session.player.is_cheater) and (getattr(session.player.resources,res) < cost[res]):
                retmsg.append(["ERROR", "INSUFFICIENT_"+res.upper(), cost[res]])
                return

        build_time = cost['time']

        space = GameObjectSpec.get_leveled_quantity(spec.consumes_space, level)

        # apply unit capacity constraint
        if (not session.player.is_cheater):
            if spec.limit >= 0:
                if session.player.get_army_unit_count_by_specname().get(spec.name, 0) + 1 > spec.limit:
                    retmsg.append(["ERROR", "UNIT_COUNT_LIMIT"])
                    return

            cur = session.player.get_army_space_usage_by_squad()
            if (cur['ALL'] + space > session.player.stattab.total_space):
                retmsg.append(["ERROR", "UNIT_SPACE_LIMIT"])
                return

            if (not session.player.squads_enabled()) or (not gamedata['produce_to_reserves']):
                if (cur[str(SQUAD_IDS.BASE_DEFENDERS)] + space > session.player.stattab.main_squad_space):
                    retmsg.append(["ERROR", "UNIT_SPACE_LIMIT"])
                    return

        # queue it up
        negative_cost = dict((res,-cost[res]) for res in cost if res != 'time')
        session.player.resources.gain_res(negative_cost, reason='unit_production')
        admin_stats.econ_flow_res(session.player, 'consumption', 'unit_manufacture', negative_cost)

        # note: structure speed bonus has already been applied via unit stat

        if len(object.manuf_queue) < 1:
            object.manuf_start_time = server_time
            object.manuf_done_time = 0

        object.manuf_queue.append({'spec_name': spec_name, 'level': level, 'total_time': build_time, 'cost': dict((res,cost[res]) for res in cost if res != 'time')})
        session.deferred_object_state_updates.add(object)
        session.deferred_player_state_update = True
        session.activity_classifier.manufactured_unit()

    def do_cancel_make_droids(self, session, retmsg, object, spellargs):
        queue_index = spellargs[0]
        # the client also sends the type of unit it thinks it's
        # cancelling, in order to avoid a race condition where a unit
        # gets finished while the message is in flight
        spec_name = spellargs[1]
        if not object.is_manufacturer():
            return
        if (queue_index < 0) or (queue_index >= len(object.manuf_queue)):
            retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
            return
        item = object.manuf_queue[queue_index]
        if item['spec_name'] != spec_name:
            retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
            return
        spec = session.player.get_abtest_spec(GameObjectSpec, spec_name)
        level = item['level']

        # how much resources and time was this construction going to take?
        if 'cost' in item:
            refund = dict((res, int(gamedata['manufacture_cancel_refund']*amount)) for res, amount in item['cost'].iteritems())
        else:
            refund = spec.cost_to_repair(level, 0, session.player, cost_mode = spec.COST_MODE_MANUFACTURE_CANCEL, builder = object)
            refund = dict((res, amount) for res, amount in refund.iteritems() if res != 'time') # filter out time

        # delete the item from the queue
        object.manuf_queue.pop(queue_index)

        if len(object.manuf_queue) < 1:
            object.manuf_start_time = -1
            object.manuf_done_time = -1

        # return resources to the player
        refund = session.player.resources.gain_res(refund, reason='canceled_production')
        admin_stats.econ_flow_res(session.player, 'consumption', 'unit_manufacture', refund)

        # save state
        retmsg.append(["OBJECT_STATE_UPDATE", object.serialize_state(), session.player.resources.calc_snapshot().serialize()])

    def do_ping_manufacturing(self, session, retmsg, base, object):
        assert object.owner is session.player # only handle for self now
        did_a_manufacture = False

        prog = object.manuf_done_time
        if object.manuf_start_time >= 0:
            prog += (server_time - object.manuf_start_time)

        if (len(object.manuf_queue)) > 0 and (prog >= object.manuf_queue[0]['total_time']):
            # manufacture is complete
            did_a_manufacture = True

            # keep track of added objects so we can send a UNIT_MANUFACTURED message to the client
            new_object_ids = []

            # expensive query, so only do it once
            space_usage = session.player.get_army_space_usage_by_squad(exclude_manuf_queue = object)

            # grab items off the manufacturing queue in FIFO order
            while len(object.manuf_queue) > 0:
                if object.manuf_queue[0]['total_time'] > prog:
                    break
                item = object.manuf_queue.pop(0)

                prog -= item['total_time']

                # knock off completed time from done_time
                # this can make done_time go negative!
                object.manuf_done_time -= item['total_time']

                spec = session.player.get_abtest_spec(GameObjectSpec, item['spec_name'])
                space = GameObjectSpec.get_leveled_quantity(spec.consumes_space, item.get('level',1))

                if spec.limit >= 0 and (not session.player.is_cheater):
                    # this is an expensive database query, but we don't expect many units to have this restriction
                    if session.player.get_army_unit_count_by_specname().get(spec.name, 0) + 1 > spec.limit:
                        gamesite.exception_log.event(server_time, 'player %d not allowed to finish unit of spec %s due to count limit' % (session.player.user_id, spec.name))
                        continue # drop the unit

                destination_squad = SQUAD_IDS.BASE_DEFENDERS

                if (not session.player.is_cheater):
                    if space_usage['ALL']+space > session.player.stattab.total_space:
                        # only alert if trim_unit_space_if is enabled
                        if Predicates.read_predicate(gamedata['server']['trim_unit_space_if']).is_satisfied(session.player, None):
                            gamesite.exception_log.event(server_time, 'player %d (CC%d) produced into oversize army! (new %d limit %d army %s)' % (session.player.user_id, session.player.get_townhall_level(), space, session.player.stattab.total_space, repr(space_usage)))

                    if space_usage[str(SQUAD_IDS.BASE_DEFENDERS)] + space > session.player.stattab.main_squad_space:
                        if session.player.squads_enabled() and gamedata['produce_to_reserves']:
                            # overflow production to reserves
                            destination_squad = SQUAD_IDS.RESERVES
                        else:
                            # only alert if trim_unit_space_if is enabled
                            if Predicates.read_predicate(gamedata['server']['trim_unit_space_if']).is_satisfied(session.player, None):
                                gamesite.exception_log.event(server_time, 'player %d (CC%d) produced into oversize base defenders! (new %d limit %d army %s)' % (session.player.user_id, session.player.get_townhall_level(), space, session.player.stattab.main_squad_space, repr(space_usage)))

                session.increment_player_metric('units_manufactured', 1, bucket = True, time_series = False)
                session.increment_player_metric('unit:'+spec.name+':manufactured', 1, bucket = True, time_series = False)
                if spec.manufacture_category:
                    session.increment_player_metric(spec.manufacture_category+'_manufactured', 1, bucket = True, time_series = False)
                session.deferred_history_update = True

                newobj = instantiate_object_for_player(session.player, object.owner, item['spec_name'], x=object.x+10, y=object.y+10, level=item.get('level',1))
                newobj.squad_id = destination_squad

                base.adopt_object(newobj)
                space_usage['ALL'] += space
                space_usage[str(destination_squad)] += space
                session.player.send_army_update_one(newobj, retmsg)

                new_object_ids.append(newobj.obj_id)

                if gamedata.get('enable_defending_units',True) and destination_squad == SQUAD_IDS.BASE_DEFENDERS and (session.viewing_base is object.owner.my_home):
                    session.add_object(newobj)
                    if session.damage_log: session.damage_log.init(newobj)
                    retmsg.append(["OBJECT_CREATED2", newobj.serialize_state()])
                    if newobj.auras:
                        retmsg.append(["OBJECT_AURAS_UPDATE", newobj.serialize_auras()])

                if destination_squad == SQUAD_IDS.RESERVES and object.owner is session.player:
                    retmsg.append(["MANUFACTURE_OVERFLOW_TO_RESERVES", newobj.obj_id])

            retmsg.append(["UNIT_MANUFACTURED", object.obj_id, new_object_ids])

            # stop at end of production line
            if len(object.manuf_queue) < 1:
                object.manuf_start_time = -1
                object.manuf_done_time = -1

        return did_a_manufacture

    def do_start_repairs(self, session, retmsg, base_id, repair_units = True):
        if base_id == session.player.my_home.base_id:
            base = session.player.my_home
            do_units = repair_units
            write_base = False
        elif base_id == session.viewing_base.base_id:
            assert session.viewing_base.base_landlord_id == session.player.user_id
            base = session.viewing_base
            do_units = False
            write_base = True
        else:
            raise Exception('base not in session: '+base_id)

        squad_to_repair = session.player.which_squad_is_under_repair() or SQUAD_IDS.BASE_DEFENDERS
        units_to_repair = [] # list units separately so we can sort them by time
        unit_repair_cost = dict([(res,0) for res in gamedata['resources']])
        units_to_remove = []

        if write_base and session.viewing_base_lock != base.lock_id():
            # not going to hold it for an extended period of time, so no need to broadcast
            if gamesite.nosql_client.map_feature_lock_acquire(base.base_region, base.base_id, session.player.user_id,
                                                                  generation=base.base_generation, do_hook=False, reason='do_start_repairs') \
                                                                  != Player.LockState.being_attacked: # generation=-1?
                retmsg.append(["ERROR", "CANNOT_LOCK_QUARRY", base.base_ui_name])
                return

        try:
            for object in base.iter_objects():
                if object.owner is not session.player: continue
                if object.is_building() and object.is_damaged():
                    if (not object.is_repairing()):
                        repair_time = object.time_to_repair(session.player)
                        object.repair_finish_time = server_time + repair_time
                        object.disarmed = True
                        if session.has_object(object.obj_id) and (retmsg is not None):
                            retmsg.append(["OBJECT_STATE_UPDATE2", object.serialize_state()])
                        if write_base:
                            base.nosql_write_one(object, 'do_start_repairs')
                    else: # check for completed repairs
                        if retmsg is not None: # but not on logout/non-interactive paths
                            if server_time >= object.repair_finish_time:
                                self.do_ping_object(session, retmsg, object, base)
                                if write_base:
                                    base.nosql_write_one(object, 'do_start_repairs')
                if object.is_mobile():
                    if object.is_temporary(): # get rid of temporary units
                        units_to_remove.append(object)
                    elif do_units and object.is_damaged() and session.player.can_repair_unit(object) and \
                       ((object.squad_id or 0) == squad_to_repair) and \
                       (not session.player.unit_repair_queued(object)):
                        units_to_repair.append(object)
                        my_cost = object.cost_to_repair(session.player)
                        for res in gamedata['resources']:
                            unit_repair_cost[res] += my_cost.get(res,0)

            for object in units_to_remove:
                base.drop_object(object)
                if session.has_object(object.obj_id):
                    if retmsg is not None: retmsg.append(["OBJECT_REMOVED2", object.obj_id])
                    session.rem_object(object.obj_id)
        finally:
            if write_base and session.viewing_base_lock != base.lock_id():
                gamesite.nosql_client.map_feature_lock_release(base.base_region, base.base_id, session.player.user_id, generation=base.base_generation, reason='do_start_repairs')

        if units_to_repair:
            assert retmsg is not None # units must be repaired interactively because they cost resources
            units_to_repair.sort(key = lambda obj: obj.time_to_repair(session.player))
            error = None

            if session.player.squads_enabled():
                # only start repairs if we can afford all of them
                for res in gamedata['resources']:
                    if (getattr(session.player.resources,res) < unit_repair_cost[res]):
                        error = ["INSUFFICIENT_RESOURCES_TO_REPAIR", unit_repair_cost.copy(), squad_to_repair]
                        units_to_repair = []
                        break

            for object in units_to_repair:
                this_error = self.do_unit_repair_queue(session, object.obj_id)
                if this_error:
                    if (not error):
                        error = this_error
                    elif error[0] == "INSUFFICIENT_RESOURCES_TO_REPAIR" and this_error[0] == error[0]:
                        # add up the amounts from all units
                        for res in gamedata['resources']:
                            error[1][res] = error[1].get(res,0) + this_error[1].get(res,0)

                # still continue past error though
            if error:
                retmsg.append(["ERROR"] + error)

        if do_units and (retmsg is not None):
            # just to be safe, update all repair queue and resource state on the client, to help against race conditions
            session.player.unit_repair_integrity_check()
            session.player.unit_repair_send(retmsg)
            retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

    def do_unit_repair_queue(self, session, id):
        if not session.home_base or session.has_attacked: return None
        obj = session.player.get_object_by_obj_id(id, fail_missing = False)
        if not obj: return ["HARMLESS_RACE_CONDITION"]
        assert obj.owner is session.player
        assert obj.is_mobile()
        if not obj.is_damaged(): return None
        if obj.is_temporary(): return None

        # see if it's already under repair
        for item in session.player.unit_repair_queue:
            if item['obj_id'] == obj.obj_id:
                return None

        if not session.player.can_repair_unit(obj):
            return ["REQUIREMENTS_NOT_SATISFIED", {'predicate':'TECH_LEVEL','tech':obj.spec.level_determined_by_tech,'min_level':1}]

        cost = obj.cost_to_repair(session.player)
        for res in gamedata['resources']:
            if getattr(session.player.resources, res) < cost.get(res,0):
                return ["INSUFFICIENT_RESOURCES_TO_REPAIR", cost.copy(), obj.squad_id or 0]

        negative_cost = dict((res,-cost[res]) for res in cost if res != 'time')
        session.player.resources.gain_res(negative_cost, reason = 'unit_repair')
        admin_stats.econ_flow_res(session.player, 'consumption', 'unit_repair', negative_cost)

        if len(session.player.unit_repair_queue) > 0:
            prev_finish_time = session.player.unit_repair_queue[-1]['finish_time']
        else:
            prev_finish_time = server_time
        item = {'obj_id':obj.obj_id, 'original_hp': obj.hp,
                'start_time': prev_finish_time, 'finish_time': prev_finish_time + max(cost['time'],1)}
        for res in gamedata['resources']:
            item[res] = cost.get(res,0)
        session.player.unit_repair_queue.append(item)
        return None

    def do_unit_repair_speedup_for_free(self, session, retmsg):
        return # not permitted, code kept for reference only
        if not session.home_base: return
        if len(session.player.unit_repair_queue) < 1: return
        time_left = session.player.unit_repair_queue[-1]['finish_time'] - server_time
        if time_left <= Store.get_free_speedup_time(session, session.player):
            for item in session.player.unit_repair_queue:
                item['finish_time'] = server_time - 1
            self.do_unit_repair_tick(session, retmsg)

    # check on progress of unit repair queue. send OBJECT_STATE_UPDATE for anything that
    # has gained hitpoints. Send new queue state only if the contents of the queue changed,
    # or if must_reply is true.
    def do_unit_repair_tick(self, session, retmsg, must_reply = False):
        if (not session.home_base) or session.has_attacked: return
        old_len = len(session.player.unit_repair_queue)
        affected = session.player.unit_repair_tick()
        if len(affected) > 0:
            for obj in affected:
                if session.has_object(obj.obj_id):
                    # use fake_xy = [-1,-1] to avoid updating the client-side object position
                    retmsg.append(["OBJECT_STATE_UPDATE2", obj.serialize_state(fake_xy = [-1,-1])])
                session.player.send_army_update_one(obj, retmsg)
        # only send the updated queue to the client if something was added or removed
        if must_reply or len(session.player.unit_repair_queue) != old_len:
            session.player.unit_repair_send(retmsg)

    def do_unit_repair_cancel(self, session, retmsg, id):
        if not gamedata['unit_repair_can_cancel']:
            retmsg.append(["ERROR", "SERVER_PROTOCOL"])
            return
        if not session.home_base or session.has_attacked: return
        obj = session.player.get_object_by_obj_id(id, fail_missing = False)
        if not obj: return
        assert obj.owner is session.player
        assert obj.is_mobile()

        session.player.unit_repair_cancel(obj)
        if session.has_object(obj.obj_id):
            retmsg.append(["OBJECT_STATE_UPDATE2", obj.serialize_state(fake_xy = [-1,-1])])
        session.player.unit_repair_send(retmsg)
        retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

    def do_unit_repair_cancel_all(self, session, retmsg):
        obj_id_list = [x['obj_id'] for x in session.player.unit_repair_queue]
        for obj_id in obj_id_list:
            obj = session.player.get_object_by_obj_id(obj_id, fail_missing = False)
            if obj:
                session.player.unit_repair_cancel(obj)
                if session.has_object(obj.obj_id):
                    retmsg.append(["OBJECT_STATE_UPDATE2", obj.serialize_state(fake_xy = [-1,-1])])

        if len(session.player.unit_repair_queue) > 0:
            gamesite.exception_log.event(server_time, 'do_unit_repair_cancel_all(): %d remaining queue %s' % \
                                         (session.player.user_id, repr(session.player.unit_repair_queue)))
            session.player.unit_repair_queue = []

        session.player.unit_repair_send(retmsg)
        retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

    def do_equip_building(self, session, retmsg, arg, force = False):
        dest_object_id = arg[1]
        dest_addr = arg[2]
        inventory_slot = arg[3]
        add_item = arg[4]
        remove_item = arg[5]
        #user_tag = arg[6]

        # verify object
        if (not session.has_object(dest_object_id)):
            retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
            return False

        obj = session.get_object(dest_object_id)
        if (not obj) or (obj.owner is not session.player) or (not obj.is_building()) or (obj not in session.player.home_base_iter()):
            retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
            return False
        if (not force) and (obj.is_damaged() or obj.is_busy()):
            retmsg.append(["ERROR", "CANNOT_EQUIP_BUILDING_WHILE_BUSY", dest_object_id])
            return False

        # prepare dict
        if obj.equipment is None: obj.equipment = {}
        ret = self.do_equip(session, retmsg, obj.spec, obj.level, obj.equipment, dest_addr, inventory_slot, add_item, remove_item, force = force)
        if len(obj.equipment) < 1: obj.equipment = None

        if ret:
            session.power_changed(session.viewing_base, obj, retmsg)
            session.player.recalc_stattab(session.player)
            session.player.stattab.send_update(session, retmsg)
            if obj.is_producer():
                obj.update_production(session.player, session.player.my_home.base_type, session.player.my_home.base_region, compute_power_factor(session.player.my_home.get_power_state()))

        retmsg.append(["OBJECT_STATE_UPDATE2", obj.serialize_state()])
        return ret

    def do_equip_unit(self, session, retmsg, arg):
        dest_spec_name = arg[1]
        dest_addr = arg[2]
        inventory_slot = arg[3]
        add_item = arg[4]
        remove_item = arg[5]
        #user_tag = arg[6]

        # verify spec
        dest_spec = session.player.get_abtest_spec(GameObjectSpec, dest_spec_name)
        if (not dest_spec) or (dest_spec.kind != 'mobile'):
            return False

        tech_name = dest_spec.level_determined_by_tech
        tech_level = session.player.tech.get(tech_name, 0)

        # prepare dict
        if dest_spec_name not in session.player.unit_equipment: session.player.unit_equipment[dest_spec_name] = {}
        ret = self.do_equip(session, retmsg, dest_spec, tech_level, session.player.unit_equipment[dest_spec_name], dest_addr, inventory_slot, add_item, remove_item)
        if len(session.player.unit_equipment[dest_spec_name]) < 1: del session.player.unit_equipment[dest_spec_name]

        if ret:
            session.player.recalc_stattab(session.player)
            session.player.stattab.send_update(session, retmsg)

        retmsg.append(["PLAYER_UNIT_EQUIP_UPDATE", session.player.unit_equipment])
        return ret

    # equip add/remove function that works on BOTH units and buildings, because it operates directly on the destination dictionary
    def do_equip(self, session, retmsg, obj_spec, obj_level, equipment, dest_addr, inventory_slot, add_item, remove_item, force = False):
        assert type(equipment) is dict

        add_specname = add_item['spec'] if add_item else None
        remove_specname = remove_item['spec'] if remove_item else None

        add_spec = gamedata['items'].get(add_specname, None) if add_specname else None
        remove_spec = gamedata['items'].get(remove_specname, None) if remove_specname else None

        # verify item to be added
        if add_specname:
            if force and inventory_slot < 0:
                # item is being generated from someplace other than inventory (e.g. crafting)
                pass
            else:
                # REPLACE passed add_item with whatever is in inventory
                source_item = session.player.inventory_verify_item(inventory_slot, add_specname, level = add_item.get('level',None)) # note: default level to None meaning "don't care" and not 1
                if not source_item: # race condition (or cheat attempt), item not found
                    retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
                    return False
                add_item = copy.deepcopy(source_item)
                if 'stack' in add_item: del add_item['stack'] # only take one

            if (add_item is None) or (add_spec is None):
                retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
                session.player.send_inventory_update(retmsg)
                return False

            if 'requires' in add_spec['equip'] and (not Predicates.read_predicate(add_spec['equip']['requires']).is_satisfied(session.player, None)):
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", add_spec['equip']['requires']])
                return False

            if (not session.player.is_cheater):
                # check unique_equipped constraint
                if ('unique_equipped' in add_spec) and ((not remove_spec) or (remove_spec.get('unique_equipped',None) != add_spec['unique_equipped'])):
                    for item in session.player.equipped_item_iter():
                        item_spec = gamedata['items'].get(item['spec'], None)
                        if item_spec and item_spec.get('unique_equipped',None) == add_spec['unique_equipped']:
                            # doubled
                            retmsg.append(["ERROR", "EQUIP_INVALID_UNIQUE", item['spec']])
                            return False

                # check limited_equipped constraint
                if ('limited_equipped' in add_spec) and ((not remove_spec) or (remove_spec.get('limited_equipped',None) != add_spec['limited_equipped'])):
                    if session.player.stattab.limited_equipped.get(add_spec['limited_equipped'],0) < \
                       add_item.get('stack',1) + session.player.count_limited_equipped_items(add_spec['limited_equipped']):
                        retmsg.append(["ERROR", "EQUIP_INVALID_LIMITED", add_spec['name']])
                        return False

            if not Equipment.equip_add(equipment, obj_spec, obj_level, dest_addr, add_item, add_spec, probe_only = True, probe_will_remove = bool(remove_specname)):
                retmsg.append(["ERROR", "EQUIP_INVALID"])
                return False

        # verify item to be removed
        if remove_specname:
            if not Equipment.equip_has(equipment, dest_addr, remove_specname, level = remove_item.get('level',None)): # note: default level to None meaning "don't care" and not 1
                retmsg.append(["ERROR", "EQUIP_INVALID"])
                return False
            if 'unequip_requires' in remove_spec['equip'] and (not Predicates.read_predicate(remove_spec['equip']['unequip_requires']).is_satisfied(session.player, None)):
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED",remove_spec['equip']['unequip_requires']])
                return False

        # check warehouse availability for pulling any item out or putting a non-fragile item back in
        if (not force) and (add_spec or (remove_spec and remove_spec.get('remove_fragility',0) < 1)) and \
           session.player.warehouse_is_busy():
            retmsg.append(["ERROR", "WAREHOUSE_IS_BUSY"])
            return False

        max_usable_inventory = session.player.resources.calc_snapshot().max_usable_inventory()

        # need extra warehouse space if removing an item without adding, or if adding from a stack greater than 1
        if remove_specname:
            if add_specname and (source_item.get('stack',1) <= add_item.get('stack',1)):
                # the add step is going to free up a space, so there is definitely room
                inventory_buffer = 1
            elif remove_spec and remove_spec.get('remove_fragility',0) >= 1:
                # the item is going to be destroyed upon removal, so no need to make space
                inventory_buffer = 1
            else:
                # the add step is NOT going to free up a space, need to check for room
                if not session.player.inventory_has_space_for(remove_item, max_usable_inventory):
                    retmsg.append(["ERROR", "INVENTORY_LIMIT"])
                    return False
                inventory_buffer = 0

        # now perform the operation atomically
        # any exceptions here mean item duping bugs!
        if remove_specname:
            # note: replace with actual removed item
            remove_item = Equipment.equip_remove(equipment, dest_addr, remove_specname, level = remove_item.get('level',None))
            if remove_spec and remove_spec.get('remove_fragility',0) >= 1:
                # item destroyed
                session.player.inventory_log_event('5131_item_trashed', remove_specname, -remove_item.get('stack',1), remove_item.get('expire_time',-1), level=remove_item.get('level',1), reason='removed')
            else:
                # note: pass inflated max_usable_inventory here as "buffer" space, since we checked for space above
                # in over-full warehouse situtations, we don't want this to fail, so pass -1 instead of the true slot count
                assert session.player.inventory_add_item(remove_item, -1 if inventory_buffer >= 1 else (max_usable_inventory + inventory_buffer)) == 1
                # no need to log - player already had item
            if 'on_unequip' in remove_spec['equip']:
                session.execute_consequent_safe(remove_spec['equip']['on_unequip'], session.player, retmsg, reason='on_unequip')

        if add_specname:
            if force and inventory_slot < 0:
                pass # out of thin air
            else:
                assert session.player.inventory_remove(source_item, add_item.get('stack',1), None) # do not log - player still has item
            assert Equipment.equip_add(equipment, obj_spec, obj_level, dest_addr, add_item, add_spec)
            if 'on_equip' in add_spec['equip']:
                session.execute_consequent_safe(add_spec['equip']['on_equip'], session.player, retmsg, reason='on_equip')

        if force and inventory_slot < 0:
            pass # out of thin air
        else:
            session.player.send_inventory_update(retmsg)
        return True

    def do_lottery_scan(self, session, retmsg, scanner, spellname, source):
        # how we are getting permission to scan
        assert source in ('cooldown', 'contents', 'paid', 'aura')
        spell = session.player.get_abtest_spell(spellname)
        success = True

        if session.player.lottery_is_busy(scanner):
            retmsg.append(["ERROR", "CANNOT_SCAN_BUILDING_BUSY"])
            success = False

        if not scanner.is_lottery_building():
            retmsg.append(["ERROR", "CANNOT_SCAN_NO_BUILDING"])
            success = False

        for PRED in ('show_if', 'requires'):
            if PRED in spell and (not Predicates.read_predicate(spell[PRED]).is_satisfied(session.player, None)):
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", spell[PRED]])
                success = False

        aura = None

        if source == 'cooldown':
            if session.player.cooldown_active('lottery_free'):
                retmsg.append(["ERROR", "CANNOT_SCAN_ON_COOLDOWN"])
                success = False
        elif source == 'contents':
            if scanner.contents < 1:
                retmsg.append(["ERROR", "CANNOT_SCAN_NO_CHARGES"])
                success = False
        elif source == 'aura':
            for a in session.player.player_auras:
                if a['spec'] == 'lottery_scans' and ('end_time' not in a or a['end_time'] > server_time):
                    aura = a; break
            if (not aura) or (aura.get('stack',1) < 1):
                retmsg.append(["ERROR", "CANNOT_SCAN_NO_CHARGES"])
                success = False

        # check for inventory space
        snapshot = session.player.resources.calc_snapshot()
        if snapshot.cur_inventory() + 1 > snapshot.max_usable_inventory():
            retmsg.append(["ERROR", "INVENTORY_LIMIT"])
            success = False

        if success:
            slate = session.player.get_lottery_slate(session)
            if session.player.lottery_slate_weights:
                weight_dict = session.player.lottery_slate_weights
            else:
                weight_dict = dict((slot_name, 1) for slot_name in slate)

            slot_names = sorted(slate.keys())
            weight_array = [weight_dict[slot_name] for slot_name in slot_names]
            which_slot = weighted_random_choice(slot_names, weight_array, random.random())

            loot = slate[which_slot]

            assert len(loot) == 1
            item = loot[0]
            stack_to_add = item.get('stack',1)
            spec = gamedata['items'].get(item['spec'])
            if spec and spec.get('fungible') and spec['resource'] == 'lottery_scans':
                session.deferred_player_auras_update = True

            assert session.player.inventory_add_item(item, snapshot.max_usable_inventory()) == stack_to_add

            # item gets mutated by add_item() - restore the original stack here
            item['stack'] = stack_to_add
            session.player.inventory_log_event('5125_item_obtained', item['spec'], stack_to_add, item.get('expire_time',-1), level=item.get('level',None), reason='lottery')
            metric_event_coded(session.user.user_id, '1631_lottery_scan_paid' if source == 'paid' else '1630_lottery_scan_free',
                               {'slot': which_slot, 'spec': item['spec'], 'level': item.get('level',None), 'stack': stack_to_add, 'method': source,
                                'inv_slots': {'total': snapshot.max_usable_inventory(), 'full': snapshot.cur_inventory()}})

            session.deferred_player_state_update = True
            session.player.send_inventory_update(retmsg)

            # note: free and charge scans reset the timer. Paid do not.
            if source != 'paid':
                session.player.cooldown_trigger('lottery_free', gamedata.get('lottery_free_interval', 86400))
                retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])

            # deduct resources
            if source == 'cooldown':
                pass
            elif source == 'contents':
                scanner.contents -= 1
                session.deferred_object_state_updates.add(scanner)
            elif source == 'aura':
                aura['stack'] = aura.get('stack',1) - 1
                if aura['stack'] <= 0: aura['end_time'] = server_time - 1
                session.player.prune_player_auras()
                session.deferred_player_auras_update = True

            session.player.reseed_lottery(session, force = True)
            session.increment_player_metric('lottery_scans', 1, time_series = False)
            session.increment_player_metric('lottery_scans_'+source, 1, time_series = False)

        else: # failure
            which_slot = -1
            loot = None

        retmsg.append(["LOTTERY_SCAN_RESULT", scanner.obj_id, which_slot, loot])

        return True

    def instant_attack(self, my_session, retmsg, spellargs):
        dest_user_id = spellargs[0]
        assert dest_user_id != my_session.user.user_id
        assert not my_session.visit_base_in_progress
        assert not my_session.complete_attack_in_progress
        their_session = get_session_by_user_id(dest_user_id)
        if not their_session:
            retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
            return defer.succeed(False)
        d = make_deferred('instant_attack')
        d.addCallback(lambda _: self.do_instant_attack(my_session, their_session, their_session.player.my_home))
        their_session.after_async_request(d)
        return d

    def do_instant_attack(self, my_session, their_session, base):
        ladder_state = None
        dest_feature = SessionChangeNew.query_dest_feature(my_session.player, base.base_id)
        if not dest_feature or dest_feature['base_landlord_id'] != their_session.player.user_id:
            my_session.send(["ERROR", "CANNOT_SPY_BASE_NOT_FOUND", base.base_id, 'do_instant_attack'])
            return
        deployable_squads = SessionChangeNew.query_deployable_squads(my_session.player, dest_feature)
        if len(deployable_squads) < 1:
            my_session.send(["ERROR", "CANNOT_SPY_NO_NEARBY_SQUADS"])
            return
        map_ok, map_violation_error = my_session.player.can_spy_on_home(my_session.user, their_session.player, their_session.user.social_id, ladder_state, deployable_squads)
        if not map_ok:
            my_session.send(["ERROR", map_violation_error])
            return
        pvp_balance = my_session.player.get_pvp_balance(their_session.player, base)
        attack_ok, attack_error = self.can_attack(my_session.player, their_session.player, base, pvp_balance, deployable_squads, ladder_state)
        if not attack_ok:
            my_session.send(["ERROR", attack_error])
            return

        self.init_attack(my_session, my_session.player, their_session.player, base, ladder_state)
        gamesite.exception_log.event(server_time, 'HERE! %r' % deployable_squads)
        my_session.deferred_history_update = True

    def can_attack(self, player, other_player, base, pvp_balance, deployable_squads, ladder_state):
        if server_time < player.get_repeat_attack_cooldown_expire_time(other_player.user_id, base.base_id):
            return (False, "CANNOT_ATTACK_REPEAT_ATTACK_COOLDOWN")

        if pvp_balance == 'same_alliance':
            return (False, "CANNOT_ATTACK_SAME_ALLIANCE")

        if base is not other_player.my_home:
            # quarry reinforcement or attack

            # check control limit before attacking unowned quarry
            if (other_player is not player) and (base.base_type == 'quarry') and \
               base.base_region and gamedata['regions'][base.base_region].get('limit_quarry_control',True):
                if player.num_quarries_controlled() >= player.stattab.quarry_control_limit:
                    return (False, "CANNOT_ATTACK_QUARRY_LIMIT_REACHED")

        elif other_player.is_human():
            # attack against a human home base

            if pvp_balance == 'player':
                return (False, "CANNOT_ATTACK_WEAKER_PLAYER")

            elif pvp_balance == 'enemy_strict':
                return (False, "CANNOT_ATTACK_STRONGER_PLAYER")

            if player.isolate_pvp and (not other_player.isolate_pvp):
                return (False, "CANNOT_ATTACK_YOU_ARE_ISOLATED")

            if (not player.isolate_pvp) and other_player.isolate_pvp:
                return (False, "CANNOT_ATTACK_THEY_ARE_ISOLATED")

            if other_player.has_damage_protection():
                return (False, "CANNOT_ATTACK_PLAYER_UNDER_PROTECTION")

            # check for PvP ability
            if (not player.is_pvp_player()):
                return (False, "CANNOT_ATTACK_NOPVP_YOU")

            elif (not other_player.is_pvp_player()):
                return (False, "CANNOT_ATTACK_NOPVP_THEM")

            # check for ladder/nonladder firewall violations
            if len(deployable_squads) == 1 and deployable_squads.values()[0]['squad_id'] == SQUAD_IDS.BASE_DEFENDERS:
                if player.is_ladder_player():
                    if (not other_player.is_ladder_player()):
                        return (False, "CANNOT_ATTACK_LADDER_YOU")
                    elif (not ladder_state):
                        return (False, "CANNOT_ATTACK_LADDER_YOU")
                else:
                    if other_player.is_ladder_player():
                        return (False, "CANNOT_ATTACK_LADDER_THEM")

                # check for map/legacy firewall violations
                if (not ladder_state):
                    if (not other_player.is_legacy_pvp_player()):
                        return (False, "CANNOT_ATTACK_MAP_THEM")
                    elif (not player.is_legacy_pvp_player()):
                        return (False, "CANNOT_ATTACK_MAP_YOU")

            if player.stattab.sandstorm_max:
                return (False, "CANNOT_ATTACK_SANDSTORM_MAX")

            if player.is_alt_account_unattackable(other_player) and gamedata['prevent_alt_attacks']:
                return (False, "CANNOT_ATTACK_ALT_ACCOUNT")

        return (True, None)

    def is_protection_eligible(self, session, attacker, attacker_user, defender, defender_user, base, ladder_state):
        if defender.is_ai() or (base is not defender.my_home): return False

        if attacker.home_region and (attacker.home_region in gamedata['regions']) and \
           ('enable_battle_protection_if' in gamedata['regions'][attacker.home_region]) and \
           (not Predicates.read_predicate(gamedata['regions'][attacker.home_region]['enable_battle_protection_if']).is_satisfied(defender, None)):
            return False # turned off for this region and this defender

        if gamedata['server']['global_protection_cooldown'] > 0 and defender.cooldown_active('global_protection'):
            return False # turned off by cooldown

        if ('enable_protection_if' in gamedata['server']) and (not Predicates.read_predicate(gamedata['server']['enable_protection_if']).is_satisfied(defender, None)):
            return False # turned off by predicate

        protect_facebook_friends = defender.get_any_abtest_value('protect_facebook_friends', gamedata['server']['protect_facebook_friends'])
        protect_same_ip = defender.get_any_abtest_value('protect_same_ip', gamedata['server']['protect_same_ip'])
        protect_same_alliance = defender.get_any_abtest_value('protect_same_alliance', gamedata['server']['protect_same_alliance'])

        is_same_ip = ((defender_user.last_login_ip == attacker_user.last_login_ip) and (attacker_user.last_login_ip != 'unknown'))

        # have these two players exchanged DP too much recently?
        max_player_stacks = Predicates.eval_cond_or_literal(gamedata['server']['protection_fatigue_stacks'], session, defender)
        is_fatigued = gamedata['server']['enable_protection_fatigue'] and \
                      (attacker.cooldown_active('protection_fatigue:%d'%defender.user_id) >= max_player_stacks or \
                       (gamedata['server']['bidirectional_protection_fatigue'] and defender.cooldown_active('protection_fatigue:%d'%attacker.user_id) >= gamedata['server']['protection_fatigue_stacks']))

        # are these two players in the same alliance, or have these two players recently exchanged too much DP with members of each others' alliances?
        max_alliance_stacks = Predicates.eval_cond_or_literal(gamedata['server']['alliance_protection_fatigue_stacks'], session, defender)
        if gamedata['server']['alliance_stickiness'] > 0:
            is_same_alliance, my_alliances, other_alliances = attacker.is_same_alliance_sticky(defender)
            if gamedata['server']['enable_protection_fatigue'] and gamedata['server']['enable_alliance_protection_fatigue'] and (not is_same_alliance):
                for aid in my_alliances.union(other_alliances):
                    if attacker.cooldown_active('protection_fatigue:a%d'%aid) >= max_alliance_stacks or \
                       (gamedata['server']['bidirectional_protection_fatigue'] and defender.cooldown_active('protection_fatigue:a%d'%aid) >= gamedata['server']['alliance_protection_fatigue_stacks']):
                        is_fatigued = True
                        break
        else:
            is_same_alliance = attacker.is_same_alliance(defender.user_id)

        # always enable protection for non-secure testing. Otherwise perform checks.
        if (not spin_secure_mode) or \
           ((not attacker.is_alt_account_unprotectable(defender)) and \
            (not is_fatigued) and \
            (protect_same_ip or (not is_same_ip)) and \
            (protect_same_alliance or (not is_same_alliance)) and \
            (protect_facebook_friends or (not attacker_user.is_friends_with(defender_user.social_id)))):

            # if the last attack was a long time ago, don't count it for purposes of the protection attack counter
            if (server_time - defender.protection_attack_time) >= defender.get_any_abtest_value('protection_backoff_time', gamedata['server']['protection_backoff_time']):
                defender.protection_attack_count = 0

            defender.protection_attack_count += 1 # XXX mutation
            defender.protection_attack_time = server_time

            if ladder_state:
                # for ladder battles, enable directly
                return True
            else:
                # for non-ladder battles, wait for N attacks
                if defender.protection_attack_count >= defender.get_any_abtest_value('protection_attacks', gamedata['server']['protection_attacks']):
                    return True
        else:
            # AI players, and Facebook friends, do not receive attack protection
            if (not protect_same_ip) and is_same_ip and (not attacker_user.is_friends_with(defender_user.social_id)):
                if gamedata['server']['log_alt_accounts'] >= 1:
                    gamesite.exception_log.event(server_time, 'denying protection to same-ip attack: %d vs. %d (%s) friends %d' % \
                                                 (attacker_user.user_id, defender_user.user_id, attacker_user.last_login_ip, int(attacker_user.is_friends_with(defender_user.social_id))))
            elif (not protect_same_alliance) and is_same_alliance and (not attacker_user.is_friends_with(defender_user.social_id)):
                if gamedata['server']['log_alt_accounts'] >= 1:
                    gamesite.exception_log.event(server_time, 'denying protection to same-alliance attack: %d vs. %d (%s) friends %d' % \
                                                 (attacker_user.user_id, defender_user.user_id, attacker_user.last_login_ip, int(attacker_user.is_friends_with(defender_user.social_id))))
            elif attacker.is_alt_account_unprotectable(defender):
                if gamedata['server']['log_alt_accounts'] >= 1:
                    gamesite.exception_log.event(server_time, 'denying protection to known alt account: %d vs. %d' % (attacker_user.user_id, defender_user.user_id))

        return False

    def init_attack(self, session, attacker, defender, base, ladder_state):
        # perform all necessary mutations at the start of an offensive attack
        # note: assumes all necessary locks are already taken
        if defender.is_human() and base is defender.my_home:
            defender.record_protection_event('3885_i_got_attacked',
                                             {'prev_end_time': defender.resources.protection_end_time,
                                              'attacker_id': attacker.user_id,
                                              'ladder': bool(ladder_state)})
            attacker.alt_record_attack(defender)

        base.base_last_attack_time = server_time
        base.base_times_attacked += 1
        attacker.attack_cooldown_start = server_time

        if gamedata['server'].get('track_battle_streaks',0) > 0:
            cd_list = ['battle_streak']
            if ladder_state:
                cd_list.append('battle_streak_ladder')
            for cd in cd_list:
                attacker.cooldown_trigger(cd, gamedata['server']['track_battle_streaks'], add_stack = 1)

        if defender.is_human() and \
           ((base is defender.my_home) or \
            (base.base_type == 'quarry' and gamedata['territory']['quarries_affect_protection']) or \
            (base.base_type == 'squad' and gamedata['territory']['squads_affect_protection'])):
            # remove the protection timer of the player making the attack
            attacker.set_protection_end_time(session, -1,
                                             '3884_protection_removed' if attacker.has_damage_protection() else None,
                                             {'defender_id':defender.user_id})
            record_player_metric(attacker, dict_setmax, 'last_pvp_aggression_time', server_time, time_series = False)

        record_player_metric(attacker, dict_increment, 'attacks_launched', 1, time_series = False)
        record_player_metric(attacker, dict_increment, 'attacks_launched_vs_'+defender.ai_or_human(), 1, time_series = False)

        if defender.is_human() and attacker.cooldown_active('revenge_defender:%d' % defender.user_id):
            record_player_metric(attacker, dict_increment, 'revenge_attacks_launched_vs_'+defender.ai_or_human(), 1, time_series = False)
            record_player_metric(defender, dict_increment, 'revenge_attacks_suffered', 1, time_series = False)

    # deploy units against a foreign (human or AI) player
    # returns true if successful
    def do_attack(self, session, retmsg, spellargs):
        loc = spellargs[0]
        unit_id_list = spellargs[1]

        if session.home_base:
            retmsg.append(["ERROR", "SERVER_PROTOCOL"])
            return False

        if (not session.has_attacked and (session.viewing_base_lock is not None)):
            retmsg.append(["ERROR", "SERVER_PROTOCOL"])
            gamesite.exception_log.event(server_time, 'do_attack() with invalid session state: %s args [%r,%r]' % (session.dump_exception_state(), loc, unit_id_list))
            return False

        # if unit_id_list is empty, that means the client wants to start the fight but not deploy any units right away
        if len(unit_id_list) and (not session.viewing_base.is_deployment_location_valid(session.player, loc)):
            retmsg.append(["ERROR", "CANNOT_DEPLOY_INVALID_LOCATION"])
            return False

        if not session.has_attacked:
            # first deployment - check for permission to attack, and acquire locks

            attack_ok, attack_error_message = self.can_attack(session.player, session.viewing_player, session.viewing_base, session.pvp_balance, session.deployable_squads, session.ladder_state)
            if not attack_ok:
                retmsg.append(["ERROR", attack_error_message])
                return False

            # get all necessary locks
            if session.viewing_base is not session.viewing_player.my_home:
                lock_errors = []
                state = session.acquire_base(errors = lock_errors)
                if state != Player.LockState.being_attacked:
                    retmsg.append(["ERROR", lock_errors[0], "attack_nonhome"])
                    return False

                if session.viewing_player is not session.player:
                    self.broadcast_map_attack(session.viewing_base.base_region, session.viewing_base.get_cache_props(),
                                              session.player.user_id, session.viewing_player.user_id, None, # no summary -> attack start
                                              [self.get_player_cache_props(u,p,aid) for u,p,aid in ((session.user,session.player,session.alliance_id_cache),(session.viewing_user,session.viewing_player,session.viewing_alliance_id_cache))],
                                              msg = "REGION_MAP_ATTACK_START")

            elif session.viewing_player.is_human():
                state = gamesite.lock_client.player_lock_acquire_attack(session.viewing_user.user_id, session.viewing_player.generation, owner_id=session.player.user_id)
                if state == -Player.LockState.logged_in:
                    retmsg.append(["ERROR", "CANNOT_ATTACK_PLAYER_WHILE_LOGGED_IN", 1])
                    return False
                elif state == -Player.LockState.being_attacked or state < 0:
                    retmsg.append(["ERROR", "CANNOT_ATTACK_PLAYER_WHILE_ALREADY_UNDER_ATTACK"])
                    return False

                lock_errors = []
                state = session.do_acquire_base(session.viewing_player, session.viewing_player.my_home, session.deployable_squads, session.defending_squads, errors = lock_errors)
                if state != Player.LockState.being_attacked:
                    gamesite.lock_client.player_lock_release(session.viewing_user.user_id, session.viewing_player.generation, Player.LockState.being_attacked,
                                                             expected_owner_id = session.player.user_id)
                    retmsg.append(["ERROR", lock_errors[0], "attack_home"])
                    return False

                # make sure we *were* in read-only mode before starting the battle
                assert (not session.viewing_player.has_write_lock)

                # then set the flag, because we have exclusive write permission now
                session.viewing_player.has_write_lock = True

            if session.viewing_player is not session.player:
                self.init_attack(session, session.player, session.viewing_player, session.viewing_base, session.ladder_state)

            session.has_attacked = True
            session.debug_log_action('do_attack')

            session.deployed_units = {}
            session.deployed_donated_units = {}

            # count existing reinforcements
            session.deployed_unit_space = sum([obj.get_leveled_quantity(obj.spec.consumes_space) for obj in session.viewing_base.iter_objects() \
                                               if (obj.owner is session.player) and obj.is_mobile()])
            session.deployed_donated_unit_space = 0

            # look up AI base or hive
            if (session.viewing_base is session.viewing_player.my_home) and session.viewing_player.is_ai():
                ai_data = gamedata['ai_bases_server']['bases'].get(str(session.viewing_player.user_id), None)
            elif session.viewing_base.base_type == 'hive':
                ai_data = gamedata['hives_server']['templates'].get(session.viewing_base.base_template, None)
            else:
                ai_data = None

            if session.player.tutorial_state != "COMPLETE":
                attack_time = gamedata['tutorial_attack_time']
            else:
                if session.viewing_player is session.player:
                    attack_time = gamedata['reinforce_time']
                elif (ai_data and ('attack_time' in ai_data)):
                    attack_time = ai_data['attack_time']
                else:
                    if (session.viewing_base is session.viewing_player.my_home):
                        if session.viewing_player.is_human():
                            entry = 'pvp'
                        else:
                            entry = 'pve'
                    elif session.viewing_base.base_type == 'quarry':
                        entry = 'quarry'
                    elif session.viewing_base.base_type == 'hive':
                        entry = 'hive'
                    else:
                        entry = 'pvp'

                    attack_time = gamedata['attack_time'][entry]

            real_attack_finish_time = server_time + attack_time

            # NOTE: add a few-second "grace period" to prevent the client
            # and server from both trying to change the session at the
            # exact same time
            session.attack_finish_time = real_attack_finish_time + 5

            # open attack log
            replay_token = None

            if session.viewing_player is session.player:
                # reinforcement
                session.open_attack_log(-1, -1,-1)
            else:
                replay_token = session.open_attack_log(session.attack_finish_time, session.user.user_id, session.viewing_user.user_id, base_id = session.viewing_base.base_id if (session.viewing_base is not session.viewing_player.my_home) else None)
                props_3820 =  {'attacker_user_id': session.user.user_id,
                               'attacker_level': session.player.resources.player_level,
                               'attacker_deployable_squads': session.deployable_squads.copy(),
                               'base_id': session.viewing_base.base_id,
                               'starting_base_damage': session.starting_base_damage,
                               'opponent_user_id':session.viewing_user.user_id,
                               'opponent_level':session.viewing_player.resources.player_level,
                               'opponent_type':session.viewing_player.ai_or_human()}
                if session.alliance_id_cache >= 0:
                    props_3820['attacker_alliance_id'] = session.alliance_id_cache
                if session.viewing_alliance_id_cache >= 0 and ((not session.viewing_player.is_ai()) or session.is_ladder_battle()):
                    props_3820['opponent_alliance_id'] = session.viewing_alliance_id_cache

                if gamedata['server'].get('log_battles',1) >= 2:
                    # add enough extra info to fully reconstruct the base on the client
                    props_3820['base'] = session.viewing_base.get_cache_props()
                    # note: these fields are not part of the cache_props but are needed to reconstruct the base
                    props_3820['base_region'] = session.viewing_base.base_region
                    props_3820['base_power_state'] = session.viewing_base.get_power_state()
                    props_3820['base_objects'] = [obj.serialize_state() for obj in session.viewing_base.iter_objects()]

                session.attack_event(session.user.user_id, '3820_battle_start', props_3820)

                if session.is_ladder_battle() and ((not session.using_squad_deployment()) or gamedata['server'].get('log_ladder_pvp_on_map',False)):
                    session.player.record_ladder_pvp_event('3305_ladder_attack_start', {'defender_id': session.viewing_player.user_id,
                                                                                        'attacker_pts': session.player.ladder_points(),
                                                                                        'defender_pts': session.viewing_player.ladder_points(),
                                                                                        'attacker_res': session.player.resources.get_fungible_amounts(),
                                                                                        'defender_res': session.viewing_player.resources.get_fungible_amounts(),
                                                                                        'battle_streak_ladder': session.player.cooldown_active('battle_streak_ladder'),
                                                                                        'ladder_state': session.ladder_state})

                if session.viewing_player.player_auras: session.attack_event(session.viewing_user.user_id, '3901_player_auras', {'player_auras':copy.copy(session.viewing_player.player_auras)})
                session.log_attack_units(session.viewing_user.user_id, session.iter_objects(), '3900_unit_exists')
                if session.damage_log: session.damage_log.init_multi(session.iter_objects())
                if session.player.player_auras: session.attack_event(session.user.user_id, '3901_player_auras', {'player_auras':copy.copy(session.player.player_auras)})

            retmsg.append(["PLAYER_ATTACK_WAVE_DEPLOYED", real_attack_finish_time, replay_token])


            if session.viewing_player is not session.player:
                session.activity_classifier.attacked_base(session.viewing_player, session.viewing_base, using_squads = session.using_squad_deployment())

            # INITIAL damage protection calculation
            # at the start of the battle, we check whether any damage protection is potentially available (based on recent attacks, who is attacking, etc)
            # if available, set protection_eligible True
            # after the battle, we'll calculate the exact amount of time based on damage done

            session.protection_eligible = self.is_protection_eligible(session, session.player, session.user,
                                                                      session.viewing_player, session.viewing_user,
                                                                      session.viewing_base, session.ladder_state)

            if ai_data and ('on_attack' in ai_data):
                session.execute_consequent_safe(ai_data['on_attack'], session.player, retmsg, reason='on_attack')

            session.deferred_player_state_update = True # for removal of protection time etc

        deployment_limit = session.player.stattab.get_player_stat('deployable_unit_space')

        # dump mobile units from player's base into the session
        units = []

        # unit_id_list takes the form
        # [{'obj_id':'2345sdfg234','source':'home_or_squad'}, # regular home or squad unit
        #  {'obj_id':'DONATED-1234','source':'donated'}, # donated unit
        #  ...]
        for entry in unit_id_list:
            source = entry.get('source', 'home_or_squad')
            obj_id = entry['obj_id']

            if session.has_object(obj_id):
                # already deployed
                retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION", obj_id, 'already deployed'])
                continue

            if source == 'donated':
                entry = session.player.donated_units.get(obj_id, None)
                if not entry:
                    retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION", obj_id, 'not found in donated_units'])
                    continue

                spec = session.player.get_abtest_spec(GameObjectSpec, entry['spec'])
                # skip inapplicable units
                if (not session.viewing_base.can_deploy_unit(spec)): continue
                level = entry.get('level', session.player.tech.get(spec.level_determined_by_tech, 1))

                unit = instantiate_object_for_player(session.player, session.player, entry['spec'], x=loc[0], y=loc[1], level=level, obj_id=obj_id)
                space = unit.get_leveled_quantity(unit.spec.consumes_space)

                if gamedata['donated_units_take_space']:
                    if (session.deployed_unit_space + space) > deployment_limit:
                        retmsg.append(["ERROR", "CANNOT_DEPLOY_MORE_UNITS"])
                        break
                    session.deployed_unit_space += space

                session.deployed_donated_unit_space += space # count this regardless of whether they take space

                units.append((unit,{'method':'donated'}))
                entry['stack'] = entry.get('stack', 1) - 1
                if entry['stack'] <= 0:
                    del session.player.donated_units[obj_id]

                session.deferred_donated_units_update = True

            else:
                unit = None

                # when attacking out of home base, you can attack with undeployed squads (acutal deployability is tested below)
                unit = session.player.get_object_by_obj_id(obj_id, fail_missing = False)
                is_squad_object = False

                if not unit: # search squads
                    if gamesite.nosql_client and session.player.home_region:
                        state = gamesite.nosql_client.get_mobile_object_by_id(session.player.home_region, obj_id, reason='do_attack')
                        if state:
                            unit = reconstitute_object(session.player, session.player, state, context = '%d vs %d at %s deploy attack' % (session.player.user_id, session.viewing_player.user_id, session.viewing_base.base_id))
                            is_squad_object = True

                if (not unit) or (unit.hp <= 0) or (session.player.squad_base_id(unit.squad_id or 0) not in session.deployable_squads):
                    # unit might have been destroyed while message was in flight
                    if (not unit):
                        err = 'not found'
                    elif (unit.hp <= 0):
                        err = 'dead'
                    elif (session.player.squad_base_id(unit.squad_id or 0) not in session.deployable_squads):
                        err = 'not deployable'
                    retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION", obj_id, err])
                    continue

                if (not session.viewing_base.can_deploy_unit(unit.spec)):
                    retmsg.append(["ERROR", "CANNOT_DEPLOY_INVALID_LOCATION"])
                    continue

                if (session.deployed_unit_space + unit.get_leveled_quantity(unit.spec.consumes_space)) > deployment_limit:
                    retmsg.append(["ERROR", "CANNOT_DEPLOY_MORE_UNITS"])
                    break

                session.player.unit_repair_cancel(unit)

                session.deployed_unit_space += unit.get_leveled_quantity(unit.spec.consumes_space)
                units.append((unit, {'method':'from_home', 'squad_id':unit.squad_id or 0}))

                if unit.spec.consumable: # dispose the object right here
                    if is_squad_object:
                        gamesite.nosql_client.drop_mobile_object_by_id(session.player.home_region, obj_id, reason='do_attack(consumable)')
                    else:
                        session.player.home_base_remove(unit)
                    session.player.send_army_update_destroyed(unit, retmsg)

        for unit, props in units:
            # last-chance check on unit level
            unit.ensure_level(session.player.tech.get(unit.spec.level_determined_by_tech, 1))

            session.add_object(unit)

            # fake_xy fudges the position of the object to the
            # client's requested attack location. The server won't
            # record the change permanently.

            retmsg.append(["OBJECT_CREATED2", unit.serialize_state(fake_xy = loc)])

            # add "weak zombie" debuff
            if (unit.hp / max(0.01, float(unit.max_hp))) < gamedata['zombie_debuff_threshold']:
                if unit.auras is None: unit.auras = []
                Aura.apply_aura(unit.auras, 'weak_zombie', 1, session_only = True)

            if unit.auras:
                retmsg.append(["OBJECT_AURAS_UPDATE", unit.serialize_auras()])

            session.log_attack_unit(session.user.user_id, unit, '3910_unit_deployed', fake_xy = loc, props = props)
            if session.damage_log:
                # need to think about how to track donated units (props['method']=='donated')
                session.damage_log.init(unit, consumable = unit.spec.consumable)

            # record for analytics
            session.deployed_units[unit.spec.name] = session.deployed_units.get(unit.spec.name,0) + 1
            if props['method'] == 'donated':
                session.deployed_donated_units[unit.spec.name] = session.deployed_donated_units.get(unit.spec.name,0) + 1

        return True # success!

    def push_gamedata(self, session, retmsg):
        data_str = open(SpinConfig.gamedata_filename()).read()
        retmsg.append(["PUSH_GAMEDATA", data_str, session.player.abtests])

    def do_send_gifts(self, session, retmsg, arg):
        if not session.player.get_any_abtest_value('enable_resource_gifts', gamedata.get('enable_resource_gifts',False)):
            return

        request_id = arg[1]
        recipient_user_id_list = arg[2]

        db_message = { 'from': session.player.user_id,
                       'to': [], # will be filled in below
                       'type': 'resource_gift',
                       'expire_time': server_time + gamedata['server']['message_expire_time']['resource_gift'],
                       'from_pcache': self.get_player_cache_props(session.user, session.player, session.alliance_id_cache),
                       'unique_per_sender': 'resource_gift'}

        for recipient_user_id in recipient_user_id_list:
            if (not recipient_user_id) or recipient_user_id <= 0 or recipient_user_id == session.user.user_id:
                continue

            # note: this is susceptible to client-side spoofing, sending invalid user_ids, or picking user_ids out of thin air!

            # check if we can still send a gift to this recipient today
            if session.player.cooldown_active('send_gift:'+str(recipient_user_id)):
                continue

            db_message['to'].append(recipient_user_id)

            # the gift will be successfully queued, now remember that we sent it so we can't send one again too quickly
            session.player.cooldown_trigger('send_gift:'+str(recipient_user_id), gamedata['gift_interval'])
            #session.user.create_fb_open_graph_action('sent_gift', {'profile': fbid})
            session.deferred_player_cooldowns_update = True

        if len(db_message['to']) > 0:
            gamesite.msg_client.msg_send([db_message])
            session.increment_player_metric('gifts_sent', len(db_message['to']), time_series = False, bucket = True)
            props = {'recipients':db_message['to']}
            if request_id: props['request_id'] = request_id
            metric_event_coded(session.user.user_id, '4120_send_gift_completed', props)
            session.deferred_history_update = True

    @catch_all('do_receive_mail')
    def do_receive_mail(self, session, retmsg, is_login = False, type_filter = None):
        ret = {
            'was_attacked': False, # True if battle history should be shown upon login
            'new_mail': False # True if player received new in-game mail
            }

        if session.player.tutorial_state != "COMPLETE":
            return ret

        # count number of gifts and resources received within last 24 hours
        interval = gamedata['gift_interval']
        gift_origin = int(server_time/interval) * interval
        gift_count = 0
        gift_total = 0
        to_remove = []
        for gift in session.player.received_gifts:
            if gift['time'] >= gift_origin:
                gift_count += 1
                gift_total += gift['amount']
            else:
                # get rid of old entries
                to_remove.append(gift)
        for gift in to_remove:
            session.player.received_gifts.remove(gift)

        starting_gift_count = gift_count
        max_res = session.player.get_max_storage()


        # for bulletproof atomicity, wrap the code in a try: block and
        # ensure that gifts are dequeued if and only if the resources are given

        messages = gamesite.msg_client.msg_recv(session.user.user_id, type_filter = type_filter)
        to_ack = []

        try:
            for msg in messages:
                if msg['type'] == 'resource_gift':

                    if gamedata.get('gift_mail_template',None):
                        template = gamedata['gift_mail_template']
                        amount = 1 # for compatibility with metrics below
                        # since we're generating a new mail, we have to set the duration to the original duration minus how long it sat in the queue
                        duration = gamedata['server']['message_expire_time']['resource_gift'] - (server_time - msg['time'])
                        if duration > 0:
                            time_struct = time.gmtime(server_time)
                            if 'from_pcache' in msg:
                                from_ui_name = pcache_get_ui_name(msg['from_pcache'])
                            elif 'from_name' in msg:
                                from_ui_name = msg['from_name']
                            else:
                                from_ui_name = 'Unknown'
                            session.player.mailbox_append(session.player.make_system_mail(template,
                                                                                          duration = duration,
                                                                                          replacements = {'%SENDER': from_ui_name,
                                                                                                          '%DAY': time.strftime('%d %b %Y', time_struct),
                                                                                                          '%TIME': time.strftime('%H:%S', time_struct)}))
                            ret['new_mail'] = True

                    else:
                        if not is_login: continue # only retrieve fungible resource gifts on login

                        # legacy resource gift: fungible resources
                        gift = {}

                        gift_amount_ratio = gamedata['gift_amount_base']
                        decay = gamedata['gift_amount_decay']
                        if decay < 1:
                            gift_amount_ratio *= math.pow(decay, gift_count)

                        noise = gamedata['gift_amount_randomness']
                        if noise > 0:
                            gift_amount_ratio = gift_amount_ratio * (1 + noise * (2*random.random()-1))

                        gift_amount_ratio = min(max(gift_amount_ratio, 0), 1)

                        res = 'water' if random.random() >= 0.5 else 'iron'
                        gift[res] = max(int(gift_amount_ratio * max_res[res]), 1)

                        original_gift = gift # save uncapped amounts for the UI display
                        gift = session.player.resources.gain_res(gift, reason='received_gift')
                        session.deferred_player_state_update = True
                        amount = sum(gift.itervalues(),0)
                        admin_stats.econ_flow_res(session.player, 'gifts', 'gifts', gift)
                        retmsg.append(["RECEIVED_GIFT2", msg['from'], msg.get('from_pcache',None), original_gift])

                    to_ack.append(msg['msg_id'])
                    session.increment_player_metric('gifts_received', 1, time_series = False, bucket = True)
                    session.player.received_gifts.append({'time':server_time, 'from':msg['from'], 'amount':amount})
                    gift_count += 1
                    gift_total += amount

                elif msg['type'] == 'system_refund':
                    loot = msg['loot']
                    loot = session.player.resources.gain_res(loot, reason=msg['type'])
                    to_ack.append(msg['msg_id'])
                    admin_stats.econ_flow_res(session.player, 'consumption', msg.get('reason', msg['type']), loot)
                    retmsg.append(["SYSTEM_REFUND", loot, msg['ui_reason']])

                elif msg['type'] == 'alliance_status_changed':
                    # this is an async notification that your request to join an alliance was accepted by the leader, or you were kicked
                    to_ack.append(msg['msg_id'])
                    ret['new_alliance'] = True

                    # reset donation counter here, since it may be asynchronous with ALLIANCE_JOIN
                    session.setvalue_player_metric('units_donated_cur_alliance', 0, time_series = False)

                    if (not is_login):
                        # async alliance status change - update cached state and notify player
                        my_alliance_info, my_alliance_membership = session.init_alliance(retmsg, chat_catchup = False, reason='do_receive_mail')
                        retmsg.append(["ALLIANCE_UPDATE", my_alliance_info['id'] if my_alliance_info else -1, False, my_alliance_info, my_alliance_membership, False])

                elif msg['type'] == 'alliance_role_changed':
                    to_ack.append(msg['msg_id'])
                    ret['new_alliance_role'] = True
                    my_alliance_info, my_alliance_membership = session.init_alliance(retmsg, chat_catchup = False, reason='do_receive_mail')
                    retmsg.append(["ALLIANCE_UPDATE", my_alliance_info['id'] if my_alliance_info else -1, False, my_alliance_info, my_alliance_membership, True])

                elif msg['type'] == 'cooldown_trigger':
                    end_time = msg['end_time']
                    if end_time > server_time:
                        session.player.cooldown_trigger(msg['cooldown_name'], end_time - server_time)
                        retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])
                    to_ack.append(msg['msg_id'])

                elif msg['type'] == 'apply_aura':
                    end_time = msg['end_time']
                    if end_time > server_time:
                        if session.player.apply_aura(msg['aura_name'], strength = msg.get('aura_strength',1), level = msg.get('aura_level',1), data = msg.get('aura_data',None),
                                                     duration = end_time - server_time, ignore_limit = True):
                            session.deferred_player_auras_update = True
                    to_ack.append(msg['msg_id'])

                elif msg['type'] == 'chat_report':
                    if session.player.cooldown_active('chat_reportable') and (msg['expire_time'] > server_time):
                        cons = gamedata.get('chat_report_recv_action', None)
                        if cons:
                            session.execute_consequent_safe(cons, session.player, retmsg, context = {'report_stack':msg.get('report_stack',1)}, reason='chat_report_recv_action')
                    to_ack.append(msg['msg_id'])

                elif msg['type'] == 'i_attacked_you':
                    summary = msg['summary']

                    # write battle summary into both recent_attacks and the battle history
                    if ('base_id' not in summary) or summary['base_id'] == home_base_id(session.player.user_id):
                        # only put home-base attacks into recent_attacks
                        session.player.recent_attacks.append(Player.battle_summary_to_recent_attack(summary))
                    else:
                        # show battle history upon login when there are new entries NOT reflected in the "You've been Attacked" message
                        ret['was_attacked'] = False # disable this for now, let the client do it

                    session.player.append_battle_summary(session, summary['attacker_id'], summary)
                    retmsg.append(["NEW_BATTLE_HISTORIES", 1])

                    to_ack.append(msg['msg_id'])

                elif msg['type'] == 'mail':
                    if 'discard_if' in msg and (msg['discard_if'] in gamedata['predicate_library']):
                        if Predicates.read_predicate({'predicate':'LIBRARY', 'name':msg['discard_if']}).is_satisfied(session.player, None):
                            # ack and discard
                            to_ack.append(msg['msg_id'])
                            continue

                    if 'receipt_duration' in msg:
                        if msg['receipt_duration'] < 0:
                            if 'expire_time' in msg:
                                del msg['expire_time']
                        else:
                            msg['expire_time'] = server_time + msg['receipt_duration']

                    session.player.mailbox_append(msg, safe_not_to_copy = True)
                    ret['new_mail'] = True

                    gift_order = msg.get('gift_order', None)
                    if gift_order:
                        item_name = 'alloy' if SpinConfig.game()=='mf' else 'gamebucks'
                        gift_amount = sum([x.get('stack',1) for x in msg.get('attachments',[]) if x['spec'] == item_name])
                        session.increment_player_metric('gift_orders_received', 1)
                        session.increment_player_metric('gamebucks_received_from_gift_orders', gift_amount)
                        config = gamedata['fb_notifications']['notifications'].get('your_gift_order_was_received',None)
                        if config and msg.get('from_fbid'):
                            notif_text = config['ui_name'].replace('%GAMEBUCKS_AMOUNT', str(gift_amount)).replace('%RECEIVER', session.user.get_chat_name(session.player)).replace('%GAMEBUCKS_NAME',gamedata['store']['gamebucks_ui_name'])
                            session.player.do_send_fb_notification_to(msg['from_fbid'], notif_text, config, config['ref'])

                    gift_order_refund = msg.get('gift_order_refund', None)
                    if gift_order_refund:
                        gift_amount = msg.get('gamebucks',0)
                        if gift_amount != 0:
                            session.player.resources.gain_gamebucks(-gift_amount, reason='gift_order_refund')
                            session.increment_player_metric('gift_orders_received_then_refunded', 1)
                            session.increment_player_metric('gamebucks_refunded_from_received_gift_orders', gift_amount)

                    to_ack.append(msg['msg_id'])

                    if 'on_receipt' in msg and msg['on_receipt'] in gamedata['consequent_library']:
                        context = {}
                        if 'from' in msg: context['sender_id'] = msg['from']
                        session.execute_consequent_safe({'consequent':'LIBRARY', 'name':msg['on_receipt']}, session.player, retmsg,
                                                        context = context, reason='mail_on_receipt')

                elif msg['type'] == 'donated_units':
                    # XXX check for capacity limit?
                    units = msg['attachments']
                    for entry in units: # these come in the form [{'spec':'asdf','stack':3},...]
                        for i in xrange(entry.get('stack',1)):
                            session.player.add_donated_unit(entry['spec'], level = entry.get('level', None))
                    retmsg.append(["DONATED_UNITS_UPDATE", session.player.donated_units])
                    retmsg.append(["DONATED_UNITS_RECEIVED", units, msg.get('from',-1), msg.get('from_fbid','-1'), msg.get('from_name','unknown')])
                    to_ack.append(msg['msg_id'])
                    session.increment_player_metric('donated_units_received', sum([item.get('stack',1) for item in units]), time_series = False)
                    metric_event_coded(session.player.user_id, '4160_unit_donation_received', {'units':units,'from':msg['from']})

                elif msg['type'] == 'TRIALPAYAPI_payment':
                    try:
                        gamesite.trialpayapi.handle_payment(None, session, msg['their_hash'], msg['request_args'], msg['request_body'])
                    except:
                        gamesite.exception_log.event(server_time, 'TRIALPAYAPI_payment API fail on user %d payment %r: ' % (session.user.user_id, msg.get('request_args')) + traceback.format_exc().strip()) # OK
                        pass
                    to_ack.append(msg['msg_id'])

                elif msg['type'] == 'FBRTAPI_payment':
                    try:
                        status = 'UNKNOWN'
                        response = msg['response']
                        payment_id = msg['payment_id']
                        request_id = response.get('request_id', 'UNKNOWN_REQUEST_'+str(payment_id))
                        if request_id in session.player.fbpayments_inflight:
                            status = 'INFLIGHT'
                        else:
                            for entry in session.player.history.get('money_purchase_history',[]):
                                if ('payment_id' in entry) and str(entry['payment_id']) == str(payment_id):
                                    status = 'COMPLETED'
                                    break

                        if status == 'INFLIGHT':
                            # ping and return
                            session.user.ping_fbpayment_complete(None, session, retmsg, request_id, {'data':[response]})
                        elif status == 'COMPLETED':
                            # check for chargebacks
                            if session.user.ping_fbpayment_check_refund(session, retmsg, payment_id, {'data':[response]}):
                                ret['new_mail'] = True

                        else:
                            # hmm, looks like Facebook created an order out of thin air, or brought an old order back from the dead.

                            url = str(response['items'][0]['product'])
                            qs = urlparse.parse_qs(urlparse.urlparse(url).query)
                            payment_data = None

                            client_price = client_currency = None
                            for action in reversed(response['actions']):
                                if action['type'] == 'charge' and action['status'] == 'completed':
                                    client_price = float(action['amount'])
                                    client_currency = action['currency']
                                    break
                                elif action['type'] == 'charge' and action['status'] == 'failed':
                                    status = 'FAILED'
                                    break

                            spellname = spellarg = None
                            if client_price and client_currency:
                                # look for a zombie SKU slate order
                                if ('type' in qs) and (qs['type'][0] == OGPAPI.object_type('sku')):
                                    spellname = qs['spellname'][0]
                                    url_props = {'type':OGPAPI.object_type('sku'), 'spellname': spellname}
                                    if 'want_loot' in qs:
                                        url_props['want_loot'] = qs['want_loot'][0]
                                        spellarg = {'want_loot': bool(int(qs['want_loot'][0]))}
                                    if url != OGPAPI_instance.get_object_endpoint(url_props):
                                        gamesite.exception_log.event('fbpayment URL mismatch: got %s expected %s' % \
                                                                     (url, OGPAPI_instance.get_object_endpoint(url_props)))
                                        raise Exception('fbpayment URL mismatch')

                                # look for an order that buys in-game currency directly on the OG currency object, like a payer promo
                                elif url == str(OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('gamebucks')})) or \
                                     (SpinConfig.game() == 'tr' and url == str(OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('gamebucks')}, override_host = 'trprod10.spinpunch.com'))): # special case to handle orders created on temporary legacy DNS entry
                                    spellname = 'FB_GAMEBUCKS_PAYMENT'
                                    spellarg = response['items'][0]['quantity']

                            if spellname:
                                status = 'SYNTHESIZED'
                                payment_data = { 'id': payment_id,
                                                 'request_id': request_id,
                                                 'synthesized': 1,
                                                 'unit_id': GameObject.VIRTUAL_ID,
                                                 'spellname': spellname,
                                                 'spellarg': spellarg,
                                                 'client_price': client_price, 'client_currency': client_currency,
                                                 'product_url': url,
                                                 'init_quantity': response['items'][0]['quantity'],
                                                 'time': server_time, 'server_time_according_to_client': server_time,
                                                 'state': 'new' }
                                session.player.fbpayments_inflight[request_id] = payment_data
                                session.user.ping_fbpayment_complete(None, session, retmsg, request_id, {'data':[response]})

                        if (status not in ('INFLIGHT','COMPLETED','FAILED','SYNTHESIZED')) or gamedata['server']['log_fbpayments'] >= 2:
                            gamesite.exception_log.event(server_time, 'FBRTAPI_payment API call on user %d payment %s request_id %s: items %s actions %s status %s' % (session.user.user_id, payment_id, request_id, str(response['items']), str(response['actions']), status)) # OK

                    except:
                        gamesite.exception_log.event(server_time, 'FBRTAPI_payment API fail on user %d payment %s: ' % (session.user.user_id, msg['payment_id']) + traceback.format_exc().strip()) # OK
                        pass
                    to_ack.append(msg['msg_id'])

                elif msg['type'] == 'XSAPI_payment':
                    try:
                        request_data = msg['response'] # note: we don't check the signature, assuming proxyserver checked it already.
                        payment_id = request_data['transaction']['id']
                        # don't re-run an already-completed payment
                        found = False
                        for entry in session.player.history.get('money_purchase_history',[]):
                            if ('order_id' in entry) and str(entry['order_id']) == str(payment_id):
                                found = True
                                break

                        if not found: # run the payment
                            gamesite.xsapi.handle_payment(None, session, request_data)
                            gamesite.exception_log.event(server_time, 'XSAPI_payment API success on user %d payment %s' % (session.user.user_id, payment_id))
                    except:
                        gamesite.exception_log.event(server_time, 'XSAPI_payment API fail on user %d payment %s: ' % (session.user.user_id, payment_id) + traceback.format_exc().strip()) # OK
                        pass
                    to_ack.append(msg['msg_id'])

                else:
                    gamesite.exception_log.event(server_time, 'user %d: unhandled msg type %s' % (session.user.user_id, msg['type']))

        finally:
            gamesite.msg_client.msg_ack(session.user.user_id, to_ack)

        if 0:
            if gamedata['server']['log_gifts'] and (gift_count > starting_gift_count):
                gamesite.exception_log.event(server_time, 'GIFTS: user %d count %d amount %d' % (session.user.user_id, gift_count, gift_total))

        return ret

    def do_level_up(self, session, retmsg, arg):
        want_level = int(arg[1])
        old_level = session.player.resources.player_level

        if session.has_attacked: # don't level up during combat
            return

        xp_table = gamedata['player_xp']['level_xp']

        want_level = max(2, min(want_level, len(xp_table)))

        while session.player.resources.player_level < want_level:
            next_level = session.player.resources.player_level+1
            if session.player.resources.xp < xp_table[next_level]:
                # not enough XP to promote
                break

            session.player.resources.player_level = next_level

            if LOTS_OF_METRICS:
                metric_event_coded(session.user.user_id, '%04d_player_level_%d' % (2400+next_level, next_level), {})

            level_up_rewards = session.player.get_any_abtest_value('level_up_reward', gamedata['player_xp']['level_up_reward'])
            reward = level_up_rewards[min(next_level, len(level_up_rewards)-1)]
            if reward:
                session.execute_consequent_safe(reward, session.player, retmsg, reason='do_level_up')

        if session.player.resources.player_level > old_level:
            session.setmax_player_metric('player_level', session.player.resources.player_level)
            session.user.create_fb_open_graph_action('level_up', {OGPAPI.object_type('player_level'): OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('player_level'),
                                                                                                                                           'level':session.player.resources.player_level})})

        retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

    def auto_resolve(self, session, retmsg):
        if not session.has_attacked or \
           ((not session.home_base) and session.player is session.viewing_player): # quarry reinforcement
            retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
            return

        # only allow in squad battles, unless DEV edit mode is on
        if (session.viewing_base.base_type != 'squad') and (not session.player.is_cheater):
            retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
            return

        if not session.player.auto_resolve_enabled():
            retmsg.append(["ERROR", "SERVER_PROTOCOL"])
            return

        session.attack_event(session.player.user_id, '3829_battle_auto_resolved', {})
        session.auto_resolved = True

        # attempt to deploy all of player's un-deployed units
        if not session.home_base:
            deploy_list = [] # match format of argument to do_attack()
            deployment_limit = session.player.stattab.get_player_stat('deployable_unit_space')
            deployed_space = session.deployed_unit_space
            do_home_units = False

            # query for squad units
            for base_id, feature in session.deployable_squads.iteritems():
                if (not SQUAD_IDS.is_mobile_squad_id(feature['squad_id'])):
                    do_home_units = True # probably base defenders
                    continue

                elif (not session.player.squad_is_deployed(feature['squad_id'])):
                    do_home_units = True # mobile, but not deployed
                    continue

                elif session.player.home_region: # mobile, deployed
                    for state in gamesite.nosql_client.get_mobile_objects_by_base(session.player.home_region, session.player.squad_base_id(feature['squad_id']), reason='auto_resolve'):
                        if (not session.has_object(state['obj_id'])) and \
                           (state.get('hp_ratio',1) > 0 or state.get('hp',1) > 0) and \
                           session.viewing_base.can_deploy_unit(session.player.get_abtest_spec(GameObjectSpec, state['spec'])):
                            assert state['squad_id'] == feature['squad_id']
                            assert session.player.squad_base_id(state['squad_id']) in session.deployable_squads
                            space = GameObjectSpec.get_leveled_quantity(session.player.get_abtest_spec(GameObjectSpec, state['spec']).consumes_space, state.get('level',1))
                            if deployed_space + space > deployment_limit: break
                            deploy_list.append({'obj_id':state['obj_id'], 'spec': state['spec'], 'squad_id': feature['squad_id'], 'source':'home_or_squad'})
                            deployed_space += space

            if do_home_units:
                for obj in session.player.home_base_iter():
                    if (not session.has_object(obj.obj_id)) and obj.is_mobile() and \
                       (not obj.is_destroyed()) and \
                       session.player.squad_base_id(obj.squad_id or 0) in session.deployable_squads and \
                       session.viewing_base.can_deploy_unit(obj.spec):
                        space = obj.get_leveled_quantity(obj.spec.consumes_space)
                        if deployed_space + space > deployment_limit: break
                        deploy_list.append({'obj_id': obj.obj_id, 'spec': obj.spec.name, 'source':'home_or_squad'})
                        deployed_space += space

            for donated_obj_id, state in session.player.donated_units.iteritems():
                if session.viewing_base.can_deploy_unit(session.player.get_abtest_spec(GameObjectSpec, state['spec'])):
                    if gamedata['donated_units_take_space']:
                        space = GameObjectSpec.get_leveled_quantity(session.player.get_abtest_spec(GameObjectSpec, state['spec']).consumes_space, state.get('level',1))
                    else:
                        space = 0
                    if deployed_space + space > deployment_limit: break
                    deploy_list.append({'obj_id':donated_obj_id, 'spec': state['spec'], 'source':'donated'})
                    deployed_space += space

            if deploy_list:
                if session.viewing_base.deployment_buffer and type(session.viewing_base.deployment_buffer) is dict:
                    # deployment zone
                    deploy_location = session.viewing_base.deployment_zone_centroid()
                else:
                    deploy_location = [1,1] # just throw the units into a corner

                if gamedata['server'].get('log_auto_resolve', 0) >= 2:
                     gamesite.exception_log.event(server_time, 'player %d at %s auto-resolve deploying at %r: %r' % \
                                                  (session.player.user_id, session.viewing_base.base_id, deploy_location, deploy_list))

                self.do_attack(session, retmsg, [deploy_location, deploy_list])

        if gamedata['server'].get('log_auto_resolve', 0) >= 3:
            log_func = lambda x: gamesite.exception_log.event(server_time, x)
        else:
            log_func = None

        resolve_iter = 0

        while True: # iterate, because object destruction can spawn new objects (security teams)
            action_list = AutoResolve.resolve(session, log_func = log_func)

            if gamedata['server'].get('log_auto_resolve', 0) >= 2:
                gamesite.exception_log.event(server_time, "player %d at %s auto-resolve iter %d destroys: %r ... updates: %r" % (session.player.user_id, session.viewing_base.base_id, resolve_iter, [x[0] for x in action_list if x[0]], [x[1] for x in action_list if x[1]]))

            if not action_list:
                break # nothing happened

            resolve_iter += 1

            # compare number of objects before and after submitting
            # the changes, to pick up new security team objects
            num_before = session.num_objects()
            destroyed_count = 0
            for objects_destroyed_arg, combat_updates_arg in action_list:
                if objects_destroyed_arg:
                    self.destroy_object(session, retmsg, *objects_destroyed_arg)
                    destroyed_count += 1
                if combat_updates_arg:
                    self.object_combat_updates(session, retmsg, [combat_updates_arg,])

            # check for security team spawning
            num_after = session.num_objects()

            if num_after <= num_before - destroyed_count:
                break # nothing new spawned

    def object_combat_updates(self, session, retmsg, arg):
        # update hitpoints and (for mobile units only) XY position and movement orders

        # Processes many object updates together in a batch in order
        # to minimize the number of player state updates we have to do.

        # flags to indicate whether we need to record state changes
        update_player = False
        update_viewing_player = False
        recalc_resources = False
        recalc_power = False

        # for each affected object
        for a in arg:
            id, client_specname, newxy, newhp, neworders, killer_info, newpatrol = a

            # possible race condition due to unserialized AJAX - DSTROY_OBJECT comes first
            if (not session.has_object(id)):
                if gamedata['server'].get('log_combat_race_conditions', False):
                    gamesite.exception_log.event(server_time, 'object_combat_updates: player %d session is missing object %s %s' % \
                                                 (session.player.user_id, str(id), str(client_specname)))
                continue

            obj = session.get_object(id)

            # do not accept hp updates when not in battle
            if not session.has_attacked:
                newhp = -1

            # HP=-1 means that the client doesn't want to touch the HP value
            if newhp == -1:
                newhp = obj.hp

            # figure out who owns it and who shot at it
            # curse this complicated code :(. Need to rethink at some point...
            if (obj.owner is RogueOwner) or (obj.owner is EnvironmentOwner):
                owning_user = None
                owning_player = None
                attacker = session.player
            elif obj.owner is session.player:
                owning_user = session.user
                owning_player = session.player
                update_player = True
                if session.home_base:
                    attacker = RogueOwner
                else:
                    attacker = session.viewing_player
            elif obj.owner is session.viewing_player:
                owning_user = session.viewing_user
                owning_player = session.viewing_player
                update_player = True # for XP gain
                update_viewing_player = True
                attacker = session.player
            else:
                gamesite.exception_log.event(server_time, 'Unexpected object owner '+repr(obj.owner)+' - possible bad race condition')
                owning_user = None
                owning_player = None
                attacker = session.player

            # update XY coordinates, movement orders, and patrol flag (for mobile objects only, and not for attackers)
            if obj.is_mobile() and (owning_user is session.viewing_user):
                if newxy:
                    obj.x = int(newxy[0])
                    obj.y = int(newxy[1])
                if neworders is not None:
                    if type(neworders) is list:
                        obj.orders = neworders[0:gamedata['client']['max_unit_orders']]
                        for order in obj.orders:
                            if ('dest' in order) and (order['dest'] is not None):
                                order['dest'] = map(int, order['dest'])
                    else:
                        gamesite.exception_log.event(server_time, 'player %d received object orders for %d\'s %s not a list: %s' % \
                                                     (session.user.user_id, owning_user.user_id if owning_user else -1, obj.spec.name, repr(neworders)))
                if newpatrol is not None:
                    obj.patrol = int(not (not newpatrol))

            # handle battle damage
            if newhp != obj.hp:

                max_hp = obj.max_hp
                if newhp > obj.hp:
                    if obj.is_building():
                        # see if raised HP is just the result of ongoing repair since obj.hp was updated
                        obj.update_repair()
                    if newhp > obj.hp:
                        if session.player.tutorial_state == "COMPLETE": # this is a known harmless race condition during the initial rails tutorial, so don't bother logging it
                            gamesite.exception_log.event(server_time, 'rejecting object_combat_update that raises object HP: user %d owner %d type %s hp %d->%d max %d STATE %s' % (session.user.user_id, owning_user.user_id if owning_user else -1, obj.spec.name, obj.hp, newhp, max_hp, repr(obj.serialize_state())))
                        newhp = obj.hp
                elif newhp < obj.hp:
                    if obj.spec.quarry_invul and (session.viewing_base.base_type == 'quarry'):
                        gamesite.exception_log.event(server_time, 'rejecting object_combat_update that lowers invul object HP: user %d owner %d type %s hp %d->%d max %d STATE %s' % (session.user.user_id, owning_user.user_id if owning_user else -1, obj.spec.name, obj.hp, newhp, max_hp, repr(obj.serialize_state())))
                        newhp = obj.hp

                newhp = int(max(0, min(newhp, max_hp)))
                if newhp == obj.hp: continue

                # cancel repair
                if obj.is_mobile() and owning_player:
                    if owning_player.unit_repair_cancel(obj):
                        recalc_resources = True

                if obj.is_building():
                    disrupted = obj.halt_all()
                    if disrupted and (not obj.spec.worth_less_xp) and (attacker is session.player) and (obj.owner is not session.player):
                        session.loot['havoc_caused'] = session.loot.get('havoc_caused',0) + 1

                # if a building is completely destroyed, perform looting
                if (obj.hp > 0) and \
                   ((newhp == 0) or gamedata.get('gradual_loot',-1) > 0) and \
                   (obj.is_building()) and owning_player:

                    event_props = {} # these will eventually be passed along with the 3920_building_destroyed event

                    # when using gradual loot and not logging it to battle log, don't include ANY loot in event_props, because it would only show
                    # the loot for the final 0hp tick on building destruction
                    event_props_include_loot = (gamedata.get('gradual_loot',-1) <= 0 or gamedata['server'].get('battle_log_gradual_loot',False))

                    # compute loot amounts and perform resource transfers
                    looted, looted_uncapped, lost = session.res_looter.loot_building(gamedata, session, obj, obj.hp, newhp, owning_player, attacker)

                    # record amounts in session.loot and in the event_props
                    if looted or looted_uncapped or lost:
                        for res in looted:
                            if looted[res] > 0:
                                session.loot[res] = session.loot.get(res,0) + looted[res]
                                if event_props_include_loot:
                                    event_props['looted_'+res] = looted[res]
                                recalc_resources = True

                        for res in looted_uncapped:
                            if looted_uncapped[res] > 0:
                                # this is for metrics and GUI display only, no game mechanics influence
                                session.loot['looted_uncapped_'+res] = session.loot.get('looted_uncapped_'+res,0) + looted_uncapped[res]
                                if event_props_include_loot:
                                    event_props['looted_uncapped_'+res] = looted_uncapped[res]

                        for res in lost:
                            if lost[res] > 0:
                                session.loot[res+'_lost'] = session.loot.get(res+'_lost',0) + lost[res]
                                if event_props_include_loot:
                                    event_props['lost_'+res] = lost[res]
                                recalc_resources = True

                        if gamedata.get('show_uncapped_loot', False):
                            client_looted = looted_uncapped
                        else:
                            client_looted = looted

                        if (sum(client_looted.itervalues(),0) > 0):
                            update_player = True
                            retmsg.append(["LOOTED_RESOURCES", client_looted, obj.obj_id, [obj.x,obj.y], None])
                            retmsg.append(["SESSION_LOOT_UPDATE", copy.deepcopy(session.loot)])

                        # tell client about the change
                        session.res_looter.send_update(retmsg)

                        # record econ flow
                        flow_suffix = '_'+session.viewing_base.base_type if (session.viewing_base is not session.viewing_player.my_home) else ''
                        if ((not owning_player) or owning_player.is_ai()) and attacker.is_human():
                            # human attacking AI - all resources generated from thin air
                            admin_stats.econ_flow_res(session.player, 'loot', 'ai'+flow_suffix, looted)
                        elif (owning_player and owning_player.is_human()) and attacker.is_ai():
                            # AI attacking human - all resources destroyed
                            admin_stats.econ_flow_res(session.player, 'loot', 'ai_attack'+flow_suffix, dict((res, -lost[res]) for res in lost))
                        elif (owning_player and owning_player.is_human()) and attacker.is_human():
                            # human attacking human - log the frictional loss only, because the rest is a transfer
                            # EXCEPT for harvesters, which generate from "thin air" because the owner hadn't collected the resources yet
                            if obj.is_producer():
                                econ_delta = looted
                                econ_reason = 'human'+flow_suffix
                            else:
                                econ_delta = dict((res,looted.get(res,0)-lost.get(res,0)) for res in gamedata['resources'])
                                econ_reason = 'friction'+flow_suffix
                            admin_stats.econ_flow_res(session.player, 'loot', econ_reason, econ_delta)

                    if newhp == 0:
                        # give XP for destroying and looting the building
                        if attacker is session.player:
                            xp_why = 'destroy_building'

                            if obj.spec.worth_less_xp:
                                # only give 1 XP, and do not count towards the destroyed_building_levels victory bonus
                                xp = gamedata['player_xp']['destroy_building_min_xp']
                            else:
                                xp = int(obj.level * gamedata['player_xp']['destroy_building'])

                                # keep track of total levels of destroyed buildings for awarding victory bonus XP
                                session.loot['destroyed_building_levels'] = session.loot.get('destroyed_building_levels',0) + obj.level

                            if lost and sum(lost.itervalues(),0) > 0:
                                coeff = gamedata['player_xp']['pve_loot_xp' if owning_player.is_ai() else 'pvp_loot_xp']
                                xp_why += ','+'looted_from_ai' if owning_player.is_ai() else 'looted_from_human'
                                xp += int(coeff * gamedata['player_xp']['loot'] * sum(lost.itervalues(),0))

                            self.give_xp(session, retmsg, xp, xp_why, [obj.x,obj.y], obj_session_id = obj.obj_id)
                            session.loot['xp'] = session.loot.get('xp',0) + xp

                        if not obj.spec.worth_less_xp:
                            if owning_player is session.player:
                                if 'buildings_lost' not in session.loot: session.loot['buildings_lost'] = {}
                                dict_increment(session.loot['buildings_lost'], obj.spec.name, 1)
                            elif owning_player is session.viewing_player:
                                if 'buildings_killed' not in session.loot: session.loot['buildings_killed'] = {}
                                dict_increment(session.loot['buildings_killed'], obj.spec.name, 1)

                        if not obj.is_weak_zombie():
                            # check for equipment that has on_destroy consequents (such as security team spawning)
                            on_destroy_cons_list = obj.get_stat('on_destroy', obj.get_leveled_quantity(obj.spec.on_destroy))
                            if on_destroy_cons_list:
                                for cons in on_destroy_cons_list:
                                    session.execute_consequent_safe(cons, obj.owner, retmsg, context = {'source_obj': obj, 'xy': [obj.x,obj.y]}, reason='on_destroy(%s)' % obj.spec.name)

                        # check for fragile equipment
                        items_destroyed = None
                        if obj.equipment:
                            items_destroyed = []
                            for slot_type in obj.equipment:
                                for slot_num in xrange(len(obj.equipment[slot_type])):
                                    if obj.equipment[slot_type][slot_num]:
                                        if type(obj.equipment[slot_type][slot_num]) is dict:
                                            specname = obj.equipment[slot_type][slot_num]['spec']
                                        else:
                                            specname = obj.equipment[slot_type][slot_num]

                                        if specname in gamedata['items']:
                                            spec = gamedata['items'][specname]
                                            if spec.get('fragility',0) > 0 and random.random() < spec['fragility']:
                                                items_destroyed.append((slot_type, slot_num, specname))

                            for slot_type, slot_num, specname in items_destroyed:
                                removed_item = Equipment.equip_remove(obj.equipment, (slot_type, slot_num), specname)
                                # record expenditure of the item (e.g. landmines)
                                if owning_player:
                                    session.attack_item_expended(owning_player.user_id, specname, removed_item.get('stack',1))
                                    owning_player.inventory_log_event('5131_item_trashed', specname, -removed_item.get('stack',1), removed_item.get('expire_time',-1), level=removed_item.get('level',1), reason='destroyed')

                        if items_destroyed:
                            event_props['items_destroyed'] = [x[2] for x in items_destroyed]

                        session.log_attack_unit(owning_user.user_id if owning_user else 0, obj, '3920_building_destroyed', props = event_props, killer_info = killer_info)

                        # END destroyed a building
                    else:
                        if gamedata['server'].get('battle_log_gradual_loot',False):
                            session.log_attack_unit(owning_user.user_id if owning_user else 0, obj, '3921_building_damaged', props = event_props, killer_info = killer_info)

                        # END damaged, but did not destroy, a building

                    # note: damage log updates at end of battle

                    # END damaged a building

                if (attacker is session.player) and (obj.owner is not session.player) and (not obj.spec.worth_less_xp):
                    session.loot['damage_inflicted'] = session.loot.get('damage_inflicted',0) + max(0, int(obj.hp-newhp))

                obj.hp = newhp

                if obj.is_building() and obj.affects_power():
                    recalc_power = True

                # client initiated the damage - do not send OBJECT_STATE_UPDATE

                update_viewing_player = True

            # END handle damage

            # write object state to NoSQL, if it's stored there
            if session.viewing_base.is_nosql_base() and (obj in session.viewing_base.iter_objects()): # XXX inefficient
                # this will write (for hives/quarries) or not write (for player homes), as appropriate
                session.viewing_base.nosql_write_one(obj, 'OBJECT_COMBAT_UPDATES')
                # XXXXXX need to audit fields that we write - persist_state omits the -1 for x_start_time on buildings fields = ['xy','hp_ratio','orders','patrol','contents','repair_finish_time','disarmed','build_start_time','research_start_time','upgrade_start_time','produce_start_time','manuf_start_time'])

            elif owning_player and obj.is_mobile() and (not obj.spec.consumable) and SQUAD_IDS.is_mobile_squad_id(obj.squad_id or 0) and \
                 ((owning_player is not session.player) or owning_player.squad_is_deployed(obj.squad_id or 0)):
                #assert owning_player.squad_is_deployed(obj.squad_id) may be false due to out-of-date player state
                # note - second part of the "and" above handles the case when attacking out of your home base to an enemy squad that is next door
                # this is the only time when UN-DEPLOYED mobile units are seen in combat
                # un-deployed enemy mobile units are NEVER seen in combat
                assert gamesite.nosql_client
                nosql_state = obj.persist_state(nosql = True)
                nosql_state['base_id'] = owning_player.squad_base_id(obj.squad_id)
                if gamedata['server'].get('log_nosql',0) >= 3:
                    gamesite.exception_log.event(server_time, 'nosql_update player %d for %d: OBJECT_COMBAT_UPDATES %s' % \
                                                 (session.player.user_id, owning_player.user_id, repr(nosql_state)))
                # XXX should probably manually specify fields to update
                gamesite.nosql_client.update_mobile_object(session.viewing_base.base_region, nosql_state, reason='OBJECT_COMBAT_UPDATES')
            else:
                # it should be a "free" object, like a secteam
                pass

        # END for each object

        # update HP values across the board
        self.do_unit_repair_tick(session, retmsg)

        # record state changes to affected players
        if recalc_power:
            # note: this sends OBJECT_STATE_UPDATE for harvesters as well as BASE_POWER_UPDATE
            session.power_changed(session.viewing_base, None, retmsg)

        if recalc_resources:
            with admin_stats.latency_measurer('OBJECT_COMBAT_UPDATES_state'):
                if update_player:
                    retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])
                if update_viewing_player and session.has_attacked:
                    retmsg.append(["ENEMY_STATE_UPDATE", session.viewing_player.resources.calc_snapshot().serialize(enemy = True)])

    def recycle_unit(self, session, retmsg, id):
        obj = session.player.get_object_by_obj_id(id, fail_missing = False)
        if not obj:
            return
        if SQUAD_IDS.is_mobile_squad_id(obj.squad_id) and (not session.player.verify_squad(obj.squad_id)):
            return # cannot recycle units that are not at home base

        assert obj.owner is session.player
        assert obj.is_mobile()

        health_ratio = float(obj.hp)/float(obj.max_hp)
        health_ratio = min(max(health_ratio, 0.0), 1.0)

        # for better accounting, this should really be stored on the object itself
        refund = dict((res, amount) for res, amount in obj.spec.cost_to_repair(obj.level, 1.0 - health_ratio, session.player, cost_mode = obj.spec.COST_MODE_RECYCLE).iteritems() if res != 'time')

        if session.has_object(id): session.rem_object(id)
        session.player.unit_repair_cancel(obj)
        session.player.home_base_remove(obj)
        refund = session.player.resources.gain_res(refund, reason='recycled_unit')
        admin_stats.econ_flow_res(session.player, 'consumption', 'unit_recycling', refund)

        session.increment_player_metric('units_recycled', 1, bucket = True, time_series = False)
        session.increment_player_metric('unit:'+obj.spec.name+':recycled', 1, bucket = True, time_series = False)
        if obj.spec.manufacture_category:
            session.increment_player_metric(obj.spec.manufacture_category+'_recycled', 1, bucket=True, time_series = False)

        # client initiated the removal - do not send OBJECT_REMOVED or PLAYER_ARMY_UPDATE
        retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

    def destroy_object(self, session, retmsg, id, death_location, killer_info):

        if (not session.has_object(id)):
            if gamedata['server'].get('log_combat_race_conditions', False):
                gamesite.exception_log.event(server_time, 'destroy_object: player %d session is missing object %s' % (session.player.user_id,str(id)))
            return

        obj = session.get_object(id)

        # only mobile units get destroyed permanently
        assert obj.is_mobile()

        original_hp = obj.hp
        xp = 0
        xp_reason = ''

        is_home_object = False
        is_base_object = False
        is_squad_object = False
        squad_id = (obj.squad_id or 0)

        if (obj.owner is RogueOwner) or (obj.owner is EnvironmentOwner):
            owning_player = None
            owning_user_id = session.incoming_attack_id
            is_base_object = (obj in session.viewing_base.iter_objects()) # XXX inefficient
        else:
            if (obj.owner is not session.player) and (obj.owner is not session.viewing_player):
                gamesite.exception_log.event(server_time, 'Unexpected object owner '+repr(obj.owner)+' - possible bad race condition')
                owning_player = None
                owning_user_id = -1
            else:
                owning_player = obj.owner
                owning_user_id = owning_player.user_id

                is_home_object = (obj in owning_player.home_base_iter()) # XXX inefficient
                if not is_home_object:
                    is_base_object = (obj in session.viewing_base.iter_objects()) # XXX inefficient
                    if not is_base_object:
                        is_squad_object = SQUAD_IDS.is_mobile_squad_id(squad_id)
                        if is_squad_object:
                            #assert owning_player.squad_is_deployed(squad_id) - not always true if our version of the Player state is out of date
                            assert gamesite.nosql_client

        loot_stat = None
        if owning_player is session.player:
            loot_stat = 'units_lost'
        else:
            loot_stat = 'units_killed'

            if session.home_base:
                xp_reason = 'destroy_unit_defense'
            else:
                xp_reason = 'destroy_unit_offense'

        can_resurrect = obj.spec.resurrectable or (owning_player and owning_player.can_resurrect_unit(obj))

        if loot_stat:
            if loot_stat not in session.loot:
                session.loot[loot_stat] = {}
            dict_increment(session.loot[loot_stat], obj.spec.name, 1)

            if owning_player:
                cost = obj.spec.cost_to_repair(obj.level, 0, owning_player, cost_mode = obj.spec.COST_MODE_REPAIR)
                for res in gamedata['resources']:
                    dict_increment(session.loot, loot_stat+'_'+res, cost[res])

        # must come before rem_object() since it needs obj.team
        session.log_attack_unit(owning_user_id, obj, '3930_unit_destroyed', fake_xy = death_location, killer_info = killer_info)

        was_zombie = obj.is_weak_zombie()

        # note: this invalidates obj.team and removes session-only auras
        session.rem_object(id)

        if owning_player:
            owning_player.unit_repair_cancel(obj)
            if is_home_object:
                owning_player.home_base_remove(obj)
                if can_resurrect:
                    # add back as zombie unit
                    # NOTE! does not participate in the current session, it will be sent to the client on the NEXT session change!
                    # unless it's a home attack!
                    obj.hp = 0
                    owning_player.home_base_add(obj)
                    if session.home_base and gamedata.get('enable_defending_units',True):
                        session.add_object(obj)
                        retmsg.append(["OBJECT_CREATED2", obj.serialize_state()])
                        if obj.auras:
                            retmsg.append(["OBJECT_AURAS_UPDATE", obj.serialize_auras()])
                    else:
                        # remember in case we need to heal it later
                        session.resurrectable_objects.append([obj, death_location])
                else: # cannot resurrect, it's gone permanently
                    if owning_player is session.player: session.player.send_army_update_destroyed(obj, retmsg)

        if is_base_object:
            # NOTE! no resurrection possible for objects in BaseTable (in a base, not attached to a squad)
            session.viewing_base.drop_object(obj)

        if is_squad_object:
            if not can_resurrect:
                gamesite.nosql_client.drop_mobile_object_by_id(session.viewing_base.base_region, obj.obj_id, reason='DSTROY_OBJECT')
            else:
                obj.hp = 0
                nosql_state = obj.persist_state(nosql = True)
                nosql_state['base_id'] = owning_player.squad_base_id(squad_id)
                if gamedata['server'].get('log_nosql',0) >= 3:
                    gamesite.exception_log.event(server_time, 'nosql_update player %d for %d: DSTROY_OBJECT %s' % \
                                                 (session.player.user_id, owning_player.user_id, repr(nosql_state)))
                gamesite.nosql_client.update_mobile_object(session.viewing_base.base_region, nosql_state, reason='DSTROY_OBJECT')

        if xp_reason:
            xp = int(obj.level * gamedata['player_xp'][xp_reason])
            # note: no saving of player state here, it will be saved at the end of the battle
            self.give_xp(session, retmsg, xp, xp_reason, death_location, obj_session_id = obj.obj_id)
            session.loot['xp'] = session.loot.get('xp',0) + xp

            if (obj.owner is not session.player):
                session.loot['damage_inflicted'] = session.loot.get('damage_inflicted',0) + int(original_hp)

        # client initiated the removal - do not send OBJECT_REMOVED

        if session.damage_log: session.damage_log.record(obj) # record immediately since it may leave the session and/or bases

        if not was_zombie:
            on_destroy_cons_list = obj.owner.stattab.get_unit_stat(obj.spec.name, 'on_destroy', obj.get_leveled_quantity(obj.spec.on_destroy))
            if on_destroy_cons_list:
                for cons in on_destroy_cons_list:
                    session.execute_consequent_safe(cons, obj.owner, retmsg, context = {'source_obj':obj, 'xy':death_location}, reason='on_destroy(%s)' % obj.spec.name)

    def do_harvest_all(self, session, retmsg, base_type, region_id, base_id, object_list, power_factor, base_info):
        base_loot = {} if base_id != session.viewing_base.base_id else None

        total_harvested = 0
        for object in object_list:
            if object.is_building() and object.is_producer() and \
               (not object.is_damaged()) and (not object.is_under_construction()) and (not object.is_upgrading()):
                total_harvested += self.do_harvest_one(session, retmsg, base_type, region_id, base_id, object, power_factor, base_info, base_loot)

        if total_harvested > 0:
            if base_info:
                # send all remote harvesters in one big message
                retmsg.append(["HARVESTED_RESOURCES", base_loot, -1, None, base_info['base_type'], base_info['base_ui_name']])

        return total_harvested

    # collect from a harvester, covers both home and quarry cases
    # 'base_info' triggers the quarry behavior, where all harvesters are coalesced into one HARVESTED_RESOURCES message
    def do_harvest_one(self, session, retmsg, base_type, region_id, base_id, object, power_factor, base_info, base_loot):
        if not object.is_producer(): return 0
        assert object.owner is session.player

        if object.is_damaged():
            retmsg.append(["ERROR", "HARVESTER_DAMAGED"])
            return 0
        if object.is_under_construction() or object.is_upgrading():
            retmsg.append(["ERROR", "HARVESTER_UNDER_CONSTRUCTION"])
            return 0

        # calculate max storage capacity
        snapshot = session.player.resources.calc_snapshot()

        # at most how many units can be harvested?
        resource = None
        for res in gamedata['resources']:
            if object.get_leveled_quantity(getattr(object.spec, 'produces_'+res)) > 0:
                limit = snapshot.max_res(res) - snapshot.cur_res(res)
                resource = res
                break
        assert resource

        bonus = 0
        if limit > 0:
            harvested = object.harvest(object.owner, limit)
            object.update_production(object.owner, base_type, region_id, power_factor)
            if base_type == 'quarry':
                assert gamesite.nosql_client
                state = object.persist_state(nosql = True)
                newstate = {'obj_id': state['obj_id'], 'contents':state.get('contents',0),
                            'produce_start_time':state.get('produce_start_time',-1), 'produce_rate': state.get('produce_rate',-1)}
                gamesite.nosql_client.update_fixed_object(region_id, newstate, partial = True, reason='QUARRY_COLLECT')
                yield_factor = session.player.stattab.get_player_stat('quarry_yield_bonus')
                if base_info and base_info['base_template'] and (base_info['base_template'] in gamedata['quarries_server']['templates']):
                    template = gamedata['quarries_server']['templates'][base_info['base_template']]
                    if template.get('turf_points',0) > 0:
                        yield_factor *= session.player.stattab.get_player_stat('turf_quarry_yield_bonus')
                if yield_factor > 1:
                    bonus = min(int((yield_factor-1.0)*harvested), limit-harvested)
        else:
            harvested = 0

        if harvested > 0:
            session.increment_player_metric('resources_harvested', harvested+bonus, bucket = True, time_series = False) # avoid history bloat
            session.player.resources.gain_res({resource:harvested+bonus}, reason='harvested', break_limit = True) # amounts already capped
            session.increment_player_metric('harvested_'+resource+'_total', harvested+bonus, time_series = False, bucket = True)
            dict_setmax(session.player.history, 'harvested_'+resource+'_at_once', harvested+bonus)

            admin_stats.econ_flow_res(session.player, 'harvesting', 'harvesters_'+base_type, {resource:harvested})
            if bonus > 0:
                admin_stats.econ_flow_res(session.player, 'harvesting', 'harvesters_'+base_type+'_bonus', {resource:bonus})

            loot = {resource:harvested}
            if bonus > 0:
                loot[resource+'_bonus'] = bonus

            map_pos = [object.x, object.y] if session.has_object(object.obj_id) else [-1,-1]

            if base_loot is not None:
                base_loot[resource] = base_loot.get(resource,0) + harvested
                if bonus > 0:
                    base_loot[resource+'_bonus'] = base_loot.get(resource+'_bonus',0) + bonus

            if base_type == 'quarry' and region_id:
                session.player.modify_scores({'quarry_resources': harvested+bonus}, reason = 'QUARRY_COLLECT(do_harvest_one)')
                if base_info and base_info['base_template'] and (base_info['base_template'] in gamedata['quarries_server']['templates']):
                    template = gamedata['quarries_server']['templates'][base_info['base_template']]
                    if template.get('turf_points',0) > 0:
                        session.player.modify_scores({'strongpoint_resources': harvested+bonus}, reason = 'QUARRY_COLLECT(do_harvest_one)')

            if base_id == session.viewing_base.base_id:
                retmsg.append(["HARVESTED_RESOURCES", loot, object.obj_id, map_pos, base_type, base_info['base_ui_name'] if base_info else None])

            self.give_xp(session, retmsg, int(gamedata['player_xp']['harvest'] * (harvested+bonus)), 'harvest', map_pos, obj_session_id = object.obj_id)
            if session.has_object(object.obj_id):
                retmsg.append(["OBJECT_STATE_UPDATE2", object.serialize_state(update_xy = False)])
        return harvested

    def do_collect_one_deposit(self, session, retmsg, object):
        assert object.is_inert()
        assert object.owner is session.player
        if "COLLECT_DEPOSIT" not in object.spec.spells: return
        snap = session.player.resources.calc_snapshot()
        resource = 'iron'
        harvested = object.metadata.get(resource,0)
        descr = 'home' if (object in session.player.home_base_iter()) else 'quarry'
        loot = session.player.resources.gain_res({resource:harvested}, reason='collect_deposit', snap = snap)

        admin_stats.econ_flow_res(session.player, 'harvesting', 'outcrops_'+descr, loot)

        if 'gamebucks' in object.metadata:
            loot['gamebucks'] = object.metadata['gamebucks']
            session.player.resources.gain_gamebucks(loot['gamebucks'], reason='iron_deposit')
            dict_increment(session.player.history, 'iron_deposit_gamebucks', loot['gamebucks'])
            session.setvalue_player_metric('gamebucks_balance', session.player.resources.gamebucks, bucket=True, bucket_size=15*60)

        map_pos = [object.x, object.y] if session.has_object(object.obj_id) else [-1,-1]
        retmsg.append(["HARVESTED_RESOURCES", loot, object.obj_id, map_pos, None, None])

        dict_increment(session.player.history, 'iron_deposits_collected', 1)

        self.give_xp(session, retmsg, int(gamedata['player_xp']['collect_deposit'] * harvested), 'collect_deposit', map_pos, obj_session_id = object.obj_id)

        if session.has_object(object.obj_id):
            retmsg.append(["OBJECT_REMOVED", object.obj_id, session.player.resources.calc_snapshot().serialize()])
            session.rem_object(object.obj_id)

        if descr == 'home':
            session.player.my_home.drop_object(object)
        else:
            session.viewing_base.drop_object(object)

    # outermost wrapper - perform HTTP request processing
    def render_POST(self, request):
        update_server_time()
        SpinHTTP.set_access_control_headers(request)
        if gamedata['server']['use_http_keep_alive'] and SpinHTTP.get_twisted_header(request, 'connection').lower() == 'keep-alive':
            request.setHeader('Connection', 'keep-alive')
            request.setHeader('Keep-Alive', 'timeout=%d' % gamedata['server']['http_connection_timeout'])

        client_ip = SpinHTTP.get_twisted_client_ip(request, proxy_secret = SpinConfig.config['proxy_api_secret'])
        user_agent = SpinHTTP.get_twisted_header(request, 'user-agent')
        args_dict = dict((k, request.args[k][0]) for k in request.args)

        return self.render_request(request, args_dict, client_ip, user_agent)

    def render_request(self, http_request, args_dict, client_ip, user_agent):
        error_response = None
        try:
            response = self.do_render_request(http_request, args_dict, client_ip, user_agent)

        except:
            # try to determine user id
            suser_id = 'unknown'
            if 'session' in args_dict:
                session_id = args_dict['session']
                session = get_session_by_session_id(session_id, include_logout_in_progress = True)
                if session:
                    suser_id = str(session.user.user_id)

            gamesite.exception_log.event(server_time, 'GAMEAPI Exception (user '+suser_id+'): '+traceback.format_exc().strip()) # OK

            # return a formatted error for the client
            http_request.setHeader('Connection', 'close') # stop keepalive
            error_response = SpinJSON.dumps({'serial':-1, 'clock': server_time, 'msg': [["ERROR", "SERVER_EXCEPTION"]]})

        return error_response or response

    def do_render_request(self, http_request, args_dict, client_ip, user_agent):
        if 'proxy_keepalive_only' in args_dict:
            # note: this is for the PROXYSERVER keepalive, so don't bother looking at session
            return "true\n"
        elif 'ping_only' in args_dict: # respond to latency probe
            return "ok\n"

        arg = None

        # parse list of messages sent by client
        if ('myarg' in args_dict):
            try:
                if type(args_dict['myarg']) is list: # websocket literal
                    arg = args_dict['myarg']
                else:
                    arg = SpinJSON.loads(args_dict['myarg'])
            except:
                arg = None
                # only log exception if it's not an empty request
                if True or len(args_dict) > 1:
                    gamesite.exception_log.event(server_time, 'bad client message! ' + repr(http_request) + ' args ' + repr(args_dict) + ' from '+repr(client_ip) + ' User-Agent "'+ user_agent +'" Exception: ' + traceback.format_exc().strip()) # OK

        if arg is None:
            http_request.setHeader('Connection', 'close') # stop keepalive
            return SpinJSON.dumps({'serial':-1, 'clock': server_time, 'msg': [["ERROR","UNKNOWN_SESSION"]]})

        session_id = args_dict["session"]
        serial = int(args_dict["serial"])
        keepalive = ('nokeepalive' not in args_dict)

        if gamesite.raw_log:
            if session_id and session_table.has_key(session_id):
                client_str = 'user %d' % session_table[session_id].user.user_id
            else:
                client_str = 'sid %s' % pretty_print_session(session_id)
            log.msg(('from client (%s:%d): ' % (client_str, serial)) +repr(arg))

        session = None

        # CLIENT_HELLO message is handled as a special case, because it does not have a session yet
        if arg[0][0] == "CLIENT_HELLO":

            retmsg = [] # to trap errors only - will be connected to session.outgoing_messages after session set-up
            go_async = self.handle_client_hello(http_request, client_ip, user_agent, arg[0], retmsg)

            arg = arg[1:]

            if go_async:
                # go asynchronous, breaking out of message processing here
                # eventually the relevant async callback should call complete_deferred_request()
                return server.NOT_DONE_YET

            # some kind of error happened
            http_request.setHeader('Connection', 'close') # stop keepalive
            return SpinJSON.dumps({'serial':-1, 'clock': server_time, 'msg': retmsg})

        else:
            session = get_session_by_session_id(session_id)
            if not session:
                http_request.setHeader('Connection', 'close') # stop keepalive
                return SpinJSON.dumps({'serial':-1, 'clock': server_time, 'msg': [["ERROR", "UNKNOWN_SESSION"]]})

            # after this point, session is guaranteed to be valid

            if keepalive:
                session.last_active_time = server_time

            if arg[0][0] == "LONGPOLL":
                assert len(arg) == 1 and len(arg[0]) == 1
                return self.handle_longpoll(http_request, session)

            # compare serial number of incoming message vs. the next expected serial number
            if (serial < session.incoming_serial):
                http_request.setHeader('Connection', 'close') # stop keepalive
                return SpinJSON.dumps({'serial':-1, 'clock': server_time, 'msg': [["ERROR", "SERVER_PROTOCOL"]]})

            if len(session.message_buffer) >= gamedata['server']['session_message_buffer']:
                # client is too far ahead of us
                if not session.lagged_out:
                    session.lagged_out = True
                    metric_event_coded(session.user.user_id, '0955_lagged_out', {'method':str(len(session.message_buffer)),
                                                                                 'country': session.user.country })
                http_request.setHeader('Connection', 'close') # stop keepalive
                return SpinJSON.dumps({'serial':-1, 'clock': server_time, 'msg': [["ERROR", "TOO_LAGGED"]]})

        session.message_buffer.append([serial, arg])
        #if len(session.message_buffer) > 1: print 'client stream is lagging by %d AJAX requests' % len(session.message_buffer)

        if isinstance(http_request, WSFakeRequest): # XXXXXX nasty hack
            # park this request as the longpoll request so we have something to write the client back on
            if session.longpoll_request is None:
                session.longpoll_request = http_request
                session.longpoll_request_time = -1 # no need to force a keepalive, and reuse this request multiple times

        session.sync_requests.append(http_request)
        session.queue_flush_outgoing_messages()
        return server.NOT_DONE_YET

    # process as many bundles of AJAX messages on a session as possible
    # may terminate early if bundles are out of order, or may go asynchronous
    # returns True if going asynchronous, otherwise False.

    def handle_message_buffer(self, session, retmsg):
        # look through the message buffer for a processable message bundle
        i = 0
        start_time = -1

        while i < len(session.message_buffer):
            if session.is_async():
                # prevent re-entry of handle_message_buffer() on a subsequent client message while an async request is still happening
                # the client will get its answer from complete_deferred_message after the async request completes
                #gamesite.exception_log.event(server_time, 'user %d: skipping message processing while async in flight, in %d out %d buf %s' % (session.user.user_id, session.incoming_serial, session.outgoing_serial, repr(session.message_buffer)))
                break

            if session.logout_in_progress: # allow no further message processing after logout begins
                break

            if session.message_buffer[i][0] == session.incoming_serial:

                # ok, we got the next expected message bundle
                serial_arg = session.message_buffer[i]

                # process as many messages as we can in this budle
                # for each message in the bundle
                while len(serial_arg[1]) > 0:
                    # pull the message off the queue
                    # (throughout this entire function, we leave the session in a valid state, in case
                    # we have to go asynchronous and come back later)
                    msg = serial_arg[1].pop(0)

                    if msg[0] == "CAST_SPELL":
                        latency_tag = msg[0] + '('+msg[2]+')'
                    elif msg[0] == "INVENTORY_USE":
                        latency_tag = msg[0] + '('+msg[2]['spec']+')'
                    elif 0 and msg[0] == "QUARRY_QUERY":
                        latency_tag = msg[0] + ('_FULL' if msg[2]<=0 else '_INCREMENTAL')
                    else:
                        latency_tag = msg[0]

                    session.debug_log_action(latency_tag)

                    try:
                        if start_time < 0: start_time = time.time()

                        go_async = self.handle_message_guts(session, msg, retmsg)

                        end_time = time.time()


                        admin_stats.record_latency(latency_tag, end_time-start_time)
                        start_time = end_time # ends up including the list-processing stuff below in the next message, but that should be fast

                        if True or latency_tag not in ('PING_PLAYER', 'PLAYER_STATE_QUERY',
                                                       'UNIT_REPAIR_TICK', 'OBJECT_COMBAT_UPDATES',
                                                       'REPORT_METRIC'):
                            session.last_action.append({'tag':latency_tag, 'time':server_time, 'keepalive':session.last_active_time == server_time})

                        if go_async:
                            assert isinstance(go_async, defer.Deferred)
                            if not deferred_is_finished(go_async):
                                # go asynchronous, breaking out of message processing here
                                if (not session.logout_in_progress) and (go_async not in session.async_ds):
                                    gamesite.exception_log.event(server_time, 'handle_message_guts did not install async_d: %s' % (latency_tag))
                                    session.start_async_request(go_async)
                                return

                    except Exception:
                        gamesite.exception_log.event(server_time, 'handle_message_guts exception %s msg %s: %s' % (session.dump_exception_state(), latency_tag, traceback.format_exc().strip())) # OK
                        retmsg.append(["ERROR", "SERVER_EXCEPTION"])
                        break

                if len(serial_arg[1]) == 0:
                    # processed one complete bundle. Advance to next.
                    session.message_buffer.pop(i)
                    session.incoming_serial += 1

                i = 0
            else:
                i += 1

    # we're about to send a response to the client. Run any pending batched actions.
    @admin_stats.measure_latency('run_deferred_actions')
    def run_deferred_actions(self, session, retmsg, reason = 'unknown'):
        do_player_cache_update = False

        if session.deferred_ping_squads:
            session.deferred_ping_squads = False
            session.player.ping_squads_and_send_update(session, retmsg, originator = session.player.user_id, reason='run_deferred_actions(%s)' % reason)

        if session.deferred_ladder_point_decay_check:
            session.deferred_ladder_point_decay_check = False
            session.player.ladder_point_decay_check(session, retmsg)

        if session.deferred_stattab_update:
            session.deferred_stattab_update = False
            session.player.recalc_stattab(session.player)
            session.player.stattab.send_update(session, retmsg)

        if session.deferred_mailbox_update:
            session.deferred_mailbox_update = False
            session.player.send_mailbox_update(retmsg)

        if session.deferred_power_change: # probably needs to come after stattab
            session.deferred_power_change = False
            session.power_changed(session.viewing_base, None, retmsg)

        if session.deferred_history_update:
            session.deferred_history_update = False
            session.player.send_history_update(retmsg)

        if session.deferred_object_state_updates:
            updates = session.deferred_object_state_updates
            session.deferred_object_state_updates = set()
            for obj in updates:
                if session.has_object(obj.obj_id):
                    retmsg.append(["OBJECT_STATE_UPDATE2", obj.serialize_state()])

        if session.deferred_player_state_update:
            session.deferred_player_state_update = False
            retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

        if session.deferred_player_auras_update:
            session.deferred_player_auras_update = False
            retmsg.append(["PLAYER_AURAS_UPDATE", session.player.player_auras])

        if session.deferred_player_cooldowns_update:
            session.deferred_player_cooldowns_update = False
            retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])

        if session.deferred_donated_units_update:
            session.deferred_donated_units_update = False
            retmsg.append(["DONATED_UNITS_UPDATE", session.player.donated_units])

        if session.deferred_player_name_update:
            session.deferred_player_name_update = False
            retmsg.append(["PLAYER_UI_NAME_UPDATE", session.user.get_ui_name(session.player)])
            retmsg.append(["PLAYER_ALIAS_UPDATE", session.player.alias])
            retmsg.append(["PLAYER_TITLES_UPDATE", session.player.title])
            do_player_cache_update = True

        if session.deferred_player_trophies_update:
            session.deferred_player_trophies_update = False
            do_player_cache_update = True

        if do_player_cache_update:
            retmsg.append(["PLAYER_CACHE_UPDATE", [self.get_player_cache_props(session.user, session.player, session.alliance_id_cache)]])

    def complete_deferred_request(self, request, session, retmsg):
        # works for both standard HTTP request and WSFakeRequest

        if request and hasattr(request, '_disconnected') and request._disconnected: return

        # note: retmsg is ONLY used to convey error messages that happen prior to session set-up
        # once the session is alive, only session.outgoing_messages is used for transmission

        if not session: # can happen on async login failure
            assert request
            # DO pay attention to retmsg here
            r = SpinJSON.dumps({'serial':-1, 'clock': server_time, 'msg': retmsg})
            request.setHeader('Connection', 'close') # stop keepalive
            request.write(r)

        else:
            # note: IGNORE retmsg here - all traffic is on session.outgoing_messages
            if gamesite.raw_log:
                client_str = 'sid %s' % pretty_print_session(session.session_id)
                log.msg(('to   client (%s:%d): ' % (client_str, session.outgoing_serial))+repr(retmsg))

            msg = session.outgoing_messages[:]
            del session.outgoing_messages[:] # note: do not create a new array, since in-flight async requests may reference it

            if len(msg) == 0 and not isinstance(request, WSFakeRequest): # must send something in HTTP response, but not websocket
                msg.append(["NOMESSAGE"])

            if len(msg) > 0:
                r = SpinJSON.dumps({'serial': session.outgoing_serial,
                                    'clock': time.time() if gamedata['server'].get('send_high_precision_time',True) else server_time,
                                    'msg': msg})
                session.outgoing_serial += 1
                request.write(r)

        request.finish()

    def complete_longpoll(self, request, session):
        # works for both standard HTTP request and WSFakeRequest

        if hasattr(request, '_disconnected') and request._disconnected: return

        msg = session.outgoing_messages[:]
        del session.outgoing_messages[:] # note: do not create a new array, since in-flight async requests may reference it

        if len(msg) == 0 and not isinstance(request, WSFakeRequest): # must send something in HTTP response, but not websocket
            msg.append(["NOMESSAGE"])

        if len(msg) > 0:
            r = SpinJSON.dumps({'serial': session.outgoing_serial, 'longpoll':1,
                                'clock': time.time() if gamedata['server'].get('send_high_precision_time',True) else server_time,
                                'msg': msg})
            session.outgoing_serial += 1
            request.write(r)

        request.finish()

    def handle_longpoll(self, request, session):
        if session.longpoll_request: # overlapped request, respond to the previous one immediately
            self.complete_longpoll(session.longpoll_request, session)
        session.longpoll_request = request
        session.longpoll_request_time = server_time
        if len(session.outgoing_messages) > 0 or session.logout_in_progress:
            # plan to respond immediately if messages are pending, or if we're on our way out
            session.queue_flush_outgoing_messages()
        return server.NOT_DONE_YET # park the request

    # the login process is broken into two parts:
    # 1) handle_client_hello(): pre-user/player lookup
    #    (lock acquired here)
    # --- asynchronous userdb/playerdb read happens here ---
    # 2) complete_client_hello(): post-user/player lookup

    # AsyncLogin encapsulates the state that needs to be carried over between steps 1) and 2)
    #
    # If another login or a termination request comes in between 1) and 2), AsyncLogin is responsible
    # for dropping the lock and nullifying the request it is responding to.

    class AsyncLogin (object):
        # table of currently "live" AsyncLogins that have locks and will end successfully unless cancelled
        in_progress_by_user_id = {}
        in_progress_by_session_id = {}

        @classmethod
        def cancel_existing(cls, user_id, session_id):
            for aslogin in (cls.in_progress_by_user_id.get(user_id, None), cls.in_progress_by_session_id.get(session_id, None)):
                if aslogin and (not aslogin.cancel_reason):
                    if gamedata['server']['log_abnormal_logins'] >= 2:
                        gamesite.exception_log.event(server_time, 'canceling pending login for user %s session %s' % (repr(user_id),repr(session_id)))
                    aslogin.cancel("CANNOT_LOG_IN_SIMULTANEOUS")

        def __init__(self, api, request, retmsg, session_id, frame_platform, social_id, auth_token,
                     user_id, lockgen, metrics_anon_id, user_demographics, client_browser_caps,
                     client_session_data, query_string, client_permissions, client_login_country,
                     client_ip):
            self.api = api
            self.request = request
            self.retmsg = retmsg
            self.session_id = session_id
            self.frame_platform = frame_platform
            self.social_id = social_id
            self.auth_token = auth_token
            self.user_id = user_id
            self.lockgen = lockgen
            self.metrics_anon_id = metrics_anon_id
            self.user_demographics = user_demographics
            self.client_browser_caps = client_browser_caps
            self.client_session_data = client_session_data
            self.query_string = query_string
            self.client_permissions = client_permissions
            self.client_login_country = client_login_country
            self.client_ip = client_ip

            self.cancel_reason = None
            self.user = None
            self.player = None
            # need separate flags because "None" is a valid return value for user/player retrieval
            self.got_user = False
            self.got_player = False
            self.has_lock = True

            self.in_progress_by_user_id[user_id] = self
            self.in_progress_by_session_id[session_id] = self

        # called once userdb entry is retrieved
        def user_cb(self, success, user):
            self.got_user = True
            if success:
                self.user = user
            else:
                self.cancel("CANNOT_LOG_IN_IO_FAIL")
                gamesite.exception_log.event(server_time, 'userdb lookup for %d failed on login, cancelling' % self.user_id)
            self.try_finish()

        # called once playerdb entry is retrieved
        def player_cb(self, success, player):
            self.got_player = True
            if success:
                self.player = player
            else:
                self.cancel("CANNOT_LOG_IN_IO_FAIL")
                gamesite.exception_log.event(server_time, 'playerdb lookup for %d failed on login, cancelling' % self.user_id)
            self.try_finish()

        # mark login attempt as cancelled and release the lock
        def cancel(self, cancel_reason):
            self.cancel_reason = cancel_reason
            if self.has_lock:
                ascdebug('UNLOCKED player %d (cancel)' % self.user_id)
                gamesite.lock_client.player_lock_release(self.user_id, -1, Player.LockState.logged_in, expected_owner_id = self.user_id)
                self.has_lock = False
            if self.user_id in self.in_progress_by_user_id:
                del self.in_progress_by_user_id[self.user_id]
            if self.session_id in self.in_progress_by_session_id:
                del self.in_progress_by_session_id[self.session_id]

        def try_finish(self):
            if (not self.got_user) or (not self.got_player): return
            if self.cancel_reason:
                # just send back the error and quit, do not overwrite userdb/playerdb data!
                assert not self.has_lock
                if gamedata['server']['log_abnormal_logins'] >= 2:
                    gamesite.exception_log.event(server_time, 'ignoring user/player data for cancelled login %d: %s' % (self.user_id, self.cancel_reason))
                self.retmsg.append(["ERROR", self.cancel_reason])
                return self.api.complete_deferred_request(self.request, None, self.retmsg) # OK - do want to work with the raw request here
            assert self.has_lock
            del self.in_progress_by_user_id[self.user_id]
            del self.in_progress_by_session_id[self.session_id]
            return self.api.complete_client_hello(self.request, self.retmsg, self.user_id, self.frame_platform, self.social_id, self.auth_token, self.lockgen, self.user, self.player, self.session_id, self.metrics_anon_id, self.user_demographics, self.client_browser_caps, self.client_session_data, self.query_string, self.client_permissions, self.client_login_country, self.client_ip)

    # handle initial handshake message from client
    # returns whether or not to go async
    @admin_stats.measure_latency('handle_client_hello')
    def handle_client_hello(self, request, client_ip, user_agent, arg, retmsg):
        # check IP bans
        if client_ip and str(client_ip) in gamedata['server']['banned_ips']:
            gamesite.exception_log.event(server_time, 'prevented banned IP %s from logging in' % client_ip)
            retmsg.append(["ACCOUNT_BANNED"])
            return False

        # check arguments
        if len(arg) != 18:
            retmsg.append(["ERROR", "CANNOT_LOG_IN_VERSION_MISMATCH_GAMECODE"])
            return False

        query_string = SpinHTTP.unwrap_string(arg[1])
        #not_used = arg[2]
        client_social_id = arg[3]
        metrics_anon_id = arg[4]
        client_session_id = arg[5]
        user_demographics = arg[6]
        client_browser_caps = arg[7]
        client_gamedata_build_info = arg[8]
        client_gamecode_build_date = arg[9]
        client_session_time = int(arg[10])
        client_session_data = arg[11]
        client_auth_token = arg[12]
        client_session_sig = arg[13]
        client_permissions = arg[14]
        client_gamedata_checksums = arg[15]
        client_login_country = arg[16]
        client_user_id = arg[17]

        # check that the session id has not been invalidated by a previous call to CONTROLAPI
        if client_session_id in invalid_sessions:
            if gamedata['server']['log_abnormal_logins'] >= 2:
                gamesite.exception_log.event(server_time, 'user %d logged in with invalidated session %s' % \
                                             (client_user_id, client_session_id))
            retmsg.append(["ERROR", "CANNOT_LOG_IN_SIMULTANEOUS"])
            return False

        # check that proxyserver session signature is valid
        server_session_sig = SpinSignature.sign_session(client_user_id, client_login_country, client_session_id, client_session_time, spin_server_name, client_social_id, client_auth_token, client_session_data, SpinConfig.config['proxy_api_secret'])
        if client_session_sig != server_session_sig:
            gamesite.exception_log.event(server_time, 'user %d logged in with invalid proxy signature: ID %s time %d servername %s data "%s" client "%s" server "%s" from IP %s user-agent "%s"' % \
                                         (client_user_id, client_session_id, client_session_time, spin_server_name, client_session_data, client_session_sig, server_session_sig, repr(client_ip),
                                          user_agent))
            retmsg.append(["ERROR", "CANNOT_LOG_IN_PROXY_SIGNATURE_INVALID"])
            return False

        # check that proxyserver session signature is recent
        if (server_time >= client_session_time + gamedata['server']['session_signature_time_tolerance']):
            if gamedata['server']['log_abnormal_logins'] >= 2:
                gamesite.exception_log.event(server_time, 'user %d logged in with outdated proxy signature (%d sec old)' % \
                                             (client_user_id, server_time - client_session_time))
            retmsg.append(["ERROR", "CANNOT_LOG_IN_PROXY_SIGNATURE_OUTDATED"])
            return False

        # we can now trust the client_ params that are in the session signature
        user_id = client_user_id

        # throttle logins if IO system is overloaded
        if io_system.overloaded() and (user_id not in SpinConfig.config.get('developer_user_id_list',[])):
            retmsg.append(["ERROR", "CANNOT_LOG_IN_SERVER_OVERLOAD"])
            gamesite.exception_log.event(server_time, 'I/O overload! denied login to %d' % user_id)
            return False

        frame_platform = client_social_id[0:2]
        assert frame_platform in ('fb','kg','ag')

        # check gamedata against server version
        client_gamedata_date = client_gamedata_build_info.get('date','nodate') if client_gamedata_build_info else 'none'
        if client_gamedata_date != gamedata['gamedata_build_info']['date']:
            gamesite.exception_log.event(server_time, 'user %d logged in with mismatched gamedata build date: client "%s" server "%s"' % \
                                         (user_id, client_gamedata_date, gamedata['gamedata_build_info']['date']))
            retmsg.append(["ERROR", "CANNOT_LOG_IN_VERSION_MISMATCH_GAMEDATA"])
            return False

        # check compiled client against server version
        if SpinConfig.config.get('use_compiled_client', False) and client_gamecode_build_date != gameclient_build_date:
            gamesite.exception_log.event(server_time, 'user %d logged in with mismatched compiled-client.js build: client "%s" server "%s"' % \
                                         (user_id, client_gamecode_build_date, gameclient_build_date))
            retmsg.append(["ERROR", "CANNOT_LOG_IN_VERSION_MISMATCH_GAMECODE"])
            return False

        # if there are any pre-existing sessions for this user, wait until they log out completely
        wait_for_session = None
        wait_reason = None

        if client_session_id in session_table:
            wait_for_session = session_table[client_session_id]
            wait_reason = 'double_login'
        else:
            sess = get_session_by_user_id(user_id, include_logout_in_progress = True)
            if sess:
                wait_for_session = sess
                wait_reason = 'relog'

        if wait_for_session:

            # best to just stop the login attempt right here.
            if gamedata['server']['log_abnormal_logins'] >= 2:
                gamesite.exception_log.event(server_time, 'stopping login for user %d after %s' % (user_id, wait_reason))
            retmsg.append(["ERROR", "CANNOT_LOG_IN_SIMULTANEOUS"])
            return False

        # ensure that only one login on a user_id runs to successful completion
        self.AsyncLogin.cancel_existing(user_id, client_session_id)

        # not sure if there's a race window right here...

        # acquire player lock
        lockret, lockgen = gamesite.lock_client.player_lock_acquire_login(user_id, owner_id = user_id)
        if lockret == -Player.LockState.being_attacked or lockret == -Player.LockState.logged_in or lockret < 0:
            retmsg.append(["ERROR", "CANNOT_LOG_IN_WHILE_UNDER_ATTACK"])
            return False

        ascdebug('LOCKED player %d in session %s' % (user_id, client_session_id))

        # open a new session, using the ID passed in by the client
        aslogin = self.AsyncLogin(self, request, retmsg, client_session_id, frame_platform, client_social_id, client_auth_token,
                                  user_id, lockgen, metrics_anon_id, user_demographics, client_browser_caps,
                                  client_session_data, query_string, client_permissions, client_login_country, client_ip)

        # begin async lookups into userdb and playerdb
        user_table.lookup_async(user_id, aslogin.user_cb, 'login')
        player_table.lookup_async(None, user_id, True, aslogin.player_cb, 'login')

        # send active session count to server status table
        if gamesite.nosql_client and gamedata['server'].get('update_server_status_on_login', True):
            gamesite.nosql_client.server_status_update(spin_server_name, {'active_sessions':admin_stats.get_active_sessions()}, reason='login')

        return True

    @admin_stats.measure_latency('complete_client_hello')
    def complete_client_hello(self, request, retmsg, user_id, *args):
        d = None # deferred for completion

        try:
            d = self.do_complete_client_hello(request, retmsg, user_id, *args)
            if d is not None:
                # note: if complete_client_hello2() fails, the session arg here will be None
                d.addBoth(lambda session, d=d, request=request, retmsg=retmsg: session.complete_async_request(None, d) if session else self.complete_deferred_request(request, None, retmsg)) # OK

        except:
            retmsg[:] = [["ERROR", "SERVER_EXCEPTION"]] # blow away old message, because session is not going to be set up
            gamesite.exception_log.event(server_time, ('complete_client_hello Exception (player %d): ' % user_id) + traceback.format_exc().strip()) # OK

        if d is None: # failure path
            ascdebug('UNLOCKED player %d (client_hello failure)' % user_id)
            gamesite.lock_client.player_lock_release(user_id, -1, Player.LockState.logged_in, expected_owner_id = user_id)
            self.complete_deferred_request(request, None, retmsg) # OK - failure path

    def do_complete_client_hello(self, request, retmsg, user_id, frame_platform, social_id, auth_token, lockgen, user, player, session_id,
                                 metrics_anon_id, user_demographics, client_browser_caps, client_session_data, query_string, client_permissions, client_login_country,
                                 client_ip):

        d = make_deferred('do_complete_client_hello') # OK - login path is special - we'll return this for the caller

        # parse query string
        url_qs = urlparse.parse_qs(query_string)

        acq_data = None

        if not acq_data:
            try:
                acq_data = get_acquisition_data_from_url('/?'+query_string, user_id)
            except:
                gamesite.exception_log.event(server_time, ('error in get_acquisition_data_from_url user %d "%s": ' % (user_id, query_string)) + traceback.format_exc().strip()) # OK
                pass

        # prep user ###############################

        if user is None:
            # person has never played our game before
            user = User(user_id)
            user.account_creation_time = server_time
            if not spin_secure_mode: # mark new accounts as developers
                user.developer = 1

        user.frame_platform = frame_platform
        user.social_id = social_id
        user.last_login_time = server_time
        user.last_login_ip = client_ip
        user.uninstalled = 0

        # update profile fields
        if frame_platform == 'fb':
            user.fb_oauth_token = auth_token

            user.facebook_id = social_id[2:]
            if not user.facebook_name:
                user.facebook_name = '(waiting for Facebook)'
            if not user.facebook_first_name:
                user.facebook_first_name = 'unknown'

        elif frame_platform == 'kg':
            user.kg_auth_token = auth_token
            user.kg_id = social_id[2:]
            if not user.kg_username:
                user.kg_username = '(waiting for Kongregate)'

            if ('kg_conversion_pixels' in gamedata['adnetworks']) and (not user.kg_conversion_pixels_context):
                user.kg_conversion_pixels_context = user.kg_id
                user.log_adnetwork_event('kg_conversion_pixels', {'user_id':user_id, 'kpi':'context_attached',
                                                                  'context':user.kg_conversion_pixels_context})
        elif frame_platform == 'ag':
            user.ag_auth_token = auth_token
            user.ag_id = social_id[2:]
            if not user.ag_username:
                user.ag_username = '(waiting for Armor Games)'

        user.browser_name = str(user_demographics[0]) if user_demographics[0] != 'unknown' else None
        try:
            user.browser_version = int(user_demographics[1]) if user_demographics[1] != 'unknown' else None
        except ValueError:
            user.browser_version = None
        user.browser_os = str(user_demographics[2]) if user_demographics[2] != 'unknown' else None
        user.locale = str(user_demographics[3]) if user_demographics[3] != 'unknown' else None
        if len(user_demographics) > 4: user.browser_hardware = str(user_demographics[4]) if user_demographics[4] != 'unknown' else None

        for cap in gamedata['browser_caps']:
            if cap in client_browser_caps:
                user.browser_caps[cap] = int(client_browser_caps[cap])

        user.country = client_login_country

        if ('country_override' in url_qs) and user.is_developer():
            user.country = str(url_qs['country_override'][0])

        # prep player ###############################

        if not player:
            # person has never played THIS game before
            player = LivePlayer(user.user_id)
            player.creation_time = server_time
        else:
            # check generation number to make sure we do not have stale data
            if lockgen >= 0 and player.generation < lockgen:
                if gamedata['server']['log_abnormal_logins'] >= 1:
                    gamesite.exception_log.event(server_time, 'aborting login for user %d, got stale data (file %d dbserver %d)' % (user.user_id, player.generation, lockgen))
                retmsg.append(["ERROR", "CANNOT_LOG_IN_BACKEND_RACE_CONDITION"])
                return None

        # migrate some fields from userdb to playerdb

        # fill in creation time field for legacy players
        if player.creation_time < 0:
            player.creation_time = user.account_creation_time

        # fill in preferences for legacy players
        if player.player_preferences is None:
            player.player_preferences = user.preferences

        # note: these fields are redundant with User, but are necessary to copy on to the Player so that Predicates etc. have access to them
        player.facebook_id = user.facebook_id
        player.country = user.country
        player.frame_platform = user.frame_platform
        player.user_facebook_likes = user.facebook_likes
        player.birthday = user.birthday
        player.developer = user.developer
        player.browser_name = user.browser_name
        player.browser_os = user.browser_os
        player.browser_version = user.browser_version
        player.browser_hardware = user.browser_hardware
        player.browser_caps = user.browser_caps

        if client_permissions: player.facebook_permissions = client_permissions.split(',')

        # looked up every time by country
        player.price_region = SpinConfig.price_region_map.get(user.country, 'unknown')
        player.country_tier = SpinConfig.country_tier_map.get(user.country, 4)

        player.bust_expired_locks()

        player_is_naughty, abuse_warning_msg = player.detect_login_abuse()

        if player.lockout_until > 0:
            if server_time < player.lockout_until:
                # prevent abusers from logging in
                m = player.lockout_message if (player.lockout_message and (player.lockout_message in gamedata['errors'])) else gamedata['server']['login_abuse_error_code']
                retmsg.append(["ERROR", m])
                return None
            else:
                # abuser WAS locked out, but isn't anymore
                player.last_lockout_end = player.lockout_until
                player.lockout_until = -1

        if player.banned_until > 0 and server_time < player.banned_until:
            # prevent banned users from logging in
            gamesite.exception_log.event(server_time, 'prevented banned user %d from logging in' % player.user_id)
            retmsg.append(["ACCOUNT_BANNED"])
            return None

        # perform optional mobile browser punt
        if (not SpinConfig.config.get('always_allow_mobile', False)):
            if Predicates.read_predicate(gamedata['server']['mobile_detect']).is_satisfied(player, None):
                if (not Predicates.read_predicate(gamedata['server']['mobile_allow_if']).is_satisfied(player, None)):
                    if gamedata['server']['log_mobile_fails']:
                        almost = Predicates.read_predicate(gamedata['server']['mobile_almost_allow_if']).is_satisfied(player, None)
                        gamesite.exception_log.event(server_time, 'mobile hit from player %d (CC L%d) redirected (%s - %s)' % \
                                                     (player.user_id, player.history.get(gamedata['townhall']+'_level',1),
                                                      player.browser_hardware, 'HARDWARE/CC OK' if almost else 'HARDWARE NOT OK'))
                    retmsg.append(["UNSUPPORTED_BROWSER_REDIRECT", gamedata['server']['mobile_fail_url']])
                    return None
                else:
                    if gamedata['server']['log_mobile_successes']:
                        gamesite.exception_log.event(server_time, 'mobile hit from player %d ACCEPTED' % player.user_id)

        if abuse_warning_msg:
            retmsg += abuse_warning_msg

        # if player is new or didn't finish the tutorial, or stale, reset
        # their state to the starting conditions

        stale_msg = None

        if Predicates.read_predicate(gamedata['server']['stale_account_reset_criteria']).is_satisfied(player, None):
            stale_msg = 'RESET'
            player.tutorial_state = "START"
        elif Predicates.read_predicate(gamedata['server']['stale_account_repair_criteria']).is_satisfied(player, None):
            stale_msg = 'REPAIR'
            player.repair_stale_account()

        if stale_msg and gamedata['server']['log_stale_accounts']:
            if 'sessions' in player.history and len(player.history['sessions']) > 0:
                last_login_date = '%d days ago' % ((server_time - player.history['sessions'][-1][0]) / (24*60*60))
            else:
                last_login_date = 'UNKNOWN'

            gamesite.exception_log.event(server_time, 'player %d account is stale (last login %s) - %s' % \
                                         (player.user_id, last_login_date, stale_msg))

        if player.tutorial_state != "COMPLETE":
            player.reset()

        # record that the player is logged in now
        player.lock_state = Player.LockState.logged_in
        player.lock_time = server_time

        if player.creation_time == server_time:
            is_returning_user = 0
        else:
            is_returning_user = 1

        if player.history.get('money_spent', 0) > 0:
            is_paying_user = 1
        else:
            is_paying_user = 0

        # create the new session
        session = Session(session_id, user, player, server_time)

        # assign player to A/B test cohorts
        player.read_url_overrides(user, url_qs)
        player.update_abtests(session, not is_returning_user)

        if player.tutorial_state != "COMPLETE":
            # note: this must come AFTER abtests are set up, since they may override starting conditions
            init_game(player, 0)

        player.my_home.spawn_scenery(player, user.user_id) # time-constant seed

        # upon success, retmsg will be ignored, and future client messages should go via session.outgoing_messages
        session.outgoing_messages = retmsg # !!!
        # kick-start HTTP request processing
        session.sync_requests.append(request)
        session.async_ds.append(d) # caller will attach complete_async_request()

        # get rid of old combat debris
        player.update_inerts()
        player.prune_inventory(session)
        player.prune_mailbox()
        player.prune_cooldowns()
        player.prune_sessions()
        player.prune_activity()
        player.prune_battle_history()
        player.spawn_deposits(user.user_id ^ int(server_time)) # time-varying seed
        player.migrate(session, user.user_id, user.account_creation_time, is_returning_user)
        player.prune_player_auras(is_session_change = True, is_login = True)

        player.my_home.base_resource_loot = None # reset base_resource_loot state

        # check the data proxyserver attached to the session to see if there are other players logging in from the same IP
        # note: must be done AFTER migrate() since the format of known_alt_accounts has changed
        if client_session_data:
            possible_alts = map(int, client_session_data.split(','))
            for alt in possible_alts:
                player.possible_alt_record_login(alt, ip = client_ip)

        on_login_cons = player.get_abtest_consequent('on_login_pre_hello', fail_missing = False)
        if on_login_cons:
            snap = session.player.resources.calc_snapshot()
            session.execute_consequent_safe(on_login_cons, session.player, retmsg,
                                            context = {'max_inventory': snap.max_inventory(), 'cur_inventory': snap.cur_inventory(),
                                                       'cur_gamebucks': snap.gamebucks,
                                                       'largest_purchase': session.player.history.get('largest_purchase', 0),
                                                       'largest_purchase_gamebucks': session.player.history.get('largest_purchase_gamebucks', 0)},
                                            reason='on_login_pre_hello')

        admin_stats.add_visit(user.user_id, not is_returning_user, is_paying_user)

        session.increment_player_metric('logged_in_times', 1, time_series = False)
        if 'sessions' not in player.history:
            player.history['sessions'] = []
        player.history['sessions'].append([server_time,-1])

        self.log_record_session(session, session.login_time, -1, 'CLIENT_HELLO')

        needs_daily_attack = False

        if player.tutorial_state == "COMPLETE" and \
           (not player.has_damage_protection()) and \
           (server_time - session.player.last_daily_attack) > player.get_any_abtest_value('daily_attack_interval', gamedata['daily_attack_interval']):
            base_damage = player.my_home.calc_base_damage()
            # conventional daily attack
            if player.get_any_abtest_value('enable_daily_attacks', gamedata['enable_daily_attacks']) and \
               player.resources.player_level >= gamedata['ai_attacks']['min_level'] and \
               random.random() < player.get_any_abtest_value('daily_attack_chance', gamedata['daily_attack_chance']) and \
               base_damage < gamedata['ai_attacks']['max_base_damage']:
                needs_daily_attack = True

            if gamedata['server']['login_abuse_detector']['enable_auto_attack'] and player_is_naughty:
                gamesite.exception_log.event(server_time, 'player %d has logged in excessively - triggering AI attack!' % player.user_id)
                needs_daily_attack = True

        if session.user.frame_platform == 'fb':
            user.retrieve_facebook_info(session)
            user.retrieve_facebook_requests_start()
            user.retrieve_facebook_credit_info_start()

            # record FB notification hits
            if ('fb_source' in url_qs) and ('notif_t' in url_qs) and ('fb_ref' in url_qs) and \
               (url_qs['fb_source'][0] == 'notification') and (url_qs['notif_t'][0] == 'app_notification'):
                metric_event_coded(user.user_id, '7131_fb_notification_hit',
                                   {'sum': session.player.get_denormalized_summary_props('brief'),
                                    'fb_ref': url_qs['fb_ref'][0]})

            # record FB request (invite or gift) hits
            if ('fb_source' in url_qs) and ('notif_t' in url_qs) and ('request_ids' in url_qs) and (url_qs['fb_source'][0] == 'notification'):
                request_event = None
                if url_qs['notif_t'][0] == 'app_invite':
                    request_event = '7107_invite_friends_hit_redundant' if is_returning_user else '7106_invite_friends_hit_acquisition'
                    for request_id in url_qs['request_ids'][0].split(','):
                        if (not is_returning_user):
                            # update acquisition data - we need to rewrite retrieve_facebook_requests_complete(), it's old and creaky
                            user.update_acquisition_data({'facebook_request_id': request_id.split('_')[0], 'type': 'facebook_friend_invite'}, session.player)
                elif url_qs['notif_t'][0] == 'app_request':
                    request_event = '4107_send_gifts_hit_redundant' if is_returning_user else '4106_send_gifts_hit_acquisition'
                    request_id = url_qs['request_ids'][0].split(',')[0]

                if request_event:
                    metric_event_coded(user.user_id, request_event,
                                       {'sum': session.player.get_denormalized_summary_props('brief'),
                                        'request_id': request_id,
                                        'message': query_string
                                        })

            # check status of any unhandled inflight payments
            user.ping_fbpayments(session, retmsg, [data['request_id'] for key, data in player.fbpayments_inflight.items()])
        elif session.user.frame_platform == 'kg':
            user.retrieve_kg_info(session, retmsg)
        elif session.user.frame_platform == 'ag':
            user.retrieve_ag_info(session, retmsg)

        # record acquisition or reacquisition
        acq_event_props = {'anon_id': metrics_anon_id,
                           'social_id': social_id,
                           'session_id':session_id,
                           'frame_platform': frame_platform,
                           'country': user.country or client_login_country,
                           'country_tier': SpinConfig.country_tier_map.get(user.country or client_login_country, 4),
                           'query_string': query_string,
                           'ip':client_ip,
                           'browser_OS':user.browser_os,
                           'browser_name':user.browser_name,
                           'browser_version':user.browser_version,
                           'browser_hardware':user.browser_hardware}

        if client_permissions: acq_event_props['scope'] = client_permissions
        if acq_data:
            acq_event_props['method'] = acq_data['type']
            # set acquisition_campaign exactly as it will be set in user.acquisition_campaign
            acq_event_props['acquisition_campaign'] = acq_data['campaign_name'] if acq_data['type']=='ad_click' else acq_data['type']
            for FIELD in ('campaign_name', 'age_group', 'ad_image', 'ad_title', 'ad_text', 'ad_target', 'ad_skynet', 'referring_user_id'):
                if FIELD in acq_data:
                    acq_event_props[FIELD] = acq_data[FIELD]
            if 'facebook_request_ids' in acq_data: # only include first request ID
                acq_event_props['facebook_request_id'] = acq_data['facebook_request_ids'][0]

        if (frame_platform == 'fb') and ('fb_source' in url_qs): # record fb_source parameter
            acq_event_props['fb_source'] = url_qs['fb_source'][0]


        # send the events
        metric_event_coded(user.user_id, '0115_logged_in', copy.deepcopy(acq_event_props))

        if user.account_creation_time == server_time:
            metric_event_coded(user.user_id, '0110_created_new_account', acq_event_props)
        elif (player.last_logout_time() > 0) and (server_time - player.last_logout_time() >= SpinConfig.ACCOUNT_LAPSE_TIME):
            acq_event_props['sum'] = player.get_denormalized_summary_props('brief')
            acq_event_props['lapse_time'] = server_time - player.last_logout_time()
            metric_event_coded(user.user_id, '0112_account_reacquired', acq_event_props)

        session.send_adnetwork_acquisition_event(retmsg)
        session.send_adnetwork_visit_event(retmsg)
        session.send_adnetwork_events(retmsg)

        # record acquisition data (for this visit)
        user.update_acquisition_data(acq_data, session.player)

        retmsg.append(["SERVER_HELLO",
                       gamedata["version"],
                       session.user.user_id,
                       session_id,
                       server_time, # not used anymore!
                       session.user.facebook_name,
                       session.player.tutorial_state,
                       session.player.player_preferences,
                       needs_daily_attack,
                       session.user.country,
                       session.player.country_tier,
                       session.player.price_region,
                       session.player.history['logged_in_times'],
                       session.player.abtests,
                       session.player.is_developer(),
                       session.user.is_suspicious(),
                       session.player.isolate_pvp,
                       session.user.acquisition_campaign,
                       session.player.my_home.base_id,
                       session.player.history.get('money_spent',0),
                       session.player.creation_time,
                       session.player.chat_seen,
                       session.user.is_chat_mod(),
                       session.player.get_daily_banner(session, retmsg)
                       ])
        retmsg.append(["PLAYER_UI_NAME_UPDATE", session.user.get_ui_name(session.player)])
        retmsg.append(["PLAYER_ALIAS_UPDATE", session.player.alias])
        retmsg.append(["PLAYER_TITLES_UPDATE", session.player.title])

        # check for promo codes
        if ('spin_promo_code' in url_qs):
            for code in url_qs['spin_promo_code']:
                session.player.apply_promo_code(session, retmsg, code)

        if session.player.tutorial_state == "COMPLETE":
            # force repairs to start to avoid exploits where you leave your own buildings unrepaired
            self.do_start_repairs(session, None, session.player.my_home.base_id, repair_units = False)

            session.player.ladder_point_decay_check(session, retmsg) # login

        if session.user.frame_platform == 'fb':
            retmsg.append(["FACEBOOK_CURRENCY_UPDATE", session.user.facebook_currency])
            if session.user.facebook_third_party_id:
                retmsg.append(["FACEBOOK_THIRD_PARTY_ID_UPDATE", session.user.facebook_third_party_id])

        # note: sends both SQUADS_UPDATE and PLAYER_ARMY_UPDATE
        session.player.ping_squads_and_send_update(session, retmsg, originator=session.player.user_id, reason='SERVER_HELLO')

        self.change_session(session, retmsg, dest_user_id = user.user_id, force = True).addCallback(lambda success, self=self, session=session, retmsg=retmsg, d=d: self.complete_client_hello2(d, session, retmsg))
        return d

    @admin_stats.measure_latency('complete_client_hello2')
    def complete_client_hello2(self, d, session, retmsg):
        # there's a race window where terminate_session() is called between change_session() and here,
        # and the invalidation doesn't work since we past CLIENT_HELLO but not in the session table yet.
        # XXX band-aid fix for now - need to untangle the login path later...
        if session.session_id in invalid_sessions:
            if gamedata['server']['log_abnormal_logins'] >= 2:
                gamesite.exception_log.event(server_time, 'user %d almost logged in with invalidated session %s' % (session.user.user_id, session.session_id))
            retmsg.append(["ERROR", "CANNOT_LOG_IN_SIMULTANEOUS"])
            ascdebug('UNLOCKED player %d (complete_client_hello2 invalidated)' % session.user.user_id)
            gamesite.lock_client.player_lock_release(session.user.user_id, -1, Player.LockState.logged_in, expected_owner_id = session.user.user_id)
            d.callback(session) # return session so that complete_async_request gets called
            return

        try:
            self.do_complete_client_hello2(d, session, retmsg)
            return
        except:
            retmsg[:] = [["ERROR", "SERVER_EXCEPTION"]] # blow away old message, because session is not going to be set up
            gamesite.exception_log.event(server_time, ('complete_client_hello2 Exception (player %d): ' % session.user.user_id) + traceback.format_exc().strip()) # OK

        # failure path
        ascdebug('UNLOCKED player %d (complete_client_hello2 failure)' % session.user.user_id)
        gamesite.lock_client.player_lock_release(session.user.user_id, -1, Player.LockState.logged_in, expected_owner_id = session.user.user_id)
        d.callback(None) # return error instead of session

    def do_complete_client_hello2(self, d, session, retmsg):
        user = session.user
        player = session.player

        if player.tutorial_state != "COMPLETE":
            spawn_tutorial_units(session, retmsg)

        retmsg.append(["TECH_UPDATE", session.player.tech])
        retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])
        session.player.send_inventory_update(retmsg)

        retmsg.append(["PLAYER_UNIT_EQUIP_UPDATE", session.player.unit_equipment])
        assert session.player.stattab.player is session.player
        session.player.stattab.send_update(session, retmsg) # should be up to date from load_tech/auras_and_init_stattab()

        retmsg.append(["QUEST_STATE_UPDATE", session.player.completed_quests])

        retmsg.append(["PLAYER_TRAVEL_UPDATE", session.player.travel_state])

        # set up alliance state
        alliance_info = None
        alliance_membership = None
        alliance_chat_catchup_messages = []
        alliance_join_requests = None

        alliance_info, alliance_membership = session.init_alliance(alliance_chat_catchup_messages, reason = 'SERVER_HELLO')

        # fix missing alliances_joined count in player_history, for quest purposes
        if alliance_info and ('alliances_joined' not in session.player.history): session.player.history['alliances_joined'] = 1

        # for leaders, get pending join requests
        if alliance_info and (alliance_info.get('leader_id', -1) == session.player.user_id):
            alliance_join_requests = gamesite.sql_client.poll_join_requests(session.player.user_id, alliance_info['id'], server_time, reason='SERVER_HELLO')

        if session.alliance_chat_channel and gamedata['server']['chat_alliance_logins']:
            session.do_chat_send(session.alliance_chat_channel, 'I logged in!', bypass_gag = True, props = {'type':'logged_in'})

        # accept any queued messages the user has received
        mail_stat = self.do_receive_mail(session, retmsg, is_login = True)
        show_battle_history = mail_stat and mail_stat.get('was_attacked', False)

        # send alliance state
        retmsg.append(["ALLIANCE_UPDATE", alliance_info['id'] if alliance_info else -1, (not mail_stat.get('new_alliance', False)), alliance_info, alliance_membership, mail_stat.get('new_alliance_role', False)])
        if alliance_chat_catchup_messages: retmsg += alliance_chat_catchup_messages
        if alliance_join_requests:
            pcache_data = self.do_query_player_cache(session, alliance_join_requests, reason = 'ALLIANCE_JOIN_REQUESTS')
            retmsg.append(["ALLIANCE_JOIN_REQUESTS", alliance_join_requests, pcache_data])

        # check cache and begin background retrieval of user's Facebook info
        user.populate_friends_who_play(session)

        # send applicable daily messages
        session.player.get_daily_messages(session, retmsg)

        session.player.send_mailbox_update(retmsg)

        # note: history update should come AFTER receiving mail and promo codes, since that updates history
        session.player.send_history_update(retmsg)

        # note: achievements update should come AFTER history update, so that client will resolve PLAYER_HISTORY predicates in achievements correctly
        retmsg.append(["ACHIEVEMENTS_UPDATE", session.player.achievements])

        if session.player.tutorial_state == "COMPLETE" and Predicates.read_predicate(gamedata['client']['motd_filter']).is_satisfied(session.player,None):
            # check if player is due for various popups
            force_time = session.player.get_any_abtest_value('motd_refresh_time', gamedata['server']['message_of_the_day'].get('refresh_time',-1))
            if ((server_time - session.player.last_motd) > gamedata['client']['motd_interval']) or \
               (session.player.last_motd < force_time):
                session.player.last_motd = server_time
                session.player.get_daily_tips(session, retmsg)

            # check if we should prompt the player to invite friends
            if ((server_time - session.player.last_friend_invite_prompt) > gamedata['client']['friend_invite_prompt_interval']):
                session.player.last_friend_invite_prompt = server_time
                retmsg.append(["INVITE_FRIENDS_PROMPT"])

            # check if we should prompt the player to send gifts
            if ((server_time - session.player.last_gift_prompt) > gamedata['client']['gift_prompt_interval']):
                session.player.last_gift_prompt = server_time
                retmsg.append(["GIFT_PROMPT"])


        session.init_global_chat(retmsg)

        # notify player about recent attacks
        if len(session.player.recent_attacks) > 0:
            retmsg.append(["YOU_WERE_ATTACKED", session.player.recent_attacks])
            session.player.recent_attacks = []
        if show_battle_history:
            retmsg.append(["SHOW_BATTLE_HISTORY"])

        if session.player.is_on_map():
            assert session.player.home_region and (session.player.my_home.base_region == session.player.home_region)

            # ping the map to update login status for the player's home base (sends broadcast of lock acquire)
            if not session.player_base_lock:
                if gamesite.nosql_client.map_feature_lock_acquire(session.player.my_home.base_region, session.player.my_home.base_id, session.player.user_id,
                                                                  reason = 'SERVER_HELLO') == Player.LockState.being_attacked:
                    session.player_base_lock = (session.player.my_home.base_region, session.player.my_home.base_id)

                    # XXXXXX only necessary during migration, shouldn't be necessary once all updates are sent in real-time
                    gamesite.nosql_client.update_map_feature(session.player.my_home.base_region, session.player.my_home.base_id, {'protection_end_time': session.player.resources.protection_end_time}, reason = 'SERVER_HELLO')

                else:
                    # uh oh, can't acquire our own home base lock - playerdb and map feature state are out of sync
                    gamesite.exception_log.event(server_time, 'player %d could not get own home base lock in %s on login, plucking from map!' % (session.player.user_id, session.player.home_region))
                    # re-place on map
                    session.player.home_region = session.player.my_home.base_region = session.player.my_home.base_map_loc = None
                    session.player.history['map_placement_gen'] = -1
                    session.player.update_map_placement(session, retmsg)

            retmsg.append(["REGION_CHANGE", session.player.home_region, session.player.my_home.base_map_loc, True, session.player.my_home.base_climate])
            if gamedata['regions'][session.player.home_region].get('enable_turf_control',False):
                retmsg.append(["REGION_TURF_UPDATE", session.player.home_region, gamesite.nosql_client.alliance_turf_get_by_region(session.player.home_region, reason = 'login')])
            session.init_region_chat(session.player.home_region, retmsg)

        retmsg.append(["MAP_BOOKMARKS_UPDATE", session.player.map_bookmarks])

        self.send_player_cache_update(session, 'login') # mainly for uninstalled flag and last_login_time

        # mark end of login messages
        retmsg.append(["END_SERVER_HELLO"])

        session.last_active_time = server_time

        # since CLIENT_HELLO is a special case outside the usual message buffer handling,
        # we have to bump the expected next serial number here
        session.incoming_serial += 1
        session_table[session.session_id] = session
        d.callback(session)

    # like login, logout is broken into pre- and post-I/O portions

    # new asynchronous logout
    # it should be safe to call this function from any context
    def log_out_async(self, session, method, force = False):

        if session.logout_in_progress:
            if deferred_is_finished(session.logout_d):
                ascdebug('log_out_async (already finished) %d' % (session.user.user_id))
                # session has ALREADY finished logging out - this is a dangling reference!
                return defer.succeed(True) # probably OK to return session.logout_d, but that might have exceptions on it
            elif force:
                # do not wait for complete_attack(), just kill the session
                gamesite.exception_log.event(server_time, 'log_out_async: force-dropping broken session for player %d - possible data loss!' % (session.user.user_id))
                session.logout_in_progress.wrote_user = True
                session.logout_in_progress.wrote_player = True
                reactor.callLater(0, session.logout_in_progress.try_finish)
                return defer.succeed(True)
            else:
                ascdebug('log_out_async (waiting) %d' % (session.user.user_id))
                return session.logout_d

        ascdebug('log_out_async %d' % (session.user.user_id))
        session.debug_log_action('log_out_async (%s)' % method)

        session.logout_in_progress = Session.AsyncLogout(session)
        session.logout_d = make_deferred('log_out_async')

        # we're going to get this exception from complete_async_request if after_async_request() waits, so absorb it
        def absorb_logout_exception(fail):
            fail.trap(Session.AlreadyLoggedOut)
            return None
        session.logout_d.addErrback(absorb_logout_exception)

        # if an attack was going on, clean it up
        session.logout_d.addCallback(lambda _, self=self,session=session:
                                     self.complete_attack(session, session.outgoing_messages, reason='log_out_async'))
        session.logout_d.addErrback(report_and_absorb_deferred_failure, session)

        # then continue with preflush
        session.logout_d.addCallback(lambda _, self=self, session=session, method=method:
                                     self.log_out_preflush(session, method))
        session.logout_d.addErrback(report_and_absorb_deferred_failure, session)

        # then session.shutdown
        session.logout_d.addCallback(lambda _, session=session: session.shutdown())
        session.logout_d.addErrback(report_and_absorb_deferred_failure, session)

        # then the flush happens...
        def flushit(session):
            user_table.store_async(session.user, session.logout_in_progress.user_cb, True, 'logout')
            player_table.store_async(session.player, session.logout_in_progress.player_cb, True, 'logout')
            return session.logout_in_progress.d or True

        session.logout_d.addCallback(lambda _, session=session: flushit(session))
        session.logout_d.addErrback(report_and_absorb_deferred_failure, session)

        # then postflush cleanup
        session.logout_d.addCallback(lambda _, self=self, session=session: self.log_out_postflush(session))

        return session.after_async_request(session.logout_d)

    def log_out_preflush(self, session, method):
        # PRE-WRITE portion

        # force repairs to start to avoid exploits where you leave your own buildings unrepaired
        self.do_start_repairs(session, None, session.player.my_home.base_id, repair_units = False)
        session.player.ladder_point_decay_check(session, None) # logout

        # log metric event
        if method == 'timeout' or method == 'server_restart':
            # if a session times out, record the play time ending with
            # the player's last action, not with the current time
            logout_time = session.last_active_time
        else:
            logout_time = server_time

        playtime = logout_time - session.login_time

        # close final session
        session.player.history['sessions'][-1][1] = server_time # XXX maybe should use logout_time here?

        # write MongoDB events
        if gamesite.nosql_client and gamedata['server'].get('log_dau_in_nosql', True):
            gamesite.nosql_client.dau_record(session.login_time, session.user.user_id, session.player.country_tier, playtime)

        self.log_record_session(session, session.login_time, logout_time, 'log_out_preflush')

        # add up play time
        session.increment_player_metric('time_in_game', playtime, time_series = False, bucket = True)
        session.setmax_player_metric('cum_time_in_game', session.player.history.get('time_in_game', 0)+playtime, time_series = False, bucket = True)

        if session.user.acquisition_campaign and (not session.user.acquisition_secondary):
            admin_stats.add_logout(session.user.user_id, session.user.acquisition_campaign, playtime)

        # track resource levels
        for res in gamedata['resources']:
            session.setvalue_player_metric('stored_'+res, getattr(session.player.resources,res), time_series=False, bucket=True, bucket_size=15*60)

        # record final activity sample
        session.record_activity_sample(force = True)

        session.send_adnetwork_events(None)
        self.send_fb_achievements(session)
        self.log_out_preflush_open_graph(session)

        alliance_id = gamesite.sql_client.get_users_alliance(session.user.user_id, reason = 'log_out_preflush')
        if alliance_id >= 0:
            session.player.history['alliance_id_cache'] = alliance_id
        else:
            alliance_id = None
            if 'alliance_id_cache' in session.player.history:
                del session.player.history['alliance_id_cache']

        self.send_player_cache_update(session, 'log_out_preflush', alliance_id = alliance_id)

    # record login/logout in MongoDB log
    # if recording logins (that are still active), set logout_time = -1
    # upon logout, call this again with the proper logout_time, and it will overwrite the entry.
    def log_record_session(self, session, login_time, logout_time, reason):
        assert (logout_time == -1) or (logout_time >= login_time)
        if gamesite.nosql_client and gamedata['server'].get('log_sessions_in_nosql', True):
            props = {'user_id': session.user.user_id,
                     'in': login_time,
                     'out': logout_time}
            props.update(session.player.get_denormalized_summary_props('brief'))
            # unique tuple for each session
            id_key = '%d:%d:%s' % (session.user.user_id, login_time, session.session_id[0:4])
            gamesite.nosql_client.log_record('log_sessions', server_time, props, id_key=id_key, reason=reason)

    def send_fb_achievements(self, session):
        if not session.user.facebook_id: return
        if session.player.isolate_pvp or (session.player.tutorial_state != "COMPLETE"): return
        if not session.player.get_any_abtest_value('enable_fb_achievements', gamedata['enable_fb_achievements']): return
        if ((not session.player.facebook_permissions) or ('publish_actions' not in session.player.facebook_permissions)): return
        for name, player_data in session.player.achievements.iteritems():
            if name not in gamedata['achievements']: continue
            data = gamedata['achievements'][name]
            if 'fb_open_graph' not in data: continue
            if not data['fb_open_graph'].get('publish', True): continue
            if player_data.get('fb_published', False): continue

            endpoint = OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('achievement'), 'name': name})
            params = {'access_token': SpinConfig.config['facebook_app_access_token'],
                      'achievement': str(endpoint) }
            query = urllib.urlencode(params)
            url = SpinFacebook.versioned_graph_endpoint('achievement', str(session.user.facebook_id)+'/achievements')
            if SpinConfig.config['enable_facebook']:
                if gamedata['server']['log_fb_achievements']:
                    gamesite.exception_log.event(server_time, 'send_fb_achievements(POST %s query %s)' % (url, query))
                gamesite.AsyncHTTP_Facebook.queue_request(server_time, url, lambda result: None, method = 'POST', postdata = query)
                player_data['fb_published'] = 1
            else:
                gamesite.exception_log.event(server_time, 'Facebook disabled: send_fb_achievements(POST %s query %s)' % (url, query))

    def log_out_preflush_open_graph(self, session):
        # send FB open graph leaderboard update (throttle by time and level)
        # NOTE: writes player.last_rank_update etc, so must be done pre-flush!

        if not session.user.facebook_id: return

        if (not session.player.isolate_pvp):
            if session.player.tutorial_state == "COMPLETE":
                session.player.send_fb_score_update(session.user.facebook_id,
                                                    session.player.resources.xp)


    def log_out_postflush(self, session):
        ascdebug('log_out_postflush %d' % (session.user.user_id))
        session.debug_log_action('log_out_postflush')

        # remove the session from the global session table
        if session_table.get(session.session_id, None) is session:
            del session_table[session.session_id]

        # final step - release locks

        if session.player.is_on_map():
            # update status of player's home base on map, and broadcast lock release
            # assert session.player_base_lock
            gamesite.nosql_client.map_feature_lock_release(session.player.my_home.base_region, session.player.my_home.base_id, session.player.user_id, reason = 'log_out')
            session.player_base_lock = None

        ascdebug('UNLOCKED player %d (normal logout)' % session.user.user_id)
        gamesite.lock_client.player_lock_release(session.user.user_id, session.player.generation, Player.LockState.logged_in, expected_owner_id=session.user.user_id)

        if gamesite.nosql_client:
            # tell proxyserver the player is no longer logged in
            gamesite.nosql_client.session_drop_by_session_id(session.session_id)

            # send active session count to server status table
            if gamedata['server'].get('update_server_status_on_login', True):
                gamesite.nosql_client.server_status_update(spin_server_name, {'active_sessions':admin_stats.get_active_sessions()}, reason='logout')

    def send_player_cache_update(self, session, reason,
                                 # alliance update is optional. None is a possible value, so use special marker for skipping the update.
                                 alliance_id = 'skip'):

        base_damage, base_repair_time = session.player.my_home.report_base_damage_and_repair_time_for_ladder(session.player)

        # update dbserver player cache
        cache_props = {'tutorial_complete': (1 if session.player.tutorial_state == 'COMPLETE' else 0),
                       'home_region': session.player.home_region,
                       'lootable_buildings': session.player.get_lootable_buildings(),
                       'base_damage': base_damage,
                       'base_repair_time': base_repair_time,
                       'ladder_player': int(session.player.is_ladder_player(ignore_global=True)),
                       'protection_end_time': session.player.resources.protection_end_time,
                       'player_level': session.player.resources.player_level,
                       'account_creation_time': session.user.account_creation_time,
                       'last_login_time': session.user.last_login_time,
                       'last_login_ip': session.user.last_login_ip,
                       'uninstalled': None,
                       'last_mtime': server_time,
                       'money_spent': session.player.history.get('money_spent',0.0),
                       'ui_name': session.user.get_ui_name(session.player),
                       'ui_name_searchable': session.user.get_ui_name_searchable(session.player)
                       }
        real_name = session.user.get_real_name()
        if real_name != cache_props['ui_name']:
            cache_props['real_name'] = real_name
        else:
            cache_props['real_name'] = None # delete it because ui_name is all we need

        if session.user.social_id: cache_props['social_id'] = session.user.social_id
        if session.user.frame_platform: cache_props['frame_platform'] = session.user.frame_platform
        if session.user.facebook_id: cache_props['facebook_id'] = session.user.facebook_id
        if session.user.ag_id: cache_props['ag_id'] = session.user.ag_id
        if session.user.ag_avatar_url: cache_props['ag_avatar_url'] = session.user.ag_avatar_url
        if session.user.kg_id: cache_props['kg_id'] = session.user.kg_id
        if session.user.kg_avatar_url: cache_props['kg_avatar_url'] = session.user.kg_avatar_url

        cache_props[gamedata['townhall']+'_level'] = session.player.get_townhall_level()

        if (not gamedata['predicate_library']['pvp_requirement']['predicate'].startswith('ALWAYS_')):
            cache_props['pvp_player'] = int(session.player.is_pvp_player())

        if session.player.my_home.base_map_loc:
            cache_props['home_base_loc'] = session.player.my_home.base_map_loc

        if 'units_donated_cur_alliance' in session.player.history:
            cache_props['units_donated_cur_alliance'] = session.player.history['units_donated_cur_alliance']

        if alliance_id != 'skip': # might be None
            if alliance_id is not None: assert alliance_id >= 0 # don't pass negative alliance_ids
            cache_props['alliance_id'] = alliance_id

        if session.player.isolate_pvp:
            cache_props['isolate_pvp'] = 1

        known_alt_count = sum(1 for data in session.player.known_alt_accounts.itervalues() if not data.get('ignore',False))
        if known_alt_count >= 1:
            cache_props['known_alt_count'] = known_alt_count
        else:
            cache_props['known_alt_count'] = None

        session.player.idle_check.prune_history(server_time)
        idle_check_fails = session.player.idle_check.count_fails()
        if idle_check_fails >= 1:
            cache_props['idle_check_fails'] = idle_check_fails
            cache_props['idle_check_last_fail_time'] = session.player.idle_check.last_fail_time()
        else:
            cache_props['idle_check_fails'] = None
            cache_props['idle_check_last_fail_time'] = None

        gamesite.pcache_client.player_cache_update(session.user.user_id, cache_props, reason = reason)

    def handle_message_guts(self, session, arg, retmsg):

        if arg[0] == "VISIT_BASE" or arg[0] == "VISIT_BASE2" or arg[0] == "VISIT_LADDER_RIVAL":
            # do not allow overlapping client-initiated requests
            assert not session.visit_base_in_progress
            assert not session.complete_attack_in_progress

            if session.incoming_attack_pending():
                # don't allow the player to change sessions if an AI attack is about to occur
                retmsg.append(["ERROR", "INCOMING_ATTACK_PENDING"])
                return

            dest_id = None
            dest_base_id = None
            ladder_state = None
            delay = 0
            if len(arg) >= 3:
                client_props = arg[2]
            else:
                client_props = None

            if client_props and client_props.get('pre_attack',None):
                # sanity check for pre_attack option
                if client_props['pre_attack'] is True: # compatibility with old client
                    client_props['pre_attack'] = 1
                assert client_props['pre_attack'] in (1,2)
                assert session.home_base
                assert not session.has_attacked
                assert arg[0] in ("VISIT_BASE", "VISIT_BASE2")

            # special-case map/squad spying of yourself, to be a regular base visit
            if dest_base_id == home_base_id(session.player.user_id):
                dest_base_id = None
                dest_id = session.player.user_id

            if arg[0] == "VISIT_BASE2":
                # temporary test path for quarries
                dest_base_id = str(arg[1])
                if (not session.player.can_use_quarries()):
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                    return
            elif arg[0] == "VISIT_LADDER_RIVAL":
                force_switch = bool(arg[1]) or gamedata['matchmaking']['ladder_match_life'] <= 0
                exclude_user_ids = set()

                if (not session.player.is_ladder_player()):
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                    return

                if force_switch:
                    cost = Predicates.eval_cond_or_literal(gamedata['matchmaking']['ladder_match_switch_cost'], session, session.player)
                    for res in cost:
                        if (getattr(session.player.resources,res) < cost[res]):
                            retmsg.append(["ERROR", "INSUFFICIENT_"+res.upper(), cost[res]])
                            retmsg.append(["ERROR", "LADDER_MATCH_FAILED"])
                            return

                    negative_cost = dict((res,-cost[res]) for res in cost)
                    session.player.resources.gain_res(negative_cost, reason='ladder_switch')
                    admin_stats.econ_flow_res(session.player, 'consumption', 'ladder_switch', negative_cost)
                    session.player.record_ladder_pvp_event('3304_ladder_skip', {'defender_id': session.viewing_player.user_id,
                                                                                'battle_streak_ladder': session.player.cooldown_active('battle_streak_ladder'),
                                                                                'cost': cost})

                if force_switch:
                    session.player.cooldown_reset('ladder_match')
                    exclude_user_ids.add(session.player.ladder_match) # exclude previous ID, always
                    session.player.prune_ladder_match_history(session)
                    exclude_user_ids.update(filter(lambda x: x > 0, session.player.ladder_match_history)) # exclude previous non-generic opponents

                    # force a delay to make alt-shopping inconvenient
                    delay += gamedata['matchmaking']['ladder_match_switch_cooldown']
                    if gamedata['server']['log_ladder_pvp'] >= 2:
                        gamesite.exception_log.event(server_time, 'VISIT_LADDER_RIVAL: %d forcing switch' % (session.player.user_id))
                else:
                    delay += gamedata['matchmaking']['ladder_match_min_cooldown']

                if session.player.cooldown_active('ladder_match') and \
                   session.player.ladder_match and \
                   session.player.is_suitable_ladder_match(session.player.ladder_match):
                    if gamedata['server']['log_ladder_pvp'] >= 2:
                        gamesite.exception_log.event(server_time, 'VISIT_LADDER_RIVAL: %d re-using match %d' % (session.player.user_id, session.player.ladder_match))
                else:
                    if gamedata['server']['log_ladder_pvp'] >= 2:
                        if session.player.cooldown_active('ladder_match') and \
                           session.player.ladder_match:
                            gamesite.exception_log.event(server_time, 'VISIT_LADDER_RIVAL: %d cannot re-use last match %d' %
                                                         (session.player.user_id, session.player.ladder_match))

                    session.player.cooldown_reset('ladder_match')
                    session.player.ladder_match = None

                if not session.player.ladder_match:
                    if session.player.ladder_rival_override:
                        session.player.ladder_match = session.player.ladder_rival_override
                    else:
                        # find a player match
                        ai_chance = gamedata['matchmaking']['ladder_match_ai_chance']
                        force_ai = ((ai_chance > 0) and (random.random() < ai_chance))

                        if force_ai:
                            # only allow force_ai if there is an actual AI base you can attack
                            min_level = min([x.get('min_level',-1) for x in gamedata['ai_bases_server']['ladder_pvp_bases']])
                            max_level = max([x.get('max_level',999) for x in gamedata['ai_bases_server']['ladder_pvp_bases']])
                            if session.player.resources.player_level < min_level or session.player.resources.player_level > max_level:
                                force_ai = False # no available AI bases

                        if (not force_ai):
                            # seek player to fight
                            session.player.prune_cooldowns() # prune fatigue cooldowns
                            exclude_alliance_ids = []
                            aid = session.get_alliance_id(reason='find_suitable_ladder_match')
                            if aid >= 0 or gamedata['matchmaking'].get('ladder_match_non_alliance_bug',False):
                                exclude_alliance_ids.append(aid)
                            exclude_alliance_ids += session.player.get_sticky_alliances()
                            session.player.ladder_match = session.player.find_suitable_ladder_match(exclude_user_ids = exclude_user_ids, exclude_alliance_ids = exclude_alliance_ids)
                        if force_ai or ((not session.player.ladder_match) and gamedata['matchmaking']['ladder_match_ai_fallback']):
                            # assign AI opponent
                            candidates = []
                            for entry in gamedata['ai_bases_server']['ladder_pvp_bases']:
                                if session.player.resources.player_level < entry.get('min_level',-1) or \
                                   session.player.resources.player_level > entry.get('max_level',999) or \
                                   ('activation' in entry and not Predicates.read_predicate(entry['activation']).is_satisfied(session.player, None)): continue # out of level range

                                id = entry['base_id']
                                if id in exclude_user_ids: continue

                                base = gamedata['ai_bases_server']['bases'].get(str(id),None)
                                if not base:
                                    gamesite.exception_log.event(server_time, 'invalid ladder_pvp AI base: %d' % id)
                                    continue

                                candidates.append(id)

                            if len(candidates) >= 1:
                                session.player.ladder_match = candidates[int(random.random()*len(candidates))]

                            if gamedata['server']['log_ladder_pvp'] >= 3:
                                gamesite.exception_log.event(server_time, 'VISIT_LADDER_RIVAL (AI): %d candidates %s (exclude %s) -> %s' % \
                                                             (session.player.user_id, repr(candidates), repr(exclude_user_ids), repr(session.player.ladder_match)))


                    event_props = {'attacker_pts': session.player.ladder_points(),
                                   'attacker_res': session.player.resources.get_fungible_amounts(),
                                   'battle_streak_ladder': session.player.cooldown_active('battle_streak_ladder')}

                    session.player.record_ladder_pvp_event('3300_ladder_search', copy.copy(event_props))

                    if session.player.ladder_match:
                        event_props.update({'defender_id': session.player.ladder_match})
                        session.player.record_ladder_pvp_event('3301_ladder_search_success', copy.copy(event_props))
                        session.player.cooldown_trigger('ladder_match', gamedata['matchmaking']['ladder_match_life'])

                        # append to history and truncate
                        # (option: for AIs, only append a generic -1, and thus allow max_exclude to be greater than the number of AIs available?)
                        # (session.player.ladder_match if str(session.player.ladder_match) not in gamedata['ai_bases_server']['bases'] else -1)
                        session.player.ladder_match_history.append(session.player.ladder_match)
                        session.player.prune_ladder_match_history(session)

                        if gamedata['server']['log_ladder_pvp'] >= 2:
                            gamesite.exception_log.event(server_time, 'VISIT_LADDER_RIVAL: %d found match %d' % (session.player.user_id, session.player.ladder_match))
                    else:
                        session.player.record_ladder_pvp_event('3302_ladder_search_fail', copy.copy(event_props))
                        retmsg.append(["ERROR", "LADDER_MATCH_FAILED"])
                        if gamedata['server']['log_ladder_pvp'] >= 1:
                            gamesite.exception_log.event(server_time, 'VISIT_LADDER_RIVAL: %d no match found!' % (session.player.user_id))
                        return

                if session.player.ladder_match:
                    dest_id = session.player.ladder_match
                    # create TEMPORARY ladder state - may be over-written in change_session()
                    ladder_state = session.player.create_ladder_state(dest_id, None)

                else:
                    dest_id = session.player.user_id
                    delay = 0

            else:
                # normal old player base visit
                dest_id = int(arg[1])

                # check AI destination eligibility
                if is_ai_user_id_range(dest_id):
                    if (str(dest_id) not in gamedata['ai_bases_server']['bases']) or \
                       gamedata['ai_bases_server']['bases'][str(dest_id)].get('kind','ai_base') != 'ai_base':
                        # dangling reference to removed AI base, or attempt to spy on an attack wave
                        retmsg.append(["ERROR", "CANNOT_SPY_INVALID_AI", dest_id])
                        return

                    base = gamedata['ai_bases_server']['bases'][str(dest_id)]
                    if ('activation' in base) and \
                       (not Predicates.read_predicate(base['activation']).is_satisfied(session.player,None)) and \
                       (not session.player.is_cheater):
                        if 0:
                            gamesite.exception_log.event(server_time, 'preventing attempt by player %d to visit AI player %d - unsatisfied predicate' % (session.user.user_id, dest_id))
                        retmsg.append(["ERROR", "CANNOT_SPY_INVALID_AI", dest_id])
                        return

            return self.change_session(session, retmsg, dest_user_id = dest_id, dest_base_id = dest_base_id, force = True, new_ladder_state = ladder_state, delay = delay, client_props = client_props)

        elif arg[0] == "LOGOUT":
            return self.log_out_async(session, 'onunload')

        elif arg[0] == "CLIENT_SYNC":
            retmsg.append(["SERVER_SYNC", arg[1]])

        elif arg[0] == "TUTORIAL_STATE_UPDATE":
            newstate = arg[1]
            if session.player.tutorial_state != "COMPLETE":
                assert gamedata['tutorial'].has_key(newstate)
                # treat the "arrow to missions button" and "congratulations_message" the same as an actual completion
                if newstate == "open_missions_dialog" or newstate == "congratulations_message":
                    newstate = "COMPLETE"

                session.player.tutorial_state = newstate

                if newstate == "COMPLETE":
                    session.player.set_post_tutorial_state()
                    session.player.stattab.send_update(session, retmsg)
                    metric_event_coded(session.user.user_id, '0399_tutorial_complete', {'sum': session.player.get_denormalized_summary_props('brief')})
                    session.setmax_player_metric('tutorial_complete', 1)
                    retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])
                    session.send_adnetwork_events(retmsg)

        elif arg[0] == "REPORT_METRIC":
            key = arg[1]
            val = arg[2]

            session.metric_event_coded(session.player, key, val)

            # save canvas_width/height from framerate events
            if key == '0960_framerate' and 'canvas_width' in val:
                session.user.canvas_width = int(val['canvas_width'])
                session.user.canvas_height = int(val['canvas_height'])
                if 'canvas_oversample' in val:
                    session.user.canvas_oversample = parse_canvas_oversample(val['canvas_oversample'])
                if 'devicePixelRatio' in val:
                    session.user.devicePixelratio = parse_canvas_oversample(val['devicePixelRatio'])

            elif key == '0961_sprobe_result':
                session.sprobe_in_progress = False
                val['report']['time'] = server_time
                if 'viewing_base_id' in val: val['report']['viewing_base_id'] = val['viewing_base_id']
                if 'graphics' in val['report']['tests']: # also save canvas width/height here
                    session.user.canvas_width = int(val['report']['tests']['graphics']['canvas_width'])
                    session.user.canvas_height = int(val['report']['tests']['graphics']['canvas_height'])
                    if 'canvas_oversample' in val['report']['tests']['graphics']:
                        session.user.canvas_oversample = parse_canvas_oversample(val['report']['tests']['graphics']['canvas_oversample'])
                    if 'devicePixelRatio' in val['report']['tests']['graphics']:
                        session.user.devicePixelRatio = parse_canvas_oversample(val['report']['tests']['graphics']['devicePixelRatio'])
                session.user.last_sprobe_result = val['report']

                log_chance = SpinConfig.config.get('gameserver_global',{}).get('log_client_perf',0)
                if log_chance > 0 and (log_chance >= 1 or random.random() < log_chance):
                    log_props = {'user_id': session.user.user_id,
                                 'player_level': session.player.resources.player_level,
                                 'country': session.user.country}
                    for test_name, test_data in val['report']['tests'].iteritems():
                        log_props[test_name] = test_data
                    gamesite.nosql_client.client_perf_record(log_props, reason='sprobe_result')

        elif arg[0] == "FB_GIFT_CARD_REDEEMED":
            # only for metrics recording
            #payment_id = arg[1]
            quantity = arg[2]
            session.increment_player_metric('fb_gift_cards_redeemed', 1)
            session.increment_player_metric('fb_gift_cards_redeemed_gamebucks', quantity)

        # simulate Facebook credits order
        elif arg[0] == "DEV_SIMULATE_ORDER":
            coded_order_info = arg[1]
            currency = arg[2]
            # don't allow this to happen on the live server!
            if spin_secure_mode:
                retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
            else:
                if currency == 'kgcredits':
                    order_info = SpinFacebook.order_data_decode(coded_order_info)
                else:
                    order_info = coded_order_info
                item = Store.make_credit_order('0', order_info, currency)
                print 'SIMULATED ORDER', item
                try:
                    network_id = {'fbcredits':session.user.facebook_id, 'kgcredits':session.user.kg_id}[currency]
                    Store.execute_credit_order('0', self, session, network_id, network_id, currency, item['price'],
                                               order_info if currency == 'kgcredits' else item['data'])
                except:
                    gamesite.exception_log.event(server_time, 'DEV_SIMULATE_ORDER Exception (player %d): %s' % (arg[0], session.user.user_id, traceback.format_exc().strip())) # OK
                    retmsg.append(["ERROR", "ORDER_PROCESSING"])

        elif arg[0] == "FBPAYMENT_CREATE":
            # client has started the order flow - register the payment as inflight

            # warn if player is not using gamebucks
            if session.player.get_any_abtest_value('currency', gamedata['currency']) != 'gamebucks':
                gamesite.exception_log.event(server_time, 'FBPAYMENT_CREATE: player %d is not on gamebucks currency!' % session.user.user_id)

            # for testing (realtime updates) purposes only - deliberately break synchronous order ping
            if gamedata['server'].get('ignore_FBPAYMENT_CREATE', False): return

            tag = arg[1]
            request_id = arg[2]
            unit_id = arg[3]
            spellname = arg[4]
            spellarg = arg[5]
            client_price = arg[6]
            client_currency = arg[7]
            product_url = urllib.unquote(arg[8])
            init_quantity = arg[9]
            server_time_according_to_client = arg[10]
            gift_order = arg[11]

            payment_data = {
                'tag': tag,
                'request_id': request_id,
                'unit_id': unit_id,
                'spellname': spellname,
                'spellarg': spellarg,
                'client_price': client_price,
                'client_currency': client_currency,
                'product_url': product_url,
                'init_quantity': init_quantity,
                'time': server_time,
                'server_time_according_to_client': server_time_according_to_client,
                'state': 'new'
                }
            if gift_order: # do some type-checking
                assert type(gift_order) is dict
                assert 'gifts' in gift_order
                assert type(gift_order['gifts']) is list
                assert len(gift_order['gifts']) == 1 # for now
                for entry in gift_order['gifts']:
                    for FIELD in ('gamebucks','recipient_user_id','recipient_ui_name','recipient_player_level','recipient_facebook_id'): assert FIELD in entry
                payment_data['gift_order'] = gift_order
            session.player.fbpayments_inflight[request_id] = payment_data

        elif arg[0] == "FBPAYMENT_IGNORE":
            if gamedata['server'].get('ignore_FBPAYMENT_IGNORE', False): return
            request_id = arg[1]
            if request_id in session.player.fbpayments_inflight:
                del session.player.fbpayments_inflight[request_id]
        elif arg[0] == "FBPAYMENT_PING":
            request_id = arg[1]
            signed_request = arg[2] # optional - speeds processing by avoiding the round-trip
            d = session.user.ping_fbpayment(session, retmsg, request_id, signed_request = signed_request)
            # this might or might not go async
            return session.start_async_request(d) if d else None

        elif arg[0] == "FBPAYMENT_SIMULATE_PURCHASE":
            request_id = arg[1]
            if spin_secure_mode:
                retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
            else:
                if request_id in session.player.fbpayments_inflight:
                    # set a flag so the next FBPAYMENT_PING will pick it up
                    session.player.fbpayments_inflight[request_id]['simulate_purchase'] = 1
        elif arg[0] == "FBPAYMENT_SIMULATE_REFUND":
            if spin_secure_mode:
                retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                return
            for ent in reversed(session.player.history.get('money_purchase_history',[])):
                if ('payment_id' in ent) and (not ent.get('refunded',0)):
                    if 'product' in ent:
                        product = ent['product']
                    else:
                        product = OGPAPI_instance.get_object_endpoint({'type':OGPAPI.object_type('sku'), 'spellname': ent['description']})
                    session.user.ping_fbpayment_check_refund(session, retmsg, ent['payment_id'],
                                                             {'data':[{
                        'id': ent['payment_id'],
                        'actions': [{'type':'charge', 'status':'completed',
                                     'time_updated': SpinFacebook.unparse_fb_time(ent['time']),
                                     'amount': ent['currency_amount'], 'currency': ent['currency']},
                                    {'type':'decline', 'status':'completed',
                                     'time_updated': SpinFacebook.unparse_fb_time(ent['time']),
                                     'amount': ent['currency_amount'], 'currency': ent['currency']}],
                        'payout_foreign_exchange_rate': ent.get('payout_foreign_exchange_rate',1),
                        'items': [{'product':product, 'quantity': ent.get('quantity',1)}]
                        }]})
                    retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])
                    return

        elif arg[0] == "XSOLLA_GET_TOKEN":
            tag = arg[1]
            spellname = arg[2]
            spellarg = arg[3]
            d = gamesite.xsapi.get_token(session, retmsg, spellname, spellarg)
            if d:
                # let's try doing this asynchronously to the other session traffic...
                d.addCallback(lambda result, _session = session, _tag = tag: \
                              _session.send([["XSOLLA_GET_TOKEN_RESULT", _tag, result]], flush_now = True) if (not _session.logout_in_progress) else None)
            return # do not go async

        # pay with gamebucks
        elif arg[0] == "GAMEBUCKS_ORDER":
            tag = arg[1]
            client_price = int(arg[2])
            unit_id = arg[3]
            spellname = arg[4]
            spellarg = arg[5]
            server_time_according_to_client = arg[6]

            # time.sleep(5) # to test lag

            if (client_price > 0) and (session.player.get_any_abtest_value('currency', gamedata['currency']) != 'gamebucks'):
                # note: allow 0-priced orders even when currency does not match
                retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                return

            # note: client_price is UNTRUSTED input, but if it's too low, then execute_order() will throw an exception

            assert client_price >= 0
            if client_price > 0 and (session.player.resources.gamebucks < client_price):
                retmsg.append(["ERROR", "INSUFFICIENT_GAMEBUCKS", client_price - session.player.resources.gamebucks, client_price, unit_id, spellname, spellarg])
                retmsg.append(["GAMEBUCKS_ORDER_ACK", tag, False])
                return

            success = False

            try:
                descr = Store.execute_gamebucks_order(self, session, retmsg, client_price,
                                                      unit_id, spellname, spellarg,
                                                      server_time_according_to_client)
                # at this point the order has changed player state, so go ahead and subtract gamebucks
                session.player.resources.gain_gamebucks(-client_price, reason='spent', subreason=descr)
                success = True
                retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

            except:
                my_filter = gamedata['server'].get('bad_internet_exception_log_filter', None)
                if (not my_filter) or (Predicates.read_predicate(my_filter).is_satisfied(session.player, None)):
                    gamesite.exception_log.event(server_time, '%s Exception (player %d): %s' % (arg[0],session.user.user_id,traceback.format_exc().strip())) # OK
                retmsg.append(["ERROR", "ORDER_PROCESSING"])
                # update object state, in case the client is out of sync
                if session.has_object(unit_id):
                    object = session.get_object(unit_id)
                    retmsg.append(["OBJECT_STATE_UPDATE", object.serialize_state(), session.player.resources.calc_snapshot().serialize()])
                elif spellname == 'UNIT_REPAIR_SPEEDUP_FOR_MONEY':
                    self.do_unit_repair_tick(session, retmsg, must_reply = True)
                    retmsg.append(["SQUADS_UPDATE", session.player.squads])

                elif spellname == 'REPAIR_ALL_FOR_MONEY':
                    # we currently have a rare bug where player.my_army gets out of sync with the server, causing repair pricing to mis-match
                    # until this is found and fixed, force a full query and update of the army on failure
                    session.player.ping_squads_and_send_update(session, retmsg, originator=session.player.user_id, reason='GAMEBUCKS_ORDER failure')


            finally:
                retmsg.append(["GAMEBUCKS_ORDER_ACK", tag, success])

        elif arg[0] == "ITEM_ORDER":
            tag = arg[1]
            item_name = arg[2]
            client_price = int(arg[3])
            unit_id = arg[4]
            spellname = arg[5]
            spellarg = arg[6]
            server_time_according_to_client = arg[7]
            success = False

            # note: client_price is UNTRUSTED input, but if it's too low, then execute_order() will throw an exception
            assert client_price >= 0

            # check for insufficient items
            has_qty = session.player.inventory_item_quantity(item_name)
            if has_qty < client_price:
                retmsg.append(["ERROR", "INSUFFICIENT_ITEMS", client_price - has_qty, client_price, unit_id, spellname, spellarg])
                retmsg.append(["ITEM_ORDER_ACK", tag, success])
                session.player.send_inventory_update(retmsg)
                return

            try:
                Store.execute_order(self, session, retmsg, 'item:'+str(item_name), client_price,
                                    unit_id, spellname, spellarg,
                                    server_time_according_to_client)
                # at this point the order has changed player state, so go ahead and take the items
                session.player.inventory_remove_by_type(item_name, client_price, '5130_item_activated', reason='purchase')
                success = True

            except:
                gamesite.exception_log.event(server_time, '%s Exception (player %d): %s' % (arg[0],session.user.user_id,traceback.format_exc().strip())) # OK
                retmsg.append(["ERROR", "ORDER_PROCESSING"])

            finally:
                retmsg.append(["ITEM_ORDER_ACK", tag, success])
                session.player.send_inventory_update(retmsg)

        elif arg[0] == "FUNGIBLE_ORDER":
            tag = arg[1]
            resname = arg[2]
            client_price = int(arg[3])
            unit_id = arg[4]
            spellname = arg[5]
            spellarg = arg[6]
            server_time_according_to_client = arg[7]
            success = False

            # note: client_price is UNTRUSTED input, but if it's too low, then execute_order() will throw an exception
            assert client_price >= 0

            try:
                # check for insufficient resources
                if getattr(session.player.resources, resname) < client_price:
                    retmsg.append(["ERROR", "INSUFFICIENT_"+resname.upper(), client_price])
                else:
                    price_description, detail_props = Store.execute_order(self, session, retmsg, resname, client_price,
                                                                          unit_id, spellname, spellarg,
                                                                          server_time_according_to_client)
                    # at this point the order has changed player state, so go ahead and take the resources
                    success = True
                    negative_cost = {resname: -client_price}
                    session.player.resources.gain_res(negative_cost, reason='fungible_order')
                    admin_stats.econ_flow_res(session.player, 'consumption', 'store_purchase', negative_cost) # may want more detail by specifying an econ_category on the item or store sku

                    if spellname != 'BUY_ITEM': # awkward overlap with 5120_buy_item logging
                        descr = Store.get_description(session, unit_id, spellname, spellarg, price_description)
                        props = {'user_id': session.user.user_id,
                                 'summary': session.player.get_denormalized_summary_props('brief'),
                                 'event_name': '1401_fungible_spent',
                                 'code': 1401,
                                 'price': client_price,
                                 'price_currency': resname,
                                 'Billing Description': descr}
                        props.update(detail_props)
                        gamesite.gamebucks_log.event(server_time, props)

            except:
                gamesite.exception_log.event(server_time, '%s Exception (player %d): %s' % (arg[0],session.user.user_id,traceback.format_exc().strip())) # OK
                retmsg.append(["ERROR", "ORDER_PROCESSING"])

            retmsg.append(["FUNGIBLE_ORDER_ACK", tag, success])
            session.deferred_player_state_update = True

        elif arg[0] == "SCORE_ORDER":
            tag = arg[1]
            stat_name = arg[2]
            currency = 'score:'+stat_name
            client_price = int(arg[3])
            unit_id = arg[4]
            spellname = arg[5]
            spellarg = arg[6]
            server_time_according_to_client = arg[7]
            success = False

            # note: client_price is UNTRUSTED input, but if it's too low, then execute_order() will throw an exception
            assert client_price >= 0

            try:
                # check for insufficient resources
                if session.player.get_master_score(stat_name) < client_price:
                    retmsg.append(["ERROR", "INSUFFICIENT_"+stat_name.upper(), client_price])
                else:
                    price_description, detail_props = Store.execute_order(self, session, retmsg, currency, client_price,
                                                                          unit_id, spellname, spellarg,
                                                                          server_time_according_to_client)
                    # at this point the order has changed player state, so go ahead and take the resources
                    success = True
                    negative_cost = {stat_name: -client_price}
                    session.player.modify_scores(negative_cost, method = '+=', reason = 'score_order')
                    session.deferred_player_trophies_update = True

                    if spellname != 'BUY_ITEM': # awkward overlap with 5120_buy_item logging
                        descr = Store.get_description(session, unit_id, spellname, spellarg, price_description)
                        props = {'user_id': session.user.user_id,
                                 'summary': session.player.get_denormalized_summary_props('brief'),
                                 'event_name': '1402_score_spent',
                                 'code': 1401,
                                 'price': client_price,
                                 'price_currency': currency,
                                 'Billing Description': descr}
                        props.update(detail_props)
                        gamesite.gamebucks_log.event(server_time, props)

            except:
                gamesite.exception_log.event(server_time, '%s Exception (player %d): %s' % (arg[0],session.user.user_id,traceback.format_exc().strip())) # OK
                retmsg.append(["ERROR", "ORDER_PROCESSING"])

            retmsg.append(["SCORE_ORDER_ACK", tag, success])
            session.deferred_player_state_update = True

        elif arg[0] == "DSTROY_OBJECT":
            id = arg[1]
            death_location = arg[2]
            killer_info = arg[3]
            self.destroy_object(session, retmsg, id, death_location, killer_info)

        elif arg[0] == "REMOVE_OBJECT":
            # only for debugging/level-editing
            if (not session.player.is_cheater):
                retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                return

            id = arg[1]

            if session.has_object(id):
                obj = session.get_object(id)
                session.rem_object(id)
                if obj.is_mobile():
                    obj.owner.unit_repair_cancel(obj)
                if obj in session.viewing_base.iter_objects():
                    session.viewing_base.drop_object(obj)
                if obj.is_building():
                    session.power_changed(session.viewing_base, obj, retmsg)
                retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

        elif arg[0] == "RECYCLE_UNIT":
            self.recycle_unit(session, retmsg, arg[1])

        elif arg[0] == "OBJECT_COMBAT_UPDATES":
            self.object_combat_updates(session, retmsg, arg[1])

        elif arg[0] == "AUTO_RESOLVE":
            self.auto_resolve(session, retmsg)

        elif arg[0] == "CREATE_INERT":
            self.do_create_inert(session, retmsg, arg[1:])

        elif arg[0] == "QUARRY_COLLECT":
            if (not session.player.can_use_quarries()) or (not gamesite.nosql_client):
                retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                return

            assert session.player.home_region
            togo = session.player.cooldown_togo('quarry_collect')
            if togo > 0:
                retmsg.append(["HARVESTED_RESOURCES", {'cooldown':server_time+togo+1}, -1, None, 'quarry', None])
                return

            session.player.cooldown_trigger('quarry_collect', gamedata['territory']['quarry_collect_cooldown'])
            retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])

            total_harvested = 0
            feature_list = gamesite.nosql_client.get_map_features_by_landlord_and_type(session.player.home_region, session.player.user_id, 'quarry', reason='QUARRY_COLLECT')

            for feature in feature_list:
                if feature['base_id'] == session.viewing_base.base_id:
                    assert session.viewing_base is not session.player.my_home
                    assert session.viewing_base.base_landlord_id == session.player.user_id

                lock_id = SpinDB.base_lock_id(session.player.home_region, feature['base_id'])
                if session.viewing_base_lock == lock_id:
                    lock_id = None # already locked by the session

                if lock_id:
                    # not going to hold it for an extended period of time, so no need to broadcast
                    if gamesite.nosql_client.map_feature_lock_acquire(session.player.home_region, feature['base_id'], session.player.user_id, do_hook=False, reason='QUARRY_COLLECT') != Player.LockState.being_attacked:
                        retmsg.append(["ERROR", "CANNOT_LOCK_QUARRY", feature['base_id']])
                        continue
                try:
                    if session.viewing_base.base_id == feature['base_id']:
                        # *might* open a race here, I'm not sure
                        obj_list = session.viewing_base.iter_objects()
                    else:
                        obj_list = [reconstitute_object(session.player, session.player, state, context='QUARRY_COLLECT') \
                                    for state in gamesite.nosql_client.get_fixed_objects_by_base(session.player.home_region, feature['base_id'], reason='QUARRY_COLLECT') \
                                    if ((state['spec'] in gamedata['buildings']) and ('production_capacity' in gamedata['buildings'][state['spec']]))]
                    total_harvested += self.do_harvest_all(session, retmsg, feature['base_type'], session.player.home_region, feature['base_id'], obj_list, 1, {'base_id': feature['base_id'],
                                                                                                                                                                'base_type':feature['base_type'],
                                                                                                                                                                'base_template':feature.get('base_template',None),
                                                                                                                                                                'base_ui_name':feature['base_ui_name']})
    #                for object in base.iter_objects():
    #                    if object.is_inert() and ("COLLECT_DEPOSIT" in object.spec.spells):
    #                        self.do_collect_one_deposit(session, retmsg, object)

                finally:
                    if lock_id: gamesite.nosql_client.map_feature_lock_release(session.player.home_region, feature['base_id'], session.player.user_id, do_hook=False, reason='QUARRY_COLLECT')

            if total_harvested > 0:
                session.player.send_history_update(retmsg)
                retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

        elif arg[0] == "QUARRY_ABANDON":
            base_id = arg[1]
            if (session.viewing_base.base_type != 'quarry') or \
               (session.viewing_base.base_landlord_id != session.player.user_id) or \
               (session.viewing_base.base_id != base_id) or \
               (session.using_squad_deployment() and session.defending_squads and len(session.defending_squads) == 1 and session.defending_squads.values[0]['squad_id'] == SQUAD_IDS.BASE_DEFENDERS): # still have a squad stationed here
                gamesite.exception_log.event(server_time, 'player %d failed to abandon quarry %s - base_type %s landlord %d viewing_base.base_id %s defending_squads %s' % \
                                             (session.player.user_id, base_id, session.viewing_base.base_type, session.viewing_base.base_landlord_id, repr(session.viewing_base.base_id), repr(session.defending_squads)))
                retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
                return
            base = session.viewing_base

            if session.viewing_base_lock != base.lock_id():
                if gamesite.nosql_client.map_feature_lock_acquire(base.base_region, base.base_id, session.player.user_id,
                                                                  generation=base.base_generation, do_hook=False, reason='QUARRY_ABANDON') != Player.LockState.being_attacked: # generation=-1?
                    retmsg.append(["ERROR", "CANNOT_LOCK_QUARRY", base.base_ui_name])
                    return # no async

            success = False
            try:
                base.quarry_abandon()
                base.send_map_feature_update(reason='quarry_abandon')
                success = True
                metric_event_coded(session.player.user_id, '4711_quarry_abandoned', {'region': base.base_region,
                                                                                     'base_id': base.base_id,
                                                                                     'new_landlord_id': base.base_landlord_id })
            finally:
                if session.viewing_base_lock != base.lock_id():
                    gamesite.nosql_client.map_feature_lock_release(base.base_region, base.base_id, session.player.user_id, generation=base.base_generation, reason='QUARRY_ABANDON')

            if not success:
                return # no async

            # go back home
            return self.change_session(session, retmsg, dest_user_id = session.player.user_id, force = True)

        elif arg[0] == "QUARRY_QUERY":
            tag = arg[1]
            updated_since = int(arg[2])
            region = session.player.home_region

            if (not region) or (not gamedata['regions'][region].get('enable_map',True)) or (not gamesite.nosql_client):
                return

            if session.last_quarry_query > 0 and server_time < (session.last_quarry_query + gamedata['rival_query_cooldown']):
                # ignore spammy request
                return
            session.last_quarry_query = server_time

            profile_start_time = time.time()
            profile_tags = []

            db_time = None
            codec = None
            z_result = None
            need_updates = False

            if updated_since < 0:
                # non-incremental query - try to use a cached result
                if region in self.quarry_query_cache:
                    if (server_time - self.quarry_query_cache[region][1]) < gamedata['server']['quarry_query_cache']:
                        db_time, query_time, codec, z_result = self.quarry_query_cache[region]
                        profile_tags.append('cached')
                        #gamesite.exception_log.event(server_time, 'using cached result '+str(db_time))
                        admin_stats.quarry_cache_hits += 1

                        # if responding to a full query with cached data, we need to check for updates
                        need_updates = True
                    else:
                        del self.quarry_query_cache[region] # too old
                        admin_stats.quarry_cache_misses += 1
                else:
                    admin_stats.quarry_cache_misses += 1

            if z_result is None:
                # refill cache
                db_time, codec, z_result = self.do_quarry_query_uncached(session, retmsg, region, updated_since, reason = 'fill_cache' if updated_since < 0 else 'incr_deltas')
                # stash last non-incremental query in the cache
                if updated_since < 0 and gamedata['server']['quarry_query_cache'] > 0:
                    profile_tags.append('uncached-store')
                    self.quarry_query_cache[region] = (db_time, server_time, codec, z_result)
                else:
                    profile_tags.append('uncached-nostore')

            retmsg.append(["QUARRY_QUERY_RESULT", tag, region, db_time, codec, z_result, updated_since])

            if need_updates:
                # send the deltas since the cached data was retrieved
                new_db_time, new_codec, new_z_result = self.do_quarry_query_uncached(session, retmsg, region, db_time, reason = 'full_deltas')
                profile_tags.append('deltas')
                retmsg.append(["QUARRY_QUERY_RESULT", tag, region, new_db_time, new_codec, new_z_result, db_time])

            admin_stats.record_latency('QUARRY_QUERY(%s)' % ','.join(profile_tags), time.time() - profile_start_time)

        elif arg[0] == "REGION_POP_QUERY":
            tag = arg[1]
            if not gamesite.nosql_client: return
            region_list = [data for data in gamedata['regions'].itervalues() if \
                           (data.get('open_join',True)) and \
                           ((not data.get('developer_only',0)) or session.player.is_developer()) and \
                           (('show_if' not in data) or (Predicates.read_predicate(data['show_if']).is_satisfied(session.player, None)))]
            populations = dict([(data['id'], gamesite.nosql_client.get_map_feature_population(data['id'],'home',reason='REGION_POP_QUERY')) for data in region_list])

            # sort from high to low pop
            region_list = sorted(region_list, key = lambda data: -populations[data['id']])

            def classify(data, pop):
                soft_cap = data.get('pop_soft_cap',-1)
                hard_cap = data.get('pop_hard_cap',-1)
                if (hard_cap >= 0) and (pop >= hard_cap): return 'full'
                elif (soft_cap >= 0) and (pop >= soft_cap): return 'almost_full'
                return 'open'
            client_populations = dict([(data['id'], {'state':classify(data, populations[data['id']]),
                                                     'rank':region_list.index(data)
                                                     }) for data in region_list])
            retmsg.append(["REGION_POP_QUERY_RESULT", tag, client_populations])

            pred = gamedata['server'].get('log_region_pop_query_if',None)
            if pred and Predicates.read_predicate(pred).is_satisfied(session.player, None):
                gamesite.exception_log.event(server_time, 'REGION_POP_QUERY (player %d) returns: %s' % (session.player.user_id, SpinJSON.dumps(client_populations)))

        elif arg[0] == "CHANGE_REGION":
            self.execute_spell(session, retmsg, arg[0], [arg[1],arg[2]])

        elif arg[0] == "SET_ALIAS" or arg[0] == "CHANGE_TITLE":
            spell = gamedata['spells'][arg[0]]
            for PRED in ('show_if', 'requires'):
                if spell.get(PRED) and (not Predicates.read_predicate(spell[PRED]).is_satisfied2(session, session.player, None)):
                    retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED", spell[PRED]])
                    return
            self.execute_spell(session, retmsg, arg[0], arg[1])

        elif arg[0] == "TRAVEL_BEGIN":
            if session.has_attacked:
                retmsg.append(["ERROR", "CANNOT_TRAVEL_DURING_BATTLE"])
                return

            if session.player.region_map_building_is_busy():
                retmsg.append(["ERROR", "CANNOT_TRAVEL_TRANSMITTER_BUSY"])
                return

            destination = tuple(arg[1]) if arg[1] else None
            travel_time = int(arg[2]) # note: checked on base load
            session.player.travel_begin(destination, travel_time)
            retmsg.append(["PLAYER_TRAVEL_UPDATE", session.player.travel_state])

        elif arg[0] == "PING_MAP":
            # this is just to collect deferred messages
            pass

        elif arg[0] == "PING_CHAT":
            # client tells us the timestamps of last seen messages
            assert type(arg[1]) is dict
            session.player.chat_seen = arg[1]

        elif arg[0] == "PING_PLAYER":
            retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

        elif arg[0] == "PING_CREDITS":
            session.user.retrieve_facebook_credit_info_start()

        elif arg[0] == "CLAIM_BATTLE_STAR":
            name = arg[1]

            # only valid for attacks on hostile home bases
            if session.home_base or (session.viewing_base is not session.viewing_player.my_home):
                return
            if not session.claim_battle_star(name):
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED"])
                return
            retmsg.append(["SESSION_LOOT_UPDATE", copy.deepcopy(session.loot)])

        elif arg[0] == "PING_BASE_DAMAGE":
            # only valid for attacks on hostile home bases
            if session.home_base or (session.viewing_base is not session.viewing_player.my_home) or (arg[1] != session.viewing_base.base_id):
                retmsg.append(["PING_BASE_DAMAGE_RESULT", session.viewing_base.base_id, -1, None])
                return

            client_base_damage = arg[2]
            client_damaged_objects = arg[3]
            client_power_state = arg[4]
            base_damage, base_repair_time, server_damaged_objects = session.viewing_base.do_calc_base_damage(detail = client_damaged_objects is not None)

            # see how big the disagreement is, if any
            delta = abs(base_damage-client_base_damage)
            if delta >= gamedata['server']['log_base_damage_pings']:
                diffs = []
                if client_damaged_objects:
                    # reconcile list of damaged objects
                    for k, v in client_damaged_objects.iteritems():
                        if k not in server_damaged_objects or server_damaged_objects[k]['hp'] != v['hp'] or server_damaged_objects[k]['max_hp'] != v['max_hp']:
                            mydiff = '%s [client %s] [server %s]' % (k, repr(v), repr(server_damaged_objects.get(k,None)))
                            obj = session.viewing_player.get_object_by_obj_id(k, fail_missing = False)
                            if obj and obj.is_building() and obj.is_producer():
                                mydiff += ' server harv state repair_finish_time %d produce_rate %d contents %d' % (obj.repair_finish_time, obj.produce_rate, obj.contents)
                            diffs.append(mydiff)
                    for k, v in server_damaged_objects.iteritems():
                        if k not in client_damaged_objects:
                            diffs.append('%s [client %s] [server %s]' % (k, 'MISSING', repr(v)))
                gamesite.exception_log.event(server_time, 'PING_BASE_DAMAGE player %d at %s client %f server %f delta %f client_power %s server_power %s diffs %s' % \
                                             (session.player.user_id, session.viewing_base.base_id, client_base_damage, base_damage, delta, repr(client_power_state), repr(session.viewing_base.get_power_state()), ', '.join(diffs)))

            props = {}
            if session.has_attacked and session.is_ladder_battle():
                props['is_ladder_win'] = session.viewing_base.ladder_victory_satisfied(session, base_damage)
                if props['is_ladder_win']:
                    # note: this doesn't include the effect of any scale_by auras
                    props['ladder_win_points'] = session.ladder_state['points']['victory'][str(session.player.user_id)]
                    bonus = 0
                    if 'ladder_bonus_damage' in gamedata['matchmaking']:
                        for entry in gamedata['matchmaking']['ladder_bonus_damage']:
                            if base_damage >= entry[0]:
                                bonus = entry[1]
                                break
                    if bonus > 0:
                        props['ladder_win_points'] += max(1, int(props['ladder_win_points']*bonus))

                ladder_protection = -1
                if session.protection_eligible is True:
                    ladder_protection = session.viewing_base.calc_ladder_protection(base_damage)
                props['ladder_protection'] = ladder_protection
            retmsg.append(["PING_BASE_DAMAGE_RESULT", session.viewing_base.base_id, base_damage, props])
            retmsg.append(["SESSION_LOOT_UPDATE", copy.deepcopy(session.loot)])

        elif arg[0] == "PING_OBJECT":
            id = arg[1]
            self.ping_object(session, retmsg, id, session.viewing_base)

        elif arg[0] == "PING_TECH":
            retmsg.append(["TECH_UPDATE", session.player.tech])

        elif arg[0] == "POLL_BASE_LOCK_STATE":
            base_type = str(arg[1])
            base_id = str(arg[2])
            if session.player.cooldown_active('lock_state_poll'): return
            session.player.cooldown_trigger('lock_state_poll', gamedata['lock_state_poll_cooldown'])
            retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])
            if session.home_base: return

            if base_type == 'home' or base_id[0] == 'h': # home base check
                lock_state, owner_id = gamesite.lock_client.player_lock_get_state_batch([int(base_id[1:])], reason = 'poll')[0]
            else:
                assert session.player.home_region
                lock_state, owner_id = gamesite.nosql_client.map_feature_lock_get_state_batch(session.player.home_region, [base_id], reason='POLL_BASE_LOCK_STATE')[0]

            retmsg.append(["BASE_LOCK_STATE_UPDATE", base_id, lock_state, owner_id])

        elif arg[0] == "COMPLETE_QUEST":
            self.do_complete_quest(session, retmsg, arg[1])
        elif arg[0] == "CLAIM_ACHIEVEMENT":
            self.do_claim_achievement(session, retmsg, arg[1])

        elif arg[0] == "START_DAILY_ATTACK":
            if not session.home_base:
                return
            session.start_ai_attack(retmsg, 'daily')

        elif arg[0] == "START_AI_ATTACK":
            attack_type = arg[1]
            session.start_ai_attack(retmsg, attack_type, override_protection = True)

        elif arg[0] == "BEGIN_AI_ATTACK":
            session.deploy_ai_attack(retmsg)
        elif arg[0] == "NEXT_AI_ATTACK_WAVE":
            session.deploy_ai_attack_wave(retmsg)

        elif arg[0] == "SEND_GIFTS2":
            self.do_send_gifts(session, retmsg, arg)

        elif arg[0] == "LEVEL_ME_UP":
            self.do_level_up(session, retmsg, arg)

        elif arg[0] == "UPDATE_PREFERENCES":
            assert type(arg[1]) == dict
            session.player.player_preferences = arg[1]

        elif arg[0] == "QUERY_RECENT_ATTACKERS":
            self.query_recent_attackers(session, retmsg, arg)
        elif arg[0] == "QUERY_BATTLE_HISTORY":
            return self.query_battle_history(session, retmsg, arg)
        elif arg[0] == "GET_BATTLE_LOG3":
            return self.get_battle_log3(session, retmsg, arg)
        elif arg[0] == "UPLOAD_BATTLE_REPLAY":
            token, codec, first_line, n_lines, is_final, raw_length, zipped = arg[1:8]
            if token in session.attack_replay_receivers:
                if session.attack_replay_receivers[token].accumulate(codec, first_line, n_lines, is_final, raw_length, zipped):
                    # it's done
                    del session.attack_replay_receivers[token]
        elif arg[0] == "GET_BATTLE_REPLAY":
            return self.get_battle_replay(session, retmsg, arg)

        elif arg[0] == "QUERY_MAP_LOG":
            if (not session.player.is_developer()):
                retmsg.append(["ERROR", "SERVER_PROTOCOL"])
            return self.query_map_log(session, retmsg, arg)
        elif arg[0] == "QUERY_ACHIEVEMENTS":
            return self.query_achievements(session, retmsg, arg)

        elif arg[0] == "QUERY_RIVALS":
            pass # obsolete legacy message

        elif arg[0] == "QUERY_PLAYER_CACHE":
            user_ids = map(int, arg[1])
            tag = arg[2]
            result = self.do_query_player_cache(session, user_ids, reason = 'QUERY_PLAYER_CACHE')
            retmsg.append(["QUERY_PLAYER_CACHE_RESULT", result, tag])

        elif arg[0] == "SEARCH_PLAYER_CACHE":
            search_terms = SpinHTTP.unwrap_string(arg[1]).strip()[0:64]
            tag = arg[2]

            # first get a list of user_ids, then query the pcache info for that list

            if not search_terms: # blank string
                user_ids = []
            else:
                start_time = time.time()
                user_ids = gamesite.nosql_client.player_cache_search(search_terms.lower(),
                                                                     limit = gamedata['search_player_list_limit'],
                                                                     match_mode = gamedata['search_player_match_mode'],
                                                                     name_field = 'ui_name_searchable',
                                                                     case_sensitive = True,
                                                                     reason = 'SEARCH_PLAYER_CACHE')
                end_time = time.time()
                if end_time - start_time >= gamedata['server'].get('player_cache_search_slow_threshold', 4.0):
                    gamesite.exception_log.event(server_time, 'slow player_cache_search(): terms = %r, limit = %r, match_mode = %r, name_field = \'ui_name_searchable\', case_sensitive = True' % \
                                                 (search_terms.lower(), gamedata['search_player_list_limit'], gamedata['search_player_match_mode']))

            pcache_data = self.do_query_player_cache(session, user_ids, reason = 'SEARCH_PLAYER_CACHE') if user_ids else []
            retmsg.append(["SEARCH_PLAYER_CACHE_RESULT", user_ids, pcache_data, tag])

        elif arg[0] == "QUERY_ALLIANCE_LIST":
            search_terms = SpinHTTP.unwrap_string(arg[1]).strip()[0:64] if arg[1] else None
            tag = arg[2]
            if gamesite.sql_client:
                if search_terms:
                    limit = gamedata['alliances']['search_list_limit']
                    result = gamesite.sql_client.search_alliance(search_terms, limit = limit, reason = 'QUERY_ALLIANCE_LIST')
                else:
                    limit = gamedata['alliances']['join_list_limit']
                    result = gamesite.sql_client.get_alliance_list(limit, open_join_only = (not gamedata['alliances']['join_list_show_private']), members_fewer_than = gamedata['alliances']['max_members'], match_continent = session.player.home_continent() if gamedata['alliances']['join_list_match_continent'] else None, reason = 'QUERY_ALLIANCE_LIST')
            else:
                result = []
                retmsg.append(["ERROR", "ALLIANCES_OFFLINE"])

            retmsg.append(["QUERY_ALLIANCE_LIST_RESULT", result, tag])

        elif arg[0] == "QUERY_ALLIANCE_SCORE_LEADERS":
            field_name, period = arg[1]
            include_my_alliance = arg[2]
            tag = arg[3]
            result = None
            success = True

            if (not session.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances'])) or \
               (not gamesite.sql_client):
                retmsg.append(["ERROR", "ALLIANCES_OFFLINE"])
                success = False

            LIST_MAX = 47 # 47 makes the display look nicer with current UI pagination
            LIST_NEAR_ME = 2

            # note: region would need to be specified separately by the client to distinguish region vs continent-scope region_specific stat counters
            addr = session.player.scores2_query_addr(field_name, period) # region = session.player.home_region

            if success:
                # get top 50 alliances
                result = gamesite.mongo_scores2_client.alliance_scores2_get_leaders([addr], LIST_MAX, reason = 'QUERY_ALLIANCE_SCORE_LEADERS')[0]
                if not result:
                    success = False

            if success and include_my_alliance:
                # now query standings near your own alliance, if you're not in the top 50
                alliance_id = gamesite.sql_client.get_users_alliance(session.user.user_id, reason = 'QUERY_ALLIANCE_SCORE_LEADERS')
                if alliance_id > 0:
                    myscore = gamesite.mongo_scores2_client.alliance_scores2_get([alliance_id], [addr], rank = True, reason = 'QUERY_ALLIANCE_SCORE_LEADERS')[0][0]

                    if myscore:
                        if myscore.get('rank',-1) > (LIST_MAX-1):
                            result += gamesite.mongo_scores2_client.alliance_scores2_get_leaders([addr], LIST_NEAR_ME*2+1, max(LIST_MAX, myscore['rank']-LIST_NEAR_ME), reason = 'QUERY_ALLIANCE_SCORE_LEADERS')[0]

            retmsg.append(["QUERY_ALLIANCE_SCORE_LEADERS_RESULT", field_name, period, result, tag])

        elif arg[0] == "QUERY_ALLIANCE_INFO" or arg[0] == "QUERY_ALLIANCE_INFO_PRIVATE":
            get_private = False
            get_roles = False
            if type(arg[1]) is list:
                alliance_ids = map(int, arg[1])
                get_roles = bool(len(arg[1]) == 1)
            else:
                alliance_ids = int(arg[1])
                get_roles = True

            get_private = (arg[0] == "QUERY_ALLIANCE_INFO_PRIVATE") and (len(alliance_ids) == 1) and (alliance_ids[0] == session.get_alliance_id())

            tag = arg[2]

            if gamesite.sql_client:
                result = gamesite.sql_client.get_alliance_info(alliance_ids, member_access = get_private, get_roles = get_roles, reason = arg[0])
            else:
                result = [None] * len(alliance_ids) if type(arg[1]) is list else None
            retmsg.append(["QUERY_ALLIANCE_INFO_RESULT", alliance_ids, result, tag])

        elif arg[0] == "QUERY_ALLIANCE_MEMBERS":
            alliance_id = int(arg[1])
            check_for_invite = arg[2]
            tag = arg[3]
            if len(arg) >= 5:
                score_fields_periods = arg[4]
            else:
                score_fields_periods = None
            result = None
            pcache_data = None
            invite_status = None

            if gamesite.sql_client:
                result = gamesite.sql_client.get_alliance_members(alliance_id, reason = 'QUERY_ALLIANCE_MEBERS')

                if result and len(result) > 0 and score_fields_periods:
                    score_result = gamesite.mongo_scores2_client.player_scores2_get([r['user_id'] for r in result],
                                                                                    [session.player.scores2_query_addr(field_name, period) \
                                                                                     for field_name, period in score_fields_periods],
                                                                                    reason = 'QUERY_ALLIANCE_MEMBERS(score)')
                else:
                    score_result = None

                # add player cache data
                if result and len(result) > 0:
                    pcache_data = self.do_query_player_cache(session, [r['user_id'] for r in result], reason = 'QUERY_ALLIANCE_MEMBERS')
                    for i in xrange(len(pcache_data)):
                        r = pcache_data[i]
                        if r:
                            # fill in alliance_id
                            r['alliance_id'] = alliance_id

                            # fill in score (XXXXXX awkward - this should be transmitted separate from pcache)
                            if score_fields_periods:
                                for n in xrange(len(score_fields_periods)):
                                    r[score_fields_periods[n][0]] = score_result[i][n]['absolute'] if score_result[i][n] else 0

                if check_for_invite:
                    invite_status = gamesite.sql_client.am_i_invited(alliance_id, session.user.user_id, server_time, reason = 'QUERY_ALLIANCE_MEMBERS')

            retmsg.append(["QUERY_ALLIANCE_MEMBERS_RESULT", alliance_id, result, pcache_data, invite_status, tag])

        elif arg[0] == "ALLIANCE_SEND_JOIN_REQUEST":
            alliance_id = int(arg[1])
            tag = arg[2]
            success = True

            if (not session.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances'])) or \
               (not gamesite.sql_client):
                retmsg.append(["ERROR", "ALLIANCES_OFFLINE"])
                success = False

            if (not Predicates.read_predicate({'predicate':'LIBRARY','name':'alliance_join_requirement'}).is_satisfied(session.player, None)):
                retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED"])
                success = False

            if success:
                # cannot send join request when already in an alliance
                if session.get_alliance_id() >= 0:
                    success = False

            if success:
                # check for async notifications
                self.do_receive_mail(session, retmsg, type_filter = ['cooldown_trigger'])
                spell = gamedata['spells']['ALLIANCE_LEAVE']
                if spell.get('cooldown',-1) > 0 and session.player.cooldown_active(spell['cooldown_name']):
                    success = False

            if success:
                cd_name = 'alliance_join_request:%d' % alliance_id
                if session.player.cooldown_active(cd_name):
                    success = False

            if success:
                success = gamesite.sql_client.send_join_request(session.user.user_id, alliance_id, server_time, server_time + gamedata['alliances']['invite_duration'], reason = 'ALLIANCE_SEND_JOIN_REQUEST')

            if success:
                metric_event_coded(session.user.user_id, '4640_alliance_member_join_request_sent', {'alliance_id':alliance_id})
                session.player.cooldown_trigger(cd_name, gamedata['alliances']['join_request_cooldown'])
                retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])

            retmsg.append(["ALLIANCE_SEND_JOIN_REQUEST_RESULT", alliance_id, success, tag])

        elif arg[0] == "ALLIANCE_ACK_JOIN_REQUEST":
            alliance_id = int(arg[1])
            invitee = int(arg[2])
            accept = bool(arg[3])
            tag = arg[4]
            success = True

            if (not session.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances'])) or \
               (not gamesite.sql_client):
                retmsg.append(["ERROR", "ALLIANCES_OFFLINE"])
                success = False

            if success:
                success = gamesite.sql_client.ack_join_request(session.user.user_id, alliance_id, invitee, accept, server_time, gamedata['alliances']['max_members'], reason='ALLIANCE_ACK_JOIN_REQUEST')

            if success:
                info = gamesite.sql_client.get_alliance_info(alliance_id, get_roles = True, reason = 'ALLIANCE_ACK_JOIN_REQUEST')
                my_role_info = info['roles'][str(session.alliance_membership_cache.get('role',gamesite.sql_client.ROLE_DEFAULT))]
                if info and ('ui_name' in info):
                    msg = gamedata['strings']['alliance_join_request_' + ('accepted' if accept else 'rejected') + '_mail']
                    gamesite.msg_client.msg_send([{'type':'mail',
                                                   'expire_time': server_time + gamedata['alliances']['invite_duration'],
                                                   'from_name': msg['ui_from'].replace('%LEADER_NAME', session.user.get_chat_name(session.player)).replace('%LEADER_ROLE_NAME', my_role_info['ui_name']).replace('%ALLIANCE_NAME', alliance_display_name(info)),
                                                   'to': [invitee],
                                                   'subject': msg['ui_subject'],
                                                   'body': msg['ui_body'].replace('%ALLIANCE_NAME', alliance_display_name(info))
                                                   }])
                    if accept:
                        session.player.update_alliance_score_cache(alliance_id, alliance_info = info, reason='ALLIANCE_ACK_JOIN_REQUEST')
                        gamesite.pcache_client.player_cache_update(invitee, {'alliance_id': alliance_id}, reason = 'ALLIANCE_ACK_JOIN_REQUEST')
                        # send a separate async notification
                        gamesite.msg_client.msg_send([{'to': [invitee],
                                                       'from': session.user.user_id,
                                                       'type': 'alliance_status_changed',
                                                       'unique_per_sender': 'alliance_status_changed',
                                                       'expire_time': server_time + gamedata['alliances']['status_change_mail_duration']
                                                       }])
                    if accept:
                        if session.alliance_chat_channel and gamedata['server']['chat_alliance_membership']:
                            data = self.do_query_player_cache(session, [invitee], reason = 'ALLIANCE_ACK_JOIN_REQUEST', get_trophies = False)[0] or {}
                            session.do_chat_send(session.alliance_chat_channel, 'I accepted an alliance member!', bypass_gag = True, props = {'type':'accepted_alliance_member', 'target_user_id': invitee,
                                                                                                                                              'target_chat_name': pcache_get_chat_name(data)
                                                                                                                                              })

            if success:
                metric_event_coded(session.user.user_id,
                                   '4650_alliance_member_join_request_accepted' if accept else '4660_alliance_member_join_request_rejected',
                                   {'alliance_id':alliance_id, 'target_id': invitee})

            retmsg.append(["ALLIANCE_ACK_JOIN_REQUEST_RESULT", alliance_id, invitee, success, tag])

        elif arg[0] == "ALLIANCE_INVITE":
            alliance_id = int(arg[1])
            invitee = int(arg[2])
            tag = arg[3]
            success = True

            if (not session.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances'])) or \
               (not gamesite.sql_client):
                retmsg.append(["ERROR", "ALLIANCES_OFFLINE"])
                success = False

            if session.player.cooldown_active('alliance_invite:'+str(invitee)):
                success = False
            else:
                session.player.cooldown_trigger('alliance_invite:'+str(invitee), gamedata['alliances']['invite_cooldown'])

            retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])

            if success:
                expire_time = server_time + gamedata['alliances']['invite_duration']
                success = gamesite.sql_client.send_alliance_invite(session.user.user_id, invitee, alliance_id,
                                                                   server_time, expire_time,
                                                                   reason='ALLIANCE_INVITE')
            if success:
                metric_event_coded(session.user.user_id, '4605_alliance_member_invite_sent', {'alliance_id':alliance_id, 'target_id':invitee})

            if success:
                info = gamesite.sql_client.get_alliance_info(alliance_id, get_roles = True, reason = 'ALLIANCE_INVITE')
                my_role_info = info['roles'][str(session.alliance_membership_cache.get('role',gamesite.sql_client.ROLE_DEFAULT))]
                if info and ('ui_name' in info):
                    msg = gamedata['strings']['alliance_invite_mail']
                    gamesite.msg_client.msg_send([{'type':'mail',
                                                   'expire_time': expire_time,
                                                   'from_name': msg['ui_from'].replace('%LEADER_NAME', session.user.get_chat_name(session.player)).replace('%LEADER_ROLE_NAME', my_role_info['ui_name']).replace('%ALLIANCE_NAME', alliance_display_name(info)),
                                                   'to': [invitee],
                                                   'subject': msg['ui_subject'],
                                                   'body': msg['ui_body'].replace('%LEADER_NAME', session.user.get_chat_name(session.player)).replace('%LEADER_ROLE_NAME', my_role_info['ui_name']).replace('%ALLIANCE_NAME', alliance_display_name(info)).replace('%ALLIANCE_ID', str(alliance_id))
                                                   }])

            retmsg.append(["ALLIANCE_INVITE_RESULT", alliance_id, invitee, success, tag])

        elif arg[0] == "ALLIANCE_KICK":
            alliance_id = int(arg[1])
            kickee = int(arg[2])
            tag = arg[3]
            success = True
            assert kickee != session.user.user_id

            if (not session.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances'])) or \
               (not gamesite.sql_client):
                retmsg.append(["ERROR", "ALLIANCES_OFFLINE"])
                success = False

            if success:
                success = gamesite.sql_client.kick_from_alliance(session.user.user_id, alliance_id, kickee,
                                                                 reason='ALLIANCE_KICK')
            if success:
                session.player.update_alliance_score_cache(alliance_id, reason='ALLIANCE_KICK')
                gamesite.pcache_client.player_cache_update(kickee, {'alliance_id': -1}, reason = 'ALLIANCE_KICK')
                metric_event_coded(session.user.user_id, '4625_alliance_member_kicked', {'alliance_id':alliance_id, 'target_id':kickee})

            if success and session.alliance_chat_channel and gamedata['server']['chat_alliance_membership']:
                data = self.do_query_player_cache(session, [kickee], reason = 'ALLIANCE_KICK', get_trophies = False)[0] or {}
                session.do_chat_send(session.alliance_chat_channel, 'I kicked an alliance member!', bypass_gag = True, props = {'type':'kicked_alliance_member', 'target_user_id': kickee,
                                                                                                                                'target_chat_name': pcache_get_chat_name(data)
                                                                                                                                })

            if success:
                info = gamesite.sql_client.get_alliance_info(alliance_id, get_roles = True, reason = 'ALLIANCE_KICK')
                my_role_info = info['roles'][str(session.alliance_membership_cache.get('role',gamesite.sql_client.ROLE_DEFAULT))]
                if info and ('ui_name' in info):
                    msg = gamedata['strings']['alliance_kick_mail']
                    messages = [{'type':'mail',
                                 'expire_time': msg['duration'] if msg['duration'] < 0 else server_time + msg['duration'],
                                 'from_name': msg['ui_from'].replace('%LEADER_NAME', session.user.get_chat_name(session.player)).replace('%LEADER_ROLE_NAME', my_role_info['ui_name']).replace('%ALLIANCE_NAME', alliance_display_name(info)),
                                 'to': [kickee],
                                 'subject': msg['ui_subject'],
                                 'body': msg['ui_body'].replace('%LEADER_NAME', session.user.get_chat_name(session.player)).replace('%LEADER_ROLE_NAME', my_role_info['ui_name']).replace('%ALLIANCE_NAME', alliance_display_name(info))
                                 },
                                {'to': [kickee],
                                 'from': session.user.user_id,
                                 'type': 'alliance_status_changed',
                                 'unique_per_sender': 'alliance_status_changed',
                                 'expire_time': server_time + gamedata['alliances']['status_change_mail_duration']
                                 }
                                ]
                    spell = gamedata['spells']['ALLIANCE_LEAVE']
                    cd_time = spell.get('cooldown',-1)
                    if cd_time > 0:
                        # queue asynchronous message to start the deserter cooldown
                        messages.append({'to': [kickee],
                                         'type':'cooldown_trigger',
                                         'expire_time': server_time + cd_time,
                                         'from': session.user.user_id,
                                         'cooldown_name': spell['cooldown_name'],
                                         'end_time': server_time + cd_time})
                    gamesite.msg_client.msg_send(messages)

                    metric_event_coded(session.user.user_id, '4602_alliance_num_members_updated', {'alliance_id': alliance_id, 'num_members_cache': info['num_members']})

            retmsg.append(["ALLIANCE_KICK_RESULT", alliance_id, kickee, success, tag])

        elif arg[0] == "ALLIANCE_PROMOTE":
            alliance_id = int(arg[1])
            promotee_id = int(arg[2])
            old_role = arg[3]
            new_role = arg[4]
            tag = arg[5]
            success = True
            assert promotee_id != session.user.user_id

            if (not session.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances'])) or \
               (not gamesite.sql_client):
                retmsg.append(["ERROR", "ALLIANCES_OFFLINE"])
                success = False

            if success:
                success = gamesite.sql_client.promote_alliance_member(alliance_id, session.user.user_id, promotee_id, old_role, new_role, reason='ALLIANCE_PROMOTE')

            if success:
                metric_event_coded(session.user.user_id, '4626_alliance_member_promoted', {'alliance_id':alliance_id, 'target_id':promotee_id, 'role':new_role})
                info = gamesite.sql_client.get_alliance_info(alliance_id, get_roles = True, reason = 'ALLIANCE_PROMOTE')
                new_role_info = info['roles'][str(new_role)]
                pcache_data = self.do_query_player_cache(session, [promotee_id], reason = 'ALLIANCE_PROMOTE', get_trophies = False)[0] or {}
                if session.alliance_chat_channel and gamedata['server']['chat_alliance_membership']:
                    session.do_chat_send(session.alliance_chat_channel, '',
                                         bypass_gag = True, props = {'type':'promoted_alliance_member' if new_role > old_role else 'demoted_alliance_member',
                                                                     'target_user_id': promotee_id, 'target_role_ui_name': new_role_info['ui_name'],
                                                                     'target_chat_name': pcache_get_chat_name(pcache_data)})

                # refresh our own membership, in case we got demoted
                my_alliance_info, my_alliance_membership = session.init_alliance(retmsg, chat_catchup = False, reason='ALLIANCE_PROMOTE')
                my_role_info = info['roles'][str(my_alliance_membership.get('role', gamesite.sql_client.ROLE_DEFAULT))]

                msg = gamedata['strings']['alliance_'+('promote' if new_role > old_role else 'demote')+'_mail']
                gamesite.msg_client.msg_send([{'type':'mail',
                                               'expire_time': msg['duration'] if msg['duration'] < 0 else server_time + msg['duration'],
                                               'from_name': msg['ui_from'].replace('%LEADER_NAME', session.user.get_chat_name(session.player)).replace('%LEADER_ROLE_NAME', my_role_info['ui_name']).replace('%ALLIANCE_NAME', alliance_display_name(info)),
                                               'to': [promotee_id],
                                               'subject': msg['ui_subject'].replace('%NEW_ROLE_NAME', new_role_info['ui_name']),
                                               'body': msg['ui_body'].replace('%LEADER_NAME', session.user.get_chat_name(session.player)).replace('%LEADER_ROLE_NAME', my_role_info['ui_name']).replace('%ALLIANCE_NAME', alliance_display_name(info)).replace('%NEW_ROLE_NAME', new_role_info['ui_name'])
                                               },
                                              {'type': 'alliance_role_changed',
                                               'to': [promotee_id],
                                               'from': session.user.user_id,
                                               'unique_per_sender': 'alliance_role_changed',
                                               'expire_time': server_time + gamedata['alliances']['status_change_mail_duration']
                                               }
                                              ])

                retmsg.append(["ALLIANCE_UPDATE", my_alliance_info['id'] if my_alliance_info else -1, True, my_alliance_info, my_alliance_membership, False])


                # send FB notifications XXXXXX need to rewrite this path so that it respects enable_fb_notifications preference
                config = gamedata['fb_notifications']['notifications'].get('alliance_promoted' if new_role > old_role else 'alliance_demoted',None)
                if config and pcache_data.get('facebook_id'):
                    notif_text = config['ui_name'].replace('%ACTOR_NAME', session.user.get_chat_name(session.player)).replace('%ACTOR_ROLE', my_role_info['ui_name']).replace('%NEW_ROLE', new_role_info['ui_name']).replace('%ALLIANCE_NAME', alliance_display_name(info))
                    session.player.do_send_fb_notification_to(pcache_data['facebook_id'], notif_text, config, config['ref'])

            retmsg.append(["ALLIANCE_PROMOTE_RESULT", alliance_id, promotee_id, success, tag])

        elif arg[0] == "ALLIANCE_JOIN":
            alliance_id = int(arg[1])
            success = True

            if (not session.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances'])) or \
               (not gamesite.sql_client):
                retmsg.append(["ERROR", "ALLIANCES_OFFLINE"])
                return

            if success:
                if (not Predicates.read_predicate({'predicate':'LIBRARY','name':'alliance_join_requirement'}).is_satisfied(session.player, None)):
                    retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED"])
                    success = False

            if success:
                # check for async notifications
                self.do_receive_mail(session, retmsg, type_filter = ['cooldown_trigger'])
                spell = gamedata['spells']['ALLIANCE_LEAVE']
                if spell.get('cooldown',-1) > 0 and session.player.cooldown_active(spell['cooldown_name']):
                    success = False

            if success:
                if not gamesite.sql_client.join_alliance(session.user.user_id, alliance_id, server_time, gamedata['alliances']['max_members'], reason='ALLIANCE_JOIN'):
                    success = False

            if success:
                new_alliance_info, new_alliance_membership = session.init_alliance(retmsg, reason='ALLIANCE_JOIN')
                retmsg.append(["ALLIANCE_UPDATE", new_alliance_info['id'] if new_alliance_info else -1, False, new_alliance_info, new_alliance_membership, False])

                if new_alliance_info:
                    session.player.update_alliance_score_cache(new_alliance_info['id'], alliance_info = new_alliance_info, reason='ALLIANCE_JOIN')
                    gamesite.pcache_client.player_cache_update(session.player.user_id, {'alliance_id': alliance_id}, reason = 'ALLIANCE_JOIN')

                    if session.player.history.get('alliances_joined',0) < 1:
                        session.player.history['alliance_first_join_time'] = server_time
                        session.player.history['alliance_first_join_created'] = 0
                    session.increment_player_metric('alliances_joined', 1, time_series = False)
                    metric_event_coded(session.user.user_id, '4610_alliance_member_joined', {'alliance_id': new_alliance_info['id'], 'role': gamesite.sql_client.ROLE_DEFAULT,
                                                                                             'sum':session.player.get_denormalized_summary_props('brief')})
                    metric_event_coded(session.user.user_id, '4602_alliance_num_members_updated', {'alliance_id': new_alliance_info['id'], 'num_members_cache': new_alliance_info['num_members']})

                else:
                    success = False

            if success:
                if session.alliance_chat_channel and gamedata['server']['chat_alliance_membership']:
                        session.do_chat_send(session.alliance_chat_channel, 'I joined the alliance!', bypass_gag = True, props = {'type':'joined_alliance'})

            if not success:
                retmsg.append(["ERROR", "CANNOT_JOIN_ALLIANCE"])

        elif arg[0] == "ALLIANCE_LEAVE":
            alliance_id = int(arg[1])
            if (not session.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances'])) or \
               (not gamesite.sql_client):
                retmsg.append(["ERROR", "ALLIANCES_OFFLINE"])
                return
            info, membership = session.get_alliance_info(reason='ALLIANCE_LEAVE')
            old_channel = session.alliance_chat_channel
            new_alliance_info = info
            new_alliance_membership = membership
            if info:
                status = gamesite.sql_client.leave_alliance(session.user.user_id, reason='ALLIANCE_LEAVE')
                new_alliance_info, new_alliance_membership = session.init_alliance(retmsg, reason='ALLIANCE_LEAVE')
                if not new_alliance_info:
                    session.player.update_alliance_score_cache(info['id'], alliance_info = info, reason='ALLIANCE_LEAVE')
                    gamesite.pcache_client.player_cache_update(session.player.user_id, {'alliance_id': -1}, reason = 'ALLIANCE_LEAVE')
                    spell = gamedata['spells']['ALLIANCE_LEAVE']
                    cd_time = spell.get('cooldown',-1)
                    if cd_time > 0:
                        session.player.cooldown_trigger(spell['cooldown_name'], cd_time)
                        retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])
                    session.increment_player_metric('alliances_left', 1, time_series = False)
                    metric_event_coded(session.user.user_id, '4620_alliance_member_left', {'alliance_id': info['id'],
                                                                                           'sum':session.player.get_denormalized_summary_props('brief')})
                    metric_event_coded(session.user.user_id, '4602_alliance_num_members_updated', {'alliance_id': info['id'], 'num_members_cache': info['num_members']-1})

                    if old_channel and gamedata['server']['chat_alliance_membership']:
                        session.do_chat_send(old_channel, 'I left the alliance!', bypass_gag = True, props = {'type':'left_alliance'})



                    if status == -1: # alliance was disbanded
                        session.increment_player_metric('alliances_disbanded', 1, time_series = False)
                        metric_event_coded(session.user.user_id, '4630_alliance_disbanded', {'alliance_id': info['id'],
                                                                                             'sum':session.player.get_denormalized_summary_props('brief')})
                    elif status > 0: # new leader was appointed
                        pass

            retmsg.append(["ALLIANCE_UPDATE", new_alliance_info['id'] if new_alliance_info else -1, False, new_alliance_info, new_alliance_membership, False])

        elif arg[0] == "QUERY_PLAYER_SCORES":
            user_ids = arg[1]
            field_period_list = arg[2]
            tag = arg[3]
            get_rank = bool(arg[4])
            offline_msg = None

            query_addrs = [session.player.scores2_query_addr(entry[0], entry[1], time_loc = entry[2] if len(entry) >= 3 else None, region = session.player.home_region) \
                           for entry in field_period_list]

            result = []
            for u in xrange(len(user_ids)):
                result.append([None,]*len(query_addrs))

            # split query into "hot" MongoDB and "cold" SQL parts
            # the "hot" stats are updated basically in realtime via MongoDB
            # "cold" stats are updated offline by scores2_to_sql.py (and may be in a maintenance window!)
            # so, any query that affects competition/game rules should use the "hot" stats!
            mongo_query_i_addrs = []
            sql_query_i_addrs = []

            def is_hot_point(point, cur_week, cur_season):
                # note: time_scope "ALL" queries can go to cold SQL, even though they are otherwise "hot",
                # if we need to cut down on synchronous MongoDB queries.
                time_all_is_hot = gamedata.get('scores2_time_all_is_hot', True)
                return (point[1]['time'][0] == Scores2.FREQ_WEEK and point[1]['time'][1] >= cur_week) or \
                       (point[1]['time'][0] == Scores2.FREQ_SEASON and point[1]['time'][1] >= cur_season) or \
                       (point[1]['time'][0] == Scores2.FREQ_ALL and time_all_is_hot)

            for i in xrange(len(query_addrs)):
                point = query_addrs[i]
                if is_hot_point(point,
                                SpinConfig.get_pvp_week(gamedata['matchmaking']['week_origin'], server_time), # note: use server_time, not player's override, since this is for talking to the database
                                SpinConfig.get_pvp_season(gamedata['matchmaking']['season_starts'], server_time)):
                    mongo_query_i_addrs.append((i, point))
                else:
                    sql_query_i_addrs.append((i, point))

            if mongo_query_i_addrs: # do hot query
                mongo_result = gamesite.mongo_scores2_client.player_scores2_get(user_ids, [x[1] for x in mongo_query_i_addrs], rank = get_rank, reason='QUERY_PLAYER_SCORES')
                for u in xrange(len(user_ids)):
                    for j in xrange(len(mongo_query_i_addrs)):
                        result[u][mongo_query_i_addrs[j][0]] = mongo_result[u][j]

            if sql_query_i_addrs and gamesite.sql_scores2_client: # do cold query
                # this technique to launch a chain of sequential SQL queries is based on the test code in Scores2.py
                batch = gamesite.sql_scores2_client.player_scores2_get_async(user_ids, [x[1] for x in sql_query_i_addrs], rank = get_rank, reason='QUERY_PLAYER_SCORES')
                bdict = batch.get_qs_dict()
                rdict = {}
                tag_list = sorted(bdict.keys())
                master_d = make_deferred('QUERY_PLAYER_SCORES')

                # launch next query in chain
                def next_query(master_d, session, retmsg, retmsg_tag, result, user_ids, sql_query_i_addrs, batch, bdict, rdict, tag_list, i, last_result):
                    if session.logout_in_progress:
                        # session went away, abort
                        master_d.callback(True)
                        return

                    if i > 0: # remember result from previous successful query
                        rdict[tag_list[i-1]] = last_result

                    if i >= len(tag_list): # last query - done!
                        sql_result = gamesite.sql_scores2_client.player_scores2_get_async_complete(batch, rdict)
                        # combine with mongo_result above
                        for u in xrange(len(user_ids)):
                            for j in xrange(len(sql_query_i_addrs)):
                                result[u][sql_query_i_addrs[j][0]] = sql_result[u][j]
                        # complete async request
                        session.send([["QUERY_PLAYER_SCORES_RESULT", user_ids, result, retmsg_tag, None]], flush_now = True)
                        master_d.callback(True)
                        return

                    def on_error(master_d, session, retmsg, retmsg_tag, result, user_ids, fail):
                        # complete async request, returning the incomplete results
                        if not session.logout_in_progress:
                            session.send([["QUERY_PLAYER_SCORES_RESULT", user_ids, result, retmsg_tag, 'SCORES_OFFLINE']], flush_now = True)
                        master_d.callback(True)

                    if not gamesite.sql_scores2_client:
                        on_error(master_d, session, retmsg, retmsg_tag, result, user_ids, Exception('Scores2 SQL client is down'))
                        return # not async

                    qs, qs_args = bdict[tag_list[i]]
                    d = gamesite.sql_scores2_client.sql_client.runQuery(qs, qs_args) # "SELECT pg_sleep(2); "+qs for latency testing
                    if d is None:
                        on_error(master_d, session, retmsg, retmsg_tag, result, user_ids, Exception('Scores2 SQL server is down'))
                        return # not async

                    d.addCallbacks(functools.partial(next_query, master_d, session, retmsg, retmsg_tag, result, user_ids, sql_query_i_addrs, batch, bdict, rdict, tag_list, i+1),
                                   functools.partial(on_error, master_d, session, retmsg, retmsg_tag, result, user_ids))

                reactor.callLater(0, functools.partial(next_query, master_d, session, retmsg, tag, result, user_ids, sql_query_i_addrs, batch, bdict, rdict, tag_list, -1, None))
                return None # note: asynchronous with other session traffic! - not session.start_async_request(master_d)

            elif sql_query_i_addrs: # client asked for historical scores, but we cannot provide them
                offline_msg = 'SCORES_OFFLINE'

            retmsg.append(["QUERY_PLAYER_SCORES_RESULT", user_ids, result, tag, offline_msg])

        elif arg[0] == "QUERY_SCORE_LEADERS":
            field_name = arg[1]
            period = arg[2]
            tag = arg[3]

            result = gamesite.mongo_scores2_client.player_scores2_get_leaders([session.player.scores2_query_addr(field_name, period, region = session.player.home_region)],
                                                                              gamedata['matchmaking']['max_leaderboard_entries'], reason = 'QUERY_SCORE_LEADERS')[0]

            # decorate result with player cache properties
            if result:
                props = self.do_query_player_cache(session, [x['user_id'] for x in result], reason = 'QUERY_SCORE_LEADERS')
                for i in xrange(len(result)):
                    result[i].update(props[i])

            retmsg.append(["QUERY_SCORE_LEADERS_RESULT", arg[1], period, result, tag])

        elif arg[0] == "CHAT_GETMORE":
            channel = arg[1]
            end_time = arg[2]
            end_msg_id = arg[3]
            request_tag = arg[4]
            # note: collect response manually, not in retmsg
            response = []
            is_final = session.do_chat_getmore(session.decode_chat_channel_name(channel), end_time, end_msg_id, response)
            retmsg.append(["CHAT_GETMORE_RESULT", request_tag, response, is_final])

        elif arg[0] == "CHAT_SEND":
            channel = arg[1]
            text = SpinHTTP.unwrap_string(arg[2]).strip()

            # try to avoid DOS attack spam
            limit = gamedata['chat_length_limit']
            if len(text) > limit:
                text = text[:limit]

            if not text: return # don't send empty message

            if chat_filter.is_ugly(text):
                if gamedata['server'].get('log_ugly_chat', True):
                    gamesite.exception_log.event(server_time, 'Player %d stopped from sending ugly chat message: %r' % (session.player.user_id, text))
                retmsg.append(["CHAT_RECV", channel, {'chat_name': 'System', 'time': server_time, 'facebook_id': -1, 'user_id': -1},
                               SpinHTTP.wrap_string(gamedata['errors']['CHAT_UGLY']['ui_name']), None, False])
                return

            success = True

            if session.player.cooldown_active('CHAT_SEND') >= gamedata['chat_spam_threshold'] or \
               (channel in ('GLOBAL','REGION',) and chat_filter.is_spammy(text)):
                session.player.cooldown_trigger('chat_spam_penalty', gamedata['chat_spam_penalty'])
                session.player.cooldown_reset('CHAT_SEND')
                metric_event_coded(session.user.user_id, '4023_chat_spam_throttled', {'text': text})

            togo = session.player.cooldown_togo('chat_spam_penalty')
            if togo > 0:
                success = False
                retmsg.append(["CHAT_RECV", channel, {'chat_name': 'System', 'time': server_time, 'facebook_id': -1, 'user_id': -1},
                               SpinHTTP.wrap_string(gamedata['errors']['CHAT_THROTTLED']['ui_name'].replace('%d', str(togo))), None, False])

            retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])

            if success:
                session.player.cooldown_trigger('CHAT_SEND', gamedata['chat_spam_cooldown'], add_stack = 1)

                bypass_gag = (channel not in ('GLOBAL','REGION'))

                session.activity_classifier.sent_chat_message(channel)

                # remap channel name from generic client-side names to specific server-side names
                channel = session.decode_chat_channel_name(channel)
                if not channel:
                    retmsg.append(["ERROR", "INVALID_CHAT_CHANNEL"])
                    return

                if not bypass_gag:
                    session.player.cooldown_trigger('chat_reportable', gamedata['chat_report_window'])

                special_template = None
                if session.player.chat_official:
                    special_template = 'official'
                elif channel != session.alliance_chat_channel:
                    special_template = session.player.stattab.get_player_stat('chat_template')

                props = None
                if special_template and special_template != 'default':
                    props = {'type':special_template}
                else:
                    props = None

                session.do_chat_send(channel, text, bypass_gag = bypass_gag, props = props, retmsg = retmsg)

        elif arg[0] == "CHAT_REPORT":
            target_uid = arg[1]
            target_chat_name = SpinHTTP.unwrap_string(arg[2])
            session.do_chat_report(target_uid, target_chat_name, retmsg)
        elif arg[0] == "CHAT_REPORT2":
            target_uid = arg[1]
            channel = {'GLOBAL': session.global_chat_channel,
                       'REGION': session.region_chat_channel,
                       }.get(arg[2], None)
            context_time = arg[3]
            target_message_id = arg[4] if len(arg) >= 5 else None
            if not channel:
                retmsg.append(["ERROR", "INVALID_CHAT_CHANNEL"])
                return
            assert target_uid > 0
            session.do_chat_report2(target_uid, channel, context_time, target_message_id)

        elif arg[0] == "UNIT_REPAIR_TICK":
            self.do_unit_repair_tick(session, retmsg, must_reply = True)
        elif arg[0] == "UNIT_REPAIR_QUEUE":
            if session.player.squads_enabled():
                retmsg.append(["ERROR", "SERVER_PROTOCOL"])
                return
            error = self.do_unit_repair_queue(session, arg[1])
            if error: retmsg.append(["ERROR"] + error)
            session.player.unit_repair_send(retmsg)
            retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])
        elif arg[0] == "UNIT_REPAIR_CANCEL":
            if session.player.squads_enabled():
                retmsg.append(["ERROR", "SERVER_PROTOCOL"])
                return
            self.do_unit_repair_cancel(session, retmsg, arg[1])
        elif arg[0] == "UNIT_REPAIR_SPEEDUP_FOR_FREE":
            if session.player.squads_enabled():
                retmsg.append(["ERROR", "SERVER_PROTOCOL"])
                return
            self.do_unit_repair_speedup_for_free(session, retmsg)

        elif arg[0] == "CANCEL_PLAYER_AURA":
            specname = arg[1]
            if specname == 'damage_protection': # special case
                if session.player.has_damage_protection():
                    session.player.set_protection_end_time(session, -1, '3886_protection_removed_manually')
            else:
                session.player.remove_aura(session, retmsg, specname)

        elif arg[0] in ("INVENTORY_TRASH", "INVENTORY_TRASH_ALL", "INVENTORY_REFUND", "INVENTORY_REFUND_ALL"):
            if session.player.warehouse_is_busy():
                retmsg.append(["ERROR", "WAREHOUSE_IS_BUSY"])
                return

            slot = arg[1]
            specname = arg[2]
            want_refund = arg[0].startswith("INVENTORY_REFUND")
            success = False

            spec = gamedata['items'].get(specname, None)
            if want_refund:
                assert spec
                if (not spec.get('refund',False)) or (('refundable_when' in spec) and (not Predicates.read_predicate(spec['refundable_when']).is_satisfied(session.player, None))):
                    retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
                    return

            num_removed = 0
            item = session.player.inventory_verify_item(slot, specname)
            if item is not None:
                if arg[0].endswith("_ALL"):
                    session.player.inventory_remove_stack(item, '5131_item_trashed', reason='inventory')
                    num_removed = item.get('stack',1)
                else:
                    session.player.inventory_remove(item, 1, '5131_item_trashed', reason='inventory')
                    num_removed = 1
                success = True

                if want_refund:
                    if num_removed == 1:
                        loot_table = spec['refund']
                    else:
                        loot_table = [{'multi':[spec['refund']], 'multi_stack':num_removed}]
                    session.give_loot(session.player, retmsg, loot_table, 'refund', reason_id = '%dx %s' % (num_removed, specname))
                if spec:
                    session.increment_player_metric('item:'+spec['name']+':trashed', num_removed, time_series=False)
            else:
                retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])

            if success:
                session.player.recalc_stattab(session.player)
                session.player.stattab.send_update(session, retmsg)

            retmsg.append(["INVENTORY_REFUND_RESULT" if want_refund else "INVENTORY_TRASH_RESULT", slot, specname, success, num_removed])
            session.player.send_inventory_update(retmsg)
            retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

            if success and want_refund:
                retmsg.append(["LOOT_BUFFER_UPDATE", session.player.loot_buffer, True])

        elif arg[0] == "INVENTORY_USE":
            # note: this now handles using items equipped to buildings, in addition to items from the inventory
            # for inventory items, "slot" is the integer index into player.inventory
            # for equipped items, "slot" is {"obj_id": ..., "slot_type": ..., "slot_index": ... }
            # which is the same format returned by Player.equipped_items_serialize()
            slot = arg[1]
            is_equipped = (type(slot) is dict) # equip item, not in inventory
            client_item = arg[2]
            specname = client_item['spec']
            max_count = arg[3]
            extra_spellargs = arg[4]

            if session.player.warehouse_is_busy(): # XXX what about equip items?
                retmsg.append(["ERROR", "WAREHOUSE_IS_BUSY"])
                retmsg.append(["INVENTORY_USE_RESULT", slot, specname, False, 0, None])
                return

            if is_equipped:
                addr = (slot['slot_type'],slot['slot_index'])
                obj = session.player.get_object_by_obj_id(slot['obj_id'], fail_missing = False)
                if (not obj) or (obj.owner is not session.player) or (not obj.equipment) or \
                   (not Equipment.equip_has(obj.equipment, addr, specname, level = client_item.get('level',None))):
                    # XXX also test if obj is damaged or busy?
                    retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
                    retmsg.append(["INVENTORY_USE_RESULT", slot, specname, False, 0, None])
                    return
                item = Equipment.equip_get(obj.equipment, addr)
            else:
                item = session.player.inventory_verify_item(slot, specname, level = client_item.get('level',None))

            spec = gamedata['items'].get(specname, None)
            if (item is None) or (spec is None):
                retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
                retmsg.append(["INVENTORY_USE_RESULT", slot, specname, False, 0, None])
                session.player.send_inventory_update(retmsg)
                return

            success = False
            used_count = 0

            if spec.get('fungible',False):
                # add directly. Ignore max_count.
                if spec['resource'] == 'gamebucks':
                    success = True
                    used_count = item.get('stack',1)
                    session.player.resources.gain_gamebucks(used_count, reason='item')
                    session.player.inventory_remove_stack(item, '5130_item_activated', reason='fungible')
                elif spec['resource'] in gamedata['resources']:
                    gained_res = session.player.resources.gain_res({spec['resource']:item.get('stack',1)}, reason='item_fungible')
                    used_count = sum(gained_res.itervalues(),0)
                    if used_count > 0:
                        session.player.inventory_remove(item, used_count, '5130_item_activated', reason='fungible')
                        admin_stats.econ_flow_res(session.player, 'item', 'fungible', gained_res)
                        success = True
                    else:
                        retmsg.append(["ERROR", "STORAGE_LIMIT", spec['resource']])

                elif spec['resource'] == 'lottery_scans':
                    used_count = item.get('stack',1)
                    if item.get('expire_time',-1) < 0 or item.get('expire_time',-1) > server_time:
                        assert session.player.do_apply_aura('lottery_scans', stack = used_count,
                                                            duration = (item['expire_time'] - server_time) if item.get('expire_time',-1) > 0 else -1,
                                                            ignore_limit = True)
                    success = True
                    session.player.inventory_remove_stack(item, '5130_item_activated', reason='lottery')
                    session.deferred_player_auras_update = True

                else:
                    raise Exception('unhandled fungible resource '+spec['resource'])

            elif 'use' in spec:
                success = False

                if 'requires' in spec:
                    if not Predicates.read_predicate(spec['requires']).is_satisfied2(session, session.player, None):
                        retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED"])
                        return

                uselist = spec['use'] if type(spec['use']) is list else [spec['use']]

                assert max_count >= 1 and max_count <= item.get('stack',1)

                try: # ensure item conservation!

                    for i in xrange(max_count):
                        one_success = False
                        for use in uselist:
                            assert type(use) is dict
                            if 'spellname' in use:
                                spellname = use['spellname']
                                spellarg = use.get('spellarg', None)

                                if (spellarg is not None) and extra_spellargs:
                                    if not isinstance(spellarg, list):
                                        spellarg = [spellarg]
                                    else:
                                        spellarg = copy.copy(spellarg)
                                    spellarg += extra_spellargs

                                one_success = self.execute_spell(session, retmsg, spellname, spellarg, reason = 'item')
                            elif 'consequent' in use:
                                # do abort here on exceptions
                                one_success = False
                                session.execute_consequent_safe(use, session.player, retmsg, reason='use(%s)' % spec['name'], rethrow = True)
                                one_success = True

                            if not one_success:
                                break # one of the 'use' actions failed

                        if one_success:
                            success = True # any one item succeeding makes the whole operation count as successful
                            used_count += 1
                        else: # hit an error, don't try to activate any more items
                            break

                finally: # on the way out, remove used items
                    if success:
                        if spec.get('consumable', True):
                            if is_equipped:
                                assert used_count == 1 # might need handling for stacked equipped items for e.g. consumable ammo
                                Equipment.equip_remove(obj.equipment, (slot['slot_type'], slot['slot_index']), specname) # we don't care about the level here
                            else:
                                session.player.inventory_remove(item, used_count, '5130_item_activated', reason='consumed')

                            if session.has_attacked:
                                # record the expenditure for this battle
                                session.attack_item_expended(session.player.user_id, specname, used_count)

                        session.increment_player_metric('items_activated', used_count, time_series = False)
                        session.increment_player_metric('item:'+spec['name']+':activated', used_count, time_series = False)
                        if session.has_attacked:
                            # in battle - history update will come after battle ends
                            pass
                        else:
                            session.deferred_history_update = True

            else:
                raise Exception('item not usable '+repr(spec))

            retmsg.append(["INVENTORY_USE_RESULT", slot, specname, success, used_count, extra_spellargs]) # XXX return full item here
            if success and (not is_equipped):
                session.player.send_inventory_update(retmsg)
                retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

        elif arg[0] == "EQUIP_BUILDING":
            try:
                success = self.do_equip_building(session, retmsg, arg)
            except:
                gamesite.exception_log.event(server_time, 'exception in EQUIP_BUILDING! item duped or lost! player %d arg %s' % (session.player.user_id, repr(arg)))
                raise
            retmsg.append(["EQUIP_BUILDING_RESULT", arg, success])
            return
        elif arg[0] == "EQUIP_UNIT":
            try:
                success = self.do_equip_unit(session, retmsg, arg)
            except:
                gamesite.exception_log.event(server_time, 'exception in EQUIP_UNIT! item duped or lost! player %d arg %s' % (session.player.user_id, repr(arg)))
                raise
            retmsg.append(["EQUIP_UNIT_RESULT", arg, success])
            return

        elif arg[0] == "MAIL_READ":
            msg_id = arg[1]
            for mail in session.player.mailbox:
                if mail['msg_id'] == msg_id:
                    mail['read'] = 1
                    break

        elif arg[0] == "MAIL_DELETE":
            msg_id = arg[1]
            to_remove = []
            for mail in session.player.mailbox:
                if mail['msg_id'] == msg_id:
                    if any(item.get('undiscardable',False) for item in mail.get('attachments',[])):
                        # message has an undiscardable attachment - do not delete it
                        retmsg.append(["ERROR", "UNDISCARDABLE_ATTACHMENT"])
                        continue
                    to_remove.append(mail)
            for mail in to_remove:
                session.player.mailbox.remove(mail)
            session.player.send_mailbox_update(retmsg)

        elif arg[0] == "MAIL_TAKE_ATTACHMENTS":
            msg_id = arg[1]
            client_index = arg[2]
            client_spec = arg[3]
            client_stack = arg[4]

            if gamedata['server'].get('log_mail',0) >= 3:
                client_debug_info = arg[5]
            else:
                client_debug_info = None

            success = False
            need_space = False
            need_resource_update = False
            need_lottery_update = False
            mail = None
            VERIFY = gamedata['server']['verify_item_conservation']

            if not session.home_base:
                retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])

            for m in session.player.mailbox:
                if m['msg_id'] == msg_id:
                    mail = m
                    break

            if mail and ('attachments' in mail):
                res = session.player.resources.calc_snapshot()

                if VERIFY:
                    old_mail = copy.deepcopy(mail)
                    old_inventory = copy.deepcopy(session.player.inventory)

                to_take = []
                if client_index >= 0 and client_index < len(mail['attachments']):
                    # take one attached stack
                    at = mail['attachments'][client_index]
                    if at['spec'] == client_spec and at.get('stack',1) == client_stack:
                        if at['spec'] in gamedata['items']:
                            spec = gamedata['items'][at['spec']]

                            to_take.append(at)
                            if spec.get('fungible',False):
                                # if we successfully take a fungible item, which adds to resources directly,
                                # then we'll need to send an update of that
                                if spec['resource'] == 'lottery_scans':
                                    need_lottery_update = True
                                    session.deferred_player_auras_update = True
                                else:
                                    need_resource_update = True

                elif client_index < 0:
                    # take all
                    to_take = mail['attachments']

                to_remove = []

                for at in to_take:
                    full_stack = at.get('stack', 1)
                    original_at = copy.deepcopy(at)
                    ret = session.player.inventory_add_item(at, res.max_usable_inventory())
                    if ret >= full_stack:
                        success = True
                        to_remove.append(at)
                    elif ret > 0: # partial success
                        success = True
                        need_space = True
                        original_at['stack'] = ret # reduce stack down to how much was taken
                    else:
                        need_space = True

                    if ret > 0:
                        original_at['collected_at'] = server_time
                        if 'attachments_ghost' not in mail: mail['attachments_ghost'] = []
                        mail['attachments_ghost'].append(original_at)

                        session.player.inventory_log_event('5140_mail_attachment_collected', original_at['spec'], original_at.get('stack',1), original_at.get('expire_time',-1), level=original_at.get('level',None))
                        if original_at.get('log',False):
                            if 'mail_attachment_history' not in session.player.history: session.player.history['mail_attachment_history'] = []
                            session.player.history['mail_attachment_history'].append({'reason':original_at['log'],
                                                                                      'item':copy.deepcopy(original_at)})


                for at in to_remove:
                    mail['attachments'].remove(at)
                if len(mail['attachments']) == 0:
                    del mail['attachments']

                if VERIFY:
                    def count_attachments(m):
                        gamebucks = 0; items = 0 # unfinished gamebucks checking
                        for at in m.get('attachments',[]):
                            spec = gamedata['items'].get(at['spec'],None)
                            if spec and spec.get('fungible',False):
                                if spec['resource'] == 'gamebucks':
                                    gamebucks += at.get('stack',1)
                            else:
                                items += at.get('stack',1)
                        return items
                    def count_inventory(inv):
                        return sum([item.get('stack',1) for item in inv])
                    old_count = count_attachments(old_mail)+count_inventory(old_inventory)
                    new_count = count_attachments(mail)+count_inventory(session.player.inventory)
                    if old_count != new_count:
                        gamesite.exception_log.event(server_time, 'item conservation broken! %s->%s old_mail %s old_inv %s new_mail %s new_inv %s' % \
                                                     (repr(old_count), repr(new_count), repr(old_mail), repr(old_inventory), repr(mail), repr(session.player.inventory)))
                        session.player.inventory = old_inventory
                        session.player.mailbox.remove(mail)
                        session.player.mailbox.append(old_mail)
            else:
                gamesite.exception_log.event(server_time, 'player %d MAIL_TAKE_ATTACHMENTS: msg_id %s present %r index %d spec %s stack %d debug %r' % \
                                             (session.player.user_id, msg_id, bool(mail), client_index, client_spec, client_stack, client_debug_info))
                retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])

            #time.sleep(3) # to test lag

            if success:
                session.player.send_inventory_update(retmsg)
                if need_resource_update:
                    retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

            retmsg.append(["MAIL_TAKE_ATTACHMENTS_RESULT", msg_id, client_index, success, need_resource_update or need_lottery_update, mail if mail else None])
            if need_space:
                retmsg.append(["ERROR", "INVENTORY_LIMIT"])

        elif arg[0] == "LOOT_BUFFER_TAKE":
            client_contents = arg[1]
            client_index = arg[2]
            success = True
            need_space = False
            need_storage = False

            if (not inventory_list_equal(session.player.loot_buffer, client_contents)) or \
               ((client_index != -1) and \
                (client_index < 0 or \
                 client_index >= len(session.player.loot_buffer))):
                retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
                success = False

            if success:
                res = session.player.resources.calc_snapshot()
                if client_index == -1:
                    to_take = copy.copy(session.player.loot_buffer)
                else:
                    to_take = [session.player.loot_buffer[client_index],]

                for item in to_take:
                    full_stack = item.get('stack',1)
                    item_spec = gamedata['items'].get(item['spec'],{})

                    taken = session.player.inventory_add_item(item, res.max_usable_inventory())

                    if taken > 0 and item_spec.get('fungible',False) and item_spec['resource'] == 'lottery_scans':
                        session.deferred_player_auras_update = True

                    if taken >= full_stack:
                        session.player.loot_buffer.remove(item)
                    elif taken > 0:
                        item['stack'] = full_stack - taken
                        if item_spec.get('fungible',False):
                            need_storage = item_spec['resource']
                        else:
                            need_space = True
                    else:
                        if item_spec.get('fungible',False):
                            need_storage = item_spec['resource']
                        else:
                            need_space = True

            session.player.send_inventory_update(retmsg)
            retmsg.append(["LOOT_BUFFER_UPDATE", session.player.loot_buffer, False])
            if need_space:
                retmsg.append(["ERROR", "INVENTORY_LIMIT"])
            if need_storage:
                retmsg.append(["ERROR", "STORAGE_LIMIT", need_storage])
            if success:
                session.player.recalc_stattab(session.player)
                session.player.stattab.send_update(session, retmsg)
            retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])

        elif arg[0] == "LOOT_BUFFER_RELEASE":
            client_contents = arg[1]
            session.player.loot_buffer_release('LOOT_BUFFER_RELEASE')
            retmsg.append(["LOOT_BUFFER_UPDATE", session.player.loot_buffer, False])

        elif arg[0] == "DAILY_TIP_UNDERSTOOD":
            tipname = arg[1]
            understood = arg[2]
            key = 'daily_tip:'+tipname
            session.setmax_player_metric(key, 2 if understood else 1)

        elif arg[0] == "RECORD_FEATURE_USE":
            name = arg[1]
            key = 'feature_used:'+name
            session.setmax_player_metric(key, 1)

        elif arg[0] == "RECORD_CLIENT_HISTORY":
            name = arg[1]
            incr = arg[2]
            assert len(name) <= 64 # protect against DoS
            key = 'client:'+name
            session.increment_player_metric(key, incr, time_series = False)

        elif arg[0] == "MAP_BOOKMARK_UPDATE":
            region = arg[1]
            ui_name = SpinHTTP.unwrap_string(arg[2])[:24].strip()
            coords = map(int, arg[3])
            assert region in gamedata['regions']
            assert len(coords) == 2
            if ui_name == 'DELETED':
                if region in session.player.map_bookmarks:
                    to_remove = filter(lambda x: x['coords'] == coords, session.player.map_bookmarks[region])
                    for item in to_remove: session.player.map_bookmarks[region].remove(item)
                    if len(session.player.map_bookmarks[region]) < 1:
                        del session.player.map_bookmarks[region]
            else:
                if region not in session.player.map_bookmarks:
                    session.player.map_bookmarks[region] = []
                entry = None
                for item in session.player.map_bookmarks[region]:
                    if item['coords'] == coords:
                        entry = item
                        break
                if entry:
                    entry['ui_name'] = ui_name
                else:
                    session.player.map_bookmarks[region].append({'region':region, 'coords':coords, 'ui_name':ui_name})
                    if len(session.player.map_bookmarks[region]) > gamedata['client']['map_bookmarks_max']:
                        session.player.map_bookmarks[region].remove(session.player.map_bookmarks[region][0])

        elif arg[0] == "IDLE_CHECK_RESPONSE":
            response_data = arg[1]
            playtime = session.cur_playtime()
            status = session.player.idle_check.got_response(session.login_time, server_time, playtime, response_data)
            if status == IdleCheck.STATUS_NO_RESULT:
                pass
            elif status == IdleCheck.STATUS_SEND_AGAIN:
                idle_check_msg = session.player.idle_check.start_check(session.login_time, server_time, playtime)
                retmsg.append(["IDLE_CHECK", idle_check_msg])
                metric_event_coded(session.user.user_id, '0691_idle_check', idle_check_msg)
            elif status == IdleCheck.STATUS_FAIL:
                metric_event_coded(session.user.user_id, '0693_idle_check_fail', response_data)
            elif status == IdleCheck.STATUS_SUCCESS:
                metric_event_coded(session.user.user_id, '0692_idle_check_success', response_data)

        elif arg[0] == "INVOKE_FACEBOOK_AUTH_RESPONSE":
            #wanted_scope = arg[1]
            new_perms = arg[2]
            success = arg[3]
            if new_perms and len(new_perms) > 0:
                # add to facebook_permissions to update cache, so we don't go prompting the user again
                for perm in new_perms.split(','):
                    if session.player.facebook_permissions is None:
                        session.player.facebook_permissions = []
                    if perm not in session.player.facebook_permissions:
                        session.player.facebook_permissions.append(perm)
            if success:
                ev = '0038_request_permission_add_scope_success'
            else:
                ev = '0039_request_permission_add_scope_fail'
            metric_event_coded(session.user.user_id, ev, {'method':'gameserver', 'scope':str(new_perms)})

        elif arg[0] == "CLIENT_EVAL_RESULT":
            eval_str = arg[1]
            result = arg[2]
            gamesite.exception_log.event(server_time, 'user %d eval %s -> %s' % (session.user.user_id, str(eval_str), str(result)))

        elif arg[0] == "CLIENT_TRACKING_PIXEL_RESULT":
            pass
        elif arg[0] == "CLIENT_TRACKING_PIXEL_IMAGE_RESULT":
            pass

        elif arg[0] == "CAST_SPELL":
            id, spellname, spellargs = arg[1], arg[2], arg[3:]

            # XXX need to check that object is actually capable of casting 'spellname'
            if id == GameObject.VIRTUAL_ID:
                # virtual object
                object = None
            elif id == 0:
                raise Exception('bad legacy virtual object id 0 for %s' % spellname)
            else:
                # possible race condition due to unserialized AJAX
                if not session.has_object(id):
                    if gamedata['server'].get('log_combat_race_conditions', False):
                        gamesite.exception_log.event(server_time, 'CAST_SPELL on missing object player %d: %d %s %s' % \
                                                     (session.player.user_id, id, spellname, repr(spellargs)))
                    return

                object = session.get_object(id)
                assert (object.owner is session.player) or (session.player.is_cheater)

            if spellname == "SPEEDUP_FOR_FREE":
                self.do_speedup_for_free(session, retmsg, object)

            elif spellname == "REPAIR":
                self.do_start_repairs(session, retmsg, spellargs[0])

            elif spellname == "UPGRADE_FOR_FREE":
                self.do_upgrade(session, retmsg, object)
            elif spellname == "CANCEL_UPGRADE":
                self.do_cancel_upgrade(session, retmsg, object)

            elif spellname == "RESEARCH_FOR_FREE":
                if object not in session.player.home_base_iter():
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                self.do_research(session, retmsg, object, spellargs)
            elif spellname == "CANCEL_RESEARCH":
                if object not in session.player.home_base_iter():
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                self.do_cancel_research(session, retmsg, object)

            elif spellname == "CRAFT_FOR_FREE":
                if object not in session.player.home_base_iter():
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                self.do_craft(session, session.player, retmsg, object, self.CraftSpellarg(spellargs[0]),
                              check_predicates = (not session.player.is_cheater),
                              take_resources = (not session.player.is_cheater),
                              take_ingredients = (not session.player.is_cheater))

            elif spellname == "CANCEL_CRAFT":
                if object not in session.player.home_base_iter():
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                self.do_cancel_craft(session, retmsg, object, spellargs[0])
            elif spellname == "COLLECT_CRAFT":
                if object not in session.player.home_base_iter():
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                self.do_collect_craft(session, retmsg, object, attempt_id_list = spellargs[0])
                retmsg.append(["OBJECT_STATE_UPDATE2", object.serialize_state()])

            elif spellname == "COLLECT_DEPOSIT":
                if object not in session.player.home_base_iter():
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                self.do_collect_one_deposit(session, retmsg, object)
                session.player.send_history_update(retmsg)

            elif spellname == "HARVEST":
                if (not session.home_base):
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                session.activity_classifier.harvested()
                self.do_harvest_one(session, retmsg, session.viewing_base.base_type, session.viewing_base.base_region, session.viewing_base.base_id,
                                    object, compute_power_factor(session.player.my_home.get_power_state()), None, None)
                retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])
                session.player.send_history_update(retmsg)
            elif spellname == "HARVEST_ALL2":
                session.activity_classifier.harvested()
                self.do_harvest_all(session, retmsg, session.player.my_home.base_type, session.player.my_home.base_region, session.player.my_home.base_id,
                                    session.player.home_base_iter(), compute_power_factor(session.player.my_home.get_power_state()), None)
                retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])
                session.player.send_history_update(retmsg)

            elif spellname == "MAKE_DROIDS":
                if object not in session.player.home_base_iter():
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                self.do_make_droids(session, retmsg, object, spellargs)

            elif spellname == "CANCEL_MAKE_DROIDS":
                if object not in session.player.home_base_iter():
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                self.do_cancel_make_droids(session, retmsg, object, spellargs)

            elif spellname == "BUILD":
                self.do_build(session, retmsg, spellargs, False)

            elif spellname == "DEPLOY_UNITS":
                self.do_attack(session, retmsg, spellargs)

            elif spellname == "INSTANT_ATTACK":
                if not session.player.is_cheater:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    return session.start_async_request(self.instant_attack(session, retmsg, spellargs))

            elif spellname == "CONFIG_SET":
                if object not in session.player.home_base_iter():
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                if (not object.is_building()) or (object.owner is not session.player):
                    retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
                    return
                config = spellargs[0]
                if config is not None:
                    assert type(config) is dict
                    # sanity-check to prevent DDOS
                    assert len(config) <= gamedata['server'].get('max_object_config_settings', 10)
                    for key, val in config.iteritems():
                        assert type(key) in (str, unicode)
                        assert type(val) in (int, str, unicode, list)
                        if type(val) in (str, unicode): assert len(val) <= gamedata['server'].get('max_object_config_string', 64)
                        if type(val) is list:
                            assert len(val) <= gamedata['server'].get('max_object_config_settings', 10)
                            for item in val:
                                assert (type(item) in (str, unicode) or (item is None))
                                if type(item) in (str, unicode): assert len(item) <= gamedata['server'].get('max_object_config_string', 64)
                object.config = copy.deepcopy(config)
                retmsg.append(["OBJECT_STATE_UPDATE2", object.serialize_state()])
                session.viewing_base.nosql_write_one(object, 'CONFIG_SET', fields = ['config'])

            elif spellname == "MOVE_BUILDING":
                self.do_move_building(session, retmsg, object, spellargs)

            elif spellname == "LOTTERY_GET_SLATE":
                session.player.reseed_lottery(session, force = False)
                result = session.player.get_lottery_slate(session)
                retmsg.append(["LOTTERY_GET_SLATE_RESULT", result])

            elif spellname == "LOTTERY_SCAN":
                source = spellargs[0]
                assert source in ('cooldown','contents','aura') # cannot use "paid" here!
                if (session.viewing_base is not session.player.my_home) or (object.owner is not session.player):
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                self.do_lottery_scan(session, retmsg, object, spellname, source)

            elif spellname == "FISH_SLATE_ASSIGN":
                if 'assign_fish_slate' not in gamedata['consequent_library']:
                    retmsg.append(["ERROR", "SERVER_PROTOCOL"])
                    return
                if not session.player.cooldown_active('fish_slate_assigned'):
                    session.execute_consequent_safe(session.player.get_abtest_consequent('assign_fish_slate'), session.player, retmsg, reason=spellname)

            elif spellname == "HITLIST_ASSIGN":
                if not session.player.get_any_abtest_value('enable_hitlist', gamedata.get('enable_hitlist',False)) or \
                   ('assign_hitlist' not in gamedata['consequent_library']):
                    retmsg.append(["ERROR", "SERVER_PROTOCOL"])
                    return
                if not session.player.cooldown_active('hitlist_assigned'):
                    session.execute_consequent_safe(session.player.get_abtest_consequent('assign_hitlist'), session.player, retmsg, reason=spellname)

            elif spellname == "MIGRATE_TURRET_HEADS":
                spell = session.player.get_abtest_spell(spellname); assert spell
                for PRED in ('requires','show_if'):
                    if (PRED in spell) and (not Predicates.read_predicate(spell[PRED]).is_satisfied2(session, session.player, None)):
                        retmsg.append(["ERROR", "SERVER_PROTOCOL"])
                        return
                session.execute_consequent_safe(spell['consequent'], session.player, retmsg, reason=spellname)

            elif spellname == "CHEAT_REMOVE_LIMITS":
                if spin_secure_mode or (not session.player.is_developer()):
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    session.player.is_cheater = bool(spellargs[0])
            elif spellname == "CHEAT_CLEAR_COOLDOWNS":
                if not session.player.is_cheater:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    session.player.cooldowns = {}
                    retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])
            elif spellname == "CHEAT_CLEAR_PLAYER_AURAS":
                if not session.player.is_cheater:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    session.player.player_auras = []
                    session.player.recalc_stattab(session.player)
                    session.player.stattab.send_update(session, retmsg)
            elif spellname == "CHEAT_GIVE_GAMEBUCKS":
                if not session.player.is_cheater:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    session.player.resources.gain_gamebucks(spellargs[0], reason=spellname)
                    retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])
            elif spellname == "CHEAT_DRAIN_RESOURCES":
                if not session.player.is_cheater:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    for res in gamedata['resources']:
                        setattr(session.player.resources, res, 0)
                    session.player.resources.gamebucks = 0
                    session.deferred_player_state_update = True
                    scores_to_modify = {}
                    if session.player.ladder_points() != 0:
                        scores_to_modify['trophies_pvp'] = 0
                    if session.player.trophies_pvv() != 0:
                        scores_to_modify['trophies_pvv'] = 0
                    if scores_to_modify:
                        if session.player.modify_scores(scores_to_modify, method = '=', reason = spellname):
                            session.deferred_player_trophies_update = True
            elif spellname == "CHEAT_GET_DONATED_UNITS":
                if not session.player.is_cheater:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    session.player.donated_units = {}
                    for specname in gamedata['units'].iterkeys():
                        for i in xrange(4):
                            session.player.add_donated_unit(specname)
                    retmsg.append(["DONATED_UNITS_UPDATE", session.player.donated_units])
            elif spellname == "CHEAT_EXECUTE_CONSEQUENT":
                if not session.player.is_cheater:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    session.execute_consequent_safe(spellargs[0], session.player, retmsg, reason='CHEAT_EXECUTE_CONSEQUENT')
            elif spellname == "CHEAT_GIVE_GIFTS":
                if not session.player.is_cheater:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    for i in xrange(5):
                        gamesite.msg_client.msg_send([{'from': session.player.user_id + i,
                                                       'to': [session.player.user_id],
                                                       'type': 'resource_gift',
                                                       'msg_id': generate_mail_id(),
                                                       'expire_time': server_time + gamedata['server']['message_expire_time']['resource_gift'],
                                                       'from_pcache': self.get_player_cache_props(session.user, session.player, session.alliance_id_cache),
                                                       'unique_per_sender': 'resource_gift'}])
                    mail_stat = self.do_receive_mail(session, retmsg)
                    if mail_stat and mail_stat['new_mail']:
                        session.player.send_mailbox_update(retmsg)

            elif spellname == "CHEAT_GIVE_ITEMS":
                if not session.player.is_cheater:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                    return

                attachments = []

                if len(spellargs) > 0:
                    # give a list of items, even if just a single one was passed
                    if type(spellargs[0]) is not list:
                        item_list = [spellargs[0]]
                    else:
                        item_list = spellargs[0]

                    for item in item_list:
                        # strings: interpret as item or loot table name
                        if type(item) in (str,unicode):
                            if item in gamedata['items']:
                                spec = gamedata['items'][item]
                                attachments.append({'spec': item, 'stack': spec.get('max_stack',1)})
                            elif item in gamedata['loot_tables']:
                                attachments += session.get_loot_items(session.player, gamedata['loot_tables'][item]['loot'], -1, -1)
                            else:
                                pass # unrecognized

                        elif type(item) is dict:
                            # dict: interpret as item object
                            if item['spec'] in gamedata['items']:
                                spec = gamedata['items'][item['spec']]
                                level = min(item.get('level',1), spec.get('max_level',1))
                                stack = item.get('stack',1)
                                at = {'spec':spellargs[0]['spec']}
                                if level > 1:
                                    at['level'] = level
                                if stack > 1:
                                    at['stack'] = stack
                                if 'expire_time' in item:
                                    at['expire_time'] = item['expire_time']
                                attachments.append(at)
                            else:
                                pass # unrecognized
                else:
                    n_attachments = 9 if random.random() > 0.25 else 1
                    possible_items = gamedata['items'].keys()
                    for n in xrange(n_attachments):
                        choice = int(len(possible_items)*random.random())
                        spec_name = possible_items[choice]
                        spec = gamedata['items'][spec_name]
                        stack = 1
                        if 'fungible' in spec:
                            stack = int(30000*random.random())
                        elif 'max_stack' in spec:
                            stack = spec['max_stack'] # int((spec['max_stack']+1)*random.random())
                        item = {'spec':spec_name}
                        if stack > 1:
                            item['stack'] = stack
                        attachments.append(item)

                if attachments:
                    if session.player.get_any_abtest_value('modal_looting', gamedata['modal_looting']) and \
                       session.player.find_object_by_type(gamedata['inventory_building']):
                        session.player.loot_buffer += attachments
                        retmsg.append(["LOOT_BUFFER_UPDATE", session.player.loot_buffer, False])
                    else:
                        session.player.mailbox_append({'type':'mail',
                                                       'expire_time': server_time + 60*60,
                                                       'msg_id': generate_mail_id(),
                                                       'from_name': 'Valentina',
                                                       'subject': 'Test Message',
                                                       'body': "Greetings Commander,\n\nMessages let you receive communications and special items as \"attachments\".\n\nHere's a bonus item to try.",
                                                       'attachments': attachments})
                        session.player.send_mailbox_update(retmsg)

                    #session.player.send_history_update(retmsg)

            elif spellname == "CHEAT_MODIFY_ABTESTS":
                if spin_secure_mode or (not session.player.is_developer()):
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                    return
                data = spellargs[0]
                for name, group in data.iteritems():
                    assert name in gamedata['abtests']
                    if group is None and (name in session.player.abtests):
                        del session.player.abtests[name]
                    else:
                        assert group in gamedata['abtests'][name]['groups']
                        session.player.abtests[name] = group

                # really the user needs to be kicked and relogged
                return self.log_out_async(session, spellname)

            elif spellname == "CHEAT_RESET_GAME":
                if spin_secure_mode:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    if session.player.is_on_map():
                        gamesite.nosql_client.drop_map_feature(session.player.my_home.base_region, session.player.my_home.base_id, reason='reset_game')
                        session.player.my_home.base_region = session.player.home_region = session.player.my_home.base_map_loc = None
                        session.player.history['map_placement_gen'] = -1
                    session.player.reset()
                    init_game(session.player, 0)
                    session.player.history['sessions'] = [[server_time,-1],]
                    session.player.creation_time = session.user.account_creation_time = server_time
                    retmsg.append(["ABTEST_UPDATE", session.player.abtests])

                    # have to reset the tutorial before changing sessions, so that client will apply special AI states correctly
                    retmsg.append(["TUTORIAL_STATE_UPDATE", session.player.tutorial_state])

                    d = self.change_session(session, retmsg, dest_user_id = session.user.user_id, force = True)

                    def after_session_change(self, session, retmsg, change_session_result):
                        spawn_tutorial_units(session, retmsg)
                        session.player.send_history_update(retmsg)
                        retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])
                        retmsg.append(["TECH_UPDATE", session.player.tech])
                        retmsg.append(["QUEST_STATE_UPDATE", session.player.completed_quests])

                    d.addCallback(functools.partial(after_session_change, self, session, retmsg))
                    return d # async

            elif spellname == "CHEAT_SPAWN_UNITS":
                if not session.player.is_cheater:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    self.execute_spell(session, retmsg, "GIVE_UNITS_LIMIT_BREAK", spellargs[0])

            elif spellname == "CHEAT_MODIFY_SCORE":
                if not session.player.is_cheater:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    stat_name, stat_method, stat_delta = spellargs[0:3]
                    if session.player.modify_scores({stat_name: stat_delta}, method = stat_method, reason = spellname):
                        session.deferred_player_trophies_update = True

            elif spellname == "LOAD_AI_BASE":
                if spin_secure_mode or not session.home_base:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    success = True
                    error_msg = None
                    base_id = spellargs[0]
                    filename = str(base_id)

                    session.player.is_cheater = True # needed so that we can safely break unit space limits etc

                    try:
                        filename = ai_base_source_file(base_id)
                        base = SpinConfig.load(filename, stripped = True)
                        if 'units' in base and len(base['units']) > 0 and ('direction' in base['units'][0]):
                            raise Exception('%s is an AI attack, not an AI base.' % filename)

                        session.player.unit_repair_queue = []
                        session.player.tech = base.get('tech',{})
                        session.player.unit_equipment = base.get('unit_equipment',{})
                        session.player.my_home = Base(None, home_base_id(session.user.user_id), session.user.user_id, 'home')
                        session.player.my_home.base_region = session.player.home_region
                        if 'base_climate' in base: session.player.my_home.base_climate = base['base_climate']
                        if 'base_ncells' in base: session.player.my_home.base_ncells = base['base_ncells']
                        if 'deployment_buffer' in base: session.player.my_home.deployment_buffer = base['deployment_buffer']

                        for data in base.get('buildings',[]):
                            spec = data['spec']
                            if 'quarry' in filename and spec == '%RESOURCE_harvester': # for quarries
                                spec = gamedata['resources']['iron']['harvester_building']
                            obj = instantiate_object_for_player(session.player, session.player, spec, x=data['xy'][0], y=data['xy'][1],
                                                                level = data.get('force_level', data.get('level',1)))
                            if 'force_level' in data: obj.force_ai_level = data['force_level']
                            if 'equipment' in data: obj.equipment = data['equipment']
                            session.player.home_base_add(obj)
                        for data in base.get('units',[]):
                            obj = instantiate_object_for_player(session.player, session.player, data['spec'], x=data['xy'][0], y=data['xy'][1],
                                                                level = data.get('force_level', data.get('level',1)))
                            if 'force_level' in data: obj.force_ai_level = data['force_level']
                            if 'orders' in data: obj.orders = data['orders']
                            if 'patrol' in data: obj.patrol = data['patrol']
                            if 'temporary' in data: obj.temporary = data['temporary']
                            session.player.home_base_add(obj)
                        for data in base.get('scenery',[]):
                            obj = instantiate_object_for_player(session.player, EnvironmentOwner, data['spec'], x=data['xy'][0], y=data['xy'][1])
                            session.player.home_base_add(obj)

                        session.player.ping_squads_and_send_update(session, retmsg, originator = session.player.user_id, reason = 'load_ai_base')
                        d = self.change_session(session, retmsg, dest_user_id = session.user.user_id, force = True)

                        def after_session_change(self, session, retmsg, filename, change_session_result):
                            retmsg.append(["LOAD_AI_BASE_RESULT", True, None, filename])

                        d.addCallback(functools.partial(after_session_change, self, session, retmsg, filename))
                        return d # async

                    except:
                        error_msg = traceback.format_exc().strip() # OK
                        success = False

                    retmsg.append(["LOAD_AI_BASE_RESULT", success, "LOAD_AI_BASE_ERROR" if (not success) else None, error_msg if (not success) else filename])

            elif spellname == "SAVE_AI_BASE":
                if spin_secure_mode or not session.home_base:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    success = True
                    error_msg = None
                    base_id = spellargs[0]
                    filename = str(base_id)

                    try:
                        filename = ai_base_source_file(base_id)
                        out = {'deployment_buffer': session.player.my_home.deployment_buffer,
                               'tech': session.player.tech,
                               'unit_equipment': session.player.unit_equipment,
                               'buildings': [], 'units': [], 'scenery': []}

                        # only write base_climate if it differs from the default
                        if session.player.my_home.base_climate != gamedata.get('default_climate', None):
                            out['base_climate'] = session.player.my_home.base_climate

                        # force an explicit ncells value
                        out['base_ncells'] = session.player.my_home.base_ncells or gamedata['map']['default_ncells']

                        for obj in session.player.home_base_iter():
                            if obj.is_building():
                                spec = obj.spec.name
                                if 'quarry' in filename and spec in [x['harvester_building'] for x in gamedata['resources'].itervalues()]:
                                    spec = '%RESOURCE_harvester'
                                props = {'spec':spec, 'xy': [obj.x,obj.y],
                                         'force_level': obj.level }
                                if obj.equipment: props['equipment'] = obj.equipment
                                out['buildings'].append(props)
                            elif obj.is_mobile():
                                if obj.is_temporary(): continue # don't save these
                                props = {'spec': obj.spec.name, 'xy': [obj.x, obj.y] }
                                if obj.orders: props['orders'] = obj.orders
                                if obj.patrol: props['patrol'] = obj.patrol
                                if obj.force_ai_level is not None: props['force_level'] = obj.force_ai_level
                                out['units'].append(props)
                            elif obj.owner is EnvironmentOwner:
                                props = {'spec': obj.spec.name, 'xy': [obj.x, obj.y] }
                                out['scenery'].append(props)

                        atom = AtomicFileWrite.AtomicFileWrite(filename, 'w') # DANGEROUS - can overwrite any file!
                        atom.fd.write(SpinJSON.dumps(out, pretty = True)[1:-1]+'\n') # note: get rid of surrounding {}
                        atom.complete()
                    except:
                        error_msg = traceback.format_exc().strip() # OK
                        success = False

                    retmsg.append(["SAVE_AI_BASE_RESULT", success, "SAVE_AI_BASE_ERROR" if (not success) else None, error_msg if (not success) else filename])
            elif spellname == "PUBLISH_AI_BASE":
                if spin_secure_mode or not session.home_base:
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    success = True
                    error_msg = None
                    idnum = spellargs[0]
                    try:
                        if (type(idnum) is not int) or (str(idnum) not in gamedata['ai_bases_server']['bases']):
                            success = False
                            error_msg = "Invalid base ID %s" % idnum

                        if success:
                            cmdline = ['./make-gamedata.sh', '-u', '-n']
                            proc = subprocess.Popen(cmdline, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                            stdoutdata, stderrdata = proc.communicate()
                            if proc.returncode != 0:
                                success = False
                                error_msg = '%s failed - run this command in your terminal and check errors.' % cmdline[0]
                                error_msg += '\nLog:\n'+ stderrdata + '\n' + stdoutdata

                        if success:
                            # HUP proxyserver
                            os.kill(int(open('proxyserver.pid').read().strip()), signal.SIGHUP)

                            # remove any partially-damaged aistate versions of this base
                            for file in glob.glob(os.path.join(SpinConfig.config.get('aistate_dir', 'aistate'), '*_%d.txt' % (idnum))):
                                os.unlink(file)

                        if success:
                            reload_gamedata()
                            setup_next_ai_base([str(idnum),])

                    except:
                        error_msg = traceback.format_exc().strip() # OK
                        success = False

                    retmsg.append(["PUBLISH_AI_BASE_RESULT", success, "PUBLISH_AI_BASE_ERROR" if (not success) else None, error_msg if (not success) else str(idnum)])

            elif spellname == "CHEAT_AI_ATTACK":
                if (not session.player.is_developer()):
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    session.start_ai_attack(retmsg, spellargs[0] if spellargs else 'daily', override_protection = True)

            elif spellname == "TUTORIAL_AI_ATTACK":
                if session.player.tutorial_state == "COMPLETE":
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                else:
                    session.start_ai_attack(retmsg, 'tutorial')

            elif spellname == "CHAT_GAG" or spellname == "CHAT_UNGAG":
                if not session.user.is_chat_mod():
                    retmsg.append(["ERROR", "DISALLOWED_IN_SECURE_MODE"])
                    return
                target_id = spellargs[0]

                # fire an asynchronous request to proxyserver, who
                # will then route it to whatever game server is
                # handling the player, or a random server to do an
                # offline mutation.

                rq = AsyncHTTP.AsyncHTTPRequester(-1, -1, 10, 0, lambda x: gamesite.exception_log.event(server_time, x))
                d = make_deferred(spellname)
                def finish(self, d, session, retmsg, spellname, target_id, response_or_error):
                    retmsg.append([spellname+"_RESULT", target_id, True])
                    d.callback(True)
                host = SpinConfig.config['proxyserver'].get('external_host', gamesite.config.game_host)
                port = SpinConfig.config['proxyserver']['external_http_port']
                rq.queue_request(server_time, 'http://%s:%d/CONTROLAPI?' % (host,port) + urllib.urlencode({'method':spellname.lower(),
                                                                                                           'user_id':target_id,
                                                                                                           'secret':SpinConfig.config['proxy_api_secret']}),
                                 functools.partial(finish, self, d, session, retmsg, spellname, target_id),
                                 error_callback = functools.partial(finish, self, d, session, retmsg, spellname, target_id))
                return session.start_async_request(d) # go async

            elif spellname == "ALLIANCE_CREATE" or spellname == "ALLIANCE_MODIFY":
                props = spellargs[0]
                success = True
                new_id = -1

                # unwrap strings
                props['ui_name'] = SpinHTTP.unwrap_string(props['ui_name_enc']); del props['ui_name_enc']
                props['chat_tag'] = SpinHTTP.unwrap_string(props['chat_tag_enc']); del props['chat_tag_enc']
                props['ui_descr'] = SpinHTTP.unwrap_string(props['ui_descr_enc']); del props['ui_descr_enc']
                props['chat_motd'] = SpinHTTP.unwrap_string(props['chat_motd_enc']); del props['chat_motd_enc']

                if (not session.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances'])) or \
                   (not gamesite.sql_client):
                    retmsg.append(["ERROR", "ALLIANCES_OFFLINE"])
                    success = False

                if spellname == "ALLIANCE_CREATE" and (not Predicates.read_predicate({'predicate':'LIBRARY','name':'alliance_create_requirement'}).is_satisfied(session.player, None)):
                    retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED"])
                    success = False

                if success and (spellname == "ALLIANCE_CREATE"):
                    # check for async notifications
                    self.do_receive_mail(session, retmsg, type_filter = ['cooldown_trigger'])
                    spell = gamedata['spells']['ALLIANCE_LEAVE']
                    if spell.get('cooldown',-1) > 0 and session.player.cooldown_active(spell['cooldown_name']):
                        retmsg.append(["ERROR", "CANNOT_CREATE_ALLIANCE_ON_COOLDOWN"])
                        success = False


                spell = gamedata['spells'][spellname]
                cost = spell['price']
                for res in cost:
                    if (getattr(session.player.resources,res) < cost[res]):
                        retmsg.append(["ERROR", "INSUFFICIENT_"+res.upper(), cost[res]])
                        success = False

                # sanitize parameters
                props['ui_name'] = props['ui_name'][:64].strip()
                props['chat_tag'] = props['chat_tag'][:3].strip().upper()
                props['ui_descr'] = props['ui_descr'][:256].strip()
                props['logo'] = props['logo'][:32].strip()
                props['chat_motd'] = props['chat_motd'][:256].strip()

                if not is_valid_alliance_name(props['ui_name']):
                    retmsg.append(["ERROR", "CANNOT_CREATE_ALLIANCE_NAME_BAD"])
                    success = False
                elif not is_valid_alliance_tag(props['chat_tag']):
                    retmsg.append(["ERROR", "CANNOT_CREATE_ALLIANCE_TAG_BAD"])
                    success = False
                elif not is_valid_alliance_descr(props['ui_descr']):
                    retmsg.append(["ERROR", "CANNOT_CREATE_ALLIANCE_DESCR_BAD"])
                    success = False

                elif not is_valid_alliance_descr(props['chat_motd']):
                    retmsg.append(["ERROR", "CANNOT_CREATE_ALLIANCE_CHAT_MOTD_BAD"])
                    success = False

                assert str(props['join_type']) in ('anyone', 'invite_only')

                if success:
                    cur_id = session.get_alliance_id()

                    if spellname == "ALLIANCE_CREATE" and cur_id > 0:
                        # make sure player is not currently in an alliance
                        success = False

                if success:
                    if spellname == "ALLIANCE_MODIFY":
                        success, err_reason = gamesite.sql_client.modify_alliance(cur_id, session.user.user_id, ui_name = props['ui_name'], ui_description = props['ui_descr'],
                                                                                  join_type = props['join_type'], logo = props['logo'],
                                                                                  chat_motd = props['chat_motd'], chat_tag = props['chat_tag'],
                                                                                  reason = 'ALLIANCE_MODIFY')
                        if success:
                            # take resources
                            negative_cost = dict((res,-cost[res]) for res in cost)
                            session.player.resources.gain_res(negative_cost, reason='alliance_modification')
                            admin_stats.econ_flow_res(session.player, 'investment', 'alliance_modification', negative_cost)
                            retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])
                            new_info, new_membership = session.init_alliance(retmsg, reason='ALLIANCE_MODIFY')
                            assert new_info
                            retmsg.append(["ALLIANCE_UPDATE", new_info['id'], False, new_info, new_membership, False])
                        else:
                            retmsg.append(["ERROR", err_reason])

                    else:
                        new_id, err_reason = gamesite.sql_client.create_alliance(props['ui_name'], props['ui_descr'], props['join_type'], session.user.user_id, props['logo'], server_time, session.player.home_continent(), chat_motd = props['chat_motd'], chat_tag = props['chat_tag'], reason='ALLIANCE_CREATE')
                        if new_id > 0:
                            try:
                                session.increment_player_metric('alliances_created', 1, time_series = False)

                                # send invite
                                if props['join_type'] == 'invite_only':
                                    assert gamesite.sql_client.send_alliance_invite(session.user.user_id, session.user.user_id, new_id,
                                                                                    server_time, server_time + gamedata['alliances']['invite_duration'],
                                                                                    force = True,
                                                                                    reason='ALLIANCE_CREATE')

                                # join
                                assert gamesite.sql_client.join_alliance(session.user.user_id, new_id, server_time, gamedata['alliances']['max_members'], role=gamesite.sql_client.ROLE_LEADER, force=True, reason='ALLIANCE_CREATE')

                                # verify that join worked, and set up chat
                                new_info, new_membership = session.init_alliance(retmsg, reason='ALLIANCE_CREATE')
                                assert new_info and new_info['id'] == new_id

                                retmsg.append(["ALLIANCE_UPDATE", new_info['id'], False, new_info, new_membership, False])
                                if session.player.history.get('alliances_joined',0) < 1:
                                    session.player.history['alliance_first_join_time'] = server_time
                                    session.player.history['alliance_first_join_created'] = 1
                                session.increment_player_metric('alliances_joined', 1, time_series = False)
                                metric_event_coded(session.user.user_id, '4610_alliance_member_joined', {'alliance_id': new_id, 'role': gamesite.sql_client.ROLE_LEADER,
                                                                                                         'sum':session.player.get_denormalized_summary_props('brief')})

                                session.player.update_alliance_score_cache(new_id, alliance_info = new_info, reason='ALLIANCE_CREATE')
                                gamesite.pcache_client.player_cache_update(session.player.user_id, {'alliance_id': new_id}, reason = 'ALLIANCE_CREATE')

                            finally:
                                # take resources
                                negative_cost = dict((res,-cost[res]) for res in cost)
                                session.player.resources.gain_res(negative_cost, reason='alliance_creation')
                                admin_stats.econ_flow_res(session.player, 'investment', 'alliance_creation', negative_cost)
                                retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])
                        else:
                            success = False
                            retmsg.append(["ERROR", err_reason])

                if success:
                    metric_event_coded(session.user.user_id, '4601_alliance_settings_updated' if spellname == "ALLIANCE_MODIFY" else '4600_alliance_created',
                                       {'alliance_id': new_id if spellname == "ALLIANCE_CREATE" else cur_id,
                                        'sum':session.player.get_denormalized_summary_props('brief'),
                                        'chat_tag': props['chat_tag'],
                                        'ui_name': props['ui_name'],
                                        'num_members_cache': 1 if spellname == "ALLIANCE_CREATE" else None,
                                        'ui_description': props['ui_descr'],
                                        'logo': props['logo'],
                                        'continent': session.player.home_continent() if spellname == "ALLIANCE_CREATE" else None,
                                        'join_type': props['join_type'],
                                        'chat_motd': props['chat_motd']
                                        })

                retmsg.append([spellname+"_RESULT", props, new_id])

            # SQUADS

            elif spellname == 'SQUAD_CREATE':
                if session.player.squad_bay_is_busy():
                    retmsg.append(["ERROR", "SQUAD_BAY_IS_BUSY"])
                    return

                ui_name = spellargs[0][:64].strip()
                success = True

                # subtract 1 for Base Defenders which doesn't count against the squad limit
                if len(session.player.squads)-1 >= session.player.stattab.max_squads:
                    retmsg.append(["ERROR", "CANNOT_CREATE_SQUAD_LIMIT_REACHED"])
                    success = False
                if success:
                    new_id = max([x['id'] for x in session.player.squads.itervalues()]+[0,]) + 1
                    session.player.squads[str(new_id)] = {'id':new_id, 'ui_name': ui_name}
                retmsg.append(["SQUADS_UPDATE", session.player.squads])

            elif spellname == 'SQUAD_RENAME':
                squad_id = int(spellargs[0])
                ui_name = SpinHTTP.unwrap_string(spellargs[1])[:24].strip()
                if not ui_name: return
                if SQUAD_IDS.is_mobile_squad_id(squad_id) and str(squad_id) in session.player.squads:
                    session.player.squads[str(squad_id)]['ui_name'] = ui_name
                    if session.player.squad_is_deployed(squad_id) and gamesite.nosql_client:
                        gamesite.nosql_client.update_map_feature(session.player.home_region, session.player.squad_base_id(squad_id), {'base_ui_name':ui_name}, originator=session.player.user_id, reason='SQUAD_RENAME')
                retmsg.append(["SQUADS_UPDATE", session.player.squads])

            elif spellname == 'SQUAD_DELETE':
                squad_id = int(spellargs[0])
                assert SQUAD_IDS.is_mobile_squad_id(squad_id)
                if session.has_attacked:
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_IN_COMBAT"])
                    return
                squad = session.player.verify_squad(squad_id)
                if False and session.player.squad_is_under_repair(squad_id):
                    retmsg.append(["ERROR", "CANNOT_ALTER_SQUAD_UNDER_REPAIR"])
                    return

                if squad:
                    # reassign units to reserves
                    for object in session.player.home_base_iter():
                        if object.is_mobile() and object.squad_id == squad_id:
                            object.squad_id = SQUAD_IDS.RESERVES
                            session.player.unit_repair_cancel(object)
                            session.player.send_army_update_one(object, retmsg)
                    del session.player.squads[str(squad_id)]
                    session.player.unit_repair_send(retmsg)
                else:
                    retmsg.append(["ERROR", "CANNOT_ALTER_SQUAD_WHILE_TRAVELING"])
                retmsg.append(["SQUADS_UPDATE", session.player.squads])

            elif spellname == 'SQUAD_UNASSIGN_UNIT':
                squad_id = int(spellargs[0])
                object_id = spellargs[1]

                if not session.home_base:
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                if session.has_attacked:
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_IN_COMBAT"])
                    return
                if squad_id != SQUAD_IDS.BASE_DEFENDERS and session.player.squad_bay_is_busy():
                    retmsg.append(["ERROR", "SQUAD_BAY_IS_BUSY"])
                    return

                squad = session.player.verify_squad(squad_id)
                object = session.player.get_object_by_obj_id(object_id, fail_missing = False)
                if (not object) or (not object.is_mobile()) or (object.owner is not session.player) or ((object.squad_id or 0) != squad_id) or (not squad) or (session.player.squad_is_under_repair(squad_id)):
                    if object: session.player.send_army_update_one(object, retmsg)
                    retmsg.append(["ERROR", "CANNOT_ALTER_SQUAD_UNDER_REPAIR" if session.player.squad_is_under_repair(squad_id) else "HARMLESS_RACE_CONDITION"])
                    return
                session.player.unit_repair_cancel(object)

                object.squad_id = SQUAD_IDS.RESERVES # return to reserves
                session.player.send_army_update_one(object, retmsg)

                if True: # players shouldn't expect that squad units maintain orders after moving between squads
                    # clear movement orders
                    object.reset_as_squad_unit(session.player.my_home.ncells())

                if session.home_base and (squad_id == SQUAD_IDS.BASE_DEFENDERS):
                    # removed from base defenders at home base - remove from session
                    if session.has_object(object.obj_id):
                        # this should always be the case, but might be racy?
                        session.rem_object(object.obj_id)
                        retmsg.append(["OBJECT_REMOVED2", object.obj_id])

            elif spellname == 'SQUAD_ASSIGN_UNIT':
                squad_id = int(spellargs[0])
                object_id = spellargs[1]

                if not session.home_base:
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                if session.has_attacked:
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_IN_COMBAT"])
                    return
                if squad_id != SQUAD_IDS.BASE_DEFENDERS and session.player.squad_bay_is_busy():
                    retmsg.append(["ERROR", "SQUAD_BAY_IS_BUSY"])
                    return

                squad = session.player.verify_squad(squad_id)
                object = session.player.get_object_by_obj_id(object_id, fail_missing = False)
                if (not object) or (not object.is_mobile()) or (object.owner is not session.player) or (object.squad_id != SQUAD_IDS.RESERVES) or (not squad) or (session.player.squad_is_under_repair(squad_id)):
                    if object: session.player.send_army_update_one(object, retmsg)
                    retmsg.append(["ERROR", "CANNOT_ALTER_SQUAD_UNDER_REPAIR" if session.player.squad_is_under_repair(squad_id) else "HARMLESS_RACE_CONDITION"])
                    return
                # see if the squad has room
                # note: since squad is at home base, all squad objects will be in home_base_iter, so we don't have to query the map
                # XXX this doesn't work for base_defenders if produce_to_reserves is off, it needs to add manuf_queue space!
                space = sum([x.get_leveled_quantity(x.spec.consumes_space) for x in session.player.home_base_iter() \
                             if x.is_mobile() and x.squad_id == squad_id],0)
                if squad_id == SQUAD_IDS.BASE_DEFENDERS:
                    space_limit = session.player.stattab.main_squad_space
                else:
                    space_limit = session.player.stattab.squad_space
                if space + object.get_leveled_quantity(object.spec.consumes_space) > space_limit:
                    retmsg.append(["ERROR", "CANNOT_SQUAD_ASSIGN_UNIT_LIMIT_REACHED"])
                else:
                    session.player.unit_repair_cancel(object)
                    object.squad_id = squad_id
                    if squad_id == SQUAD_IDS.BASE_DEFENDERS and session.home_base and gamedata.get('enable_defending_units',True):
                        # assigned to base defenders - add to session
                        session.add_object(object)
                        retmsg.append(["OBJECT_CREATED2", object.serialize_state()])
                        if object.auras:
                            retmsg.append(["OBJECT_AURAS_UPDATE", object.serialize_auras()])

                session.player.send_army_update_one(object, retmsg) # also send in failure case

            elif spellname == 'SQUAD_ENTER_MAP':
                if session.has_attacked:
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_IN_COMBAT"])
                    return
                squad_id = int(spellargs[0])
                coords = spellargs[1]
                success, affected_objects, map_features, error_code = session.player.squad_enter_map(squad_id, coords)
                if error_code:
                    retmsg.append(["ERROR"] + error_code)
                if map_features: retmsg.append(["REGION_MAP_UPDATES", session.player.home_region, map_features, server_time])
                retmsg.append(["SQUADS_UPDATE", session.player.squads])

            elif spellname == 'SQUAD_STEP':
                squad_id = int(spellargs[0])
                # limit # of steps to prevent DDOS
                map_dimensions = gamedata['regions'][session.player.home_region]['dimensions']
                max_steps = map_dimensions[0]+map_dimensions[1]
                coords = spellargs[1][:max_steps] if spellargs[1] else None # may be null
                success, affected_objects, map_features, error_code = session.player.squad_step(squad_id, coords)
                if error_code: retmsg.append(["ERROR"] + error_code)
                if map_features: retmsg.append(["REGION_MAP_UPDATES", session.player.home_region, map_features, server_time])
                retmsg.append(["SQUADS_UPDATE", session.player.squads])

            elif spellname == 'SQUAD_EXIT_MAP':
                if session.has_attacked:
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_IN_COMBAT"])
                    return
                squad_id = int(spellargs[0])
                success, affected_objects, map_features, error_code = session.player.squad_exit_map(session, squad_id, originator = session.player.user_id, reason='SQUAD_EXIT_MAP')
                if error_code:
                    retmsg.append(["ERROR"] + error_code)
                if map_features: retmsg.append(["REGION_MAP_UPDATES", session.player.home_region, map_features, server_time])
                retmsg.append(["SQUADS_UPDATE", session.player.squads])

            elif spellname == 'SQUAD_REPAIR_CANCEL':
                if not session.home_base:
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                squad_id = int(spellargs[0])
                assert (SQUAD_IDS.is_mobile_squad_id(squad_id) or squad_id == SQUAD_IDS.BASE_DEFENDERS)
                squad = session.player.verify_squad(squad_id)
                if (not squad) or (not session.player.squad_is_under_repair(squad_id)):
                    retmsg.append(["ERROR", "HARMLESS_RACE_CONDITION"])
                    session.player.unit_repair_send(retmsg)
                else:
                    self.do_unit_repair_cancel_all(session, retmsg)
                retmsg.append(["SQUADS_UPDATE", session.player.squads]) # to unblock the GUI

            elif spellname == 'SQUAD_REPAIR_QUEUE':
                if not session.home_base:
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                    return
                if session.has_attacked:
                    retmsg.append(["ERROR", "CANNOT_CAST_SPELL_IN_COMBAT"])
                    return
                squad_id = int(spellargs[0])
                assert (SQUAD_IDS.is_mobile_squad_id(squad_id) or squad_id == SQUAD_IDS.BASE_DEFENDERS)
                squad = session.player.verify_squad(squad_id)

                to_repair = []
                errors = []
                cost = dict([(res,0) for res in gamedata['resources']])

                for obj in session.player.home_base_iter():
                    if obj.owner is session.player and obj.is_mobile() and ((obj.squad_id or 0) == squad_id) and obj.is_damaged():
                        if not session.player.can_repair_unit(obj):
                            errors.append(["REQUIREMENTS_NOT_SATISFIED", {'predicate':'TECH_LEVEL','tech':obj.spec.level_determined_by_tech,'min_level':1}])
                            continue
                        obj_cost = obj.cost_to_repair(session.player)
                        for res in gamedata['resources']:
                            cost[res] += obj_cost.get(res,0)
                        to_repair.append(obj)

                for res in cost:
                    if (getattr(session.player.resources,res) < cost[res]):
                        errors.append(["INSUFFICIENT_RESOURCES_TO_REPAIR", cost.copy(), squad_id])
                        break

                if errors:
                    retmsg += [["ERROR"]+x for x in errors]
                else:
                    self.do_unit_repair_cancel_all(session, retmsg)
                    assert len(session.player.unit_repair_queue) == 0
                    # order units by repair time, lowest to highest
                    to_repair.sort(key = lambda obj: obj.time_to_repair(session.player))
                    for obj in to_repair:
                        assert self.do_unit_repair_queue(session, obj.obj_id) is None

                session.player.unit_repair_send(retmsg)
                retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])
                retmsg.append(["SQUADS_UPDATE", session.player.squads]) # to unblock the GUI

            elif spellname == 'REQUEST_UNIT_DONATION':
                assert object and (spellname in object.spec.spells)

                success = True

                if session.player.cooldown_active(gamedata['spells'][spellname]['cooldown_name']):
                    retmsg.append(["ERROR", "ON_COOLDOWN"])
                    success = False

                if success:
                    if session.has_attacked or (object not in session.player.home_base_iter()):
                        retmsg.append(["ERROR", "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"])
                        success = False

                if success:
                    if (not session.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances'])) or \
                       (not gamesite.sql_client) or (not session.alliance_chat_channel):
                        retmsg.append(["ERROR", "ALLIANCES_OFFLINE"])
                        success = False

                if success:
                    if (not session.player.unit_donation_enabled()) or \
                       object.is_under_construction() or object.is_damaged() or object.is_upgrading():
                        retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED"])
                        success = False

                if success:
                    alliance_id = session.get_alliance_id()
                    if alliance_id <= 0:
                        retmsg.append(["ERROR", "REQUIREMENTS_NOT_SATISFIED"])
                        success = False

                if success:
                    # tag we will use for the NEW request
                    tag = random.randrange(1<<31)

                    # in order to prevent race conditions, stop further donations from coming in, then check for any in-flight donations
                    # before calculating how much space we can request
                    if session.alliance_chat_channel:
                        session.do_chat_send(session.alliance_chat_channel,
                                             'Invalidate my unit donation request!',
                                             bypass_gag = True, props = {'type':'unit_donation_request_invalidation', 'new_tag': tag})
                    gamesite.sql_client.invalidate_unit_donation_request(session.player.user_id)
                    self.do_receive_mail(session, retmsg, type_filter = ['donated_units'])
                    cur_space = session.player.donated_units_space()
                    max_space = object.get_leveled_quantity(object.spec.provides_donated_space)
                    if cur_space >= max_space:
                        retmsg.append(["ERROR", "CANNOT_REQUEST_UNIT_DONATION_NO_SPACE"])
                        success = False

                if success:
                    if not gamesite.sql_client.request_unit_donation(session.player.user_id, alliance_id, server_time, tag, cur_space, max_space):
                        success = False

                if success:
                    session.player.cooldown_trigger(gamedata['spells'][spellname]['cooldown_name'], gamedata['spells'][spellname]['cooldown'])
                    if session.increment_player_metric('unit_donations_requested', 1, time_series = False):
                        session.deferred_history_update = True
                    metric_event_coded(session.player.user_id, '4140_unit_donation_requested', {'alliance_id':alliance_id,'tag':tag,'max_space':max_space,'cur_space':cur_space})
                    if session.alliance_chat_channel:
                        session.do_chat_send(session.alliance_chat_channel,
                                             'I need units! (tag %d cur %d max %d)' % (tag, cur_space, max_space),
                                             bypass_gag = True, props = {'type':'unit_donation_request', 'tag':tag, 'max_space':max_space, 'cur_space':cur_space})

                # send this regardless of success state
                retmsg.append(["COOLDOWNS_UPDATE", session.player.cooldowns])

            elif spellname == 'DONATE_UNITS':
                recipient_id = spellargs[0]
                tag = spellargs[1]
                unit_ids = spellargs[2]
                success = True
                error_reason = None

                assert object and (spellname in object.spec.spells)
                assert recipient_id != session.player.user_id

                if success:
                    if session.has_attacked or (object not in session.player.home_base_iter()):
                        error_reason = "CANNOT_CAST_SPELL_OUTSIDE_HOME_BASE"
                        success = False

                if success:
                    if (not session.player.get_any_abtest_value('enable_alliances', gamedata['client']['enable_alliances'])) or \
                       (not gamesite.sql_client) or (not session.alliance_chat_channel):
                        error_reason = "ALLIANCES_OFFLINE"
                        success = False

                if success:
                    if (not session.player.unit_donation_enabled()) or \
                       object.is_under_construction() or object.is_damaged() or object.is_upgrading():
                        error_reason = "REQUIREMENTS_NOT_SATISFIED"
                        success = False

                if success:
                    alliance_id = session.get_alliance_id()
                    if alliance_id <= 0:
                        error_reason = "REQUIREMENTS_NOT_SATISFIED"
                        success = False

                units = []
                attachments = []

                if success:
                    # dictionary mapping (specname,level) -> qty donated
                    qty_by_specname_and_level = {}
                    for id in unit_ids:
                        unit = session.player.get_object_by_obj_id(id, fail_missing = False)
                        if (not unit) or (unit.owner is not session.player) or (not unit.is_mobile()) or \
                           (not unit.spec.donatable) or \
                           (unit.hp < unit.max_hp) or \
                           SQUAD_IDS.is_mobile_squad_id(unit.squad_id or 0) or \
                           (unit.get_leveled_quantity(unit.spec.consumes_space) > object.get_leveled_quantity(object.spec.max_individual_donation_space)):
                            success = False
                            error_reason = "HARMLESS_RACE_CONDITION"
                            break
                        units.append(unit) # mark this as a unit we'd delete if the donation succeeds
                        level = 1 # XXXXXX carry over level here?
                        key = (unit.spec.name, level)
                        qty_by_specname_and_level[key] = qty_by_specname_and_level.get(key,0) + 1

                    if len(qty_by_specname_and_level) < 1:
                        success = False # nothing to donate
                    else:
                        # compress to a single attachment by specname and level
                        for key, qty in qty_by_specname_and_level.iteritems():
                            specname, level = key
                            p = {'spec': specname}
                            if qty > 1: p['stack'] = qty
                            if level > 1: p['level'] = level
                            attachments.append(p)

                if success:
                    total_space = sum([u.get_leveled_quantity(u.spec.consumes_space) for u in units])
                    result = gamesite.sql_client.make_unit_donation(recipient_id, alliance_id, tag, [total_space])

                if success:
                    if result:
                        cur_space, max_space = result
                        gamesite.msg_client.msg_send([{'to':[recipient_id],
                                                       'type':'donated_units',
                                                       'attachments':attachments,
                                                       'from': session.player.user_id,
                                                       'from_fbid': session.user.facebook_id,
                                                       'from_name': session.user.get_chat_name(session.player)}])

                        for unit in units:
                            if session.has_object(unit.obj_id):
                                retmsg.append(["OBJECT_REMOVED2", unit.obj_id])
                                session.rem_object(unit.obj_id)
                            session.player.unit_repair_cancel(unit)
                            session.player.home_base_remove(unit)
                            session.player.send_army_update_destroyed(unit, retmsg) # may be redundant with OBJECT_REMOVED, but a player reported army desync here

                        num_donated = sum([item.get('stack',1) for item in attachments])

                        xp = max(1, int(total_space*gamedata['player_xp']['donate_units']))
                        cc = session.player.find_object_by_type(gamedata['townhall'])
                        self.give_xp_to(session, session.player, retmsg, xp, 'donate_units', [cc.x,cc.y] if cc else None, obj_session_id = cc.obj_id if cc else None)

                        session.increment_player_metric('units_donated', num_donated, time_series = False)
                        session.increment_player_metric('units_donated_cur_alliance', num_donated, time_series = False)
                        retmsg.append(["PLAYER_STATE_UPDATE", session.player.resources.calc_snapshot().serialize()])
                        session.player.send_history_update(retmsg)
                        metric_event_coded(session.player.user_id, '4150_units_donated', {'sum':session.player.get_denormalized_summary_props('brief'),
                                                                                          'alliance_id':alliance_id,
                                                                                          'recipient_id':recipient_id,
                                                                                          'tag':tag,
                                                                                          'units':attachments})

                        if session.alliance_chat_channel:
                            session.do_chat_send(session.alliance_chat_channel,
                                                 'I donated units! (tag %d cur %d max %d)' % (tag, cur_space, max_space),
                                                 bypass_gag = True, props = {'type':'unit_donation',
                                                                             'recipient_id': recipient_id,
                                                                             'tag':tag, 'xp_gained': xp,
                                                                             'max_space':max_space, 'cur_space':cur_space})
                    else:
                        # space race condition
                        error_reason = "CANNOT_DONATE_UNITS_NO_SPACE"
                        success = False

                retmsg.append(["DONATE_UNITS_RESULT", success, error_reason])

            else:
                return self.handle_protocol_error(session, retmsg, arg)

        else:
            return self.handle_protocol_error(session, retmsg, arg)

        return

    def broadcast_map_update(self, region_id, base_id, data, originator, send_to_net = True, map_time = None):
        assert region_id and base_id
        if data is None:
            data = {'base_id':base_id, 'DELETED':1}
        elif 'base_id' not in data:
            data['base_id'] = base_id
        upd = ["REGION_MAP_UPDATES", region_id, [data], map_time or server_time]

        if base_id[0] == 's':
            squad_owner_id = int(base_id[1:].split('_')[0])
        else:
            squad_owner_id = None

        for session in iter_sessions():
            if session.player.home_region == region_id:
                # if the update concerns one of the player's squads, and it's from an external player,
                # then have the owner ping squads to see what happened
                # (right now, this just handles squads being destroyed, and post-combat updates)
                if (squad_owner_id == session.player.user_id) and (originator != session.player.user_id):
                    session.deferred_ping_squads = True

                if (originator != session.player.user_id): # is async to session
                    session.send([upd], flush_now = False) # avoid storms

        if send_to_net:
            gamesite.chat_mgr.send('CONTROL', None, {'secret':SpinConfig.config['proxy_api_secret'],
                                                     'server':spin_server_name,
                                                     'method':'broadcast_map_update',
                                                     'args': { 'region_id': region_id, 'base_id': base_id, 'data': data,
                                                               # note: time is boxed here in "args" since it refers to the region map update time,
                                                               # which could conceivably be on a different clock than the chat message time
                                                               'map_time': server_time,
                                                               'server': spin_server_name, 'originator': originator },
                                                     }, '', log = False)

    def broadcast_map_attack(self, region_id, feature, attacker_id, defender_id, summary, pcache_info, send_to_net = True, msg = None, map_time = None):
        if msg is None:
            msg = "REGION_MAP_ATTACK_COMPLETE" if summary else "REGION_MAP_ATTACK_START" # legacy compatibility
        upd = [msg, region_id, feature, attacker_id, defender_id, summary, pcache_info, map_time or server_time]
        for session in iter_sessions():
            if session.player.home_region == region_id:
                if gamedata['server'].get('broadcast_thirdparty_map_attack', True) or (session.user.user_id in (attacker_id, defender_id)):
                    session.send([upd], flush_now = (session.user.user_id in (attacker_id, defender_id)))

        if send_to_net:
            gamesite.chat_mgr.send('CONTROL', None, {'secret':SpinConfig.config['proxy_api_secret'],
                                                     'server':spin_server_name,
                                                     'method':'broadcast_map_attack',
                                                     'args': { 'msg': msg,
                                                               'region_id': region_id, 'feature': feature,
                                                               'attacker_id': attacker_id, 'defender_id': defender_id,
                                                               'summary': summary, 'pcache_info': pcache_info,
                                                               # note: time is boxed here in "args" since it refers to the region map update time,
                                                               # which could conceivably be on a different clock than the chat message time
                                                               'map_time': server_time,
                                                               'server': spin_server_name },
                                                     }, '', log = False)

    def handle_protocol_error(self, session, retmsg, arg):
        # called when there is a problem with the AJAX message the client sent
        # records this to the exceptions log to pick up hacking/fuzzing attempts
        # then logs out the client
        retmsg.append(["ERROR", "SERVER_PROTOCOL"])
        if gamedata['server']['log_protocol_errors']:
            gamesite.exception_log.event(server_time, ('user %d sent invalid message: ' % session.user.user_id) + repr(arg))

        return self.log_out_async(session, 'protocol_error')


# subclass of Twisted's built-in web server
# this adds periodic function calls to perform background tasks for the game
class GameSite(server.Site):
    class GameProtocol(http.HTTPChannel):
        def __init__(self, *args, **kwargs):
            http.HTTPChannel.__init__(self, *args, **kwargs)
            self.close_connection_watchdog = None
            self.connect_time = -1
            self.last_request = None # for debugging only
            self.last_request_time = -1
        def connectionMade(self):
            http.HTTPChannel.connectionMade(self)
            self.connect_time = int(time.time())
            self.site.gotClient(self)
        def connectionLost(self, reason):
            http.HTTPChannel.connectionLost(self, reason)
            self.connect_time = -1
            self.site.lostClient(self)
            if self.close_connection_watchdog:
                self.close_connection_watchdog.cancel()
                self.close_connection_watchdog = None
            self.last_request = None # break circular reference
        def close_connection_aggressively(self, force = False):
            if force:
                self.close_connection_watchdog = None
                self.transport.abortConnection()
            else:
                self.transport.loseConnection()

                if not self.close_connection_watchdog:
                    # set watchdog timer to abort badly-behaved TCP connections
                    self.close_connection_watchdog = reactor.callLater(10.0, self.close_connection_aggressively, True)

        def allContentReceived(self): # remember last request for debugging
            self.last_request_time = int(time.time())
            self.last_request = self.requests[-1] # save reference here, but have to wait until it parses request to repr()
            return http.HTTPChannel.allContentReceived(self)

        def __repr__(self):
            if self.last_request_time > 0:
                ago = server_time - self.last_request_time
            else:
                ago = -1
            return 'GameProtocol (last request %ds ago: %r)' % (ago, self.last_request)

    displayTracebacks = False
    protocol = GameProtocol

    def log_async_exception(self, exc):
        self.exception_log.event(server_time, exc)
    def log_facebook_exception(self, exc):
        MAX_LEN = 1000
        if len(exc) >= MAX_LEN:
            exc = exc[0:MAX_LEN]+'...'
        self.facebook_log.event(server_time, exc)
    def log_kongregate_exception(self, exc):
        self.kongregate_log.event(server_time, exc)
    def log_armorgames_exception(self, exc):
        self.armorgames_log.event(server_time, exc)
    def log_xsolla_exception(self, exc):
        self.xsolla_log.event(server_time, exc)

    # keep track of per-server-instance configuration variables here
    class Configuration(object):
        def __init__(self, json):
            self.game_host = json.get('game_host', os.getenv('HOSTNAME') or socket.gethostname())
            self.game_listen_host = json.get('game_listen_host', '')
            self.game_http_port = json.get('game_http_port',-1)
            self.game_ssl_port = json.get('game_ssl_port',-1)
            self.game_ws_port = json.get('game_ws_port',-1)
            self.game_wss_port = json.get('game_wss_port',-1)
            self.tcp_accept_backlog = json.get('tcp_accept_backlog', 511)
            self.affinities = json.get('affinities',['default'])
            self.start_state = json.get('start_state', 'ok')

    def __init__(self, config, root, gameapi, controlapi, trialpayapi, xsapi):

        # set this here because setup_test_user() references gamesite
        global gamesite
        gamesite = self

        # note: the "timeout" here applies to HTTP KeepAlive
        # connections, it does NOT have any impact on game-relevant
        # timeouts like the session or proxy timeout
        server.Site.__init__(self, root, timeout = gamedata['server']['http_connection_timeout'])

        self.config = config
        self.gameapi = gameapi
        self.controlapi = controlapi
        self.trialpayapi = trialpayapi
        self.xsapi = xsapi
        self.player_table = player_table
        self.user_table = user_table

        self.last_ai_base_gc_time = 0
        self.last_player_flush_time = 0
        self.maint_kick_time = -1
        self.bg_task_interval = -1
        self.server_status_interval = -1

        # init AsyncHTTP requesters

        data = gamedata['server']['AsyncHTTP_metrics']
        self.AsyncHTTP_metrics = AsyncHTTP.AsyncHTTPRequester(data['concurrent_request_limit'],
                                                                  data['total_request_limit'],
                                                                  data['request_timeout'],
                                                                  spin_log_verbosity,
                                                                  self.log_async_exception)
        data = gamedata['server']['AsyncHTTP_Facebook']
        self.AsyncHTTP_Facebook = AsyncHTTP.AsyncHTTPRequester(data['concurrent_request_limit'],
                                                               data['total_request_limit'],
                                                               data['request_timeout'],
                                                               spin_log_verbosity,
                                                               self.log_facebook_exception,
                                                               max_tries = data['max_tries'],
                                                               retry_delay = data['retry_delay'])
        data = gamedata['server'].get('AsyncHTTP_Kongregate', gamedata['server']['AsyncHTTP_Facebook'])
        self.AsyncHTTP_Kongregate = AsyncHTTP.AsyncHTTPRequester(data['concurrent_request_limit'],
                                                                 data['total_request_limit'],
                                                                 data['request_timeout'],
                                                                 spin_log_verbosity,
                                                                 self.log_kongregate_exception,
                                                                 max_tries = data['max_tries'],
                                                                 retry_delay = data['retry_delay'])
        data = gamedata['server'].get('AsyncHTTP_ArmorGames', gamedata['server']['AsyncHTTP_Facebook'])
        self.AsyncHTTP_ArmorGames = AsyncHTTP.AsyncHTTPRequester(data['concurrent_request_limit'],
                                                                 data['total_request_limit'],
                                                                 data['request_timeout'],
                                                                 spin_log_verbosity,
                                                                 self.log_armorgames_exception,
                                                                 max_tries = data['max_tries'],
                                                                 retry_delay = data['retry_delay'])
        data = gamedata['server'].get('AsyncHTTP_Xsolla', gamedata['server']['AsyncHTTP_Facebook'])
        self.AsyncHTTP_Xsolla = AsyncHTTP.AsyncHTTPRequester(data['concurrent_request_limit'],
                                                             data['total_request_limit'],
                                                             data['request_timeout'],
                                                             spin_log_verbosity,
                                                             self.log_xsolla_exception,
                                                             max_tries = data['max_tries'],
                                                             retry_delay = data['retry_delay'])
        self.nosql_id_generator = SpinNoSQLId.Generator()

        self.nosql_client = None
        self.db_client = None
        self.lock_client = None # XXX temp - easy way to switch message_table API between dbserver and mongodb
        self.pcache_client = None # XXX temp - easy way to switch message_table API between dbserver and mongodb
        self.msg_client = None # XXX temp - easy way to switch message_table API between dbserver and mongodb
        self.sql_client = None # XXX temp - easy way to switch alliances/scores API between SQL and mongodb
        self.social_id_table = None

        # connect to MongoDB
        self.nosql_init(is_startup = True)

        # connect to SQL server, if configured
        self.sql_init()

        assert self.social_id_table is not None

        # init logging (requires NoSQL to be set up for NoSQL logs)

        if gamedata['server'].get('log_machine_stats', False):
            self.machine_log = SpinLog.DailyJSONLog(spin_log_dir+'/','-machine.json')
        else:
            self.machine_log = None

        # best to keep this in sync with the metrics_log setup in proxyserver.py!
        self.metrics_log = SpinLog.MultiLog([SpinLog.DailyJSONLog(spin_log_dir+'/','-metrics.json'), # ALL metrics to local file
                                             SpinLog.MetricsLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_metrics')), # important metrics to MongoDB log_metrics
                                             SpinLog.AcquisitionsLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_acquisitions')), # (re)acquisitions to MongoDB log_acquisitions
                                             SpinLog.InventoryLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_inventory')), # inventory events to MongoDB log_inventory
                                             SpinLog.LadderPvPLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_ladder_pvp')), # ladder pvp events to MongoDB log_ladder_pvp
                                             SpinLog.DamageProtectionLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_damage_protection')), # damage protection events to MongoDB log_damage_protection
                                             SpinLog.AlliancesLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_alliances')), # alliance events to MongoDB log_alliances
                                             SpinLog.AllianceMembersLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_alliance_members')), # alliance member events to MongoDB log_alliance_members
                                             SpinLog.UnitDonationLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_unit_donation')), # unit donation events to MongoDB log_unit_donation
                                             SpinLog.FishingLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_fishing')), # fishing events to MongoDB log_fishing
                                             SpinLog.QuestsLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_quests')), # quests events to MongoDB log_quests
                                             SpinLog.LotteryLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_lottery')), # lottery events to MongoDB log_lottery
                                             SpinLog.AchievementsLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_achievements')), # achievements events to MongoDB log_achievements
                                             SpinLog.LoginSourcesFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_login_sources')), # login source events to MongoDB log_login_sources
                                             SpinLog.LoginFlowFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_login_flow')), # login flow events to MongoDB log_login_flow
                                             SpinLog.FBPermissionsLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_fb_permissions')), # FB Permissions events to MongoDB log_fb_notifications
                                             SpinLog.FBNotificationsLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_fb_notifications')), # FB Notification events to MongoDB log_fb_notifications
                                             SpinLog.FBRequestsLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_fb_requests')), # FB Requests events to MongoDB log_fb_requests
                                             SpinLog.FBSharingLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_fb_sharing')), # FB Sharing events to MongoDB log_fb_sharing
                                             SpinLog.FBOpenGraphLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_fb_open_graph')), # FB Open Graph events to MongoDB log_fb_open_graph
                                             SpinLog.ClientTroubleLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_client_trouble')), # misc client trouble to MongoDB log_client_trouble (for analytics)
                                             SpinLog.ClientExceptionLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_client_trouble'), brief = True), # abbreviated client exceptions to MongoDB log_client_trouble (for analytics)
                                             SpinLog.ClientExceptionLogFilter(SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_client_exceptions'), brief = False)]) # full client exceptions to MongoDB log_client_exceptions (for PCHECK)

        self.credits_log = SpinLog.MultiLog([SpinLog.DailyJSONLog(spin_log_dir+'/','-credits.json'),
                                             SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_credits', safe = True)])
        self.gamebucks_log = SpinLog.MultiLog([SpinLog.DailyJSONLog(spin_log_dir+'/','-gamebucks.json'),
                                               SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_gamebucks')])
        self.purchase_ui_log = SpinLog.MultiLog([SpinLog.DailyJSONLog(spin_log_dir+'/','-purchase_ui.json'),
                                                 SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_purchase_ui')])

        self.adnetworks_logs = {}
        if gamedata['server'].get('log_sessions', False):
            self.sessions_log = SpinLog.DailyJSONLog(spin_log_dir+'/','-sessions.json')
        else:
            self.sessions_log = None

        self.raw_log = None  # set in self.reset_interval

        # log ALL exceptions to local exceptions.txt, plus interesting ones to log_exceptions table
        self.exception_log = SpinLog.MultiLog([SpinLog.DailyRawLog(spin_log_dir+'/', '-exceptions.txt'),
                                               SpinLog.ServerExceptionLogFilter(SpinNoSQLLog.NoSQLRawLog(self.nosql_client, 'log_exceptions'))])

        self.facebook_log = SpinLog.DailyRawLog(spin_log_dir+'/', '-facebook.txt')
        self.armorgames_log = SpinLog.DailyRawLog(spin_log_dir+'/', '-armorgames.txt')
        self.kongregate_log = SpinLog.DailyRawLog(spin_log_dir+'/', '-kongregate.txt')
        self.xsolla_log = SpinLog.DailyRawLog(spin_log_dir+'/', '-xsolla.txt')
        self.trace_log = SpinLog.DailyRawLog(spin_log_dir+'/', '-traces.txt')

        self.metrics_log.event(server_time, {'event_name':'1500_server_restart', 'code':1500, 'scm_version':SERVER_VERSION})


        # connect to global chat server, if one is configured
        if 'chatserver' in SpinConfig.config:
            self.chat_client = SpinChatClient.Client(SpinConfig.config['chatserver']['chat_host'],
                                                     SpinConfig.config['chatserver']['chat_port'],
                                                     SpinConfig.config['chatserver'].get('secret_full', SpinChatProtocol.default_secret_full),
                                                     self.log_async_exception, latency_func = admin_stats.record_latency,
                                                     identity = spin_server_name)

            self.chat_log = None # chat logging is done by global server
        else:
            self.chat_client = None
            self.chat_log = SpinLog.DailyJSONLog(spin_log_dir+'/','-chat.json')

        self.chat_mgr = ChatChannels.ChatChannelMgr(relay = self.chat_client)
        self.chat_mgr.join(controlapi, 'CONTROL')

        # will be fired when last connection drops
        self.clients_stopped_deferred = None
        self.active_clients = set()
        self.active_requests = set()

        signal.signal(signal.SIGUSR1, self.handle_SIGUSR1)
        signal.signal(signal.SIGUSR2, self.handle_SIGUSR2)
        signal.signal(signal.SIGHUP, self.handle_SIGHUP)

        self.server_state = config.start_state

        # init housekeeping function
        self.bg_task = task.LoopingCall(self.bgfunc)
        self.server_status_task = task.LoopingCall(self.server_status_func)
        self.reset_interval(True)

        # these will be set up by start_listening()
        self.listener_tcp = None
        self.listener_ssl = None

    def start_listening(self):
        self.listener_tcp = reactor.listenTCP(self.config.game_http_port, self, interface=self.config.game_listen_host, backlog=self.config.tcp_accept_backlog)
        if self.config.game_ssl_port > 0:
            self.listener_ssl = reactor.listenSSL(self.config.game_ssl_port, self,
                                                  SpinSSL.ChainingOpenSSLContextFactory(SpinConfig.config['ssl_key_file'],
                                                                                        SpinConfig.config['ssl_crt_file'],
                                                                                        certificateChainFile=SpinConfig.config['ssl_chain_file']),
                                                  interface=self.config.game_listen_host, backlog=self.config.tcp_accept_backlog)

        # make sure players are logged out and flushed before server shuts down
        reactor.addSystemEventTrigger('before', 'shutdown', self.shutdown)

    def shutdown(self):
        # ordering here is important: close listening socket, then close sessions, then close HTTP/WS traffic

        self.change_state('shutting_down') # send status update to tell latency probe to ignore us
        # (there's a small race condition here - could fix by inserting a deley here, but probably not a problem)

        d = self.stop_listening()
        d.addCallback(lambda _, self=self: self.stop_all_sessions())
        d.addErrback(lambda err, self=self: self.exception_log.event(server_time, 'stop_all_sessions() exception: %s' % err.getTraceback()))
        d.addCallback(lambda _, self=self: self.stop_all_clients())
        d.addErrback(lambda err, self=self: self.exception_log.event(server_time, 'stop_all_clients() exception: %s' % err.getTraceback()))
        if self.chat_client:
            d.addCallback(lambda _, self=self: self.chat_client.disconnect())
            d.addErrback(lambda err, self=self: self.exception_log.event(server_time, 'chat_client.disconnect() exception: %s' % err.getTraceback()))
        d.addCallback(lambda _: io_system.shutdown())
        d.addErrback(lambda err, self=self: self.exception_log.event(server_time, 'io_system.shutdown() exception: %s' % err.getTraceback()))
        # send a final server status update when we're finished
        d.addCallback(lambda _, self=self: self.nosql_client.server_status_update(spin_server_name, None, reason='shutdown'))
        return d

    def stop_listening(self):
        return defer.DeferredList([defer.maybeDeferred(self.listener_tcp.stopListening)] + \
                                  ([defer.maybeDeferred(self.listener_ssl.stopListening)] if self.listener_ssl else []))

    # client/request management boilerplate - see https://github.com/habnabit/polecat/blob/master/polecat.py
    def gotClient(self, client):
        self.active_clients.add(client)
        #gamesite.exception_log.event(server_time, 'gotClient %r clients %d requests %d' % (client, len(self.active_clients), len(self.active_requests)))
    def lostClient(self, client):
        self.active_clients.discard(client)
        #gamesite.exception_log.event(server_time, 'lostClient %r clients %d requests %d' % (client, len(self.active_clients), len(self.active_requests)))
        if not self.active_clients and self.clients_stopped_deferred:
            d = self.clients_stopped_deferred
            self.clients_stopped_deferred = None
            d.callback(None)
    def getResourceFor(self, request):
        self.active_requests.add(request)
        request.notifyFinish().addBoth(lambda _, self=self, request=request: self.active_requests.discard(request)) # OK
        return server.Site.getResourceFor(self, request)

    def stop_all_clients(self):
        "Returns a Deferred that fires when all clients have disconnected."
        if not self.active_clients:
            return defer.succeed(None)
        else:
            d = make_deferred('stop_all_clients')
            self.clients_stopped_deferred = d

            # tell any keep-alive requests that we're closing down
            for request in self.active_requests:
                request.setHeader('Connection', 'close')

            for client in self.active_clients:
                client.close_connection_aggressively()
            return d

    def log_exception_func(self, x): self.exception_log.event(server_time, x)

    def sql_init(self):
        self.sql_scores2_client = None
        if ((game_id+'_scores2') in SpinConfig.config.get('pgsql_servers',{})):
            import AsyncPostgres
            self.sql_scores2_client = Scores2.SQLScores2(AsyncPostgres.AsyncPostgres(SpinConfig.get_pgsql_config(game_id+'_scores2'),
                                                                                     verbosity = 0,
                                                                                     log_exception_func = self.log_exception_func))
        self.sql_battles_client = None
        if ((game_id+'_battles') in SpinConfig.config.get('pgsql_servers',{})):
            import AsyncPostgres
            if self.sql_scores2_client and \
               SpinConfig.get_pgsql_config(game_id+'_battles') == self.sql_scores2_client.sql_client.dbconfig:
                # re-use same connection
                pg = self.sql_scores2_client.sql_client
            else:
                pg = AsyncPostgres.AsyncPostgres(SpinConfig.get_pgsql_config(game_id+'_battles'),
                                                 verbosity = 0,
                                                 log_exception_func = self.log_exception_func)
            self.sql_battles_client = SpinSQLBattles.SQLBattlesClient(pg)

    def sql_shutdown(self):
        self.sql_scores2_client = None
        self.sql_battles_client = None

    def nosql_init(self, is_startup = False):
        if self.nosql_client: return
        if ('mongodb_servers' not in SpinConfig.config) or (game_id not in SpinConfig.config['mongodb_servers']):
            if is_startup:
                raise Exception('mongodb_servers["%s"] not found in config.json. Please ask Dan for help setting up MongoDB.' % game_id)
            else:
                self.exception_log.event(server_time, 'NoSQL init fails - mongodb_servers not found in config.json')
            return

        config = SpinConfig.get_mongodb_config(game_id)
        try:
            self.nosql_client = SpinNoSQL.NoSQLClient(config,
                                                      map_update_hook = self.gameapi.broadcast_map_update,
                                                      identity = spin_server_name,
                                                      max_retries = -1, # never give up
                                                      log_exception_func = self.log_exception_func,
                                                      latency_func = admin_stats.record_latency)
        except Exception as e:
            if is_startup:
                raise Exception('Error was: %s\nUnable to connect to mongodb server (%s). Host or Username/password may be wrong. Please ask Dan for help setting up MongoDB.' % (repr(e), repr(config)))
            else:
                raise

        self.nosql_client.set_time(server_time)

        self.db_client = self.nosql_client
        self.social_id_table = SocialIDCache.SocialIDCache(self.db_client)
        self.sql_client = self.nosql_client
        self.msg_client = self.db_client
        self.lock_client = self.db_client
        self.pcache_client = self.db_client
        self.mongo_scores2_client = Scores2.MongoScores2(self.nosql_client)

    def nosql_shutdown(self):
        if self.nosql_client:
            self.social_id_table = None
            self.nosql_client.shutdown()
            self.exception_log.event(server_time, 'NoSQL connection shutdown')
            if self.sql_client is self.nosql_client: self.sql_client = None
            if self.msg_client is self.nosql_client: self.msg_client = None
            if self.lock_client is self.nosql_client: self.lock_client = None
            if self.pcache_client is self.nosql_client: self.pcache_client = None
            self.nosql_client = None

    def do_log_adnetwork_event(self, api, props):
        if not gamedata['server']['enable_adnetwork_logs']: return
        if api not in self.adnetworks_logs:
            file_log = SpinLog.DailyJSONLog(spin_log_dir+'/','-%s.json' % api)
            if self.nosql_client:
                nosql_log = SpinNoSQLLog.NoSQLJSONLog(self.nosql_client, 'log_'+api)
                log = SpinLog.MultiLog([file_log, nosql_log])
            else:
                log = file_log
            self.adnetworks_logs[api] = log
        props['api'] = api
        self.adnetworks_logs[api].event(server_time, props)

    def reset_interval(self, run_now):
        enable_raw_log = gamedata['server'].get('enable_raw_log', False)
        if self.raw_log and not enable_raw_log:
            self.raw_log = None
        elif (not self.raw_log) and enable_raw_log:
            self.raw_log = SpinLog.DailyRawLog(spin_log_dir+'/', '-raw-%s.txt' % spin_server_name)

        new_interval = gamedata['server'].get('bg_task_interval', 30)
        if new_interval != self.bg_task_interval:
            if self.bg_task_interval > 0:
                self.bg_task.stop()
            self.bg_task_interval = new_interval
            self.bg_task.start(self.bg_task_interval, now = run_now)

        new_status_interval = gamedata['server'].get('server_status_interval', 15)
        if new_status_interval != self.server_status_interval:
            if self.server_status_interval > 0:
                self.server_status_task.stop()
            self.server_status_interval = new_status_interval
            self.server_status_task.start(self.server_status_interval, now = run_now)

    def change_state(self, state):
        assert state in ('ok','closed','shutting_down')
        if self.server_state == state: return admin_stats.get_server_status_json()
        self.server_state = state
        if state == 'ok':
            self.maint_kick_time = -1
        status_json = admin_stats.get_server_status_json()
        self.nosql_client.server_status_update(spin_server_name, status_json, reason='change_state')
        return status_json

    # reload config.json and gamedata
    def reconfig(self):
        reload(SpinConfig) # reload SpinConfig module
        SpinConfig.reload() # reload config.json file
        reload_gamedata()
        status_json = admin_stats.get_server_status_json()
        if self.nosql_client:
            self.nosql_client.update_dbconfig(SpinConfig.get_mongodb_config(game_id))
            self.nosql_client.server_status_update(spin_server_name, status_json, reason='reconfig')
        self.reset_interval(False)
        return status_json

    # send logged-in players maintenance warnings, then kick all after 5 minutes
    # note: this does not prevent NEW log-ins, so make sure the proxyserver is not routing any new logins here
    def start_maint_kick(self):
        for session in iter_sessions():
            session.send([["SERVER_MAINTENANCE_WARNING"]], flush_now = False)
        self.maint_kick_time = server_time + gamedata['server']['maint_kick_time']
        self.server_state = 'maint_kick'
        status_json = admin_stats.get_server_status_json()
        if self.nosql_client:
            self.nosql_client.server_status_update(spin_server_name, status_json, reason='start_maint_kick')
        return status_json

    # immediately kick all sessions, even if they are stuck on I/O
    def panic_kick(self, ignore_transport):
        for session in list(iter_sessions()):
            try:
                self.gameapi.log_out_async(session, 'panic', force = True)
            except:
                pass
        for client in list(self.active_clients):
            if client.transport is not ignore_transport:
                client.transport.abortConnection() # if loseConnection() isn't enough

    # print Python stack frame to trace log upon receiving SIGUSR1
    def handle_SIGUSR1(self, signum, frm):
        self.trace_log.event(server_time, ''.join(traceback.format_stack(frm)))

    # reload config.json and gamedatadata upon receiving SIGHUP
    def handle_SIGHUP(self, signum, frm):
        reactor.callLater(0, self.reconfig)

    # start_maint_kick upon receiving SIGUSR2
    def handle_SIGUSR2(self, signum, frm):
        reactor.callLater(0, self.start_maint_kick)

    def log_exceptions(self, eventDict):
        if eventDict['isError']:
            if 'failure' in eventDict:
                text = ((eventDict.get('why') or 'Unhandled Error')
                        + '\n' + eventDict['failure'].getTraceback())
            else:
                text = ' '.join([str(m) for m in eventDict['message']])
            self.exception_log.event(server_time, text)

    def log_raw(self, eventDict):
        if not self.raw_log:
            return
        text = log.textFromEventDict(eventDict)
        if text is None:
            return
        self.raw_log.event(server_time, text)

    def log(self, request):
        if spin_log_verbosity >= 1:
            return server.Site.log(self, request)
        else:
            # don't log every boring HTTP request
            pass

    def stop_all_sessions(self):
        # server is shutting down - forcefully log out all active sessions

        # need to wait for all async logouts to finish before proceeding
        waiting_on = []
        for session in list(iter_sessions(include_logout_in_progress = True)):
            waiting_on.append(self.gameapi.log_out_async(session, 'server_shutdown'))

        return defer.DeferredList(waiting_on, consumeErrors = True)

    @catch_all('server_status_func')
    def server_status_func(self):
        # report server stats
        if self.nosql_client:
            self.nosql_client.server_status_update(spin_server_name, admin_stats.get_server_status_json(), reason='server_status_func')

    @catch_all('bgfunc')
    @admin_stats.measure_latency('bgfunc')
    def bgfunc(self):
        # run housekeeping functions

        update_server_time()

        # garbage-collect old AI instances
        if (server_time - self.last_ai_base_gc_time) >= gamedata['server'].get('ai_base_gc_interval', 1800):
            self.last_ai_base_gc_time = server_time
            ai_instance_table.collect_garbage()

        # if we're about to go down for maintenance, kick all logged-in players
        maint_kicks = 0
        if self.maint_kick_time > 0 and server_time >= self.maint_kick_time:
            for session in list(iter_sessions()):
                session.send([["ERROR", "MAINT_KICK"]], flush_now = True)
                self.gameapi.log_out_async(session, 'maint_kick')
                maint_kicks += 1
                if maint_kicks >= gamedata['server']['maint_kicks_at_once']:
                    break

        # garbage-collect the Session table
        timeout = gamedata['server']['session_timeout']
        absolute_timeout = gamedata['server']['absolute_session_timeout']

        lock_keepalive_sessions = []
        lock_keepalive_ids = []
        lock_keepalive_generations = []
        lock_keepalive_states = []
        region_lock_keepalives = {}

        for session in list(iter_sessions()): # make a copy since we might mutate the table

            kick_reason = None

            # check for expired idle sessions

            if (server_time - session.last_active_time) > timeout:
                kick_reason = 'timeout'
                session.send([["ERROR", "IDLE_KICK"]], flush_now = True)

            elif (session.last_active_time <= session.login_time) and ((server_time - session.last_active_time) > gamedata['server']['initial_session_timeout']):
                kick_reason = 'timeout'
                session.send([["ERROR", "IDLE_KICK"]], flush_now = True)
                if gamedata['server']['log_abnormal_logins'] >= 2:
                    gamesite.exception_log.event(server_time, 'user %d - no activity within %d sec of login, kicking.' % (session.user.user_id, gamedata['server']['initial_session_timeout']))

            elif (server_time - session.login_time) > absolute_timeout and (not session.has_attacked):
                kick_reason = 'long_session'
                gamesite.exception_log.event(server_time, 'user %d - terminating extremely long session (%dmin)' % (session.user.user_id, (server_time-session.login_time)/60))

            # perform idle check
            playtime = session.cur_playtime()

            idle_timeout_status = session.player.idle_check.timeout(session.login_time, server_time, playtime)
            # gamesite.exception_log.event(server_time, 'user %d - playtime %d check status %d needed %d' % (session.user.user_id, playtime, idle_timeout_status, session.player.idle_check.check_needed(session.login_time, server_time, playtime)))

            if idle_timeout_status == IdleCheck.STATUS_FAIL:
                metric_event_coded(session.user.user_id, '0694_idle_check_timeout', {})
            elif idle_timeout_status == IdleCheck.STATUS_SEND_AGAIN or \
                 (idle_timeout_status == IdleCheck.STATUS_NO_RESULT and \
                  (session.player.idle_check.forced_check_needed() or \
                   Predicates.read_predicate(gamedata['server']['idle_check']['enable_if']).is_satisfied2(session, session.player, None)) and \
                  session.player.idle_check.check_needed(session.login_time, server_time, playtime)):
                idle_check_msg = session.player.idle_check.start_check(session.login_time, server_time, playtime)
                session.send([["IDLE_CHECK", idle_check_msg]])
                metric_event_coded(session.user.user_id, '0691_idle_check', idle_check_msg)

            if not kick_reason:
                unused, abuse_warning_msg = session.player.detect_login_abuse(cur_session_length = server_time - session.login_time)
                if (session.player.lockout_until > 0) and (server_time < session.player.lockout_until):
                    # abuse detected, kick them out
                    m = session.player.lockout_message if (session.player.lockout_message and (session.player.lockout_message in gamedata['errors'])) else gamedata['server']['login_abuse_error_code']
                    session.send([["ERROR", m]], flush_now = True)
                    kick_reason = 'abuse'
                elif abuse_warning_msg:
                    session.send(abuse_warning_msg)

            if kick_reason:
                self.gameapi.log_out_async(session, kick_reason)
                continue

            # conclude any longpolls that are idle for more than the wait interval
            if session.longpoll_request and session.longpoll_request_time > 0 and \
               ((server_time - session.longpoll_request_time) >= gamedata['server']['ajax_longpoll_wait']):
                request = session.longpoll_request
                session.longpoll_request = None
                self.gameapi.complete_longpoll(request, session)

            # session is still good, send keepalive to the DB lock server and proxy sessions table
            lock_keepalive_sessions.append(session)
            lock_keepalive_ids.append(session.user.user_id)
            lock_keepalive_generations.append(session.player.generation)
            lock_keepalive_states.append(Player.LockState.logged_in)
            if session.player.is_on_map() and gamesite.nosql_client:
                if session.player.home_region not in region_lock_keepalives:
                    region_lock_keepalives[session.player.home_region] = []
                region_lock_keepalives[session.player.home_region].append(session.player.my_home.base_id)

            session.prune_attack_replay_receivers()

            # check for sessions with pending AI attacks
            if session.incoming_attack_pending() and (server_time >= session.incoming_attack_time):
                if gamedata['server']['log_ai_attack_overdue'] and session.incoming_attack_type != 'tutorial':
                    gamesite.exception_log.event(server_time, 'deploying overdue AI attack (%s) on player %d' % \
                                                 (str(session.incoming_attack_type), session.player.user_id))
                session.deploy_ai_attack(session.outgoing_messages, force = True)
                session.queue_flush_outgoing_messages()

            elif session.incoming_attack_wave_time > 0 and (server_time >= session.incoming_attack_wave_time):
                if gamedata['server']['log_ai_attack_overdue'] and session.incoming_attack_type != 'tutorial':
                    gamesite.exception_log.event(server_time, 'deploying overdue AI attack wave (%s) on player %d' % \
                                                 (str(session.incoming_attack_type), session.player.user_id))
                session.deploy_ai_attack_wave(session.outgoing_messages)
                session.queue_flush_outgoing_messages()

            # check for sessions where an attack has been going on for too long
            elif (session.has_attacked) and (not session.is_async()) and \
                 (session.attack_finish_time > 0) and (server_time >= session.attack_finish_time):
                # force the attack to conclude
                client_inactive_time = server_time - session.last_active_time
                if client_inactive_time < gamedata['server'].get('log_long_attack_threshold',-1):
                    # only make a note if the client was detecting mouse clicks happening beyond the time limit
                    # (either the client's clock is way out of sync, or very lagged, or the player is trying to cheat by changing his clock to get more battle time)
                    gamesite.exception_log.event(server_time, 'user %d - forcing long attack at %d:%s to conclude (client inactive %d sec)' % (session.user.user_id, session.viewing_user.user_id, session.viewing_base.base_id, client_inactive_time))
                session.attack_finish_time = -1

                # note: change_session will unlock the victim's state for us
                d = make_deferred('force_attack_end')
                def force_attack_end(self, session):
                    if session.has_attacked:
                        return self.gameapi.change_session(session, session.outgoing_messages, dest_user_id = session.user.user_id, force = True)
                def ignore_logout_race(fail):
                    fail.trap(Session.AlreadyLoggedOut)
                    return None
                d.addCallbacks(lambda _, self=self, session=session: force_attack_end(self, session),
                               ignore_logout_race)
                session.debug_log_action('force_attack_end')
                session.after_async_request(d)

            if (not session.sprobe_in_progress):
                sprobe_config = gamedata['server'].get('sprobe',None)
                if sprobe_config and sprobe_config.get('enable',True):
                    last_sprobe_time = session.user.last_sprobe_result['time'] if session.user.last_sprobe_result else -1
                    if (server_time - last_sprobe_time) >= sprobe_config['min_interval']:
                        when = sprobe_config.get('when','only_during_attack')
                        if ((when == 'only_during_attack') and session.has_attacked) or \
                           ((when == 'anytime') and ((server_time - session.login_time) >= sprobe_config.get('sec_after_login',15))):
                            session.sprobe_in_progress = True
                            session.send([["SPROBE_RUN"]], flush_now = True)

            session.record_activity_sample()

        # send lock keepalive requests in one big batch
        messages_pending = gamesite.lock_client.player_lock_keepalive_batch(lock_keepalive_ids, lock_keepalive_generations, lock_keepalive_states, True, reason='bgfunc')

        if gamesite.nosql_client:
            if gamesite.msg_client is gamesite.nosql_client:
                # poll for messages separately
                messages_pending = gamesite.nosql_client.msg_poll(lock_keepalive_ids, reason='bgfunc')

            # send region map lock keepalives
            for region_id, base_id_list in region_lock_keepalives.iteritems():
                gamesite.nosql_client.map_feature_lock_keepalive_batch(region_id, base_id_list)

            # send proxy session keepalives
            gamesite.nosql_client.session_keepalive_batch([session2.session_id for session2 in lock_keepalive_sessions], reason='bgfunc')


        # hand out pending mail to players
        for i in xrange(len(lock_keepalive_sessions)):
            if messages_pending[i]:
                session = lock_keepalive_sessions[i]
                if session.has_attacked: continue
                stat = self.gameapi.do_receive_mail(session, session.outgoing_messages)
                if stat and stat['new_mail']:
                    session.deferred_mailbox_update = True
                    session.deferred_history_update = True
                    session.queue_flush_outgoing_messages()

        # close TCP connections that have been idling too long
        for client in list(self.active_clients):
            assert isinstance(client, self.GameProtocol) or isinstance(client, WS_GAMEAPI_Protocol) # duck typed :P
            last_activity = max(client.connect_time, client.last_request_time)
            if server_time - last_activity > gamedata['server']['http_connection_timeout']:
                client.close_connection_aggressively()

# glue code that links GAMEAPI to WebSocket

# nasty hack - this is a fake substitute for the HTTP request objects that GAMEAPI passes around
class WSFakeRequest(object):
    def __init__(self, proto):
        self.proto = proto
        self.want_close = False
    def setHeader(self, key, val):
        # detect removal of keepalive header to signal that we should close after next write
        if key == 'Connection' and val == 'close':
            self.want_close = True
    def write(self, buf):
        if self.proto.connected:
            self.proto.transport.write(buf)
    def finish(self):
        if self.want_close:
            self.proto.close_connection_aggressively()
    def close_connection_aggressively(self): return self.proto.close_connection_aggressively()

class WS_GAMEAPI_Protocol(protocol.Protocol):
    def __init__(self, gameapi, peer):
        self.gameapi = gameapi
        self.peer_ip = str(peer.host)
        self.connected = False
        self.close_connection_watchdog = None
        self.connect_time = -1
        self.last_request_repr = '' # for debugging only
        self.last_request_time = -1

    def connectionMade(self):
        self.connected = True
        self.connect_time = int(time.time())
        gamesite.gotClient(self) # XXX not sure how to get a reference to the "site" here

    def connectionLost(self, reason):
        self.connected = False
        self.connect_time = -1
        if self.close_connection_watchdog:
            self.close_connection_watchdog.cancel()
            self.close_connection_watchdog = None
        gamesite.lostClient(self) # XXX not sure how to get a reference to the "site" here
        self.last_request_repr = 'connectionLost'

    def close_connection_aggressively(self, force = False):
        if self.connected:
            if force:
                self.close_connection_watchdog = None
                self.transport.abortConnection()
            else:
                self.transport.loseConnection()

                if not self.close_connection_watchdog:
                    # set watchdog timer to abort badly-behaved TCP connections
                    self.close_connection_watchdog = reactor.callLater(10.0, self.close_connection_aggressively, True)

    def dataReceived(self, data):
        update_server_time()
        ret = self.do_dataReceived(data)
        if ret is None: # error
            self.transport.write(SpinJSON.dumps({'serial':-1, 'clock': server_time, 'msg': [["ERROR", "SERVER_EXCEPTION"]]}))
            self.transport.loseConnection()

    @catch_all('WS_GAMEAPI')
    def do_dataReceived(self, data):
        args_dict = SpinJSON.loads(data)
        self.last_request_repr = repr(args_dict)[0:100] # for debugging only - text representation
        self.last_request_time = server_time
        response = gamesite.gameapi.render_request(WSFakeRequest(self), args_dict, self.peer_ip, 'WS_GAMEAPI_Protocol')
        if response == twisted.web.server.NOT_DONE_YET:
            pass
        else:
            self.transport.write(response)
        return True # signal wrapper that we're OK

    def __repr__(self):
        if self.last_request_time > 0:
            ago = server_time - self.last_request_time
        else:
            ago = -1
        return 'WS_GAMEAPI_Protocol (last request %ds ago: %s...)' % (ago, self.last_request_repr)

class WS_GAMEAPI_Factory(protocol.Factory):
    def __init__(self, gameapi):
        self.gameapi = gameapi
    def buildProtocol(self, addr):
        return WS_GAMEAPI_Protocol(self.gameapi, addr)
class WS_GAMEAPI(websockets.WebSocketsResource):
    def __init__(self, gameapi):
        websockets.WebSocketsResource.__init__(self, WS_GAMEAPI_Factory(gameapi))
    def render(self, request):
        update_server_time()
        SpinHTTP.set_access_control_headers(request)

        # WebSocketsResource swaps WS_GAMEAPI_Protocol in place of GameProtocol, so we have
        # to let the gamesite know it's gone to get the accounting right

        # Secure connections wrap in TLSMemoryBIOProtocol too.
        old_protocol = request.transport.protocol.wrappedProtocol if request.isSecure() else request.transport.protocol
        assert isinstance(old_protocol, GameSite.GameProtocol)

        ret = websockets.WebSocketsResource.render(self, request)
        if ret is server.NOT_DONE_YET:
            # success - drop the GameProtocol client since it's been swapped to WS_GAMEAPI_Protocol
            old_protocol.site.lostClient(old_protocol)
            old_protocol.site.active_requests.discard(request)
        return ret

class AdminResource(resource.Resource):
    isLeaf = True
    def render(self, request):
        # do not return a revealing error message on exceptions
        ret = catch_all('ADMIN')(resource.Resource.render)(self, request)
        if ret is None:
            request.setResponseCode(http.BAD_REQUEST)
            ret = 'spinpunch error'
        return ret

    def revenue_image(self):
        rev = admin_stats.revenue
        src = 'http://s3.amazonaws.com/'+SpinConfig.config['public_s3_bucket']+'/'
        if rev >= 1000.0:
            src += 'revenue5.jpg'
        elif rev >= 500.0:
            src += 'revenue6.jpg' # swapped
        elif rev >= 150.0:
            src += 'revenue4.jpg'
        elif rev >= 20.00:
            src += 'revenue3.jpg'
        elif rev >= 3.00:
            src += 'revenue2.jpg'
        elif rev > 0:
            src += 'revenue1.jpg'
        else:
            src += 'revenue0.jpg'
        return '<div style="position:absolute; top:50px;right:30px;"><img src="%s" border="0"></div>' % src

    @admin_stats.measure_latency('ADMIN')
    def render_GET(self, request):
        update_server_time()

        # protect with auth
        if (not SpinGoogleAuth.twisted_request_is_local(request, proxy_secret = SpinConfig.config['proxy_api_secret'])):
            if spin_secure_mode and (not SpinHTTP.twisted_request_is_ssl(request, proxy_secret = SpinConfig.config['proxy_api_secret'])): return 'must use HTTPS'
            auth_info = SpinGoogleAuth.twisted_do_auth(request, 'ADMIN', server_time, proxy_secret = SpinConfig.config['proxy_api_secret'])
            if not auth_info['ok']:
                if 'redirect' in auth_info:
                    return str(auth_info['redirect'])
                else:
                    return str(auth_info['error'])

        ret = u'<html><head><title>Admin</title>'
        ret += '<style type="text/css">body {font-family:serif; font-size: 100%;} td { font-size: 1.0em; padding: 1px;}</style>'
        ret += '</head><body>'

        #ret += self.revenue_image()

        ret += 'server name: %s<br>' % spin_server_name
        ret += 'server time: %d<br>' % server_time
        ret += 'version: ' + SERVER_VERSION
        ret += '<p>'

        def print_table(d):
            ret = '<table border="1" cellspacing="1">'
            for key, val in sorted(d.items()):
                if key.startswith('disk_space_total') or key.startswith('disk_space_used'):
                    continue
                if type(val) == float:
                    if key.startswith('disk_space_free_gb'):
                        # make shorter version of the path
                        path = re.search('.*\((.*)\)', key).groups()[0]
                        if path.endswith('/'):
                            path = path[:-1]
                        path = os.path.basename(path)
                        path += '/'
                        # check near-fullness
                        freeness = val / d[key.replace('_free_gb', '_total_gb')]

                        key = 'disk space free (%s)' % path
                        val = '%.2f GB %.0f%%' % (val, 100.0*freeness)
                        if freeness < 0.25:
                            val = '<font color="#ff0000" size="+2">%s</font>' % val
                    elif key == 'revenue':
                        val = '<font size="+1"><b>$%.2f</b></font>' % val
                    elif (key == 'loadavg_15min' and float(val) > cpu_count()) or \
                         (key == 'load_unhalted' and float(val) > 0.70):
                        val = '<font color="#ff0000" size="+2"><b>%.2f</b></font>' % val
                    elif key == 'machine_swap_used_mb' and float(val) > 1000.0:
                        val = '<font color="#ff0000"><b>%.2f</b></font>' % val
                    elif key == 'machine_mem_free_mb' and float(val) < 1000.0:
                        val = '<font color="#ff0000"><b>%.2f</b></font>' % val
                    else:
                        val = '%.2f' % val
                ret += '<tr><td>%s</td><td>%s</td></tr>' % (key, str(val))
            ret += '</table>'
            return ret

        ret += print_table(admin_stats.get_stats())
        mystats = MachineStats.get_stats(filesystems=machine_stats_filesystems)
        mystats['load_unhalted'] = admin_stats.get_load()
        ret += print_table(mystats)

        ret += '<hr>'
        ret += '<b>'+str(len(session_table)) +' active session(s):</b><p>'
        ret += '<table border="1" cellspacing="1">'

        def make_red(text):
            return '<font color="#ff0000">'+text+'</font>'
        def make_blue(text):
            return '<font color="#0000ff">'+text+'</font>'

        def make_sortlink(text, request, newkey):
            props = dict([(name, val[0]) for name, val in request.args.iteritems()])
            props['sort'] = newkey
            link = urllib.urlencode(props)
            return '<a href="?%s">%s</a>' % (link, text)

        ret += '<tr><td>User</td><td>Name</td><td>'+make_sortlink('Level', request, 'level')+'</td><td>Country</td><td>Age</td><td>'+make_sortlink('IP', request, 'ip')+'</td><td>Campaign</td><td>'+make_sortlink('Acct Age', request, 'acct_age')+'</td><td>'+make_sortlink('Session Length', request, 'session_length')+'</td><td>Async</td><td>Idle For</td><td>Last Actions (sec ago)</td><td>Tut</td><td>&#35;PvE</td><td>&#35;PvP</td><td>Protect</td><td>Where</td><td>Logins</td><td>Alloy Bal.</td><td>'+make_sortlink('Lifetime Receipts', request, 'default')+'</td></tr>'

        # sort by money spent, then player level
        sort_by = request.args['sort'][0] if ('sort' in request.args) else 'default'

        def sort_default(k_s):
            s = k_s[1]
            return -(s.player.history.get('money_spent',0) + 0.001*s.player.resources.player_level)
        def sort_ip(k_s): s = k_s[1]; return str(s.user.last_login_ip)
        def sort_session_length(k_s): s = k_s[1]; return s.last_active_time - s.login_time
        def sort_acct_age(k_s): s = k_s[1]; return s.user.account_creation_time
        def sort_level(k_s): s = k_s[1]; return s.player.resources.player_level

        sort_funcs = {'default': sort_default,
                      'ip': sort_ip,
                      'acct_age': sort_acct_age,
                      'level': sort_level,
                      'session_length': sort_session_length}

        for id, session in sorted(session_table.items(), key = sort_funcs[sort_by]):
            user = str(session.user.user_id)
            user_link = '<a href="http://apps.facebook.com/'+SpinConfig.config['facebook_app_namespace']+'/?visit_base='+user+'">'+user+'</a>'
            name = session.user.get_ui_name(session.player)
            if session.user.facebook_id:
                name = '<a href="https://www.facebook.com/'+session.user.facebook_id+'/">'+name+'</a>'

            country = session.user.country + (' (%d)' % SpinConfig.country_tier_map.get(session.user.country, 4))

            years_old = -1
            if session.user.birthday:
                years_old = int((server_time - session.user.birthday)/(365*24*60*60))
            years_old = str(years_old) if years_old > 0 else '?'

            ip_addr = str(session.user.last_login_ip)
            campaign = session.user.acquisition_campaign
            if campaign is None:
                campaign = 'unknown'
            acct_age = 'unk' if (session.player.creation_time < 0) else '%0.1f' % ((server_time - session.player.creation_time)/86400.0)
            active = SpinConfig.pretty_print_time(session.last_active_time - session.login_time)
            if len(session.async_ds) + len(session.after_async) > 0:
                async = '%d,%d' % (len(session.async_ds), len(session.after_async))
            else:
                async = ''
            last_active = SpinConfig.pretty_print_time(server_time - session.last_active_time)

            action = []
            for act in reversed(session.last_action):
                s = '%s (%ds)' % (act['tag'], server_time-act['time'])
                if not act['keepalive']:
                    s = '<font color="#a0a0a0">'+s+'</font>'
                action.append(s)
            action = '<font size="-2">'+string.join(action, '<br>')+'</font>'

            tutorial = session.player.tutorial_state
            tutorial = tutorial[0:1]
            if tutorial != "C":
                tutorial = make_red(tutorial)
            if session.player.has_damage_protection():
                protect = make_blue(SpinConfig.pretty_print_time(session.player.resources.protection_end_time - server_time))
            else:
                protect = ''

            battle = ''
            if session.player.home_region:
                battle += session.player.home_region+' '

            # "battle" shows viewing base
            if session.home_base:
                battle += 'home'
            else:
                battle += '%d' % session.viewing_user.user_id
                if is_ai_user_id_range(session.viewing_user.user_id):
                    sid = str(session.viewing_user.user_id)
                    base = gamedata['ai_bases_server']['bases'].get(sid,None)
                    if base:
                        battle += ' (%s L%d)' % (base['ui_name'], base['resources']['player_level'])
                if session.viewing_base is not session.viewing_player.my_home:
                    battle += ':%s' % session.viewing_base.base_id

            if session.has_attacked:
                if session.using_squad_deployment():
                    battle = 'SQD '+ battle
                if session.is_ladder_battle():
                    battle = 'LAD '+battle
                if session.home_base:
                    battle += ' ' + str(session.incoming_attack_type)
                battle = make_red('ATK '+battle)
            else:
                pass # battle = 'NO ' + battle

            pve = session.player.history.get('attacks_launched_vs_ai',0)
            pvp = session.player.history.get('attacks_launched_vs_human',0)
            spend = session.player.history.get('money_spent', 0.0)
            if spend > 0:
                spend = '<b>$%.2f</b>' % spend
            else:
                spend = '$%.2f' % spend
            ret += '<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%d</td><td>%d</td><td>%s</td><td>%s</td><td>%d</td><td>%d</td><td>%s</td></tr>' % (user_link,name,str(session.player.resources.player_level),country,years_old,ip_addr,campaign,acct_age,active,async,last_active,action,tutorial,pve,pvp,protect,battle,session.player.history.get('logged_in_times',0),session.player.resources.gamebucks,spend)

        ret += '</table><p>'

        ret += '<hr><b>Campaign Data</b><p>'
        ret += admin_stats.get_campaigns()

        ret += '<hr><b>Recent Payments</b><p>'
        ret += admin_stats.get_payments()

        ret += '<hr><b>Recent Alloy Expenditures by Paying Users</b><p>'
        ret += admin_stats.get_gamebucks()

        ret += '<hr><b>Iron/Water Economy</b><p>'
        ret += admin_stats.get_econ()

        ret += '<hr><b>Server Latency</b><p>'
        ret += admin_stats.get_latency()

        if SpinConfig.config['enable_facebook']:
            ret += '<hr><b>AsyncHTTP_Facebook</b><p>'
            ret += gamesite.AsyncHTTP_Facebook.get_stats_html(server_time)
        if SpinConfig.config.get('enable_kongregate',0):
            ret += '<hr><b>AsyncHTTP_Kongregate</b><p>'
            ret += gamesite.AsyncHTTP_Kongregate.get_stats_html(server_time)
        if SpinConfig.config.get('enable_armorgames',0):
            ret += '<hr><b>AsyncHTTP_ArmorGames</b><p>'
            ret += gamesite.AsyncHTTP_ArmorGames.get_stats_html(server_time)

        if SpinConfig.config['enable_kissmetrics'] or SpinConfig.config.get('enable_adotomi', False) or SpinConfig.config.get('enable_dauup', False):
            ret += '<hr><b>AsyncHTTP_metrics</b><p>'
            ret += gamesite.AsyncHTTP_metrics.get_stats_html(server_time)

        io_stats = io_system.get_stats()
        if io_stats:
            ret += '<hr><b>I/O System</b><p>'
            ret += io_stats
        ret += '</body></html>'
        ret = ret.encode('utf-8')
        request.setHeader('content-type', 'text/html; charset=UTF-8')
        request.setHeader('content-length', str(len(ret)))
        request.setHeader('Pragma','no-cache, no-store')
        request.setHeader('Cache-Control','no-cache, no-store')
        return ret

ADMINAPI_instance = AdminResource()

# this piece of code allows the Twisted web server to run PHP scripts
#class MyPHPScript(twcgi.FilteredScript):
#    filter = '/usr/bin/php-cgi'
#    def runProcess(self, env, request, qargs):
#        env['REDIRECT_STATUS'] = '200'
#        ret = twcgi.FilteredScript.runProcess(self, env, request, qargs)
#        return ret

# this is just an HTTP "virtual root directory" that will have only the children we give it with putChild()
class GameRoot(TwistedNoResource):
    def getChildWithDefault(self, pathel, request):
        return resource.Resource.getChildWithDefault(self, pathel, request)

def do_main(pidfile, do_ai_setup, do_daemonize, cmdline_config):
    # create necessary directories
    for mypath in [spin_log_dir,
                   SpinConfig.config['userdb_dir'],
                   SpinConfig.config['playerdb_dir'],
                   SpinConfig.config.get('basedb_dir', 'basedb'),
                   SpinConfig.config.get('aistate_dir', 'aistate')]:
        if not os.path.exists(mypath):
            os.mkdir(mypath)

    if spin_secure_mode and (not SpinConfig.config.get('use_compiled_client', 0)):
        raise Exception('use_compiled_client must be enabled in config.json when in secure_mode')

    # get server instance configuration (port numbers etc)
    global_config = SpinConfig.config.get('gameserver_global',{})
    if cmdline_config is not None:
        instance_config = cmdline_config
    else:
        instance_config = copy.deepcopy(SpinConfig.config['gameservers'][spin_server_name])
    for k,v in global_config.iteritems():
        if k not in instance_config: instance_config[k] = v
    config = GameSite.Configuration(instance_config)

    # For now, WS_GAMEAPI exists as a child under GameSite, on the
    # same port.  It could be moved to different port if necessary,
    # that would means it needs to have listening set up separately.
    if config.game_ws_port > 0: assert config.game_ws_port == config.game_http_port
    if config.game_wss_port > 0:
        assert config.game_wss_port == config.game_ssl_port
        try:
            __import__('twisted.protocols.tls')
        except ImportError:
            raise Exception('game_wss_port is enabled but this Twisted version is too old to support WebSockets with TLS.')

    # NEW - game server is not responsible for static content; the proxy handles it now
    root = GameRoot() # static.File('/var/empty')

    gameapi = GAMEAPI()
    controlapi = CONTROLAPI(gameapi)
    trialpayapi = TRIALPAYAPI(gameapi)
    xsapi = XSAPI(gamedata)

    root.putChild("GAMEAPI",gameapi)
    root.putChild("CREDITAPI",CREDITAPI(gameapi))
    root.putChild("TRIALPAYAPI",trialpayapi)
    root.putChild("XSAPI",xsapi)
    root.putChild("KGAPI",KGAPI(gameapi))
    root.putChild("CONTROLAPI",controlapi)
    root.putChild("OGPAPI",OGPAPI_instance)
    root.putChild("ADMIN",ADMINAPI_instance)
    if config.game_ws_port > 0 or config.game_wss_port > 0:
        root.putChild("WS_GAMEAPI",WS_GAMEAPI(gameapi))

    # init IO system
    io_system_init(instance_config.get('io', {}).copy())

    global gamesite
    gamesite = GameSite(config, root, gameapi, controlapi, trialpayapi, xsapi)

    # optional memory profiling using Dowser library
    if SpinConfig.config.get('enable_dowser', 0):
        import cherrypy
        import dowser
        cherrypy.config.update({'server.socket_port':SpinConfig.config.get('dowser_port', 8080)})
        cherrypy.tree.mount(dowser.Root())
        cherrypy.engine.autoreload.unsubscribe()
        cherrypy.engine.start()
        reactor.addSystemEventTrigger('after', 'shutdown', cherrypy.engine.exit)

    gamesite.start_listening()

    print 'Game server up and running on %s:%d (HTTP)%s%s%s' % (config.game_host, config.game_http_port,
                                                                (' :%d (SSL)' % config.game_ssl_port) if config.game_ssl_port > 0 else '',
                                                                (' :%d (WS)' % config.game_ws_port) if config.game_ws_port > 0 else '',
                                                                (' :%d (WSS)' % config.game_wss_port) if config.game_wss_port > 0 else '')

    # startup completes here

    if not spin_secure_mode:
        print 'SERVER IS NOT RUNNING IN SECURE MODE - NOT FOR PRODUCTION!'

    if not has_lz4:
        print 'warning: lz4 compression library not detected, cannot use it for regional map :('

    if do_daemonize:
        Daemonize.daemonize()

        # turn on Twisted logging
        log.startLoggingWithObserver(gamesite.log_raw)
        log.addObserver(gamesite.log_exceptions)

        # update PID file with new PID
        open(pidfile, 'w').write('%d\n' % os.getpid())

    gamesite.exception_log.event(server_time, 'server "'+spin_server_name+'" starting up')

    io_system.start()

    def do_account_setup():
        # set up test and AI accounts
        setup_test_user(6, gamesite.social_id_table.social_id_to_spinpunch('fb6', True), 'Test User #6')
        setup_ai_bases()

    if do_ai_setup:
        # have to do this after the loop starts, because we need to wait for io_system to be fully alive
        reactor.callLater(0, do_account_setup)

    TwistedLatency.setup(reactor, admin_stats.record_latency)

    reactor.run()

    gamesite.exception_log.event(server_time, 'server "'+spin_server_name+'" shutdown complete')

def main():
    global spin_server_name

    opts, args = getopt.gnu_getopt(sys.argv[1:], 'n', ['skip-ai-setup','config='])

    do_ai_setup = True
    do_daemonize = True
    cmdline_config = None

    for key, val in opts:
        if key == '--skip-ai-setup': do_ai_setup = False
        elif key == '-n': do_daemonize = False
        elif key == '--config': cmdline_config = SpinJSON.loads(val)

    if len(args) < 1:
        print 'Please specify server name, as found in config.json'
        sys.exit(1)

    spin_server_name = args[0]

    if (cmdline_config is None) and (spin_server_name not in SpinConfig.config['gameservers']):
        print 'No configuration found for server "%s" in config.json:gameservers.' % spin_server_name
        sys.exit(1)


    pidfile = 'server_%s.pid' % spin_server_name

    if os.path.exists(pidfile):
        print 'Server is already running (%s), use ./stopserver.sh to stop it.' % pidfile
        sys.exit(1)

    # create PID file
    open(pidfile, 'w').write('%d\n' % os.getpid())
    try:
        do_main(pidfile, do_ai_setup, do_daemonize, cmdline_config)
    finally:
        # remove PID file
        os.unlink(pidfile)

if __name__ == '__main__':
    main()
