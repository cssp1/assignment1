--- http.py.orig	2016-08-18 15:53:15.000000000 +0000
+++ http.py	2016-08-22 23:41:16.686589560 +0000
@@ -312,10 +312,14 @@
     else:
         raise ValueError("Unknown datetime format %r" % dateString)
 
-    day = int(day)
-    month = int(monthname_lower.index(month.lower()))
-    year = int(year)
-    hour, min, sec = map(int, time.split(':'))
+    try:
+        day = int(day)
+        month = int(monthname_lower.index(month.lower()))
+        year = int(year)
+        hour, min, sec = map(int, time.split(':'))
+    except:
+        # DJM
+        raise ValueError("bad dateString %s" % repr(dateString))
     return int(timegm(year, month, day, hour, min, sec))
 
 
@@ -624,9 +628,15 @@
         if self.producer:
             log.err(RuntimeError("Producer was not unregistered for %s" % self.uri))
             self.unregisterProducer()
-        self.channel.requestDone(self)
-        del self.channel
-        if self.content is not None:
+        if not hasattr(self, 'channel'):
+            # DJM - this occurs periodically when serving up static art files. Probably harmless, so don't log an exception...
+            #raise Exception('DJM TWISTED '+repr(self))
+            pass
+        else:
+            self.channel.requestDone(self)
+            del self.channel
+        if hasattr(self, 'content'):
+            # DJM - again, spurious exception
             try:
                 self.content.close()
             except OSError:
@@ -859,6 +869,8 @@
         Indicate that all response data has been written to this L{Request}.
         """
         if self._disconnected:
+            # DJM - spurious message when using ReverseProxyClient
+            return
             raise RuntimeError(
                 "Request.finish called on a request after its connection was lost; "
                 "use Request.notifyFinish to keep track of this.")
@@ -1941,7 +1953,8 @@
 
 
     def timeoutConnection(self):
-        log.msg("Timing out client: %s" % str(self.transport.getPeer()))
+        # DJM - don't print this stupid log message
+        #log.msg("Timing out client: %s" % str(self.transport.getPeer()))
         policies.TimeoutMixin.timeoutConnection(self)
 
 
