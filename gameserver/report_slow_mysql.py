#!/usr/bin/env python

# Copyright (c) 2015 Battlehouse Inc. All rights reserved.
# Use of this source code is governed by an MIT-style license that can be
# found in the LICENSE file.

# send out reminders about slow SQL queries

import sys, time, getopt, socket
import SpinReminders
import SpinConfig
import SpinSQLUtil
import SpinMySQLdb

time_now = int(time.time())

if __name__ == '__main__':
    verbose = True
    do_prune = False
    dry_run = False
    min_sec = 75
    recipients = SpinConfig.config['alarms_recipients']

    opts, args = getopt.gnu_getopt(sys.argv[1:], 'q', ['prune','min-sec=','dry-run'])

    for key, val in opts:
        if key == '-q': verbose = False
        elif key == '--prune': do_prune = True
        elif key == '--min-sec': min_sec = int(val)
        elif key == '--dry-run': dry_run = True

    if len(args) < 1:
        sys.stderr.write('please specify mysql_servers entry\n')
        sys.exit(1)
    mysql_server = args[0]

    sql_util = SpinSQLUtil.MySQLUtil()
    if not verbose: sql_util.disable_warnings()

    cfg = SpinConfig.get_mysql_config(mysql_server)
    con = SpinMySQLdb.connect(*cfg['connect_args'], **cfg['connect_kwargs'])

    cur = con.cursor(SpinMySQLdb.cursors.DictCursor)

    subject = 'Automated reminder from '+socket.gethostname()
    body = None

    cur.execute('''SELECT start_time, user_host, TIME_TO_SEC(query_time) AS total_sec, db, sql_text
                   FROM mysql.slow_log
                   WHERE start_time >= NOW() - INTERVAL 24 HOUR and TIME_TO_SEC(query_time) >= %s
                   ORDER BY total_sec DESC;''', [min_sec,])
    rows = cur.fetchall()
    for row in rows:
        # ignore queries generated by the backup dump process
        if '/*!40001 SQL_NO_CACHE */' in row['sql_text']:
            continue

        if not body:
            body = 'Slow SQL queries during the last 24 hours, slowest ones listed first:\n'
        body += '\n------ Duration %d sec at %s on DB %s by "%s" ------\n%s\n' % (row['total_sec'], row['start_time'], row['db'], row['user_host'], row['sql_text'])

    con.commit()

    if dry_run:
        print "HERE", '\n', subject, '\n', body
    else:
        if body:
            SpinReminders.send_reminders('report_slow_mysql.py', recipients, subject, body, dry_run = dry_run)

    if do_prune:
        if verbose: print 'pruning', 'mysql.slow_log'
        cur.execute("SELECT EXISTS(SELECT 1 FROM mysql.proc p WHERE db = 'mysql' AND name = 'rds_rotate_slow_log') AS has_rds_proc")
        row = cur.fetchone()
        if row['has_rds_proc']:
            # on Amazon RDS - use the stored procedure
            cur.execute("CALL mysql.rds_rotate_slow_log();")
        else:
            # manual truncation
            cur.execute("TRUNCATE mysql.slow_log;")
        con.commit()
