#!/usr/bin/env python

# Copyright (c) 2015 Battlehouse Inc. All rights reserved.
# Use of this source code is governed by an MIT-style license that can be
# found in the LICENSE file.

# automatically generate loot_tables_client.json from loot_tables.json

import SpinConfig, SpinJSON
import AtomicFileWrite
import sys, os, getopt

def get_table_names_recursive(loot_tables, table):
    result = set()
    if type(table) is dict: table = [table,]
    for entry in table:
        if 'table' in entry:
            result.add(entry['table'])
            result = result.union(get_table_names_recursive(loot_tables, loot_tables[entry['table']]['loot']))
        if 'cond' in entry:
            for pred, subtable in entry['cond']:
                result = result.union(get_table_names_recursive(loot_tables, subtable))
        if 'multi' in entry:
            for subtable in entry['multi']:
                result = result.union(get_table_names_recursive(loot_tables, subtable))
    return result

if __name__ == '__main__':
    out_filename = None
    opts, args = getopt.gnu_getopt(sys.argv[1:], 'o:', [])
    for key, val in opts:
        if key == '-o': out_filename = val

    # command-line args: -o OUTFILE loot_tables.json spells1.json spells2.json ...
    loot_tables = SpinConfig.load(args[0])
    spells = {}
    for spell_json_filename in args[1:]:
        spells.update(SpinConfig.load(spell_json_filename, stripped = True))

    # loot tables that we need the client to know
    client_tables = set(get_table_names_recursive(loot_tables, {'table':'sexy_unlocked_unit'}))
    for spellname, spell in spells.iteritems():
        if spell.get('loot_table'):
            if spell['loot_table'] not in loot_tables:
                raise Exception('loot_table "%s" referenced by spell "%s" not found' % (spell['loot_table'], spellname))
            client_tables = client_tables.union(set(get_table_names_recursive(loot_tables, {'table':spell['loot_table']})))

    # include Battlehouse invite reward tables
    for BH_TABLE in ('bh_invite_mentor_onetime', 'bh_invite_mentor_daily',
                     'bh_invite_trainee_onetime', 'bh_invite_trainee_daily'):
        if BH_TABLE in loot_tables:
            client_tables = client_tables.union(set(get_table_names_recursive(loot_tables, {'table':BH_TABLE})))

    # include login-incentive loot tables
    for tabname in loot_tables:
        if tabname.startswith('login_incentive_'):
            client_tables = client_tables.union(set(get_table_names_recursive(loot_tables, {'table':tabname})))

    with AtomicFileWrite.AtomicFileWrite(out_filename, 'w', ident=str(os.getpid())) as out_fd:
        print >> out_fd.fd, "// AUTO-GENERATED BY make_loot_tables_client.py"

        out = {}
        for table_name in client_tables:
            out[table_name] = loot_tables[table_name]

        SpinJSON.dump(out, out_fd.fd, pretty = True, newline = True)
        out_fd.complete()
