// Copyright (c) 2015 Battlehouse Inc.All rights reserved.
// Use of this source code is governed by an MIT-style license that can be
// found in the LICENSE file.

// part of gamedata that is only seen by the server, and not sent to the client
{
    "message_of_the_day": {
        "refresh_time": 1391837967 // force showing of MOTD if last_motd was before this UNIX time
    },

    "log_machine_stats": false,
    "machine_stats_interval": 600, // number of seconds between metric reports of server memory/CPU/disk stats
    "session_timeout": 1200, // number of seconds after which an idle session is automatically closed by the server
    "player_lock_timeout": 600, // number of seconds after which login/attack locks on players are treated as invalid
    "absolute_session_timeout": 43200, // never let a session go longer than this (a few hours) to avoid abuse
    "initial_session_timeout": 300, // number of seconds after which to terminate an idle session when no activity happens after login
    "session_signature_time_tolerance": 300, // how many seconds out of date a session signature is allowed to be
    // (this also controls for how long the gameserver remembers session invalidations sent from proxyserver to CONTROLAPI)

    "facebook_cache_lifetime": 600, // cache friends/likes for 10min
    "bg_task_interval": 20, // run server background tasks every 20sec

    "log_async_io": false, // log all async I/O traffic
    "io_backends": {
        "ioslave": { "max_in_flight": 50 },
        "s3": { "max_in_flight": 150 }
    },

    "log_nosql": 1, // log detail level for NoSQL messages

    "log_abnormal_logins": 1, // log overlapped/cancelled logins (0 = off, 1 = log most serious conditions, 2 = log all conditions)

    "maint_kick_time": 120, // after receiving SIGUSR2, give players this many seconds to play before kicking them out for server maintenance
    "maint_kicks_at_once": 50, // do not log out more than this many players per bgtask run, in order to avoid stampede

    // parameters for asynchronous HTTP requests
    // concurrent = # of simultaneous outstanding requests permitted
    // total = limit on number of queued requests (further requests will be dropped!)
    // timeout = number of seconds to wait for the server to respond
    // max_tries = number of retry attempts on failed requests
    // retry_delay = seconds to wait before retrying a failed request
    "AsyncHTTP_metrics": { "concurrent_request_limit": 50, "total_request_limit": 200, "request_timeout": 15, "max_tries": 5, "retry_delay": 10.0 },
    "AsyncHTTP_Facebook": { "concurrent_request_limit": 50, "total_request_limit": 200, "request_timeout": 30, "max_tries": 2, "retry_delay": 5.0 },

    "use_http_keep_alive": true, // whether or not to allow persistent (HTTP/1.1 Connection: keep-alive) connections to GAMEAPI

    // the "timeout" here applies to HTTP keep-alive connections to
    // GAMEAPI, it does NOT have any impact on game-relevant timeouts like
    // the session or proxy timeout
    "http_connection_timeout": 300,

    "session_message_buffer": 20, // number of out-of-order client AJAX requests to buffer before giving up due to lag/packet loss
    "ajax_longpoll_wait": 20, // how many seconds to park a longpoll request before returning it empty

    "sprobe": {
        "enable": true,
        "min_interval": 80000, // min number of seconds between sprobe tests for each user
        "when": "only_during_attack"
    },

    // whether to query standard_user_info.credit_balance to show user's FB credit balance (as well as gamer_status)
    // (app must be whitelisted for this to work)
    "enable_facebook_credit_balance_query": false,

    "quarry_query_cache": 1200, // how many seconds to cache full (non-incremental) quarry queries

    // fire metrics upon this number of times logged in and minutes spent
    "retention_metric_levels": [1,2,3,4,7,11,18,29,47,76,123,199,322,521,843,1364,2207,3571,5778,9349,15127,24476,39603,64079,103682,167761,271443],

    "message_expire_time": {
        "resource_gift": 864000, // expire gifts after 10 days
        "i_attacked_you": 2592000, // expire unread battle logs after 30 days
        "gift_order": 7776000 // expire gamebucks gifts after 90 days
    },

    // perform extra checks to guard against item-duping bugs
    "verify_item_conservation": true,

    // time window within which to merge successive player.sessions records (seconds)
    "session_merge_threshold": 90,

    "log_scores2": 2, // Scores2 API logging level
    "scores2_publish_refresh": 1397194667, // force publish of all Scores2 stats (to hot MongoDB) if not already published since this UNIX time

    "chat_memory": 30, // number of recent chat messages to send to newly-joined clients (per channel)
    "chat_alliance_logins": false, // whether to shout alliance member logins to chat
    "chat_alliance_membership": true, // whether to shout alliance leave/join messages to chat

    "log_controlapi": false, // log CONTROLAPI IPC calls

    "log_gamebucks_init": false, // log giving of bonus gamebucks amount for new/veteran users
    "log_gamebucks_spend": true, // log expenditures of gamebucks to -gamebucks.json log file

    "log_econ_res": false, // log economy resource flows to econ_res MongoDB table
    "log_gifts": false, // log players sending/receiving gifts
    "log_item_loot": 1, // log AI base item loot drops (0 = no logging, 1 = log to metrics, 2 = log to metrics and exceptions.txt)
    "log_lottery": true, // log lottery item drops

    "enable_adnetwork_logs": true, // log all ad network API interaction to -api.json
    "log_adotomi": false, // log Adotomi API interaction to exceptions.txt
    "log_dauup": false, // log DAU-UP API interaction to exceptions.txt
    "log_dauup2": false, // log DAU-UP API gen 2 interaction to exceptions.txt
    "log_adparlor": false, // log Ad Parlor API interaction to exceptions.txt
    "log_liniad": false, // log Liniad API interaction to exceptions.txt
    "log_fb_conversion_pixels": false, // log Facebook Conversion Pixels API interaction to exceptions.txt
    "log_fb_app_events": false, // log Facebook App Events API interaction to exceptions.txt

    "log_combat_race_conditions": false, // whether to log misc race conditions due to desynchronized combat state
    "log_invalid_building_locations": false, // whether to log building placement race conditions/errors

    "log_xp_migration": false, // log XP rebalancing computations

    "log_ai_attacks": false, // whether to log AI attack start in exceptions log
    "log_ai_attack_overdue": false, // whether to log server-side deployment of overdue AI attacks/waves
    "log_ai_attack_results": false, // whether to log victory/loss info in AI attacks

    "log_self_attacks": false, // log attack_event() with no open attack_log

    "log_quarries": false, // log quarry activity
    "chat_quarries": false, // send quarry conquers to chat
    "log_hives": false, // log AI hive activity
    "log_map": false, // log map activity

    "log_unit_equip_migration": false, // log transformations of mod techs into items

    "trim_unit_space_if": {"predicate": "BUILDING_LEVEL", "building_type": "toc", "trigger_level": 2}, // trim oversized armies
    "log_trim_unit_space": 121, // log cases where the delta is greater than this many units of unit space

    "enable_map_compression": true, // compress large map queries so they don't take up lots of bytes on the wire
    "map_compression_codec": "lz4", // use LZ4 codec if the Python library for it is available (default is LZJB)

    "log_protocol_errors": true, // whether to log malformed client requests

    "log_weird_state": true, // log weird attack state to exceptions.txt
    "log_base_damage_pings": 0.0001, // log client/server damage disagreement greater than this

    // filter that applies to low-priority exception log messages, to filter out messages caused by race conditions on very bad internet connections
    "bad_internet_exception_log_filter": { "predicate": "COUNTRY_TIER", "tiers": [1,2] },

    // "stale account" detector - reset old stale accounts so they don't hit weird corner cases
    "log_stale_accounts": false,
    "stale_account_reset_criteria": { "predicate": "AND", "subpredicates": [
        // rails tutorial complete
        { "predicate": "TUTORIAL_COMPLETE" },
        // did not log in within last 60 days
        { "predicate": "NOT", "subpredicates": [ {"predicate": "LOGGED_IN_RECENTLY", "seconds_ago": 5184000 } ]},
        // did not get their CC to level 3
        { "predicate": "NOT", "subpredicates": [ { "predicate": "BUILDING_LEVEL", "building_type": "toc", "trigger_level": 3 } ] },
        // never spent anything
        { "predicate": "PLAYER_HISTORY", "key": "money_spent", "method": "<", "value": 0.01 }
    ] },
    // repair damage for accounts that haven't logged in for a long time
    "stale_account_repair_criteria": { "predicate": "AND", "subpredicates": [
        // rails tutorial complete
        { "predicate": "TUTORIAL_COMPLETE" },
        // did not log in within last 30 days
        { "predicate": "NOT", "subpredicates": [ {"predicate": "LOGGED_IN_RECENTLY", "seconds_ago": 2592000 } ]}
    ] },

    "login_abuse_detector": {
        "live_check_interval": 900, // check logged-in players once every 15 minutes - note - will cause login abuse warning message to fire on every check

        // there are two abuse detectors:

        // 1) lengthy login time (i.e. protection time macro cheating) detector:
        // trigger if more than continuous_limit seconds of logged-in time are accumulated during the last continuous_range seconds of clock time
        "continuous_warn":  108000, // warn user when they pass this threshold - 30 hours

        // note: warnings and the actual timeout are both padded by the extreme-long-session timeout, which is currently 3 hours
        // this is because login abuse is only checked for *at login*, so a clever player could evade it by staying logged in 3 hours at a time

        "continuous_warn_fudge": 10800, // pad warning time by this much, to account for the difference between continuous_limit and the stated 36-hour timeout

        "continuous_limit": 118800, // actual limit of 33 hours
        "continuous_range": 172800, // within the last 48 hours
        "continuous_penalty_time": 43200, // lock-out time (in seconds) if you trigger the lengthy-login detector

        // "severe" abuse - send player to a different page
        "continuous_limit_severe": 518400, // 6 days
        "continuous_range_severe": 864000, // during last 10 days

        "enable_auto_attack": false, // automatically send daily attack to players who break the "mild" limits

        // login periodicity detector
        "gap_min_n": 8, // minimum number of trailing samples
        "gap_limit_sd": 250.0, // if standard deviation of gaps between logins is less than this, trigger the warning

        // 2) rapid login abuse detector:
        // trigger on more than max_login_repeats attempts within the last repeat_range seconds
        "max_login_repeats": 10,
        "repeat_range": 120,
        "repeat_penalty_time": 3600 // lock-out time (in seconds) if you trigger the max_login repeat detector
    },

    // this is the default error returned to the client when it is locked out for login abuse
    // it used to be a fake Server Maintenance message, "CANNOT_LOG_IN_SERVER_MAINT2"
    "login_abuse_error_code": "CANNOT_LOG_IN_LOGIN_ABUSE",

    "log_alt_accounts": 0,  // log detection of possible alt accounts (2 to also log all same-ip logins, not just detector triggers)
    "alt_detect_logins": 5,   // if more than this many logins occur on the same IP, assume the player is an alt (-1 to disable)
    "alt_no_protect_after": 10, // deny damage protection to alt accounts after this # of attacks (-1 to disable)
    "alt_no_attack_after": 20, // deny ability to attack alt accounts after this # of attacks (-1 to disable)

    // don't bother reporting in log unless the defender fits these criteria
    "anti_bullying_defender_filter": { "predicate": "ALWAYS_TRUE" },
    "anti_bullying_in_ladder": false, // deactivate anti-bullying log in ladder battles

    "idle_check": {
        "enforce": 1, // allow PolicyBot to take action
        "enable_if": {"predicate": "TIME_IN_GAME", "seconds": 201600, "within_last": 604800}, // logged in at least 33% of the time for the last week
        "keep_history_for": 604800, // keep 1 week of success/fail history
        "interval": 28800, // check every 8 hours
        "max_tries": 3, // allow this many incorrect answers before failing
        "timeout": 300, // time limit for response
        "max_timeouts": 2 // allow this many timeouts before failing
    },

    "suspicious_user_id_list": [],
    "banned_ips": [],

    "default_ban_time": 31536000, // default ban is for 1 year

    "log_fbpayments": 1, // log intensity for FB Payments API
    "log_fb_open_graph": false, // write FB open graph HTTP interaction to exceptions.txt
    "log_fb_achievements": false, // write FB Achievements API interaction to exceptions.txt
    "log_purchase_ui": true, // write purchase_ui events to purchase_ui_log

    "log_ladder_pvp": 1, // log intensity level for ladder PvP activity

    "log_protection_timer": false, // write protection timer info to exceptions.txt

    "record_protection_history": true, // record all protection time changes in player.history.protection_history

    // weights to apply to resource-containing buildings for the purpose of computing base damage for the protection timer
    "protection_weight": { "toc": 1,
                           "supply_depot": 3, "fuel_depot": 3 },
    // weigh buildings by their object level
    "protection_weight_by_object_level": true,

    // minimum amount of damage to get any protection at all, by player level
    "protection_min_damage": [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, // 1-10: nothing
                              0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, // 11-20: 0.2
                              0.30], // 21+: 0.30

    "protection_time_min":  14400, // how long the protection timer lasts, in seconds, for a minimally damaged base
    "protection_time_max":  90000, // how long the protection timer lasts, in seconds, for a totally destroyed base

    // whether or not to trigger protection timer when being attacked by a Facebook friend
    "protect_facebook_friends": false,
    // whether or not to trigger protection timer when being attacked by an alliancemate, and how long to persist your alliance attachments
    "protect_same_alliance": false, "alliance_stickiness": 432000,
    // whether to allow protection when the attacker's IP address is the same as the defender's
    "protect_same_ip": false,

    // scale protection time based on % of resource-containing buildings destroyed
    // (alternative is all_hp to use all buildings - but that's exploitable by self-attacking)
    "protection_based_on": "storage_only",

    "protection_attacks": 1, // how many attacks can be made against a player before his protection timer activates
    "protection_backoff_time": 3600, // the most recent attack must have been made within this many seconds in order for it to count towards protection_attacks
    "conceal_protection_time": true, // do not tell clients exactly when others' protection will expire

    "enable_protection_if": { "predicate": "ALWAYS_TRUE" },

    "enable_protection_fatigue": 1, // limit how often you can give damage protection to a specific opponent
    "global_protection_cooldown": -1, // for how long after attacker-granted protection expires are you ineligible to receive it again, as a multiple of protection time given
    "enable_alliance_protection_fatigue": 0, // limit how often you can give damage protection to anyone in a specific alliance
    "bidirectional_protection_fatigue": 0, // whether receiving DP from someone then prevents you from giving it back to them
    "protection_fatigue_duration": 432000, // memory lasts 5 days

    "alliance_protection_fatigue_stacks": [
        [{"predicate":"ALWAYS_TRUE"}, 4]
    ],
    "protection_fatigue_stacks": [
        [{"predicate":"ALWAYS_TRUE"}, 3]
    ],

    "attack_spam_cooldown": 0.5, // do not allow attacks more often than this number of seconds (works by delaying the next base visit)
    "attack_spam_delay": -1, // delay next base visit by this much (if -1, then use remaining time in attack_spam_cooldown)
    "log_attack_spam": true,
    "log_repeat_attack_cooldown_calc": false,

    "sql_recent_attacks": true, // enable use of SQL database to monitor PvP bullying
    "log_anti_bullying": 1, // log level for bullying detection system into exceptions.txt

    "ADMIN": {
        "last_action_buf": 2
    },

    "iron_deposits": {
        "interval": 43200, // one iron deposit is added each time this many seconds passes (9.5 hours)
        "max": 0, // max number of iron deposits that can be present in a base
        "worth_range": [0.0015, 0.005], // how much iron a deposit contains, as fraction of player's storage capacity [min,max] range
        "gamebucks_chance": 0.20, // chance that a deposit will contain alloys
        "gamebucks_range": [2,3] // number of alloys contained
    },

    // what qualifies as a hit from a "mobile device"
    // note: matches ANY iOS device (and ONLY iOS devices)
    "mobile_detect": { "predicate": "BROWSER_OS", "os": ["iOS"] },

    // URL to redirect mobile-device players who do NOT satisfy the below "allow_if" predicate
    "mobile_fail_url": "//www.XXXXXX.com/error-ipad-version-unlocking-soon/",
    "log_mobile_fails": false,
    "log_mobile_successes": true,

    // this is a special predicate we use to keep track of people who
    // are only blocked from mobile usage by the whitelist (and not
    // lack of hardware or CC level)
    "mobile_almost_allow_if": { "predicate": "AND", "subpredicates": [
        { "predicate": "BROWSER_HARDWARE", "hardware": ["iPad"] }, // iPad
        // { "predicate": "BROWSER_CAP", "cap_name": "retina_display" }, // with Retina display
        { "predicate": "BUILDING_LEVEL", "building_type": "toc", "trigger_level": 5 } // CC Level 5
    ] },

    // The following predicate determines whether or not to allow a
    // player using a mobile device (identified by "mobile_detect"
    // above) to connect to the game.

    "mobile_allow_if":
    {"predicate": "OR", "subpredicates": [
        // "super-whitelist" that bypasses CC and hardware checks
        { "predicate": "USER_ID", "allow": [1112] },

        // "ordinary" whitelist
        { "predicate": "AND", "subpredicates": [
            { "predicate": "BROWSER_HARDWARE", "hardware": ["iPad"] }, // iPad
            // { "predicate": "BROWSER_CAP", "cap_name": "retina_display" }, // with Retina display
            // { "predicate": "BUILDING_LEVEL", "building_type": "toc", "trigger_level": 5 }, // TOC Level 5

            // WHITELIST BY USER_ID
            { "predicate": "USER_ID", "allow": [] // add new ones here!
            }
        ] }
    ] }
}
